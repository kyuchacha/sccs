/// start - module/comboBoxListPopup
/*
 * Module URI: module/comboBoxListPopup
 * SRC: module/comboBoxListPopup.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/comboBoxListPopup", function(exports, globals, module){
		/************************************************
		 * ComboBoxListPopup.module.js
		 * Created at 2020. 1. 23. 오전 10:27:59.
		 *
		 * Version 1.2
		 * Updated Date : 2021-09-30
		 * 
		 * @author daye
		 ************************************************/
		
		/*
		 * 본 모듈은 콤보박스 리스트가 특정 개수 이상일 경우 팝업으로 열어 확인 및 선택 할 수 있는 모듈입니다.
		 * 그룹을 제외한 컨트롤에 대해 클릭할 경우 팝업을 띄울 수 있습니다. 대상콤보박스는 fieldLabel에 작성합니다.
		 *  
		 * [fieldLabel 작성법]
		 * - 콤보박스의 fieldLabel을 팝업창의 헤더타이틀로 사용됩니다.
		 * - 콤보박스 이외의 다른 컨트롤의 fieldLabel은 타겟 콤보박스 id 를 작성합니다.
		 * 
		 * [확인사항]
		 * 콤보박스에 바인딩 되어있는 데이터셋의 컬럼은 label, value로 작성
		 * 그리드의 콤보박스는 선택행이 있는 경우에만 확인 가능
		 */
		
		
		/************************************************
		 * 사용가능 API
		 ************************************************/
		/**
		 * 모듈 사용 여부
		 * 값이 true일 경우에만 모듈을 사용한다.
		 * @type {Boolean}
		 */
		var mbCreateApp = true; 
		
		/**
		 * 모바일 전용 여부
		 *	true 일경우에 팝업이 화면 아래에 위치합니다.
		 * @type {Boolean}
		 */
		var mbMobile = true;
		
		/**
		 * 라디오버튼 (or 체크박스그룹) 의 아이템 고정너비
		 * 특정 너비를 설정하기 위해서는 넘버값을 설정하세요.
		 * 
		 * @type {Boolean|Number}
		 */
		var mnFixedWidth = false;
		
		/**
		 * 셀렉션 계열 컨트롤 [선택] 아이템 추가여부
		 * @type {Boolean}
		 */
		var mbInsertBlank = true; 
		
		/**
		 * 사용자 속성
		 * @type {String}
		 */
		var ATTR_COMBO_POP = "combo-pop";
		
		/**
		 * 사용자 속성
		 * @type {String}
		 */
		var ATTR_MOBILE_ONLY = "mobile-only";
		
		/**
		 * 다이얼로그 배경 스타일 클래스
		 * @type {String}
		 */
		var msDialogOverlayCls = "cl-overlay";
		
		/**
		 * 다이얼로그 스타일
		 * @type {String}
		 */
		var msDialogCls = "rounded-0";
		
		/**
		 * 라디오버튼 (or 체크박스그룹) 의 스타일 클래스
		 * @type {String}
		 */
		var msSelectCls = "";
		
		/**
		 * 라디오버튼 (or 체크박스그룹) 아이템의 스타일 클래스
		 * @type {String}
		 */
		var msSelectItemCls = "align-text-top";
		
		/**
		 * 다이얼로그의 [확인] 버튼 스타일 클래스
		 * @type {String}
		 */
		var msBtnConfirmCls = "btn-primary rounded-0";
		
		/**
		 * 폼레이아웃 spacing
		 * @type {Number}
		 */
		var mnFormSpacing = 0;
		
		/**
		 * [확인] 버튼 높이
		 * @type {Number}
		 */
		var mnConfirmBtnHgt = 50;
		
		/**
		 * 모바일 전용 콤보박스 팝업에서 보여지는 최대 아이템 개수
		 * 적용화면사이즈 : tablet, mobile
		 * @type {Number}
		 */
		var mnMobileList = 6;
		
		/**
		 * 팝업을 띄울 콤보박스아이템 개수
		 * 적용화면사이즈 : default
		 * @type {Number}
		 */
		var mnDftItemList = 7; 
		
		/**
		 * 라디오버튼(or 체크박스그룹) 이 한 줄에 보여질 아이템 수
		 * 적용화면사이즈 : default
		 * @type {Number}
		 */
		var mnDftColCount = 6;
		
		/**
		 * 팝업 constraint 
		 * 적용화면사이즈 : default
		 */
		var moDftPopSize = {
			width: 900,
			height: 600
		};
		
		/**
		 * 팝업을 띄울 콤보박스아이템 개수
		 * 적용화면사이즈 : tablet, mobile
		 * @type {Number}
		 */
		var mnMblItemList = 0;
		
		/**
		 * 라디오버튼(or 체크박스그룹) 이 한 줄에 보여질 아이템 수
		 * 적용화면사이즈 : tablet, mobile
		 * @type {Number}
		 */
		var mnMblColCount = 1;
		
		/**
		 * 팝업 constraint 
		 * 적용화면사이즈 : tablet, mobile
		 */
		var moMblPopSize= {
			left : 0,
			right : 0,
			bottom : -100,
			height : 0
		};
		
		/**
		 * 팝업 이름
		 * @type {String}
		 */
		var msDialogName = "dialogName";
		
		/**
		 * 다이얼로그 헤더 타이틀
		 * @type {String}
		 */
		var msTempHeaderTitle = "다이얼로그 팝업";
		
		/**
		 * box-shadow 스타일
		 */
		var moBoxShadow = {
			top : "inset 0px -11px 20px -1px rgba(0,0,0,0.16)",
			bottom : "inset 11px 0px 20px -1px rgba(0,0,0,0.16)",
			middle : "inset 0px -11px 20px -1px rgba(0,0,0,0.16),  inset 11px 0px 20px -1px rgba(0,0,0,0.16)"
		}
		
		/**
		 * up, down 버튼 클래스
		 * @type {String}
		 */
		var msFloatBtnCls = "rounded-circle";
		
		/**
		 * 모바일 팝업 최대높이
		 * @type {Number}
		 */
		var mnMaxHeight = innerHeight*0.8;
		
		/**
		 * 스크롤 버튼 표시 여부 
		 * 적용화면사이즈 : tablet, mobile
		 * 
		 * @type {Boolean}
		 */
		var mbScrollButton = false;
		
		/**
		 * 스크롤 스타일(box-shadow) 표시 여부 
		 * 적용화면사이즈 : tablet, mobile
		 * @type {Boolean}
		 */
		var mbScrollStyle = false;
		
		/************************************************
		 * 내부 시스템 멤버변수 (변경X)
		 ************************************************/
		/**
		 * 앱 ID
		 * @type {String}
		 */
		var msAppId = null; 
		
		/**
		 * 앱 인스턴스
		 * @type {cpr.core.AppInstance}
		 */
		var moAppIns = null;
		
		/**
		 * 타겟 콤보박스
		 * @type {cpr.controls.ComboBox}
		 */
		var mcComboBox = null;
		
		/**
		 * 팝업이 띄워졌는지 여부
		 * @type {Boolean}
		 */
		var mbPop = false;
		
		/**
		 * 팝업을 띄울 콤보박스아이템 개수
		 * @type {Number}
		 */
		var mnList;
		
		/**
		 * 라디오버튼(or 체크박스그룹) 이 한 줄에 보여질 아이템 수
		 * @type {Number}
		 */
		var mnColCount;
		
		/**
		 * 팝업 constraint 
		 */
		var moPopSize;
		
		/************************************************
		 * 이벤트 버스 (load)
		 ************************************************/
		
		if(mbCreateApp) {
			cpr.events.EventBus.INSTANCE.addFilter("init", fn_load);
			cpr.events.EventBus.INSTANCE.addFilter("click", fn_click);
		}
		if(mbMobile) cpr.events.EventBus.INSTANCE.addFilter("screen-change", fn_screen_change);
		
		function fn_load (e) {
			var control = 	e.control;
		
			if(control instanceof cpr.core.AppInstance) {
			
				var container = control.getContainer();
				container.getAllRecursiveChildren().forEach(function(/*cpr.controls.ComboBox*/ each){
					if(each.type == "combobox" && each.userAttr(ATTR_COMBO_POP) == "true") {
						each.preventInput = true;
					}
				});
			}
		}
		
		function fn_click (e) {
			var control = e.control;
			moAppIns = control.getAppInstance();
		
			// 그룹 제외
			if (control.type == "container" || moAppIns.app == null) {
				return;
			}
			
			// 팝업이 띄워져 있지 않은경우에만 팝업을 띄움
			if(mbPop == false) {
				
				// 그리드 click 시, 선택행이 없을 경우 팝업을 띄우지 않음
				if(control.type == "grid") {
					if(control.getSelectedRowIndex() == -1) {
						return;
					}
				}
				
				_setMobile(mbMobile, mbScrollButton, mbScrollStyle);
				
				/** @type cpr.controls.ComboBox */
				var vcTargetCombo = null;
				if(control.type == "combobox") {
					vcTargetCombo = control;
				} else {
					var vsTargetCmbId = _getTargetComboId(control);
					vcTargetCombo = moAppIns.lookup(vsTargetCmbId);
				}
				
				if((vcTargetCombo != null && vcTargetCombo.type == "combobox")) {
					if(vcTargetCombo.userAttr(ATTR_COMBO_POP) == "true") {
						
						/*
						 * 모바일에서만 해당 기능을 사용 확인(mobile-only = true)
						 * default : 기본 콤보박스 사용
						 * tablet, mobile : 콤보팝업 사용
						 */
						var vsTargetScreen = moAppIns.targetScreen.name;
						if(vsTargetScreen == "default" && vcTargetCombo.userAttr(ATTR_MOBILE_ONLY) == "true") {
							return;
						}
						
						// 콤보박스 아이템 개수보다 mnCmbItem이 많으면 팝업 띄우지 않음
						var vnItemCnt = vcTargetCombo.getItemCount();
						 if(!mbMobile && vnItemCnt <= mnList) {
							
							// 그리드 안의 콤보박스는 편집행일 경우에만 open 할 수 있음
							if(vcTargetCombo.getParent().type == "grid") {
		
								/** @type cpr.controls.Grid */
								var vcGrid = vcTargetCombo.getParent();
								var vnSelectedRowIndex = vcGrid.getSelectedRowIndex();
								vcGrid.setEditRowIndex(vnSelectedRowIndex);
							}
							
							// FIXME 그리드안의 콤보박스가 팝업이 아닌 open 될경우 아래 코드 주석을 해제하십시오.
		//					cpr.core.DeferredUpdateManager.INSTANCE.update();
							control.preventInput = false;
							vcTargetCombo.open();
							vcTargetCombo.focus();
							return;
						}
						
						cpr.core.DeferredUpdateManager.INSTANCE.update();
						_floatPop(control);
					}
					
				}
			}
		}
		
		/**
		 * 
		 * @param {cpr.events.CScreenChangeEvent} e
		 */
		function fn_screen_change (e) {
			var screen = e.screen.name;
			
			if(screen == "default") {
				_setMobile(false);
			} else {
				_setMobile(true, mbScrollButton, mbScrollStyle);
			}
		}
		
		
		/**
		 * 새로운 앱인스턴스 생성
		 */
		function _createApp() {
			
			if(moAppIns == null) {
				return;
			}
		
			msAppId = moAppIns.app.id + "ListPop";
			var newApp = new cpr.core.App(msAppId, {
				
				onPrepare: function(loader){
				},
				
				onCreate: function(/* cpr.core.AppInstance */ newApp, exports){
					var vaRows = (function(pnHeight){
						var rows = [];
						rows.push("1fr");
						rows.push(pnHeight + "px");
						return rows;
					})(mnConfirmBtnHgt)
					
					// 루트 컨테이너 레이아웃 설정 (폼레이아웃)
					var container = newApp.getContainer();
					var voFormlayout = new cpr.controls.layouts.FormLayout();
					voFormlayout.setRows(vaRows);
					voFormlayout.setColumns(["1fr"]);
					voFormlayout.verticalSpacing = mnFormSpacing + "px";
					container.setLayout(voFormlayout);
					
					// 루트 앱인스턴스 로드 이벤트 리스너
					newApp.addEventListener("load", function(e) {	
						
						var vcCtrl = newApp.getHostProperty("initValue");
						var voSelected = []; // 이전에 선택한 값
						moAppIns = vcCtrl.getAppInstance();
						
						// vsInitValue에 해당하는 타겟 콤보박스 저장
						mcComboBox = moAppIns.getContainer().getAllRecursiveChildren().map(function(each){
							var vcCombo = null;
							if(vcCtrl.type == "combobox" && each == vcCtrl) {
								vcCombo = each;
								voSelected = each.values;
							} else {
								var vsTargetId = vcCtrl.fieldLabel;
								if(each.id == vsTargetId && each.type == "combobox") {
									vcCombo = each;
									voSelected = each.values;
								}
							}
							
							// 그리드에 포함되어있는 콤보박스일 경우
							if(vcCombo && vcCombo.getParent().type == "grid") {
								/** @type cpr.controls.Grid */
								var vcGrid = each.getParent();
								var vnSelectedIndex = vcGrid.getSelectedRowIndex();
								
								for(var idx = 0; idx < vcGrid.detail.cellCount; idx++) {
									if(vcGrid.detail.getControl(idx) == each) {
										voSelected = [vcGrid.getCellValue(vnSelectedIndex, idx)];
									}
								}
							}
							
							return vcCombo;
						}).filter(function(each){
							if(each) return each;
						})[0];
						
						if(mcComboBox == null) return;
						
						var vbMultiple = mcComboBox.multiple; // 콤보박스의 multiple 속성값
		
						/*
						 * ---------------------------- start ----------------------------
						 * 드롭다운 리스트 아이템을 보여주기 위함 컨트롤 배치
						 */
						// 1. 셀렉션 계열 컨트롤을 감싸는 그룹 생성(버티컬 레이아웃)
						var vcGroup = new cpr.controls.Container();
						var voVerticalLayout = new cpr.controls.layouts.VerticalLayout();
						vcGroup.setLayout(voVerticalLayout);
						
						// 2. 셀렉션 계열 컨트롤 생성 (라디오, 체크박스그룹)
						var vcSelection = null;
						if(vbMultiple == true) {
							vcSelection = new cpr.controls.CheckBoxGroup(); // 다중선택
						} else {
							vcSelection = new cpr.controls.RadioButton(); // 단일선택
						}
						
						// 3. 셀렉션 계열 컨트롤 속성 및 스타일 설정
						/*
						 * 아래 기능은 2021-01-29 릴리즈 버전 이후부터 사용 가능합니다
						 * 		- 라디오버튼(or 체크박스그룹) 아이템의 너비를 고정너비로 설정합니다.
						 * 		- 각 아이템의 텍스트에 말줄임 스타일을 적용하기 위해서 아이템을 반드시 고정너비로 설정해야 합니다.
						 */
						vcSelection.fixedWidth = mnFixedWidth;
						
						// TODO 한 행에 보여줄 아이템 개수
						vcSelection.colCount = mnColCount;
		
						// TODO 컨트롤의 스타일 변경
						// 1) 컨트롤 스타일
						vcSelection.style.addClass(msSelectCls);
		
						// 2) 컨트롤 아이템 스타일
						vcSelection.style.item.addClass(msSelectItemCls);
						
						// 4. 데이터셋 생성
						var vcComboDataSet = new cpr.data.DataSet();
						var voRow = [];
						mcComboBox.getItems().forEach(function(each){
							voRow.push({
								"label": each.label,
								"value": each.value
							});
						});
						vcComboDataSet.parseData({
							"columns" : [
								{"name": "label"},
								{"name": "value"}
							],
							"rows" : voRow
						});
						
						// 5. 라디오버튼일 때, 공백 아이템 추가
						if(mbInsertBlank && vcSelection.type == "radiobutton" && mcComboBox.getItemCount() > 0) { 
							vcComboDataSet.insertRowData(0, false, {
								"label" : "선택취소",
								"value" : ""
							})
						}				
						
						// 6. 셀렉션 컨트롤에 데이터셋 바인딩
						vcSelection.setItemSet(vcComboDataSet, {
							label : "label",
							value : "value",
							tooltip : "label"
						});
							
						// 7. 기존의 선택했던 값이 존재할 경우 값 설정
						if(voSelected.length != 0) {
							vcSelection.values = voSelected;
						}
						
						// 8. 컨트롤 추가
						vcGroup.addChild(vcSelection, {
							autoSize : "height"
						});
						container.addChild(vcGroup, {
							rowIndex : 0,
							colIndex : 0
						});
						/*
						 * 드롭다운 리스트 아이템을 보여주기 위함 컨트롤 배치
						 * ---------------------------- end ----------------------------
						 */
						
						// [확인] 버튼 컨트롤
						var vcButton = new cpr.controls.Button();
						vcButton.value = "확인";
						vcButton.style.addClass(msBtnConfirmCls); // 버튼 style 적용
						vcButton.addEventListener("click", function(e){
							// 콤보박스 아이템 선택 및 팝업닫힘
							newApp.close(vcSelection.values);
						});
						container.addChild(vcButton, {
							rowIndex : 1,
							colIndex : 0
						})
						
						cpr.core.DeferredUpdateManager.INSTANCE.update();
						
						/*
						 * 팝업이 열린 후 팝업 사이즈 재설정
						 * (모바일 전용 한정) 
						 */
						var dialog = newApp.getHost();
						if(dialog && dialog instanceof cpr.controls.Dialog) {
							if(mbMobile) {
								var elDialog = document.getElementById("uuid-"+dialog.uuid).querySelector(".cl-dialog-header");
								var dialogHeaderHgt = getComputedStyle(elDialog).height; // 다이얼로그 헤더 높이
								
								var vnViewItemCount = vcSelection.getItemCount();
								var vnItemCnt = vnViewItemCount <= mnMobileList ? vnViewItemCount : mnMobileList; // 다이얼로그에 최대 보여줄 아이템 개수
								var vnItemBorders = vnViewItemCount <= mnMobileList ? vnViewItemCount : 0; // 스크롤이 없는 상태에서 각 아이템 border 사이즈 추가
								
								var elSelectionItem = document.getElementById("uuid-"+vcSelection.uuid);
								var vnSelectionItemHgt = 0; // 셀력션 아이템의 높이
								if(vnViewItemCount > 0) {
									if(vbMultiple) {
										// 멀티셀렉션
										vnSelectionItemHgt = getComputedStyle(elSelectionItem.querySelector(".cl-checkbox")).height;
									} else {
										// 단일셀렉션
										vnSelectionItemHgt = getComputedStyle(elSelectionItem.querySelector(".cl-radiobutton-item")).height;
									}
								}
								
								/*
								 * 최종 다이얼로그 높이
								 * (보여지는 아이템 개수 * 각 아이템 높이) + 다이얼로그 헤더 높이 + [확인버튼]높이 + 보여지는 아이템 보더개수 + 폼레이아웃 스페이싱
								 */
								var vnTotalDialogHgt = (vnItemCnt * parseInt(vnSelectionItemHgt)) + parseInt(dialogHeaderHgt) + mnConfirmBtnHgt + vnItemBorders + mnFormSpacing;
								
								// 다이얼로그 최대 높이 = 화면높이*0.8
								if(mnMaxHeight  <= vnTotalDialogHgt || mnMobileList == -1) {
									vnTotalDialogHgt = mnMaxHeight ;
								}
								
								// 스크롤이 있는 경우 버튼 생성
								var vnRealSelectionHeight = vcSelection.getActualRect().height; // 실제 전체  selection컨트롤의 rect
								var vnSelectionViewHeight = vnTotalDialogHgt - (parseInt(dialogHeaderHgt) + mnConfirmBtnHgt); //  selection컨트롤의 viewPort
								if(vnRealSelectionHeight > vnSelectionViewHeight) {
									// 다이얼로그 최소 높이 
									var vnMin = (parseInt(dialogHeaderHgt) + mnConfirmBtnHgt) + 90;
									if(vnMin >= vnTotalDialogHgt) {
										var maxHeight = (parseInt(vnSelectionItemHgt) * vcSelection.getItemCount()) + parseInt(dialogHeaderHgt) + mnConfirmBtnHgt + vnItemBorders + mnFormSpacing;
										vnTotalDialogHgt = vnMin > maxHeight? maxHeight : vnMin;
									}
								}
														
								var vnSelectionViewHeight2 = vnTotalDialogHgt - (parseInt(dialogHeaderHgt) + mnConfirmBtnHgt); // 변경된 vnTotalDialogHgt 로 다시 계산한 selection컨트롤의 viewPort
								if(mbScrollButton && vnRealSelectionHeight > vnSelectionViewHeight2) { // 스크롤이 있는 경우에만
									// 1) 최초 box-shadow 설정
									vcGroup.style.css({
										"box-shadow" : moBoxShadow.top
									})
									
									// 2) 버튼 추가 
									// TODO 디자인 수정
									var vcUpBtn = new cpr.controls.Button("btnUp");
									vcUpBtn.value = "▲";
									vcUpBtn.style.addClass(msFloatBtnCls);
									vcUpBtn.enabled = false;
									vcUpBtn.addEventListener("click", function(e){
										vcGroup.scrollTo(0, 0, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
									});
									dialog.getEmbeddedAppInstance().floatControl(vcUpBtn, {
										top : "10px",
										right : "20px",
										width : "30px",
										height : "30px",
									});
									
									var vcDownBtn = new cpr.controls.Button("btnDown");
									vcDownBtn.value = "▼";
									vcDownBtn.style.addClass(msFloatBtnCls);
									vcDownBtn.addEventListener("click", function(e){
										vcGroup.scrollTo(0, vnRealSelectionHeight, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
									});
									
									dialog.getEmbeddedAppInstance().floatControl(vcDownBtn, {
										top : (vnSelectionViewHeight2- 40) + "px",
										right : "20px",
										width : "30px",
										height : "30px",
									});
								}
								
								vcGroup.addEventListener("scroll", function(e){
									var voViewportRect = e.control.getViewPortRect();
									var top = voViewportRect.top;
									var bottom = voViewportRect.bottom;
									
									if(mbScrollButton) {
										if(top == 0) {
											// 가장 위
											vcUpBtn.enabled = false;
											vcDownBtn.enabled = true;
										} else if(bottom == vnRealSelectionHeight) {
											// 가장 아래
											vcUpBtn.enabled = true;
											vcDownBtn.enabled = false;
										} else {
											// 중간
											vcUpBtn.enabled = true;
											vcDownBtn.enabled = true;
										}
									}
									
									if(mbScrollStyle) {
										if(top == 0) {
											// 가장 위
											vcGroup.style.css({
												"box-shadow" : moBoxShadow.top
											})
										} else if(bottom == vnRealSelectionHeight) {
											// 가장 아래
											vcGroup.style.css({
												"box-shadow" : moBoxShadow.bottom
											})
										} else {
											// 중간
											vcGroup.style.css({
												"box-shadow" : moBoxShadow.middle
											})
										}
									}
								});
								
								dialog.style.animateTo({
									"transform":"translateY("+moMblPopSize.bottom+"px)",
									"max-height" : vnTotalDialogHgt + "px",
								}, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
								
								cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function() {
									var dialogManager = dialog.getAppInstance().dialogManager;
									var oldConstraint = dialogManager.getConstraintByName(msDialogName);
									var newConstraint = oldConstraint;
									newConstraint.height = vnTotalDialogHgt;
									dialogManager.replaceConstraintByName(msDialogName, newConstraint);
								});
							}
						}
					});
				}
			});
			
			// 앱 생성
			cpr.core.Platform.INSTANCE.register(newApp);
			
			return newApp;
		}
		
		
		/**
		 * 콤보박스 리스트가 open되었을 경우 방지
		 * 아이템 개수가 mnCmbItem보다 많은 경우에만 팝업으로 띄운다.
		 * @param {Event} e
		 */
		cpr.events.EventBus.INSTANCE.addFilter("open", function(e){
			var control = e.control;
			
			if(control.type == "combobox" && control.userAttr(ATTR_COMBO_POP) == "true") {
				
				/*
				 * 모바일에서만 해당 기능을 사용 확인(mobile-only = true)
				 * default : 기본 콤보박스 사용
				 * tablet, mobile : 콤보팝업 사용
				 */
				var voAppInstance = control.getAppInstance();
				if(voAppInstance && voAppInstance instanceof cpr.core.AppInstance) {
					var vsTargetScreen = voAppInstance.targetScreen.name;
			 		if(vsTargetScreen == "default" && control.userAttr(ATTR_MOBILE_ONLY) == "true") return;
				}
				
				var vnItemCnt = control.getItemCount();
				if(vnItemCnt > mnList) {
					e.preventDefault();
				}
			}
		});
		
		
		/**
		 * 타겟 콤보박스 확인
		 *  fieldLabel이 있는 경우 fieldLabel 반환
		 *  fieldLabel이 없는 경우 컨트롤 id 반환
		 * @param {cpr.controls.UIControl} pcControl
		 */
		function _getTargetComboId (pcControl) {
			
			var vsLabel = null;
			
			if(pcControl.fieldLabel != null && pcControl.fieldLabel != "") {
				vsLabel = pcControl.fieldLabel;
			} else {
				vsLabel = pcControl.id;
			}
			
			return vsLabel;
		}
		
		
		/**
		 * 팝업 띄우기
		 * @param {cpr.controls.UIControl} pcControl
		 */
		function _floatPop (pcControl) {
			
			mbPop = true;
			
			var voDialogApp = _createApp();
			
			/** @type cpr.core.AppInstance */
			var voRootAppIns = moAppIns.getRootAppInstance();
			
			var vcTargetCtrl = null;
			var vsHeaderTitle = null;
			
			if(pcControl.type == "combobox") {
				vcTargetCtrl = pcControl;
				var control = pcControl.getAppInstance().lookup(pcControl.fieldLabel);
				if(control) {
					vsHeaderTitle = control.value;
				} else {
					vsHeaderTitle = pcControl.fieldLabel;
				}
			} else {
				vcTargetCtrl = moAppIns.lookup(_getTargetComboId(pcControl));
				var control = pcControl.getAppInstance().lookup(vcTargetCtrl.fieldLabel);
				if(control) {
					vsHeaderTitle = control.value;
				} else {
					vsHeaderTitle = vcTargetCtrl.fieldLabel;
				}
			}
			
			if(vsHeaderTitle == null) {
				vsHeaderTitle = msTempHeaderTitle;
			}
			
			// TODO 다이얼로그 관련 설정 변경
			// 다이얼로그 사이즈 width, height 변경
			voRootAppIns.dialogManager.openDialog(voDialogApp, msDialogName, moPopSize, function(/* cpr.controls.Dialog */ dialog){
				dialog.headerTitle = vsHeaderTitle;
				dialog.initValue = pcControl;
				dialog.resizable = false;
				dialog.headerMovable = false;
				dialog.headerClose = false;
				
				// 다이얼로그 스타일
				dialog.style.addClass(msDialogCls);
				dialog.style.overlay.addClass(msDialogOverlayCls);
				
				dialog.addEventListener("overlay-click", function(e){
					dialog.close();
				});
				
				dialog.addEventListener("init", function(e){
					dialog.getEmbeddedAppInstance().getContainer().getLayout().scrollable = false;
				});
				
				dialog.addEventListener("transitionend", function(e){
					dialog.getEmbeddedAppInstance().getContainer().getLayout().scrollable = true;
					dialog.redraw();
				});
				
				// TODO 다이얼로그가 닫힐 때 발생하는 이벤트
				dialog.addEventListenerOnce("close", function(e){
					var returnValue = e.control.returnValue ;
					
					// TODO 팝업에서 선택한 값(returnValue) 저장
					if (returnValue) {
						
						// 콤보박스의 상위컨트롤이 그리드인 경우, 그리드 내 콤보박스 셀에 returnValue 저장
						if(vcTargetCtrl.getParent().type == "grid") {
							
							/** @type cpr.controls.Grid */
							var vcGrid = vcTargetCtrl.getParent();
							var vnSelectedRowIndex = vcGrid.getSelectedRowIndex();
				
							var voDetail = vcGrid.detail;
							for(var idx = 0; idx < voDetail.cellCount; idx++) {
								if(voDetail.getControl(idx) ==vcTargetCtrl) {
									vcGrid.setCellValue(vnSelectedRowIndex, idx, returnValue);
								}		
							}
						} else {
							// 콤보박스의 상위컨트롤이 그리드가 아닌경우
							vcTargetCtrl.clearSelection();
		
							for(var idx = 0; idx < returnValue.length; idx++) {
								vcTargetCtrl.selectItemByValue(returnValue[idx]);
							}
						}
					}
					
					mbPop = false;
					cpr.core.Platform.INSTANCE.unregister(dialog.app);
				});
			});
		}
		
		/**
		 * 모바일 버전의 콤보박스 사용 여부
		 * @param {Boolean} pbMobile 모바일 여부(true:모바일/false:데스크탑)
		 * @param {Boolean} pbScrollButton? 모바일버전-스크롤 버튼 사용 여부 (default:false)
		 * @param {Boolean} pbScrollStyle? 모바일버전-스크롤 스타일(box-shadow)사용여부 (default:false)
		 */
		globals.setComboPopMobile = function(pbMobile, pbScrollButton, pbScrollStyle) {
			_setMobile(pbMobile, pbScrollButton, pbScrollStyle);
		}
		
		
		/**
		 * 모바일/데스크탑 기준 size,colcount 설정
		 * @param {Boolean} pbMobile 
		 * @param {Boolean} pbScrollButton?
		 * @param {Boolean} pbScrollStyle?
		 */
		function _setMobile (pbMobile, pbScrollButton, pbScrollStyle) {
			mbMobile = pbMobile;
			
			if(pbMobile) {
				// tablet, mobile 화면일 경우
				mnColCount = mnMblColCount;
				moPopSize = moMblPopSize;
				mnList = mnMblItemList;
				
				if(pbScrollButton != null) {
					mbScrollButton = pbScrollButton;
				}
				
				if(pbScrollStyle != null) {
					mbScrollStyle = pbScrollStyle
				}
			} else {
				// default 화면일 경우
				mnColCount = mnDftColCount;
				moPopSize = moDftPopSize;
				mnList = mnDftItemList;
			}
		}
	});
})();
/// end - module/comboBoxListPopup
/// start - module/common
/*
 * Module URI: module/common
 * SRC: module/common.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/common", function(exports, globals, module){
		/************************************************
		 * 각 화면에 대한 그리드/폼 변경내역체크, 유효성검증, 메뉴정보, 사용자정보 및 필수적인 공통 함수들을 제공
		 * 각 사이트별 커스터마이징하여 사용
		 * version 2.0
		 ************************************************/
		function AppKit() {
			var extension = cpr.core.Module.require("module/extension");
			
			this._activeLoadMask = null;
			this._activeSubmission = [];
			
			this.AppStack = new extension.AppStackKit(this);
			this.Auth = new AppAuthKit(this);
			this.ComUdcBtn = new extension.ComUdcBtnKit(this);
			this.Control = new extension.ControlKit(this);
			this.DataMap = new extension.DataMapKit(this);
			this.DataSet = new extension.DataSetKit(this);
			this.Dialog = new extension.DialogKit(this);
			this.EmbApp = new extension.EmbeddedAppKit(this);
			this.FreeForm = new extension.FreeFormKit(this);
			this.Validator = new Validator(this);
			this.Grid = new extension.GridKit(this);
			this.Group = new extension.GroupKit(this);
			this.MDI = new extension.MDIKit(this);
			this.Msg = new extension.MsgKit(this);
			this.SelectCtl = new extension.SelectKit(this);
			this.Submit = new extension.SubmissionKit(this);
			this.Tab = new extension.TabKit(this);
			this.Tree = new extension.TreeKit(this);
			// 밸리데이션 다건체크(보더, 메시지추가)
			this.Validator2 = new Validator2(this);
		};
		
		/**
		 * 화면에 LoadMask 출력
		 * 비동기 서브미션 호출시 화면에 로딩 이미지 출력
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} maskType?
		 */
		AppKit.prototype.showLoadMask = function(app, maskType) {
			var isPopup = false;
			if(app.getHost() && app.getHost().modal === true){
				isPopup = true;
			}
			this.hideLoadMask(app);
			
			if(app.isUDCInstance()){
				app = app.getHostAppInstance();
			}
				
			var showConstraint = {
					"position" : "absolute",
					"top" : "0",
					"bottom" : "0",
					"left" : "0",
					"right" : "0"
			};
			showConstraint = this.wrapConstraints(app, showConstraint);
			
			//var container = isPopup ? app.getContainer() : app.getRootAppInstance().getContainer();
			var container = app.getContainer();
			var layout = container.getLayout();
			
			var loadmask = container.getAppInstance().lookup("__loadmask__");
			
			if(maskType == "pro") {
				loadmask = container.getAppInstance().lookup("__loadmask_pro__");
				if(loadmask) {
					container.replaceConstraint(loadmask, showConstraint);
				} else {
					loadmask = new udc.com.loadmaskprogress("__loadmask_pro__");
					if(layout instanceof cpr.controls.layouts.FormLayout){
						container.floatControl(loadmask, showConstraint);
					}else{
						container.addChild(loadmask, showConstraint);
					}
					container.getAppInstance().register(loadmask);
				}
				loadmask.module.start();
			} else {
				loadmask = container.getAppInstance().lookup("__loadmask__");
				try{
					
					if(loadmask) {
						if(layout instanceof cpr.controls.layouts.FormLayout){
							app.floatControl(loadmask, showConstraint);
						}else{
							container.replaceConstraint(loadmask, showConstraint);
						}
					} else {
						loadmask = new udc.com.loadmask("__loadmask__");
						
						if(layout instanceof cpr.controls.layouts.FormLayout){
							container.floatControl(loadmask, showConstraint);
						}else{
							container.addChild(loadmask, showConstraint);
						}
						container.getAppInstance().register(loadmask);
					}
				}catch(ex){showConstraint = null;}
			}
			
			try{
				if(loadmask) {
					if(layout instanceof cpr.controls.layouts.FormLayout
						|| layout instanceof cpr.controls.layouts.VerticalLayout){
						app.floatControl(loadmask, showConstraint);
					}else{
						container.replaceConstraint(loadmask, showConstraint);
					}
				} else {
					
					//loadmask = this._loadMaskUdc;
					loadmask = new udc.com.loadmask("__loadmask__");
					
					if(layout instanceof cpr.controls.layouts.FormLayout
						|| layout instanceof cpr.controls.layouts.VerticalLayout){
						app.floatControl(loadmask, showConstraint);
					}else{
						container.addChild(loadmask, showConstraint);
					}
					container.getAppInstance().register(loadmask);
				}
			}catch(ex){showConstraint = null;}
			
			this._activeLoadMask = loadmask;
		};
		
		/**
		 * LoadMask를 감춤
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 */
		AppKit.prototype.hideLoadMask = function(app) {
			
			if(this._activeLoadMask) {
				if(this._activeLoadMask.module && this._activeLoadMask.module.end) {
					this._activeLoadMask.module.end();
				}
				
				var hideConstraint = {
						"position" : "absolute",
						"top" : "-1px",
						"left" : "-1px",
						"width" : "1px",
						"height" : "1px"
				};
				
				//앱 객체가 사라진 경우... ROOT앱을 기본으로 하여 처리
				if(app == null || app.getRootAppInstance() == null){
					app = this.getMainApp(app);
				}else{
					if(app.isUDCInstance()){
						app = app.getHostAppInstance();
					}
				}
				
				var isPopup = false;
				if(app.getHost() && app.getHost().modal === true){
					isPopup = true;
				}
				
				//var container = isPopup ? app.getContainer() : app.getRootAppInstance().getContainer();
				var container = app.getContainer();
				try{
					var layout = container.getLayout();
					if(layout instanceof cpr.controls.layouts.FormLayout
						|| layout instanceof cpr.controls.layouts.VerticalLayout){
						app.removeFloatingControl(this._activeLoadMask);
					}else{
						hideConstraint = this.wrapConstraints(app, hideConstraint);
						container.replaceConstraint(this._activeLoadMask, hideConstraint);
					}
					if(this._activeLoadMask){
						this._activeLoadMask.module.count(0);
						this._activeLoadMask.module.hide();
					}
				}catch(ex){hideConstraint = null;}
				
				this._activeLoadMask = null;
			}
		};
		
		
		/**
		 * App 화면의 Layout에 맞게 컨트롤 배치 조건 래핑
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {cpr.controls.layouts.Constraint}constraint 래핑할 배치조건
		 * @param {cpr.core.AppInstance} poApp 앱인스턴스
		 * @returns 래핑된 배치조건
		 */
		AppKit.prototype.wrapConstraints = function(app, constraint, poApp) {
			var isPopup = false;
			if(app.getHost() && app.getHost().modal === true){
				isPopup = true;
			}
			
			var layout;
			var container = null;
			if(poApp == null){
				//container = isPopup ? app.getContainer() : app.getRootAppInstance().getContainer();
				container = app.getContainer();
				poApp = isPopup ? app : app.getRootAppInstance();
			}else{
				container = poApp.getContainer();
			}
			layout = container.getLayout();
			
			if (layout instanceof cpr.controls.layouts.ResponsiveXYLayout) {
				var positionConstraints = [];
				var allMedia = poApp.allSupportedMedias;
				allMedia.forEach(function(media) {
					var newConst = _.clone(constraint);
					newConst["media"] = media;
					positionConstraints[positionConstraints.length] = newConst;
				});
				return {
					"positions" : positionConstraints
				};
			}
			
			return constraint;
		};
		
		/**
		 * 메인(루트) 앱에 대한 인스턴스를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @returns 
		 */
		AppKit.prototype.getMainApp = function(app) {
			if(app.isRootAppInstance()) {
				return app;
			}else{
				if(app.getHostAppInstance().isRootAppInstance()) return app.getHostAppInstance();
				else return this.getMainApp(app.getHostAppInstance());
			}
		};
		
		/**
		 * 모바일 접속여부를 반환한다.
		 */
		AppKit.prototype.isAccessMobile = function() {
			var info = cpr.utils.Util.detectBrowser();
			if(info.mobile || info.os.indexOf("Android") > -1) return true;
			return false;
		};
		
		/**
		 * 해당 오브젝트가 함수 타입인지 여부를 반환한다.
		 */
		AppKit.prototype.isFunc = function(poCallBackFunc) {
			if (typeof (poCallBackFunc) == "function") return true;
			return false;
		};
		
		/**
		 * 메인 화면에 데이터 변경사항이 있는지 여부를 체크한다.<br>
		 * 그리드, 폼레이아웃(프리폼) 대상(UDC, EMB 포함)<br>
		 * 그리드 ignoreModify 사용자속성 "Y" 지정시 continue
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} psAftMsg? 메시지구분
		 * @param {cpr.controls.Container} poContainer? 컨테이너
		 * @returns {Boolean} 데이터 변경여부
		 */
		AppKit.prototype.isAppModified = function(app, psAftMsg, poContainer) {
			var container;
		
			if(poContainer != null){
				container = poContainer;
			}else{
				var mainApp = this.getMainApp(app);
				if(mainApp == null) return false;
				container = mainApp.getContainer();
			}
			
			var vaDataCtrls = new Array();
			
			var _this = this;
			function getChildRecursive(poContainer){
			    var vaChildCtrls = poContainer.getAllRecursiveChildren();
			    for (var i=0, len=vaChildCtrls.length; i<len; i++) {
			        if (vaChildCtrls[i].type == "grid") {
			        	vaDataCtrls.push(vaChildCtrls[i]);
			        //입력형식의 폼레이아웃은 form-box CSS로 구분	
			        }else if (vaChildCtrls[i] instanceof cpr.controls.Container && vaChildCtrls[i].style.getClasses().indexOf(AppProperties.FORM_LAYOUT_CSS) != -1) {
			        	vaDataCtrls.push(vaChildCtrls[i]);
			        }else if(vaChildCtrls[i] instanceof cpr.controls.UDCBase){
			        	var voUdcApp = vaChildCtrls[i].getEmbeddedAppInstance();
			        	if(voUdcApp) getChildRecursive(voUdcApp.getContainer());
			        }else if(vaChildCtrls[i] instanceof cpr.controls.EmbeddedApp){
			        	var voEmbApp = vaChildCtrls[i].getEmbeddedAppInstance();
			        	if(voEmbApp) getChildRecursive(voEmbApp.getContainer());
			        }
			    }
			}
			getChildRecursive(container);
			
			var modify = false;
			var ctrl = null;
			var vsFieldLabel = "";
			for(var i=0, len=vaDataCtrls.length; i<len; i++){
				ctrl = vaDataCtrls[i];
				if(ctrl.type == "grid"){
					
					//그리드 수정 내역 체크 무시 attr
					if(ctrl.userAttr("ignoreModify") === "Y" || ctrl.dataSet == null) continue;
					if(ctrl.dataSet.isModified()){
						modify = true;
						vsFieldLabel = ctrl.fieldLabel;
						break;
					}
				}else{
					var dataSet = this.Group.getBindDataSet(ctrl.getAppInstance(), ctrl);
					if(dataSet != null && dataSet.isModified()) {
						modify = true;
						vsFieldLabel = ctrl.fieldLabel;
						break;
					}
				}
			}
			//변경사항이 반영되지 않았습니다. 계속 하시겠습니까? confirm
			if(modify && psAftMsg != null && psAftMsg.toUpperCase() == "CRM"){
				if(!this.Msg.confirm("CRM-M003", [vsFieldLabel])) return true;
				else return false;
			}
			return modify;
		};
		
		/**
		 * 메인 화면에 데이터 변경사항이 있는지 여부를 체크한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {cpr.controls.Container} poContainer? 컨테이너
		 * @returns {Object Array} 변경된 데이터셋 객체 배열
		 */
		AppKit.prototype.getAllAppModifiedDataSet = function(app, poContainer) {
			var container;
			
			if(poContainer != null){
				container = poContainer;
			}else{
				var mainApp = this.getMainApp(app);
				if(mainApp == null) return false;
				container = mainApp.getContainer();
			}
			
			var vaDataCtrls = new Array();
			var vaDataSets = new Array();
		
			function getChildRecursive(poContainer){
			    var vaChildCtrls = poContainer.getAllRecursiveChildren();
			    for (var i=0, len=vaChildCtrls.length; i<len; i++) {
			        if (vaChildCtrls[i].type == "grid") {
			        	vaDataCtrls.push(vaChildCtrls[i]);
			        }else if (vaChildCtrls[i] instanceof cpr.controls.Container && vaChildCtrls[i].style.getClasses().indexOf(AppProperties.FORM_LAYOUT_CSS) != -1) {
			        	vaDataCtrls.push(vaChildCtrls[i]);
			        }else if(vaChildCtrls[i] instanceof cpr.controls.UDCBase){
			        	var voUdcApp = vaChildCtrls[i].getEmbeddedAppInstance();
			        	if(voUdcApp) getChildRecursive(voUdcApp.getContainer());
			        }else if(vaChildCtrls[i] instanceof cpr.controls.EmbeddedApp){
			        	var voEmbApp = vaChildCtrls[i].getEmbeddedAppInstance();
			        	if(voEmbApp) getChildRecursive(voEmbApp.getContainer());
			        }
			    }
			}
			getChildRecursive(container);
			
			var ctrl = null;
			for(var i=0, len=vaDataCtrls.length; i<len; i++){
				ctrl = vaDataCtrls[i];
				if(ctrl.type == "grid"){
					vaDataSets.push(ctrl.dataSet);
				}else{
					var dataSet = this.Group.getBindDataSet(ctrl.getAppInstance(), ctrl);
					if(dataSet == null) continue;
					vaDataSets.push(dataSet);
				}
			}
			
			return vaDataSets;
		};
		
		/**
		 * 화면에 막(Cover)를 씌운다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 */
		AppKit.prototype.coverPage = function(app) {
			var coverCtl = new cpr.controls.Container("comPageCover");
			coverCtl.style.css({"background-color":"#ededed", "opacity":"0.5"});
			coverCtl.setLayout(new cpr.controls.layouts.XYLayout());
			
		//	var mainApp = this.getMainApp(app);
		//	var container = mainApp.getContainer();
			var container = app.getContainer();
			var layout = container.getLayout();
			if(layout instanceof cpr.controls.layouts.FormLayout || layout instanceof cpr.controls.layouts.VerticalLayout){
				app.floatControl(coverCtl, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			}else{
				container.addChild(coverCtl, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			}
		};
		
		/**
		 * 화면에 막(Cover)를 제거한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 */
		AppKit.prototype.removeCover = function(app) {
			var coverCtl = new cpr.controls.Container("comPageCover");
			coverCtl.style.css({"background-color":"#ededed", "opacity":"0.5"});
			coverCtl.setLayout(new cpr.controls.layouts.XYLayout());
		//	var mainApp = this.getMainApp(app);
		//	var container = mainApp.getContainer();
			var container = app.getContainer();
			var floatCtrls = app.getFloatingControls();
			floatCtrls.filter(function(ctrl){
				return ctrl instanceof cpr.controls.Container && ctrl.id == "comPageCover";
			}).forEach(function(ctrl){
				var layout = container.getLayout();
				if(layout instanceof cpr.controls.layouts.FormLayout || layout instanceof cpr.controls.layouts.VerticalLayout){
					app.removeFloatingControl(ctrl);
				}else{
					container.removeChild(ctrl);
				}
			});
		};
		
		/**
		 * 컨트롤(그룹) 또는 Grid의 내의 입력 값에 대한 유효성 체크를 수행한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol | Array} paCtlId 컨트롤 ID
		 * @param {"all" | "modify" | "current"}  dataScope? (all:그리드의 전체 데이터, modify:변경된 전체 Row, current:현재  Row)
		 * @param {Boolean} isMsgAlert validation 메시지 출력 여부
		 * @returns {Boolean} Valid true, Invalid false. <br>
		 *  	참고 : 1. 그리드에 연결된 데이터셋의 info는 PK컬럼으로 인식<br>
		 *              그리드 초기화시 (Grid.init) info에 설정된 PK컬럼은 필수값으로 지정되고 해당 컬럼에 ignorePk="Y" 사용자속성 부여시 필수여부 체크를 무시한다.<br>
		 *           2. 그리드 + 폼레이아웃(입력폼) 구성이고 그리드 사용자 속성에 bindDataFormId(폼레이아웃ID) 지정시 유효성체크 부적합 셀은  bindDataFormId에 지정된 폼레이아웃의 컨트롤에 포커싱이 간다. 
		 *           
		 */
		AppKit.prototype.validate = function(app, paCtlId, dataScope, isMsgAlert){
		//	var mainApp = cpr.core.Platform.INSTANCE.getAllLoadedApps().find(function(each){
		//		return each.id === "app/com/main/main"
		//	}).getInstances()[0]
			var mainApp = this.getMainApp(app);
			/** @type cpr.data.DataMap **/
			var dmGlobalConfig = mainApp.lookup("dmGlobalConfig");
			var appProperty = app.getAppProperty("useLayerdPop");
			
			var useLayeredPop;
			if(dmGlobalConfig){
				useLayeredPop = appProperty || (dmGlobalConfig.getValue("useLayerdPop") || "N");
			}
		
			return useLayeredPop === "N" ? this.validateOrigin(app, paCtlId, dataScope, isMsgAlert)
			                             : this.validateLayered(app, paCtlId);
		}
		
		
		/**
		 * 컨트롤(그룹) 또는 Grid의 내의 입력 값에 대한 유효성 체크를 수행한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol | Array} paCtlId 컨트롤 ID
		 * @param {"all" | "modify" | "current"}  dataScope? (all:그리드의 전체 데이터, modify:변경된 전체 Row, current:현재  Row)
		 * @param {Boolean} isMsgAlert validation 메시지 출력 여부
		 * @returns {Boolean} Valid true, Invalid false. <br>
		 *  	참고 : 1. 그리드에 연결된 데이터셋의 info는 PK컬럼으로 인식<br>
		 *              그리드 초기화시 (Grid.init) info에 설정된 PK컬럼은 필수값으로 지정되고 해당 컬럼에 ignorePk="Y" 사용자속성 부여시 필수여부 체크를 무시한다.<br>
		 *           2. 그리드 + 폼레이아웃(입력폼) 구성이고 그리드 사용자 속성에 bindDataFormId(폼레이아웃ID) 지정시 유효성체크 부적합 셀은  bindDataFormId에 지정된 폼레이아웃의 컨트롤에 포커싱이 간다. 
		 *           
		 */
		AppKit.prototype.validateOrigin = function(app, paCtlId, dataScope, isMsgAlert) {
			
			dataScope = dataScope != null ? dataScope : "upd";
			if(!(paCtlId instanceof Array)){
				paCtlId = [paCtlId];
			}
			
			var valid = true;
			for(var i=0, len=paCtlId.length; i<len; i++) {
				var ctrlId = paCtlId[i];
				var ctrl = app.lookup(paCtlId[i]);
				if(ctrl instanceof cpr.controls.Grid){
					valid = this._validateGrid(ctrl, dataScope, isMsgAlert);
				}else if(ctrl instanceof cpr.controls.Container){
					/** @type cpr.bind.BindContext */
					var bindContext = this.Group.getBindContext(app, ctrl);
					if(bindContext){
						/**@type cpr.data.DataSet */
						var dataset = bindContext.grid ? bindContext.grid.dataSet : bindContext.dataSet;
						var rowIndex = bindContext.grid ? bindContext.grid.getSelectedRowIndex() : bindContext.rowIndex;
						//프리폼의 상태가 삭제상태이면... 유효성 체크에서 제외함
						if(dataset.getRowState(rowIndex) == cpr.data.tabledata.RowState.DELETED) continue;
						
						if(bindContext.grid){
							valid = this._validateFreeForm(ctrl, isMsgAlert);
						}else{
							valid = this._validateControl(ctrl, null, isMsgAlert);
						}
					}else{
						valid = this._validateControl(ctrl, null, isMsgAlert);
					}
				}else{
					valid = this._validateControl(ctrl, null, isMsgAlert);
				}
				
				if(valid == false) {
					return false;
				}
			}
			
			return true;
		};
		
		AppKit.prototype.validateLayered = function(app, paCtrlId){
		
			if(!(paCtrlId instanceof Array)){
				paCtrlId = [paCtrlId];
			}
			var targetControl = [];
			var errorMsg = "";
			paCtrlId.forEach(function(each){
				var ctrl = app.lookup(each);
				if(ctrl.type === "container" || ctrl.type === "embeddedapp" || ctrl instanceof cpr.controls.UDCBase){
					targetControl = targetControl.concat(this.Control.getAllUiControl(app, ctrl).filter(function(each){
						return !(each.getParent() instanceof cpr.controls.Grid);
					}));
				}
				else{
					targetControl = targetControl.concat([ctrl]);
				}
				
			}.bind(this))
			
			targetControl.forEach(function(each){
				if(each instanceof cpr.controls.Grid){
					errorMsg += this._validateGrid2(each);
				}
				else{
					errorMsg += this._validateControl2(each);
				}
			}.bind(this));
			
			var isValid = _.isEmpty(errorMsg);
			if(!isValid){
				this.Msg.alertDialog(app, errorMsg);
				paCtrlId.forEach(function(each){
					app.lookup(each).userAttr("validationStatus", "invalid")
				});
			}
			
			return isValid;
		}
		
		
		AppKit.prototype._validateControl2 = function(ctrl){
			var ctrlInterface = new CtrlInterface(ctrl, this);
			return this.Validator2.validate(ctrlInterface)
		}
		
		AppKit.prototype._validateGrid2 = function(/* cpr.controls.Grid */ grid){
			var dataSet = grid.dataSet;
			var excludeColTpe= ["checkbox", "roindex"]
			var ctrlInterfaces = [];
			var errMsg = ""
			
			grid.detail.getCellIndices().filter(function(idx){
				var cell = grid.detail.getColumn(idx);
				return cell.columnName && cell.control && !_.include(excludeColTpe, cell.columnType);
			}).forEach(function(filterdIdx){
				var cell = grid.detail.getColumn(filterdIdx);
				ctrlInterfaces.push(new CtrlInterface(cell, this, grid));
			});
			
		
			ctrlInterfaces.forEach(function(each){
				errMsg += this.Validator2.validate(each);
			}.bind(this));
			
			return errMsg
		}
		
		/**
		 * @constructor
		 * @desc 레이어드 벨리데이션 체크시 그리드와 일반컨트롤을 통합하기 위한 인터페이스 클래스
		 * @param {cpr.controls.UIControl || cpr.controls.gridpart.GridColumn} ctrl
		 * @param {AppKit} util
		 * @param {Integer} rowIndex
		 */
		var CtrlInterface = function(ctrl, util, grid){
			this.ctrl = ctrl;
			this.grid = grid;
			this.util = util;
			this.pkCols = grid ? this.grid.dataSet.info : "";
			
			/**
			 * 컨트롤의 값을 가져옵니다.
			 * @param {Number} rowIndex 행 번호(그리드일 경우 사용됨)
			 */
			this.getValue = function(rowIndex){
				if(ctrl instanceof cpr.controls.gridpart.GridDetailColumn){
					return this.ctrl.getControlAttr(rowIndex, "value")
				}
				else{
					return ctrl.value;
				}
			}
			/**
			 * 유효성 체크에 통과하지 못할 경우 css처리를 합니다.
			 * @param {Number} rowIndex 행 번호(그리드일 경우 사용됨)
			 */
			this.addInvalidClass = function(rowIndex){
				if(ctrl instanceof cpr.controls.gridpart.GridColumn){
					rowIndex = rowIndex.replace(/,$/, '');
					this.ctrl.control.style.bindClass().toExpression("[" + rowIndex + "].indexOf(rowIndex) != -1 ? 'invalid' : ''");
				}
				else{
					this.util.Control.addInvalidClass(this.ctrl.getAppInstance(), this.ctrl.id)
				}
			}
			/**
			 * 설정된 invalid class를 제거합니다.
			 */
			this.removeInvalidClass = function(){
				if(ctrl instanceof cpr.controls.gridpart.GridColumn){
					this.ctrl.control.style.unbindClass();
					this.grid.redraw();
				}
				else{
					this.util.Control.removeInvalidClass(this.ctrl.getAppInstance(), this.ctrl.id)
				}
			}
			/**
			 * 컨트롤에 툴팁을 설정합니다.
			 * @param {String} value
			 */
			this.setToolTip = function(value){
				if(ctrl instanceof cpr.controls.gridpart.GridColumn){
					this.ctrl.control.tooltip = value
				}
				else{
					this.ctrl.tooltip = value
				}
			}
			/**
			 * 컨트롤의 툴팁을 반환합니다
			 * @return {String}
			 */
			this.getToolTip = function(){
				if(ctrl instanceof cpr.controls.gridpart.GridColumn){
					return this.ctrl.control.tooltip
				}
				else{
					return this.ctrl.tooltip;
				}
			}
			/**
			 * 컨트롤의 필드라벨을 반환합니다
			 * @return {String}
			 */
			this.getFieldLabel = function(){
				if(ctrl instanceof cpr.controls.gridpart.GridColumn){
					return this.ctrl.control.fieldLabel
				}
				else{
					return this.ctrl.fieldLabel
				}
			}
			/**
			 * 컨트롤의 LengthUnit을 반환합니다
			 * @return {String}
			 */
			this.getLengthUnit = function(){
				if(ctrl instanceof cpr.controls.gridpart.GridColumn){
					return this.ctrl.control.lengthUnit
				}
				else{
					return this.ctrl.lengthUnit;
				}
			}
			/**
			 * 컨트롤의 사용자 속성을 반환힙니다.
			 * @param {String} attrName
			 * @return {String}
			 */
			this.getAttr = function(attrName){
				if(ctrl instanceof cpr.controls.gridpart.GridColumn){
					return this.ctrl.control.userAttr(attrName)
				}
				else{
					return this.ctrl.userAttr(attrName)
				}
			}
		}
		
		/**
		 * 일반 컨트롤에 대한 Validation 체크
		 * @param {cpr.controls.UIControl} ctrl
		 * @param {cpr.controls.UIControl} poParentCtl
		 * @param {Boolean} isMsgAlert validation 메시지 출력 여부
		 * @private
		 */
		AppKit.prototype._validateControl = function(ctrl, poParentCtl, isMsgAlert) {
			if(!ctrl) return true;
			
			var valid = true;
			var _this = this;
			if(ctrl instanceof cpr.controls.Container) { // Group 일 경우 체크
				var children = this._getChildren(ctrl);
				var child;
				for(var i=0, len=children.length; i<len; i++){
					child = children[i];
					// 컨트롤별 Validation Check
					if(this._validateControl(child, ctrl, isMsgAlert) == false) {
						valid = false;
						break;
					}
				}
				return valid;
			} else if(ctrl instanceof cpr.controls.UDCBase){ //UDC인 경우
				var embApp = ctrl.getEmbeddedAppInstance();
				var children = embApp.getContainer().getAllRecursiveChildren();
				var child;
				for(var i=0, len=children.length; i<len; i++){
					child = children[i];
					// 컨트롤별 Validation Check
					if(this._validateControl(child, ctrl, isMsgAlert) == false) {
						valid = false;
						break;
					}
				}
				return valid;
			} else {
				valid = this.Validator.validate(ctrl, ctrl.value, poParentCtl, null, null, null, isMsgAlert);
				if(valid == false) {
					//탭내에 컨트롤이 존재하는 경우... 해당 탭페이지 포커싱
					this._focusToTabItem(ctrl);
					ctrl.focus();
				}
				return valid;
			}
		};
		
		/**
		 * @private
		 * 그리드와 Selection바인딩된 프리폼의 변경된 전체 데이터에 대한 Validation 체크
		 * @param {cpr.controls.Container} poForm 체크할 프리폼 컨트롤객체
		 * @param {Boolean} isMsgAlert validation 메시지 출력 여부
		 * @returns {Boolean}
		 */
		AppKit.prototype._validateFreeForm = function(poForm, isMsgAlert) {
			/** @type cpr.controls.Container */
			var form = poForm;
			if(!form) return false;
			
			var _app = form.getAppInstance();
			
			var bindContext = this.Group.getBindContext(_app, form);
			var grid =  bindContext.grid;
			var dataSet = grid.dataSet;
			var _this = this;
			
			var allChildControls = new Array();
			var getChildRecursive = function(poContainer){
			    var childCtrls = poContainer.getAllRecursiveChildren();
			    for (var i=0, len=childCtrls.length; i<len; i++) {
			        if (childCtrls[i] instanceof cpr.controls.Container ) {
			        	getChildRecursive(childCtrls[i]);
			        }else if(childCtrls[i] instanceof cpr.controls.UDCBase){
			        	var udcApp = childCtrls[i].getEmbeddedAppInstance();
			        	if(udcApp) getChildRecursive(udcApp.getContainer());
			        }else if(childCtrls[i] instanceof cpr.controls.EmbeddedApp){
			        	var embApp = childCtrls[i].getEmbeddedAppInstance();
			        	if(embApp) getChildRecursive(embApp.getContainer());
			        }else {
			        	allChildControls.push(childCtrls[i]);
			        }
			    }
			}
			getChildRecursive(form);
			var allTargetControls = allChildControls.filter(function(ctrl){
				//컬럼 유형이 output이면... SKIP
				if(ctrl == null || ctrl.type == "output" || ctrl.type == "button" || ctrl.type == "img") return false;
				//컨트롤에 Bind된 컬럼이 없으면...SKIP
				var bind = ctrl.getBindInfo("value");
				//20210429 UDC에 포함된 컨트롤 유효성체크위해
				if(bind != null && bind.type == "appproperty") return true;
				
				if(bind == null || bind.type != "datacolumn" || bind.columnName == null) return false;
				
				return true;
			});
			
			var rowIndexs = dataSet.getRowStatedIndices(cpr.data.tabledata.RowState.INSERTED | cpr.data.tabledata.RowState.UPDATED);
			var _this = this;
			var invalid = rowIndexs.some(function(idx) {
				var row = dataSet.getRow(idx);
				/**@type cpr.controls.UIControl */
				var ctrl = null;
				
				for(var i = 0, len = allTargetControls.length; i < len; i++) {
					ctrl = allTargetControls[i];
					//컨트롤에 Bind된 컬럼이 없으면...SKIP
					var bind = ctrl.getBindInfo("value");
					var ctrlValue;
					//20210429 UDC에 포함된 컨트롤 유효성체크위해
					if(bind.type == "appproperty") {
						ctrlValue = row.getValue(ctrl.getAppInstance().getAppPropertyBindInfo("value").columnName);
					} else {
						ctrlValue = row.getValue(bind.columnName);
					}
					//신규행  PK 체크 무시... SKIP
					if(row.getState() == cpr.data.tabledata.RowState.INSERTED && (ctrl.userAttr("ignorePk") == "Y")) continue;
					
					// 컨트롤별 Validation Check
					if(_this.Validator.validate(ctrl, ctrlValue, form, null, null, null, isMsgAlert) == false) {
						//유효성 체크로 인해 selection-change 발생여부 셋팅 
						grid.userAttr("selectionChangeByValidation", "true");
						_this._focusToTabItem(form);
						//탭내에 컨트롤이 존재하는 경우... 해당 탭페이지 포커싱
						grid.selectRows(idx);
						_app.focus(ctrl);
						
						return true;
					}
				}
				return false;
			});
			if(invalid == true) {
				return false;
			}
			
			return true;
		};
		
		/**
		 * Grid의 변경된 전체 데이터에 대한 Validation 체크<br>
		 * - 사이트별 Customizing 필요<br>
		 * 가능한 한 Validation 체크시 validate 메소드를 사용
		 * @param {cpr.controls.Grid} poGrid 체크할 Grid
		 * @param {"all" | "modify" | "current"} dataScope all:그리드의 전체 데이터, modify:변경된 전체 Row, current:현재  Row
		 * @param {Boolean} isMsgAlert validation 메시지 출력 여부
		 * @returns {Boolean}
		 * @private
		 */
		AppKit.prototype._validateGrid = function(poGrid, dataScope, isMsgAlert) {
			dataScope = dataScope != null ? dataScope : "modify";
			/** @type cpr.controls.Grid */
			var grd = poGrid;
			if(!grd) return false;
			
			var vsDataBindCtxId = grd.userAttr("bindDataFormId");
			
			var _this = this;
			/**
			 * @type cpr.controls.gridpart.GridBand
			 */
			var detailBand = grd.detail;
			var cellCnt = detailBand.cellCount;
			
			/**
			 * @type cpr.data.DataSet
			 */
			var dataSet = grd.dataSet;
			var rowIndexs = null;
			if(dataScope == "all"){
				rowIndexs = dataSet.getRowStatedIndices(cpr.data.tabledata.RowState.INSERTED | cpr.data.tabledata.RowState.UPDATED | cpr.data.tabledata.RowState.DELETED | cpr.data.tabledata.RowState.UNCHANGED);
			}else{
				rowIndexs = dataSet.getRowStatedIndices(cpr.data.tabledata.RowState.INSERTED | cpr.data.tabledata.RowState.UPDATED);
			}
			var _this = this;
			var invalid = rowIndexs.some(function(idx) {
				var row = dataSet.getRow(idx);
				var col = null;
				for(var i = 0; i < cellCnt; i++) {
					/**  @type cpr.controls.gridpart.GridColumn */
					col = detailBand.getColumn(i);
					//컬럼 매핑노드가 없으면... SKIP
					if(col.columnName == null || col.columnName == "") continue;
					if(col.columnType == "checkbox" || col.columnType == "rowindex") continue;
					//컬럼 유형이 output이면... SKIP
					if(col.controlType == null || col.controlType == "output" || col.controlType == "button" || col.controlType == "img") continue;
					//신규행  PK 체크 무시... SKIP
					if(row.getState() == cpr.data.tabledata.RowState.INSERTED && (col.control && col.control.userAttr("ignorePk") == "Y")) continue;
					
					// 컨트롤별 Validation Check
					if(_this.Validator.validate(col.control, row.getValue(col.columnName), grd, idx, i, null, isMsgAlert) == false) {
						//유효성 체크로 인해 selection-change 발생여부 셋팅 
						grd.userAttr("selectionChangeByValidation", "true");
						//탭내에 컨트롤이 존재하는 경우... 해당 탭페이지 포커싱
						_this._focusToTabItem(grd);
						if(ValueUtil.isNull(vsDataBindCtxId)){
							grd.setEditRowIndex(idx, true);
							grd.focusCell(idx, i);
							//포커싱할 컬럼이 UDC인 경우에...
							var dctrl = grd.detail.getColumn(i).control;
							if(dctrl instanceof cpr.controls.UDCBase){
								var empApp = dctrl.getEmbeddedAppInstance();
								dctrl = AppUtil.getUDCBindValueControl(dctrl);
								if(dctrl) empApp.focus(dctrl.id);
							}
						}else{
							grd.selectRows(idx);
							var cctrl = _this.Group.getDataBindedControl(dataSet.getAppInstance(), vsDataBindCtxId, col.columnName);
							if(cctrl) _this.Control.setFocus(cctrl.getAppInstance(), cctrl.id);
						}
						
						return true;
					}
				}
				return false;
			});
			if(invalid == true) {
				return false;
			}
			
			return true;
		};
		
		
		
		/**
		 * 모바일 여부
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 */
		AppKit.prototype.isMobile = function(app) {
			var userAgent = navigator.userAgent.toLowerCase();
			if(userAgent.indexOf("mobile")>-1){
				return true;
			}
			return false;
		}
		
		
		/**
		 * Validation 체크시 컨트롤이 속한 탭폴더 선택용
		 * @param {cpr.controls.UIControl} ctrl 컨트롤 객체
		 * @private
		 */
		AppKit.prototype._focusToTabItem = function(ctrl) {
			/**@type cpr.controls.TabFolder */
			var tab = null;
			ctrl.findParent(function(pctrl){
				if(pctrl instanceof cpr.controls.TabFolder){
					tab = pctrl;
					return true;
				}
				return false;
			});
			if(tab){
				var tabItem = null;
				var tabItems = tab.getTabItems();
				ctrl.findParent(function(pctrl){
					tabItems.some(function(each){
						if( each.content == pctrl){
							tabItem = each;
							return true;
						}
						return false;
					});
					return tabItem != null;
				});
				if(tabItem && tabItem != tab.getSelectedTabItem()){
					tab.setSelectedTabItem(tabItem);
				}
			}
		};
		
		/**
		 * 그룹 컨트롤내의 자식 컨트롤 목록을 반환한다.
		 * @param {cpr.controls.Container} pcGroup 그룹컨트롤
		 * @private
		 */
		AppKit.prototype._getChildren = function(pcGroup) {
			var children = pcGroup.getAllRecursiveChildren();
			function getNextControls(each,children){
				var order = [each];
				var next = each;
				while(next != null){
					next = next.getNextControl();
					if(next != null && children.indexOf(next) > -1 && order.indexOf(next) == -1) order.push(next);
					else next = null;
				}
				return order;
			} 
			
			var orderCtrls = [];
			children.forEach(function(each){
				if(children.indexOf(each.getPrevControl()) ==-1 && each.getNextControl() != null){
					orderCtrls = getNextControls(each,children);
				}
			});
			
			var etcCtrls = [];
			children.forEach(function(each){
				if(orderCtrls.indexOf(each) == -1){
					etcCtrls.push(each);
				}
			});
			
			return orderCtrls.concat(etcCtrls);
		};
		
		var activeMsg = [];
		/**
		 * 
		 * @param {String} msgType alert (확인버튼) , confirm (확인, 취소 버튼)
		 * @param {String} msgText 메시지 내용을 보여주고 관련하여 \n으로 입력시 다음행에서 
		 * @param {Function} callFunClose 확인을 클릭시 동작하는 내용 
		 * @param {Function} callFunReset 초기화를 클릭시 동작하는 내용 
		 * @param {Function} callFunCancel 취소을 클릭시 동작하는 내용 
		 * @param {String} closeBtnValue 확인버튼 "확인" 값 커스텀 (Optional)
		 * @param {String} resetBtnValue 초기화버튼 "초기화" 값 커스텀 (Optional)
		 * @param {String} cancleBtnValue 취소버튼 "취소" 값 커스텀 (Optional)
		 * @param {psTitle} psTitle  메시지 영역의 타이틀 명  (Optional) 
		 * @param {psClassNm} psClassNm  메시지 영역 스타일에 대한 클래스를 추가  (Optional) 
		 */
		AppKit.prototype.showMsg = function(app, msgType, msgText, callFunClose, callFunReset, callFunCancel, closeBtnValue, resetBtnValue, cancleBtnValue, psTitle, psClassNm) {
			var showConstraint = {
				"position": "absolute",
				"top": "0",
				"bottom": "0",
				"left": "0",
				"right": "0"
			};
			
			/** 
			 * @type cpr.controls.VisibleUIControl
			 */
			var msg = null;
			
		//	if (msgType == "confirm") {
		//		msg = new udc.com.comMsgConfirm("___confirm___");
		//		
		//		if(ValueUtil.fixNull(cancleBtnValue) != ""){
		//			msg.getUDCApp().lookup("btnCancle").value = cancleBtnValue;
		//		}
		//		if(ValueUtil.fixNull(closeBtnValue) != ""){
		//			msg.getUDCApp().lookup("btnConfirm").value = closeBtnValue;
		//		}
		//		
		//		if(callFunCancel) msg.addEventListenerOnce("cancel", callFunCancel);
		//		 msg.addEventListenerOnce("cancel", this.hideMsg );			
		//	} else if(msgType == "alert"){	
		//		msg = new udc.com.comMsgAlert("___alert___");
		//		
		//		if(ValueUtil.fixNull(closeBtnValue) != ""){
		//			msg.getUDCApp().lookup("btnConfirm").value = closeBtnValue;
		//		}
		//
		//	}
			
				if (msgType == "confirm") {
					msg = new udc.com.comMsgDlg("___confirm___");
					
					if(ValueUtil.fixNull(cancleBtnValue) != ""){
						msg.getUDCApp().lookup("btnCancle").value = cancleBtnValue;
					}
					if(ValueUtil.fixNull(closeBtnValue) != ""){
						msg.getUDCApp().lookup("btnConfirm").value = closeBtnValue;
					}
					
					if(callFunCancel) msg.addEventListenerOnce("cancel", callFunCancel);
					 msg.addEventListenerOnce("cancel", this.hideMsg );			
				} else {	
					msg = new udc.com.comMsgDlg("___alert___");
					
					if(ValueUtil.fixNull(closeBtnValue) != ""){
						msg.getUDCApp().lookup("btnConfirm").value = closeBtnValue;
					}
					msg.getUDCApp().lookup("btnCancle").visible = false;
				}
		//
		
			if (callFunClose) msg.addEventListenerOnce("close", callFunClose);
			msg.addEventListenerOnce("close", this.hideMsg);		
			
			
			// 메시지 내용을 복사 
			if (msgText) msg.setMsgText(msgText);
			msg.style.css(showConstraint);
			msg.visible = true;
			if(psTitle) msg.setMsgTitle(psTitle); 
			// style을 부가적으로 설정하도록
			if(psClassNm) msg.addClassMsgText(psClassNm);
		
			// 로드 마스크를 플로팅 시킴
			app.getRootAppInstance().floatControl(msg);
			
			activeMsg.push(msg);	
		
		};
		
		/**
		 *  열린 메시지 창이 있는 경우 닫는다.
		 */
		AppKit.prototype.hideMsg = function(e) {
			var actMsg = activeMsg;
			
			for(var i=0; i< actMsg.length; i++) {
				if(actMsg[i] != e.control) continue;	
				
				
				var msg = actMsg[i];
				
				// 띄울 메시지가 존재하는 경우에만 숨긴다. 
				if (msg) {
					// 로드 마스크가 UDC 혹은 임베디드 앱인 경우.
					if (msg instanceof cpr.controls.EmbeddedApp) {
						// end 메서드를 출판 했으면 호출 해 줌.
						if (msg.hasAppMethod("end")) {
							msg.callAppMethod("end");
						}
					}
				
				
					// 로드마스크가 앱에 귀속된 것이라면 원래 위치로 되돌림.
					if (this._msgOriginalConstraint && this._msgParent) {
						this._appKit.getRootApp(_app).removeFloatingControl(msg);
						this._msgParent.addChild(msg, this._msgOriginalConstraint);
						this._msgParent = null;
						this._msgConstraint = null;
						msg.visible = false;
					}
				
					// 새로 생성되었던 로드 마스크라면 파기 시킴.
					else {
						msg.dispose();
					}
					
					activeMsg.slice(activeMsg.indexOf(msg), 1);
					
				}
			}
		};
		
		/**
		 * 권한 유틸
		 * @constructor
		 * @param {common.module} appKit
		 */
		function AppAuthKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 메뉴 정보 취득<br>
		 * - 사이트별 Customizing 필요<br>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} psMenuType?  메뉴 정보 TYPE
		 *                 생략시 메뉴 정보 MAP 리턴
		 * @returns 
		 *          {cpr.utils.ObjectMap}  psMenuType 생략시 <br>
					getMenuInfo.get("MENU_ID");				//메뉴ID<br>
					getMenuInfo.get("PGM_ID");					//프로그램ID<br>
					getMenuInfo.get("MENU_NM");				//메뉴명<br>
		 */
		AppAuthKit.prototype.getMenuInfo = function(app, psMenuType){
			var voMap = new cpr.utils.ObjectMap();
			var _mainApp = this._appKit.getMainApp(app);
			var vsData = null;
			/** @type cpr.controls.MDIFolder */
			var vcMdi = _mainApp.lookup("mdiCn");
			if(vcMdi){
				var vcTabItem = vcMdi.getSelectedTabItem();
				if(vcTabItem != null){
					vsData = vcTabItem.userAttr("__menuInfo");
					_mainApp.__menuInfo = vsData;
				}
			}
			if(!ValueUtil.isNull(vsData)){
				var voData = JSON.parse(vsData);
				if(psMenuType != null){
					return ValueUtil.fixNull(voData[psMenuType]);
				}else{
					for(var key in voData){
						voMap.put(key, ValueUtil.fixNull(voData[key]));
					}
					return voMap;
				}
			}else{
				return voMap;
			}
		};
		
		/**
		 * 메뉴를 바로 오픈할 경우 부모페이지에서 전달한 파라미터를 꺼내는 함수 (JSON 형태로 리턴됨)
		 * 
		 * [ 메뉴 파람 담는 법 및 메뉴 다이렉트 오픈 예제 ]
		 * var voParam = { SUBJ_NO : util.Grid.getCellValue(app, "grdMain", "SUBJ_NO")};
		 * util.MDI.open(app, "rptCSubjMstMng", voParam);
		 * 
		 * [ 사용법 ]
		 * var voMenuParam = util.Auth.getMenuParam(app);
		 * var vsSubjNo = voMenuParam.SUBJ_NO;
		 * 
		 * - 사이트별 Customizing 필요 
		 *    Root App에 getMenuParam 메소드 생성 필요
		 * @param {cpr.core.AppInstance} app
		 * 
		 */
		AppAuthKit.prototype.getMenuParam = function(app) {
		    var _mainApp = this._appKit.getMainApp(app);
		    if(_mainApp.hasAppMethod("getMenuParam")){
		    	var menuParam = _mainApp.callAppMethod("getMenuParam");
		    	if(ValueUtil.isNull(menuParam)) {
		    		return null;
		    	}else {
			        return JSON.parse(_mainApp.callAppMethod("getMenuParam"));
		    	}
		    }
		};
		
		/**
		 * 로그인 사용자의 정보를 취득<br>
		 * - 사이트별 Customizing 필요 <br>
		 *   Root App에 getUserInfo 생성 필요.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} psUserInfoType? 사용자정보 TYPE 세션정보 참고
		 * 					   또는 <br>
		 * 					   var mapUserInfo = util.getUserInfo();<br>
		 * 					   mapUserInfo.get("USER_ID");<br>
		 * @returns {String | cpr.data.DataMap} psUserInfoType 미지정시 Map 형태의 사용자 정보 리턴 
		 */
		AppAuthKit.prototype.getUserInfo = function(app, psUserInfoType) {
			var _mainApp = this._appKit.getMainApp(app);
			if(_mainApp.hasAppMethod("getUserInfo")){
				if(ValueUtil.isNull(psUserInfoType)){
					return _mainApp.callAppMethod("getUserInfo");
				}else{
					return _mainApp.callAppMethod("getUserInfo", [psUserInfoType]);
				}
			}
		};
		
		
		
		
		
		globals.createCommonUtil = function(){
				return new AppKit();
		};
		
		
		// 모든 selection-change 이벤트시 그리드에 대한  필터 추가(for. 그리드의 선택된 로우가 없을 경우 이벤트 전파 차단)
		//- 사이트별 Customizing 필요
		//cpr.events.EventBus.INSTANCE.addFilter("selection-change", function(e) {
		//    // 이벤트를 발생 시킨 컨트롤
		//    var control = e.control;
		//    /** @type cpr.core.AppInstance */
		//    var _app = control.getAppInstance();
		//    
		//    // 이벤트 발송자가 그리드 이고.
		//    if (control instanceof cpr.controls.Grid) {
		//    	/** @type cpr.controls.Grid */
		//    	var grid = control;
		//    	if(grid.selectionUnit == "cell" && grid.getSelectedIndices()[0] == null){
		//    		 e.stopPropagation();
		//    	}else{
		//    		var rowIndex = grid.selectionUnit != "cell" ? grid.getSelectedRowIndex() : grid.getSelectedIndices()[0]["rowIndex"];
		//	        // 그리드 선택 ROW가 -1이라면...
		//	        if (rowIndex < 0) {
		//	            // 이벤트 전파를 차단시킵니다.
		//	            e.stopPropagation();
		//	        }
		//    	}
		//    }
		//});
		
		
		
		// 모든 before-selection-change 이벤트에시 그리드에 대한  필터만 추가.(for. 그리드의 선택된 로우가 없을 경우 이벤트 전파 차단)
		//- 사이트별 Customizing 필요
		//cpr.events.EventBus.INSTANCE.addFilter("before-selection-change", function(e) {
		//    // 이벤트를 발생 시킨 컨트롤
		//    var control = e.control;
		//    /** @type cpr.core.AppInstance */
		//    var _app = control.getAppInstance();
		//    
		//    // 이벤트 발송자가 그리드 이고.
		//    if (control instanceof cpr.controls.Grid) {
		//    	// 테스트 화면의 경우 이벤트 적용 안함
		//    	if(e.newSelection[0] == null || e.newSelection[0] == undefined){
		//    		// 이벤트 전파를 차단시킵니다.
		//            e.stopPropagation();
		//		}
		//    }
		//});
		
		//모든 before-value-change 이벤트에시 인풋박스에 대한 대소문자 자동변환. (사용자정의 속성에 inputLetter 지정 필요)
		//- 사이트별 Customizing 필요
		//cpr.events.EventBus.INSTANCE.addFilter("before-value-change", function(e) {
		//    // 이벤트를 발생 시킨 컨트롤
		//    var control = e.control;
		//    /** @type cpr.core.AppInstance */
		//    
		//    // 이벤트 발송자가 인풋박스이면.
		//    if (control.type === "inputbox") {
		//    	var inputLetter = control.userAttr("inputLetter");
		//		if (inputLetter == "uppercase") {
		//			if (/[a-z]/g.test(e.newValue)) {
		//				var newValue = e.newValue.toUpperCase();
		//				control.value = newValue;
		//				e.preventDefault();
		//				e.stopPropagation();
		//			}
		//		} else if (inputLetter == "lowercase") {
		//			if (/[A-Z]/g.test(e.newValue)) {
		//				var newValue = e.newValue.toLowerCase();
		//				control.value = newValue;
		//				e.preventDefault();
		//				e.stopPropagation();
		//			}
		//		}
		//    }
		//});
		
		cpr.core.Platform.INSTANCE.onerror = function(report){
			//console.log(JSON.stringify(report.stack, null, "  "));
		};
		
		//round 함수
		//cpr.expression.ExpressionEngine.INSTANCE.registerFunction("getRound", function(value, position) {
		//	if(isNaN(value)) return 0;
		//	else if(value == Infinity || value == -Infinity) return 0;
		//	if(position == undefined || position == null) return Math.round(value);
		//	else return Math.round(value * (10 * position))/(10 * position);
		//});
		////floor 함수
		//cpr.expression.ExpressionEngine.INSTANCE.registerFunction("getFloor", function(value, position) {
		//	if(isNaN(value)) return 0;
		//	else if(value == Infinity || value == -Infinity) return 0;
		//	if(position == undefined || position == null) return Math.floor(value);
		//	else return Math.floor(value * (10 * position))/(10 * position);
		//});
		////숫자 천단위 콤마 포맷
		//cpr.expression.ExpressionEngine.INSTANCE.registerFunction("formatToNumber", function(value) {
		//	if(isNaN(value)) return value;
		//	return new String(value).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		//});
	});
})();
/// end - module/common
/// start - module/createNewAppIns
/*
 * Module URI: module/createNewAppIns
 * SRC: module/createNewAppIns.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/createNewAppIns", function(exports, globals, module){
		/************************************************
		 * createNewAppIns.module.js
		 * Created at 2019. 11. 15. 오전 9:46:36.
		 * 
		 * @author kjh
		 ************************************************/
		
		/*
		 * 런타임 시 테스트 관정을 지원하기 위하여 현재의 dataSet 및 dataMap의 값 및 상태를 조회할 수 있는 기능을 제공하는 공통모듈입니다.
		 * 화면 로드시 단축키(기본 ctrl+alt+a) 를 누르면 팝업을 통해 확인 할 수 있습니다.
		 * 
		 * ※ 주의사항
		 * 해당 모듈은 테스트를 위한 모듈입니다.
		 * 운영서버 배포시에는 이를 포함하여 서버에 배포하시면 안됩니다. (보안상의 문제 발생 소지가 있습니다.)
		 */
		
		
		/************************************************
		 * 전역 변수 (변경 가능)
		 ************************************************/
		/**
		 * 모듈 사용 여부
		 * true일 경우에만 데이터 컴포넌트를 확인할 수 있는 앱 생성 및 단축키를 지원합니다.
		 * @type {Boolean}
		 */
		var mbCreateApp = true; 
		
		/**
		 * 컨트롤 height
		 * @type {String}
		 */
		var msRowHeight = "28px";
		
		/**
		 * 마지막 단축키
		 * default : Ctrl+Alt+A
		 * @type {cpr.events.KeyCode}
		 */
		var msDynamicKey = cpr.events.KeyCode.A;
		
		/**
		 * 팝업에서 데이터맵을 보여줄 때 생성되는 그룹의 클래스명
		 * @type {String}
		 */
		var msFormCls = "cl-form-group";
		
		/**
		 * 팝업에서 데이터맵을 보여줄 때 생성되는 아웃풋의 클래스명
		 * @type {String}
		 */
		var msOptCls = "text-center";
		
		
		/************************************************
		 * 전역 변수 (변경 불가능)
		 ************************************************/
		/**
		 * 앱인스턴스
		 * @type {cpr.core.AppInstance}
		 */
		var moAppInstance = null;
		
		/**
		 * 그리드 (데이터셋) || 그룹 (데이터맵)
		 * @type {cpr.controls.Container|cpr.controls.Grid}
		 */
		var mcControl = null;
		
		/**
		 * 동적으로 생성한 다이얼로그 앱 ID
		 * @type {String}
		 */
		var msAppId = null;
		
		/**
		 * 임베디드 앱인스턴스 객체
		 * @type {cpr.core.AppInstance}
		 */
		var moEmbedded = null;
		
		/**
		 * 다이얼로그가 띄워졌는지 여부
		 * @type {Boolean}
		 */
		var mbPopup = false;
		
		/**
		 * 다이얼로그 앱
		 * @type {cpr.core.AppInstance}
		 */
		var moDialogApp = null;
		
		/**
		 * 
		 * @type {Array}
		 */
		var maAppInstance = []; 
		
		/**
		 * @type {cpr.core.AppInstance}
		 */
		var rootApp
		/**
		 * 
		 * @type {Array}
		 */
		var maDatasetId = [];
		
		/************************************************
		 * 이벤트 리스너
		 ************************************************/
		
		/**
		 * 팝업을 열기위한 단축키를 지정합니다.<br>
		 * 단축키 : Ctrl + Alt + A (default)
		 */
		window.addEventListener("keydown", function (e) {
			if(e.ctrlKey && e.altKey && e.keyCode == msDynamicKey) {
				/** @type {cpr.core.AppInstance} **/
				var mainApp = cpr.core.Platform.INSTANCE.getAllLoadedApps().find(function(each){
					return each.id === "app/com/main/main"
				}).getInstances()[0]
		
				/** @type {cpr.controls.MDIFolder} **/ 
				var mdi = mainApp.lookup("mdiCn");
				var activeApp = mdi.getSelectedTabItem().content.getEmbeddedAppInstance();
				var menuRow = mainApp.lookup("dsAllMenu").findFirstRow("CALL_PAGE =='" + activeApp.app.id + "'");
		
				var allApps = AppInstancePicker.pick([activeApp]);
				var allDataControls = DataControlPicker.pick(allApps);
				
				var param = {
					menuId : activeApp.app.id,
					menuNm : menuRow ? menuRow.getString("MENU_NM") : activeApp.app.title,
					childApp : allApps,
					dataControls : allDataControls
				}
				var dialogProp = {
					width : 1200,
					height : 700
				}
				mainApp.openDialog("app/cmn/cmnDataFiddle", dialogProp, function(/* cpr.controls.Dialog */dialog) {
					dialog.app.isPopup = true;
					dialog.app.modal = true;
					dialog._originWidth = dialogProp["width"];
					dialog._originHeight = dialogProp["height"];
				
					if (dialog.app.title) { 
						dialog.headerTitle = dialog.app.title;
					}
		
					dialog.initValue = param;
					
				})
			}
		});
		
		
		var DataControlPicker = {
			
			/**
			 * app의 데이터컨트롤을 모두 추출하는 기능
			 * @param {cpr.core.AppInstance[]} targetApp
			 */
			pick : function(apps){
				var result = []
				apps.forEach(function(/* cpr.core.AppInstance */ each){
					result = result.concat(each.getAllDataControls().filter(function(each){
						return !(each instanceof cpr.protocols.Submission);
					}));
				});
				
				return result;
			}
		}
		
		var AppInstancePicker = {
			/**
			 * 
			 * @param {cpr.core.AppInstance[]} startApp
			 * @param {Array} resArray
			 */
			pick : function(startApp, resArray){
				resArray = resArray || startApp;
				
				var appInstances = [];
				
				startApp.forEach(function(each){
					appInstances = appInstances.concat(
						each.getContainer().getAllRecursiveChildren().filter(function(ctrl){
								return ctrl.type === "embeddedapp" || ctrl instanceof cpr.controls.UDCBase
						}).map(function(emb){
							return emb.getEmbeddedAppInstance();
						})
					)
				});
				
				return appInstances.length === 0 ? resArray : this.pick(appInstances, resArray.concat(appInstances))
			}
		}
		
		
		
	});
})();
/// end - module/createNewAppIns
/// start - module/CtrlCopy
/*
 * Module URI: module/CtrlCopy
 * SRC: module/CtrlCopy.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/CtrlCopy", function(exports, globals, module){
		/************************************************
		 * CtrlCopy.module.js
		 * Created at 2021. 4. 27. 오후 1:07:57.
		 *
		 * Version 1.0
		 * Updated Date : 2021-09-23
		 * 
		 * @author kjh
		 ************************************************/
		
		/*
		 * 컨트롤을 복사하는 기능을 제공하는 모듈입니다.
		 * 각 컨트롤과 UDC, 그룹 을 카피 할 수 있으며, 해당 컨트롤의 속성,스타일,사용자속성,바인딩,이벤트 모두 동일하게 복사합니다.
		 * 모듈을 통해 복사한 컨트롤 개체를 리턴하며, 복사된 컨트롤을 스크립트를 통해 직접 추가하여 사용합니다.
		 * 
		 * 복사방식은 총 2가지 입니다.
		 * 1. 일반 컨트롤 복사 / 그룹 컨트롤 복사
		 * 		copy API 를 통해 컨트롤 복사합니다. 
		 * 		컨트롤 타입이 container 여부를 따라 내부적으로 그룹복사 또는 일반컨트롤 복사로 나뉩니다
		 * 		복사 가능한 컨트롤 : 인풋박스, 데이트인풋, 넘버에디터, 버튼, 마스크에디터, 아웃풋, 체크박스, 콤보박스, 라디오버튼, 체크박스그룹, 텍스트에리어, 이미지, HTML스니펫, 그룹, UDC
		 * 
		 * 2. 그리드 컨트롤 복사
		 * 		그리드는 폼레이아웃 그룹을 통해 동일한 형태로 확인 할 수 있습니다. (3가지 타입)
		 * 		단, 행/열 병합은 지원하지 않습니다.
		 * 
		 * 		2-1) origin
		 * 		런타임에 보여지는 그리드와 똑같은 형태로 복사합니다.
		 * 		단, 그리드 형태와 동일하지만 폼레이아웃으로 이루어져 있습니다.
		 * 
		 * 		2-2) detail
		 * 		그리드에서 선택된 행의 디테일 정보를 프리폼 형태로 복사합니다.
		 * 		선택된 행이 없을 경우 첫번째 행을 선택하여 보여줍니다.
		 * 
		 * 		2-3) page
		 * 		detail 에서 제공하는 동일한 형태에서 타이틀 및 페이지 컨트롤을 함께 제공합니다.
		 * 		옵션을 통해 타이틀과 페이징에 대한 보임 여부, 스타일 등을 설정 할 수 있습니다.
		 */
		
		
		/************************************************
		 * 전역변수
		 ************************************************/
		/**
		 * 멀티헤더 유지 사용자 속성명(그리드를 폼레이아웃 형태로 카피할 때 사용)
		 * true 일 경우 멀티헤더개수 만큼 셀을 생성합니다.
		 * false 인 경우 한 셀에 msDelimiter 에 설정한 값을 구분자로 한 셀에 헤더 텍스트를 표현합니다.
		 */
		var ATTR_MAINTAIN_MULTI_HEADER = "maintain-multi-header"
		
		/**
		 * 멀티 헤더 텍스트 구분자
		 */
		var msDelimiter = " ";
		
		/**
		 * 복사 컨트롤 아이디 정책
		 */
		var CopyIdConfig = {
			ctrl : "_tmp_copy",
			grid : "_tmp_copy_grid",
		}
		
		
		/************************************************
		 * 이벤트리스너 캐치
		 ************************************************/
		cpr.controls.Control.prototype._addEventListener = cpr.controls.Control.prototype.addEventListener
		cpr.controls.Control.prototype.addEventListener = function(type, listener){
			
			this._addEventListener(type, listener)
			
			if (!this._eventListenerList) this._eventListenerList = {};
			if (!this._eventListenerList[type]) this._eventListenerList[type] = [];
			
			this._eventListenerList[type].push(listener);
		}
		
		
		/************************************************
		 * ctrlCopy
		 ************************************************/
		/**
		 * @return {CtrlCopyModule}
		 */
		globals.createCtrlCopyModule = function(){
			return new CtrlCopyModule();
		}
		
		var CtrlCopyModule = function(){
			var ctrlCopier = new SingleCtrlCopier();
			var containerCopier = new ContainerCopier(ctrlCopier);
			var gridConverter = new GridConverter(ctrlCopier);
			/**
			 * 파라미터로 받은 컨트롤을 복사해 새로운 컨트롤을 리턴합니다.
			 * @param {cpr.controls.UIControl} ctrl
			 * @return {cpr.controls.UIControl}
			 */
			this.copy = function(ctrl){
				if(ctrl.type === "container"){
					return containerCopier.copy(ctrl, gridConverter);
				}
				else{
					return ctrlCopier.copy(ctrl)
				}
			}
			
			/**
			 * 파라미터로 받은 그리드와 동일한 UI를가진 폼레이아웃을 생성하여 리턴합니다.
			 * @param {cpr.controls.Grid} targetGrid 
			 * @param {String} convertType? 변환 타입 (origin | detail | page), default origin
			 * @param {Number} pnRowHeight? 폼레이아웃의 행높이( convertType 이 detail 일 경우 사용)
			 * @param {
			 *   showTitle : Boolean <!-- 그리드 타이틀 및 총 행 개수를 표시합니다. ( 타이틀은 그리드의 fieldLabel 속성 값을 표시합니다, default true) -->,
			 *   titleClass : #css-class <!-- 타이틀 스타일 클래스를 설정합니다. -->,
			 *   showCount : Boolean <!-- 총 건수를 표시합니다. (default true)-->,
			 *   countClass :#css-class <!-- 총 건수 표시 스타일 클래스를 설정합니다. -->,
			 *   showPageIndex : Boolean <!-- 페이지인덱서를 추가합니다. (default true) -->,
			 *   pageIndexClass : #css-class <!-- 페이지인덱서 스타일 클래스를 설정합니다.-->,
			 *   groupClass : #css-class <!-- 타이틀, 폼레이아웃, 페이지인덱서를 포함하는 그룹의 스타일 클래스를 설정합니다. -->,
			 *   titleUDC : cpr.controls.UDCBase <!-- 타이틀에 추가 할 UDC -->
			 * } poOption? converType 이 page 일 때 페이징 옵션, 
			 */
			this.convertGridToForm = function(/* cpr.controls.Grid */ targetGrid, convertType, pnRowHeight, poOption){
				gridConverter.setGrid(targetGrid);
				
				if(!convertType || convertType === "origin"){
					return gridConverter.fillCtrl(gridConverter.buildOriginFormArea());
				}
				else if (convertType === "page") {
					var vcDetailForm = gridConverter.buildDetailFormArea(pnRowHeight);
					return gridConverter.buildGroupArea(vcDetailForm, poOption);
				}
				else{
					return gridConverter.buildDetailFormArea(pnRowHeight);
				}
				
			}
		}
		
		/**
		 * Container 복사담당 class
		 * @param {CtrlCopier} pSinglectrlCopier
		 */
		var ContainerCopier = function(/* CtrlCopier */ pSinglectrlCopier){
			
			var singleCtrlCopier = pSinglectrlCopier;
			
			/**
			 * 그룹을 복사합니다.
			 * @param {cpr.controls.Container} originGrp
			 * @param {GridConverter} pGridCopier
			 */
			this.copy = function(originGrp, pGridCopier){
				
				if(originGrp.type !== "container") return;
		
				/**
				 * @type {cpr.controls.Container}
				 */
				var tmpGrp = singleCtrlCopier.copy(originGrp);
				var childrens = originGrp.getChildren();
				var that = this;
				
				var gridConverter = pGridCopier;
				childrens.forEach(function(child){
					
					var childConstraint = originGrp.getConstraint(child);
		
					if(child.type === "grid") {
						gridConverter.setGrid(child);
						var tmpGrid = gridConverter.fillCtrl(gridConverter.buildOriginFormArea());
						tmpGrp.addChild(tmpGrid, _.clone(childConstraint));
					} else {
						var tmpChild = that.buildRecursiveContainer(child);
						if(tmpChild) {
							tmpGrp.addChild(tmpChild, _.clone(childConstraint));
						}
					}
				});
				
				return tmpGrp;
			}
			/**
			 * 그룹의 모든 자식을 재귀적으로 추가시켜 리턴합니다.
			 * @param {cpr.controls.Container} ctrl
			 * @param {cpr.controls.Container} tmpCtrl
			 */
			this.buildRecursiveContainer = function(ctrl, tmpCtrl){
				var tmpCtrl = tmpCtrl ? tmpCtrl : singleCtrlCopier.copy(ctrl, true);
				if(ctrl.type !== "container") return tmpCtrl;
		
				var children = ctrl.getChildren();
				var that = this;
				
				children.forEach(function(child){
					var tmpChild = singleCtrlCopier.copy(child);
					
					if(tmpChild) {
						tmpCtrl.addChild(tmpChild, _.clone(ctrl.getConstraint(child)))
						if(child.type === "container"){
							that.buildRecursiveContainer(child, tmpChild);
						}
					}
		
				})
				
				return tmpCtrl;
			}
		}
		
		
		/**
		 * @constructor
		 */
		var SingleCtrlCopier = function(){
			
			/**
			 * 파라미터로 받은 컨트롤과 동일한 속성을 가진 컨트롤을 리턴합니다.
			 * @param {cpr.controls.UIControl} ctrl
			 * @return {cpr.controls.UIControl}
			 */
			this.copy = function(ctrl, pbContainerCopy){
				if(!(ctrl instanceof cpr.controls.UIControl)) return;
		
				//STEP1 - 파라미터로 받은 컨트롤의 생성자함수로 동일한 유형의 컨트롤 생성
				var tmpObj;
				var vsCopyId = _makeCopyCtrlId(ctrl);
		
				if(ctrl instanceof cpr.controls.UDCBase){
					var udcTypeSplit = ctrl.type.split(".");
					var udcType = udcTypeSplit.splice(1, udcTypeSplit.length);
					
					udcType.forEach(function(each){
						if(!tmpObj) tmpObj = udc[each];
						else if(tmpObj[each] instanceof Function) tmpObj = new tmpObj[each](vsCopyId);
						else tmpObj = tmpObj[each];
					});
					
				}
				else{
					/**
					 * @type cpr.controls.UIControl
					 */
					tmpObj = new ctrl.constructor(vsCopyId);
				}
		
				var userDataKeys = Object.keys(ctrl.userData());
				var userAttrKeys = Object.keys(ctrl.userAttr());
				
				//STEP2 - 기본속성 복사(현재 CtrlPropertyConfig객체에서 받아오고있는 property정보를 스크립트로 긁어올 수 있는지 확인 필요)
				//      - BasePropertyFactory에 프로퍼티 복사작업 위임 [2021-04-28 kjh]
				var copyProp = BasePropertyFactory.copyProperty(tmpObj.type, ctrl, tmpObj);
				if(!copyProp) {
					if(!pbContainerCopy || pbContainerCopy === false) {
						alert(ctrl.type + " 은(는) 복사를 지원하지 않습니다.");
					}
					tmpObj = null;
					return;
				}
				
				//STEP3 - userData복사(userData에 Object값도 들어갈 수 있으므로 얕은복사로 진행해도 되는지 확인필요)
				userDataKeys.forEach(function(key){
					tmpObj.userData(key, _.clone(ctrl.userData(key)));	
				});
				
				//STEP4 - userAttr복사
				userAttrKeys.forEach(function(key){
					tmpObj.userAttr(key, _.clone(ctrl.userAttr(key)));
				});
				
				//STEP5 - style복사
				tmpObj.style.setClasses(ctrl.style.getClasses());
				tmpObj.style.css(ctrl.style.css());
				
				//STEP6- 이벤트정보 복사 -> exbuilder API로 이벤트등록정보를 가져오는 방법을 찾지 못해 addEventListener를 hooking하여 임시구현
				if(ctrl._eventListenerList){
					Object.keys(ctrl._eventListenerList).forEach(function(type){
						var listeners = ctrl._eventListenerList[type];
						
						listeners.forEach(function(each){
							tmpObj.addEventListener(type, each);
						})
					});
				}
				
				return tmpObj;
			}
			
			
		}
		
		/**
		 * 동적으로 컨트롤의 property 를 리스트형태로 반환합니다.
		 * @param {cpr.controls.UIControl} ctrl
		 * @return {Array} property 항목 리스트
		 */
		function getCtrlPropertyList (ctrl) {
		
			if(ctrl.value == null) ctrl.value = ""; 
		
			var objectToInspect;
			var result = [];
			
			for (objectToInspect = ctrl; objectToInspect !== null; objectToInspect = Object.getPrototypeOf(objectToInspect)) {
				result = result.concat(Object.getOwnPropertyNames(objectToInspect));
			}
			
			var vaDClnArr = ["dateValue"]; // 복사하지 않을 속성명 배열
			result = result.filter(function(each) {
				/*
				 * 1) _ 로 시작하는 내부 api 제거
				 * 2) Function 제거
				 * 3) vaDClnArr 에 해당되지 않은 속성
				 * 4) 난독화 된 속성 제거
				 */
				if (each.indexOf("_") === -1 && !(ctrl[each] instanceof Function) && vaDClnArr.indexOf(each) == -1 && each.indexOf("µ") == -1) return each;
			})
		
			result = _.uniq(result);
		
			return result;
		}
		
		var BindConfig = {
			context : {
				funcNm : [cpr.bind.GridSelectionContext, cpr.bind.ItemSelectionContext]	
			},
			expression : {
				funcNm : "toExpression",
				propNm : ["expression"]
			},
			datacolumn : {
				funcNm : "toDataColumn",
				propNm : ["columnName"]
			},
			datamap : {
				funcNm : "toDataMap",
				propNm : ["srcId", "columnName"]
			}
		}
		/**
		 * 컨트롤 프로퍼티 복사를 담당하는 변수입니다.
		 */
		var BasePropertyFactory = {
			
			propertyStrategy : {
				inputbox               : new ControlPropertyStrategy("inputbox"),
				dateinput              : new ControlPropertyStrategy("dateinput"),
				numbereditor           : new ControlPropertyStrategy("numbereditor"),
				button                 : new ControlPropertyStrategy("button"),
				maskeditor             : new ControlPropertyStrategy("maskeditor"),
				output                 : new ControlPropertyStrategy("output"),
				checkbox               : new ControlPropertyStrategy("checkbox"),
				combobox               : new ControlPropertyStrategy("combobox").setStrategy(DataSetBindStrategy),
				radiobutton            : new ControlPropertyStrategy("radiobutton").setStrategy(DataSetBindStrategy),
				checkboxgroup          : new ControlPropertyStrategy("checkboxgroup").setStrategy(DataSetBindStrategy),
				textarea               : new ControlPropertyStrategy("textarea"),
				image                  : new ControlPropertyStrategy("image").setStrategy(DataSetBindStrategy),
				htmlsnippet            : new ControlPropertyStrategy("htmlsnippet")
				                             .setStrategy(function(sourceCtrl, targetCtrl){
				                             	targetCtrl.value = sourceCtrl.value;
				                             }),
				container              : new ControlPropertyStrategy("container").setStrategy(ContainerStrategy),
				"cpr.controls.UDCBase" : new ControlPropertyStrategy("cpr.controls.UDCBase").setStrategy(UdcStrategy)
				 
			},
			
			/**
			 * 컨트롤별 속성을 복사합니다.
			 * @param {String} type
			 * @param {cpr.controls.UIControl} sourceCtrl
			 * @param {cpr.controls.UIControl} targetCtrl
			 */
			copyProperty : function(type, sourceCtrl, targetCtrl){
				var that = this;
				/**
				 * @type {ControlPropertyStrategy}
				 */
				var propStrategy = sourceCtrl instanceof cpr.controls.UDCBase ? that.propertyStrategy["cpr.controls.UDCBase"] : that.propertyStrategy[type];
				if(!propStrategy) {
					return false;
				}
				
				propStrategy.setControls(sourceCtrl, targetCtrl);
				propStrategy.copyBaseProperty();
				propStrategy.copyControlProperty();
				propStrategy.copyBindInfo();
				
				return true;
			}
		}
		
		/**
		 * 각 컨트롤마다 수행되야하는 로직을 담은 클래스입니다.
		 * @class
		 * @param {String} type
		 */
		function ControlPropertyStrategy(type){
			this.sourceCtrl = null;
			this.targetCtrl = null;
			var that = this;
			this.strategy = function(){}
		
			/**
			 * @type {Array}
			 */
			this.property;
			
			/**
			 * 컨트롤에 대한 참조를 설정합니다.
			 * @param {cpr.controls.UIControl} sourceCtrl 원본 컨트롤
			 * @param {cpr.controls.UIControl} targetCtrl 복사대상 컨트롤
			 */		
			this.setControls = function(sourceCtrl, targetCtrl){
				this.sourceCtrl = sourceCtrl
				this.targetCtrl = targetCtrl;
				this.property = getCtrlPropertyList(targetCtrl);
			}
			
			/**
			 * 컨트롤별 개별로 설정해야하는 작업이 있는경우 실행대상함수를 설정합니다.
			 * @param {Function} strategy
			 */
			this.setStrategy = function(strategy){
				this.strategy = strategy;
				return that;
			}
			/**
			 * 컨트롤별 기본 프로퍼티를 복사합니다(편집기 > Properties > 일반의 속성들)
			 */
			this.copyBaseProperty = function(){
				
				var that = this;
				
				if(this.property.indexOf("displayText") != -1) {
					/*
					 * 인풋계열 컨트롤
					 * length 속성 복사 시 오류 방지
					 */ 
					if(that.sourceCtrl.value == null) that.sourceCtrl.putValue("");
				}
				
				var vbDisplayExp = this.property.indexOf("displayExp") != -1;
				
				this.property.forEach(function(prop){
					//2-1. 기본 속성들 값 복사
					
					if(vbDisplayExp && prop == "text") {
						// displayExp 속성이 있는 컨트롤일 경우 text 속성을 복사 방지
					} else {
						that.targetCtrl[prop] = _.clone(that.sourceCtrl[prop]);
					}
					
				});
			}
			
			/**
			 * 컨트롤별 바인드정보를 복사합니다
			 */
			this.copyBindInfo = function(){
				
				var props = [];
				
				if(this.sourceCtrl instanceof cpr.controls.UDCBase){
					Object.keys(this.sourceCtrl.getAllAppProperties()).forEach(function(key) {
						props.push(key);
					})
					props = props.concat(this.property)
				}
				else{
					props = this.property;
				}
				
				// 속성 바인딩
				props.forEach(function(prop){
					var bindInfo = that.sourceCtrl.getBindInfo(prop);
					if(bindInfo){
						var args = [];
						var bindConfig = BindConfig[bindInfo.type];
						bindConfig.propNm.forEach(function(each){
							if(each === "srcId") args.push(that.sourceCtrl.getParent().getAppInstance().lookup(bindInfo[each]))
							else args.push(bindInfo[each]);
						})
						that.targetCtrl.bind(prop)[bindConfig.funcNm].apply(that.targetCtrl.bind(prop),args)
					}		
				});
				
				// 문맥 바인딩 (선택행 컨텍스트)
				var voBindContext = that.sourceCtrl.getBindContext();
				var contextConfig = BindConfig.context;
				contextConfig.funcNm.forEach(function(each){
					if(voBindContext instanceof each) {
						that.targetCtrl.setBindContext(new each(voBindContext.grid || voBindContext._control));
					}
				});
			}
			
			/**
			 * 각 컨트롤별 등록한 개별처리함수를 수행합니다.
			 */
			this.copyControlProperty = function(){
				this.strategy(this.sourceCtrl, this.targetCtrl);
			}
		}
		
		
		/**
		 * 데이터셋이 바인딩 될 수 있는 컨트롤을 처리하기 위한 함수입니다.
		 * @param {any} sourceCtrl
		 * @param {any} targetCtrl
		 */
		function DataSetBindStrategy(sourceCtrl, targetCtrl){
			//선행데이터 복사
			sourceCtrl.getItems().forEach(function(each){
				if(!(each.row)){
					targetCtrl.addItem(each);
				}
			})
			//데이터셋 연결
			if(sourceCtrl.itemSetConfig){
				targetCtrl.setItemSet(sourceCtrl.dataSet, sourceCtrl.itemSetConfig)
			}
		}
		/**
		 * 
		 * @param {cpr.controls.Container} sourceCtrl
		 * @param {cpr.controls.Container} targetCtrl
		 */
		function ContainerStrategy(sourceCtrl, targetCtrl){
			//얕은복사
			targetCtrl.setLayout(_.clone(sourceCtrl.getLayout()));
			
			var layout = sourceCtrl.getLayout();
			
			targetCtrl.getLayout().scrollable = layout.scrollable
			if(layout instanceof cpr.controls.layouts.FormLayout){
				layout.getColumns().forEach(function(each, i){
					/**
					 * @type cpr.controls.layouts.FormLayout
					 */
					var tmpLayout = targetCtrl.getLayout();
					tmpLayout.setColumnAutoSizing(i, layout.isColumnAutoSizing(i));
				});	
				
				layout.getRows().forEach(function(each, i){
					/**
					 * @type cpr.controls.layouts.FormLayout
					 */
					var tmpLayout = targetCtrl.getLayout()
					tmpLayout.setRowAutoSizing(i, layout.isRowAutoSizing(i));
				});
			}
			else if(layout instanceof cpr.controls.layouts.VerticalLayout){
				targetCtrl.getLayout().spacing = layout.spacing
			}
		}
		
		/**
		 * 
		 * @param {cpr.controls.UDCBase} sourceCtrl
		 * @param {cpr.controls.UDCBase} targetCtrl
		 */
		function UdcStrategy(sourceCtrl, targetCtrl){
			
			var voAppProperties = sourceCtrl.getAllAppProperties();
			Object.keys(voAppProperties).forEach(function(key){
				var value = voAppProperties[key];
				
				targetCtrl.setAppProperty(key, value);
			});
		}
		
		/**
		 * 그리드를 변환합니다
		 * @param {SingleCtrlCopier} ctrlCopier
		 */
		var GridConverter = function(ctrlCopier){
			
			var copier = ctrlCopier
			var gridParent;
			var gridColumnLayout;
			var gridHeaderBand;
			var gridDetailBand;
			var headerRowCount;
			
			var targetGrid;
			var vbMaintainHeader = true;
			
			var that = this;
			
			/**
			 * 
			 * @param {cpr.controls.Grid} poTargetGrid
			 */
			this.setGrid = function(poTargetGrid){
				targetGrid = poTargetGrid;
				gridParent = poTargetGrid.getParent();
				gridColumnLayout = poTargetGrid.getColumnLayout();
				gridHeaderBand = poTargetGrid.header;
				gridDetailBand = poTargetGrid.detail;
				headerRowCount = gridHeaderBand.getRowHeights().length;
				
				vbMaintainHeader = targetGrid.userAttr(ATTR_MAINTAIN_MULTI_HEADER) == "false" ? false : true;
			}
			
			this.buildOriginFormArea = function(){
				var vsCopyId = _makeCopyCtrlId(targetGrid);
				var tmpFormGrp = new cpr.controls.Container(vsCopyId);
				var layout = new cpr.controls.layouts.FormLayout();
				var columnWidthSum = 0;
				var allColumnWidthSum = 0;
				var columnRatio = [];
				
				tmpFormGrp.setLayout(layout);
				tmpFormGrp.style.addClass("cl-grid");
				layout.horizontalSpacing = 0;
				layout.verticalSpacing = 0;
				layout.bottomMargin = 0;
				layout.leftMargin = 0;
				layout.rightMargin = 0;
				layout.topMargin = 0;
		
				//STEP1. row, column빌드
				var columnWidths = [];
				var rowHeights = [];
		
				gridHeaderBand.getRowHeights().forEach(function(rowHeight){
					rowHeights.push(rowHeight.height + "px");
				});
				for(var i = 0; i < targetGrid.getDataRowCount(); i++){
					rowHeights = rowHeights.concat(gridDetailBand.getRowHeights().map(function(each){
						return each.height + "px";
					}));
				}
				layout.setRows(rowHeights);
				
				gridColumnLayout.columnLayout.forEach(function(each){
					if(each.autoFit){
						columnWidthSum += each.width;
					} 
					allColumnWidthSum += each.width
					columnWidths.push(each.width + "px");
				});
				
				columnWidths.forEach(function(each, i){
					if(gridColumnLayout.columnLayout[i].autoFit){
						columnRatio.push({
							index : i,
							ratio : (parseInt(each.replace("px", "")) / columnWidthSum)
						});	
					}
				});
				
				layout.setColumns(columnWidths);
				
				if(allColumnWidthSum <= gridParent.getActualRect().width){
					//1-1. autoFit컬럼 대상으로 width 리사이즈작업
					var columnSpace = gridParent.getActualRect().width - allColumnWidthSum;
					var autoFitColumn = [];
					gridColumnLayout.columnLayout.forEach(function(each, i){
						if(each.autoFit){
							autoFitColumn.push(i);
						}
					});
					var originColumns = layout.getColumns();
					var filledColumns = []
					originColumns.forEach(function(each, index){
						if(_.contains(autoFitColumn, index)){
							var ratioInfo = columnRatio.find(function(each){
								if(each.index === index) return true
							});
							
							filledColumns.push(Math.floor(parseInt(each.replace("px", "")) + (Math.floor(ratioInfo.ratio * 10000) / 10000 * columnSpace)) + "px");
						}
						else{
							filledColumns.push(each);
						}
					});
			
					layout.setColumns(filledColumns);
				}
				else{
					tmpFormGrp.style.css("overflow", "hidden")
				}
				
				return tmpFormGrp;
			}
			
			/**
			 * 
			 * @param {cpr.controls.Container} tmpFormGrp
			 */
			this.fillCtrl = function(tmpFormGrp){
				var cellContainer = new cpr.controls.Container();
				var cellLayout = new cpr.controls.layouts.XYLayout();
				cellContainer.setLayout(cellLayout);
				//STEP2. header, detail컨트롤 채워넣기
				targetGrid.forEachOfGridCells(function(cellInfo){
				
					cellInfo.forEach(function(cell){
						if(cell.region === "header"){    //header
							cellContainer = new cpr.controls.Container();
							cellLayout = new cpr.controls.layouts.XYLayout();
							cellContainer.setLayout(cellLayout);
		
							var headerOpt = new cpr.controls.Output();
							headerOpt.value = cell.text;
							headerOpt.style.addClass("cl-grid-header");
							
							cellContainer.addChild(headerOpt, {
								top : 0,
								bottom : 0,
								left : 0,
								right : 0
							});
							cellContainer.style.addClass("cl-grid-cell");
						
							tmpFormGrp.addChild(cellContainer, {
								colIndex : cell.colIndex,
								colSpan : cell.colSpan,
								rowIndex : cell.rowIndex,
								rowSpan : cell.rowSpan
							});
						}
						else if(cell.region === "middle"){
							var originCtrl = cell.ctrl;
							var copiedCtrl;
							var cellContainer = new cpr.controls.Container();
							var cellLayout = new cpr.controls.layouts.XYLayout();
							var befRowCtrl
							
							if(originCtrl){
								copiedCtrl = copier.copy(originCtrl)
							}
							else{
								copiedCtrl = new cpr.controls.Output();
								copiedCtrl.value = cell.text;
								copiedCtrl.style.css("text-align", "center");
							}
							copiedCtrl.style.css("border", "none");
							cellContainer.addChild(copiedCtrl, {
								top : 0,
								bottom : 0,
								left : 0,
								right : 0
							});
							cellContainer.style.addClass("cl-grid-cell");
			
							if(cell.dsRowIndex !== 0){
								befRowCtrl = tmpFormGrp.getLayout().findControls({
									colIndex : cell.colIndex,
									colSpan : cell.colSpan,
									rowIndex : cell.dsRowIndex + headerRowCount - 1,
									rowSpan : cell.rowSpan
								})
							}
		
							if(gridDetailBand.getColumn(cell.cellIndex).suppressible && befRowCtrl && befRowCtrl[0].getFirstChild().value === copiedCtrl.value){
								var originConstraint = befRowCtrl[0].getParent().getConstraint(befRowCtrl[0]);
								
								if(targetGrid.suppressedCellType === "split"){
									befRowCtrl[0].getFirstChild().style.css("vertical-align", "top")
								}
								tmpFormGrp.replaceConstraint(befRowCtrl[0], {
									colIndex : originConstraint.colIndex,
									colSpan : originConstraint.colSpan,
									rowIndex : originConstraint.rowIndex,
									rowSpan : originConstraint.rowSpan + 1
								});
							}
							else{
								tmpFormGrp.addChild(cellContainer, {
									colIndex : cell.colIndex,
									colSpan : cell.colSpan,
									rowIndex : cell.dsRowIndex + headerRowCount,
									rowSpan : cell.rowSpan
								});
							}
						}
					});
				});
				
				return tmpFormGrp
			}
			
			this.buildDetailFormArea = function(pnRowHeight){
				var columnWidths = [];
				var grpColumnLayout = []
				var grpRowLayout = [];
				var rowsHeight = gridHeaderBand.getRowHeights();
				
				var vsCopyId = _makeCopyCtrlId(targetGrid);
				var tmpFormGrp = new cpr.controls.Container(vsCopyId);
				var layout = new cpr.controls.layouts.FormLayout();
				layout.horizontalSpacing = "0px";
				layout.verticalSpacing = "0px";
				tmpFormGrp.setLayout(layout);
				tmpFormGrp.style.addClass("cl-grid");
				
				// 선택행이 없을 경우 첫번째 로우 선택
				if(targetGrid.getSelectedRowIndex() === -1){
					targetGrid.selectRows(0);
				}
				
				// setColumns
				gridColumnLayout.columnLayout.forEach(function(each){
					columnWidths.push(each.width);
				});
				if ( vbMaintainHeader ) {
					rowsHeight.forEach(function(each){
						grpColumnLayout.push(Math.max.apply(null, columnWidths) + "px");
					});
				} else {
					grpColumnLayout.push(Math.max.apply(null, columnWidths) + "px");
				}
				grpColumnLayout.push("1fr");
				layout.setColumns(grpColumnLayout);
				
				// setRows
				columnWidths.forEach(function(each, idx){
					if(pnRowHeight == null) {
						var rowHeight = Math.max.apply(null, rowsHeight.map(function(each){
							return each.height;
						}));
						grpRowLayout.push(rowHeight + "px");
					} else {
						grpRowLayout.push(pnRowHeight + "px");
					}
				});
				layout.setRows(grpRowLayout);
				
				// 그리드 선택행 바인딩
				tmpFormGrp.setBindContext(new cpr.bind.GridSelectionContext(targetGrid));
				
				var cellContainer = new cpr.controls.Container();
				var cellLayout = new cpr.controls.layouts.XYLayout();
				cellContainer.setLayout(cellLayout);
				
				var columnCount = targetGrid.columnCount;
				for(var idx = 0; idx < columnCount; idx++){
					if( !vbMaintainHeader ) {
						// 한 셀에 멀티 헤더 텍스트 합침
						cellContainer = new cpr.controls.Container();
						cellLayout = new cpr.controls.layouts.FormLayout();
						cellLayout.setColumns(["1fr"]);
						cellLayout.setRows(["1fr"]);
						cellContainer.setLayout(cellLayout);
						
						var vsHeaderTxt = _getColumnText(targetGrid, idx);
						var headerOpt = new cpr.controls.Output();
						headerOpt.value = vsHeaderTxt;
						headerOpt.style.css("padding", "5px");
						headerOpt.style.addClass("cl-grid-header");
						
						cellContainer.addChild(headerOpt, {
							top : 0,
							bottom : 0,
							left : 0,
							right : 0
						});
						cellContainer.style.addClass("cl-grid-cell");
						// last-child border-right:none 일 경우 보더 추가
						cellContainer.style.addClass("border-right"); 
							
						tmpFormGrp.addChild(cellContainer, {
							colIndex : 0,
							rowIndex : idx,
						});
					}
				}
				
				var vnMergeCol = false;
				targetGrid.forEachOfGridCells(function(cellInfo){
					cellInfo.forEach(function(cell){
						if(cell.region === "header" && vbMaintainHeader){
							// 멀티 헤더 구조대로 셀 유지(멀티헤더 개수만큼 셀 생성)
							cellContainer = new cpr.controls.Container();
							cellLayout = new cpr.controls.layouts.FormLayout();
							cellLayout.setColumns(["1fr"]);
							cellLayout.setRows(["1fr"]);
							cellContainer.setLayout(cellLayout);
							
							var headerOpt = new cpr.controls.Output();
							headerOpt.value = cell.text;
							headerOpt.style.css("padding", "5px");
							headerOpt.style.addClass("cl-grid-header");
							
							cellContainer.addChild(headerOpt, {
								"colIndex": 0,
								"rowIndex": 0
							});
							cellContainer.style.addClass("cl-grid-cell");
							// last-child border-right:none 일 경우 보더 추가
							cellContainer.style.addClass("border-right"); 
							
							tmpFormGrp.addChild(cellContainer, {
								colIndex : cell.rowIndex,
								colSpan : cell.rowSpan,
								rowIndex : cell.colIndex,
								rowSpan : cell.colSpan
							});
						}
						else if(cell.region === "middle"){
							if(cell.dsRowIndex === targetGrid.getSelectedRowIndex()){
								cellContainer = new cpr.controls.Container();
								cellLayout = new cpr.controls.layouts.FormLayout();
								cellLayout.setColumns(["1fr"]);
								cellLayout.setRows(["1fr"]);
								cellContainer.setLayout(cellLayout);
								
								var originCtrl = cell.ctrl;
								var copiedCtrl;
								var befColCtrl;
								
								if(originCtrl) {
									copiedCtrl = copier.copy(originCtrl);
								} else{
									copiedCtrl = new cpr.controls.Output();
									copiedCtrl.style.css("text-align", "center");
									if(cell.columnName != "" && cell.columnName != null && cell.columnName != undefined) {
										copiedCtrl.bind("value").toDataColumn(cell.columnName);
									} else {
										if(cell.columnType == "rowindex") {
											copiedCtrl.bind("value").toExpression("rowIndex + 1");			
										} else {
											copiedCtrl.value = cell.text;
										}
									}
								}
								
								copiedCtrl.style.css("border", "none");
		
								cellContainer.style.css("padding", "5px");
								cellContainer.style.addClass("cl-grid-cell");
								// last-child border-right:none 일 경우 보더 추가
								cellContainer.style.addClass("border-right"); 
								cellContainer.setLayout(cellLayout);
								cellContainer.addChild(copiedCtrl, {
									"colIndex": 0,
									"rowIndex": 0
								});
								
								var vnColIndex = vbMaintainHeader ? rowsHeight.length : 1;
								tmpFormGrp.addChild(cellContainer, {
									colIndex : vnColIndex,
									colSpan : cell.rowSpan,
									rowIndex : cell.colIndex,
									rowSpan : cell.colSpan
								});
							}
						}
					});
				});
				
				layout.getRows().forEach(function(each, idx){
					layout.setRowAutoSizing(idx, true);
				});
				
				return tmpFormGrp;
			}
			
			
			this.buildGroupArea = function(pcForm, option){
				
				var vbShowPageIndex = option.showPageIndex != null ? option.showPageIndex : true;
				var vbShowTitle = option.showTitle != null ? option.showTitle : true;
				var vbShowCount = option.showCount != null ? option.showCount : true;
		
				var vsGrpClass = option.groupClass;
				var vsTitleClass = option.titleClass;
				var vsCountClass = option.countClass;
				var vsPageClass = option.pageIndexClass;
				var vcTitleUDC = option.titleUDC;
				
				var vcDetailForm = pcForm;
				
				// STEP1) 전체 그룹생성
				var tempGrp = new cpr.controls.Container();
				var grpLayout = new cpr.controls.layouts.VerticalLayout();
				grpLayout.topMargin = 10;
				grpLayout.leftMargin = 10;
				grpLayout.rightMargin = 10;
				grpLayout.bottomMargin = 10;
				grpLayout.spacing = 10;
				tempGrp.setLayout(grpLayout);
				
				if(vsGrpClass) {
					tempGrp.style.addClass(vsGrpClass);	
				}
				
				// STEP2) 타이틀 생성
				var tempTitle = new cpr.controls.Container();
				var titleLayout = new cpr.controls.layouts.FlowLayout();
				titleLayout.topMargin = 0;
				titleLayout.leftMargin = 0;
				titleLayout.rightMargin = 0;
				titleLayout.bottomMargin = 0;
				titleLayout.horizontalSpacing = 10;
				titleLayout.verticalSpacing = 10;
				titleLayout.verticalAlign = "middle";
				titleLayout.lineWrap = false;
				titleLayout.scrollable = false;
				tempTitle.setLayout(titleLayout);
						
				if(vbShowTitle) {
					
					// 2-1) 타이틀
					if(vcTitleUDC) {
						// TODO 앱속성을 설정하세요.
		//				vcTitleUDC.ctrl = targetGrid;
		//				vcTitleUDC.title = targetGrid.fieldLabel;
		//				vcTitleUDC.rowCount = targetGrid.getRowCount();
						
						tempGrp.addChild(vcTitleUDC, {
							autoSize : "height"
						});
					} else {
						
						var gridTItle = new cpr.controls.Output();
						gridTItle.value = targetGrid.fieldLabel;
						if(vsTitleClass) {
							gridTItle.style.addClass(vsTitleClass);
						}
						tempTitle.addChild(gridTItle, {
							autoSize : "width",
							height : "100%"
						});
					}
				}
				
				if(vbShowCount) {
					
					// 2-2) 건수
					var count = new cpr.controls.Output();
					count.value = targetGrid.getRowCount();
					count.displayExp = "'[' + text + ']'";
					if(vsCountClass) count.style.addClass(vsCountClass);
					
					tempTitle.addChild(count, {
						autoSize : "width",
						height : "100%"
					});
				}
				
				if(vbShowTitle || vbShowCount) {
					tempGrp.addChild(tempTitle, {
						autoSize : "height"
					});
				}
				
				// STEP3) 디테일 폼레이아웃 추가
				tempGrp.addChild(vcDetailForm, {
					autoSize : "height"
				});
				
				// STEP4) 페이지인덱서 생성
				if(vbShowPageIndex) {
					
					var tempPage = new cpr.controls.PageIndexer();
					tempPage.pageRowCount = 1;
					tempPage.startPageIndex = targetGrid.getSelectedRowIndex()+1;
					tempPage.currentPageIndex = targetGrid.getSelectedRowIndex()+1;
					tempPage.totalRowCount = targetGrid.getRowCount();
					tempPage.addEventListener("selection-change", function(e){
						targetGrid.selectRows(e.newSelection - 1);	
					});
					if(vsPageClass) {
						tempPage.style.addClass(vsPageClass);
					}
				
					tempGrp.addChild(tempPage, {
						autoSize : "height"
					});
				}
				
				return tempGrp;
			}
		}
		
		
		/**
		 * 그리드 헤더 텍스트 반환
		 * 멀티헤더의 경우 "-" 로 연결되어 반환
		 * @param {cpr.controls.Grid} pcGrid
		 * @param {Number} pnIndex
		 */
		function _getColumnText(pcGrid, pnIndex) {
			
			var headerCell = pcGrid.getHeaderCellIndices(pnIndex);
			
			var vsResult = "";
			if (headerCell.length > 0) {
				headerCell.forEach(function(each) {
					var colNm = pcGrid.header.getColumn(each);
					vsResult += (colNm.text || "") + msDelimiter;
				});
				
				if (vsResult != "") {
					vsResult = vsResult.substr(0, vsResult.length - 1);
				}
			}
			
			return vsResult;
		}
		
		/**
		 * 
		 * @param {any} ctrl
		 */
		function _makeCopyCtrlId (ctrl) {
			
			if(!(ctrl instanceof cpr.controls.UIControl)) return;
			
			var copyString = "";
			
			// grid 일 때
			if(ctrl.type == "grid") {
				var vnRowIndex = ctrl.getSelectedRowIndex();
				copyString = CopyIdConfig[ctrl.type] + "_R" + vnRowIndex;
			} else {
				copyString = CopyIdConfig["ctrl"];
			}
			
			var tmpCtrlId = ctrl.id ? ctrl.id+copyString  : undefined;
		
			return tmpCtrlId;
		}
		
	});
})();
/// end - module/CtrlCopy
/// start - module/divideMdi
/*
 * Module URI: module/divideMdi
 * SRC: module/divideMdi.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/divideMdi", function(exports, globals, module){
		/************************************************
		 * DivideMdi.module.js
		 * Created at 2020. 2. 11. 오후 5:46:24.
		 *
		 * Version 1.2
		 * Updated Date : 2021-07-06
		 * 
		 * @author daye
		 ************************************************/
		
		/*
		 * 본 모듈은 MDI폴더에 포함되어있는 임베디드 앱을 분할해서 띄울 수 있는 모듈입니다.
		 * 분할영역은 총 기본(전체화면), 2분할, 4분할, 계단형 입니다.
		 * 2분할과 4분할은 폼레이아웃에 배치되는 형태이며, resize가 가능합니다.
		 * 계단형은 다이얼로그 형태로 제공 됩니다.
		 * 분할되어있는 상태에서는 탭헤더가 보이지 않습니다.
		 * 
		 * [주의] 
		 * 1. MDI에 추가되어 있는 탭아이템은 모두 임베디드앱을 포함해야 합니다.
		 * 2. MDI폴더가 로드되었을 때, 항상 기본분할로 선택되어 있어야 합니다.
		 * 
		 * [사용방법]
		 * 본 모듈을 사용하기 위해, 프로젝트 내에 배치하신 다음, 스크립트에서 comDivideScr(app)을 선언한 뒤에
		 * 아래의 [호출 가능한 메서드]를 호출하여 사용할 수 있습니다.
		 * 
		 * [호출 가능한 메서드]
		 *  1. divide : MDI에 추가되어있는 임베디드앱을 분할하는 메서드입니다.
		 *  2. removeAllFloat : 플로팅되어있는 모든 컨트롤을 삭제합니다.
		 * 							모듈에서 플로팅한 컨트롤 외에 플로팅 되어있는 컨트롤까지 삭제할 수 있습니다.
		 *  3. updateFloatConstraint : 메인의 메뉴(left, right)가 열릴 때 분할영역의 위치상태를 변경합니다.
		 *  4. selectMenu : 메뉴를 선택했을 때, MDI폴더 또는 분할영역에 임베디드앱을 추가합니다.
		 *  5. closeMenu : 열려있는 메뉴를 닫을 때 사용합니다. 
		 * 		- 선택닫기 : 선택되어있는 탭을 닫습니다. 단, 분할되어있는 경우에는 선택닫기는 불가합니다.
		 * 						계단형으로 분할되어있을 때는 각각의 다이얼로그를 직접 닫을 수 있습니다.
		 * 		- 모두닫기 : [홈] 화면을 제외한 나머지 화면을 닫습니다.
		 *  6. getDivGroup : 현재 플로팅 되어있는 영역의 그룹을 반환합니다. (단, 2분할 또는 4분할되어 있는 폼레이아웃만 해당됩니다.)
		 */
		
		
		/************************************************
		 * 전역 변수 (변경 가능)
		 ************************************************/
		/**
		 * 계단형(다이얼로그) 으로 분할 할 때, 각 다이얼로그 간 거리
		 * @type {Number}
		 */
		var mnHierarchyDistance = 40;
		
		/**
		 * 탭폴더의 첫번째 탭아이템 고정여부
		 * @type {Boolean}
		 */
		var mbFixFirst = false;
		
		/**
		 * 고정 탭아이템 앱ID 
		 * 단, mbFixFirst가 true 일 경우에만 사용 가능
		 * @type {String}
		 */
		var msFixAppId = ""; 
		
		/**
		 * 분할 - 전체화면
		 * @type {String}
		 */
		var msDefault = "default";
		
		/**
		 * 분할 - 가로분할
		 * @type {String}
		 */
		var msHorizontal = "horizontal";
		
		/**
		 * 분할 - 세로분할
		 * @type {String}
		 */
		var msVertical = "vertical";
		
		/**
		 * 분할 - 4분할
		 * @type {String}
		 */
		var msDivision = "division";
		
		/**
		 * 분할 - 계단형 (팝업)
		 * @type {String}
		 */
		var msCascading = "window";
		
		/**
		 * 폼레이아웃 separator 너비
		 * @type {Number}
		 */
		var mnFormWidth = 1;
		
		/**
		 * 폼레이아웃 separator 색상
		 * @type {String}
		 */
		var msFormColor = "#000";
		
		/**
		 * 폼레이아웃 separator 클래스명
		 * @type {String}
		 */
		var msFormClass = "Class";
		
		/**
		 * 사용자 속성
		 * fixed-first-item
		 * @type {String}
		 */
		var ATTR_FIXED_ITEM = "fixed-first-item";
		
		/**
		 * 사용자 속성
		 * fixed-id
		 * @type {String}
		 */
		var ATTR_FIXED_ID = "fixed-id"
		
		/**
		 * horizontal, vertical 분할 시 각 앱인스턴스 높이
		 * @type {Number}
		 */
		var mnDivHeight = 500;
		
		/**
		 * 플로팅 그룹 배경 색상 클래스
		 * horizontal, vertical, division 일 때 적용
		 * @type {String}
		 */
		var msFloatGrpBgCls = "bg-white";
		
		/**
		 * 다이얼로그 스타일 클래스
		 * window 일 때 적용
		 * @type {String}
		 */
		var msDialogCls = "cl-dialog";
		
		/**
		 * 다이얼로그 최소화 시 생성되는 버튼 스타일 클래스
		 * window 일 때 적용
		 * @type {String}
		 */
		var msDialogMinBtnCls = "btn-primary";
		 
		/**
		 * 다이얼로그  최소화 버튼 생성 여부
		 * @type {Boolean}
		 */
		var mbDialogMin = true;
		
		/**
		 * 다이얼로그 분할 시 생성되는 최소화 영역 그룹 스타일
		 * window 일 때 적용
		 * @type {String}
		 */
		var msDialogMinGrpCls = "";
		
		
		/************************************************
		 * 전역 변수 (변경 불가능)
		 ************************************************/
		/**
		 * 루트 앱인스턴스
		 * @type {cpr.core.AppInstance}
		 */
		var moRootAppIns = null;
		
		/** 
		 * 메인MDI 컨트롤
		 * @type {cpr.controls.MDIFolder}
		 */
		var mcMainTab = null;
		
		
		/**
		 * 계단형으로 띄울 때, 탭아이템 배열
		 * @type {cpr.controls.EmbeddedApp[]}
		 */
		var moDialogContent = []; 
		
		/**
		 * 분할 시 Float 되는 그룹 컨트롤
		 * @type {cpr.controls.Container}
		 */
		var mcFloatGrp = null; 
		
		/**
		 * 알림컨트롤
		 * @type {cpr.controls.Notifier}
		 */
		var mcNotifier = null;
		
		/**
		 * 현재 포커스된 임베디드앱
		 * @type {cpr.controls.EmbeddedApp}
		 */
		var mcFocusEmb = null;
		
		/**
		 * 분할 한 화면을 최대화할 경우, 최대화 한 앱인스턴스
		 * @type {cpr.core.AppInstance}
		 */
		var moMaximize = null;
		
		/**
		 * 계단형 분할에서 최소화 했을 때 생성되는 영역
		 * @type {cpr.controls.Container}
		 */
		var mcGrpBoundary = null;
		
		
		/************************************************
		 * 이벤트 버스
		 ************************************************/
		
		cpr.events.EventBus.INSTANCE.addFilter("focus", function(e){
			
			var control = e.control;
			
			var vcFocusEmb = control.getAppInstance().getHost();
			if(vcFocusEmb instanceof cpr.controls.UDCBase && vcFocusEmb.getAppInstance()) {
				vcFocusEmb = vcFocusEmb.getAppInstance().getHost();
			}
			if(vcFocusEmb) {
				if(mcFocusEmb != vcFocusEmb) {
					mcFocusEmb = vcFocusEmb;
					if(mcFloatGrp || moDialogContent.length > 0) {
						cpr.core.NotificationCenter.INSTANCE.post("check-menu-auth", {
							vcEmb : vcFocusEmb
						});
					}
				}
			}
		});
		
		
		/**
		 * 계단형으로 보여줄 때 띄울 다이얼로그 앱 생성
		 * @param {Number} pnIndex
		 */
		function _createDialog (pnIndex) {
		
			var newApp = new cpr.core.App("ComDialog"+pnIndex, {
					onPrepare: function(loader){
					},
					onCreate: function(/* cpr.core.AppInstance */ newApp, exports){
						var container = newApp.getContainer();
						
						// script start
						newApp.addEventListener("load", function(e){
							/** @type cpr.controls.EmbeddedApp */
							var initValue = newApp.getHostProperty("initValue");
							
							if(initValue) {
								newApp.app.title = initValue.app.title;
								container.addChild(initValue, {
									top : "0px",
									left : "0px",
									right : "0px",
									bottom : "0px"
								});
							}
						});
					}
				});
				cpr.core.Platform.INSTANCE.register(newApp);
				
				return newApp;
		}
		
		
		/************************************************
		 * 프로토타입 선언
		 ************************************************/
		/**
		 * 
		 * @param {cpr.core.AppInstance} app
		 * @param {cpr.controls.TabFolder} tabfolder
		 */
		var comDivideScr = function (app, tabfolder) {
			this._app = app;
		
			if(tabfolder != null) {
				mcMainTab = tabfolder;	
			}
		}
		
		/**
		 * 분할하기 위한 MDI폴더(탭폴더) 객체를 설정합니다.
		 * @param {cpr.controls.MDIFolder} pcMdiFolder
		 */
		comDivideScr.prototype.setMdiFolder = function(pcMdiFolder) {
			if(pcMdiFolder == null) return;
		
			mcMainTab = pcMdiFolder;
		}
		
		/**
		 * 분할하기 위한 MDI폴더(탭폴더) 객체를 반환합니다.
		 * @return {cpr.controls.MDIFolder}
		 */
		comDivideScr.prototype.getMdiFolder = function() {
			return mcMainTab;
		}
		
		/**
		 * 현재 활성화 되어있는 앱인스턴스 반환
		 * @returns {cpr.core.AppInstance} 활성화되어있는 앱인스턴스
		 */
		comDivideScr.prototype.getActiveApp = function () {
			var voActiveAppIns = null;
			
			if(mcFloatGrp || moDialogContent.length > 0) {
				voActiveAppIns = mcFocusEmb.getEmbeddedAppInstance();
			}
		
			return voActiveAppIns;
		}
		
		
		/**
		 * 플로팅 컨트롤 모두 삭제
		 */
		comDivideScr.prototype.removeAllFloat = function () {
			
			if(moRootAppIns) {
				
				/* 고정탭이 있는경우 첫번째 아이템 저장 */
				if(mbFixFirst) {
					if(mcFloatGrp && mcFloatGrp.getChildrenCount() > 0) {
						mcMainTab.getTabItems()[0].content = mcFloatGrp.getChildren()[0];
					} else if(moDialogContent.length > 0){
						var voItem = new cpr.controls.TabItem();
						voItem.content  = moDialogContent.map(function(each){
							if(each.app.id == msFixAppId) return each;
						})[0];
						voItem.text = "Dashboard";
						voItem.visible = false;
						mcMainTab.addTabItem(voItem);
					}
				}
				
				mcMainTab.getAppInstance().dialogManager.closeAll();
				
				// container에 추가해서 삭제로 변경
				if(moRootAppIns.getContainer().getChild("grpFloat")) {
					moRootAppIns.getContainer().removeChild(mcFloatGrp,true);
				}
				
				moDialogContent = []; // 다이얼로그로 띄웠던 항목 삭제
				mcFloatGrp = null; // 2 또는 4분할 삭제
				mcNotifier = null; // 알림컨트롤 삭제
				
				mcMainTab.getAppInstance().removeFloatingControl(mcGrpBoundary);
				mcGrpBoundary = null;
				
			}
				
			cpr.core.DeferredUpdateManager.INSTANCE.update();
		}
		
		
		/**
		 * 화면을 분할합니다.
		 * @param {String} psLayout 분할하고자 하는 구성(기본 : default, 2분할 : vertical, 4분할 : division, 계단형 : window)
		 * @param {#notifier} psNotifier 알림컨트롤 ID (분할영역이 있을 경우 알림컨트롤도 분할영역 상단으로 함께 플로팅됩니다.)
		 * @param {cpr.controls.TabItem[]|cpr.controls.Item[]} poSelection?
		 */
		comDivideScr.prototype.divide = function (psLayout, psNotifier, poSelection) {
			
			if(mcMainTab == null) return;
			
			// 1. 앱의 루트앱인스턴스
			moRootAppIns = this._app;
			
			// 2. 메인 MDI 폴더
			var voMdiConst = mcMainTab.getOffsetRect();
			var voMdiActulRect = mcMainTab.getActualRect();
			var voRootConst = moRootAppIns.getActualRect();
			
			// TODO 플로팅 위치를 변경하기 위해서 아래의 Constraint를 변경하십시오.
			var vnTabHeight = mcMainTab.getHeaderControls()[0].getActualRect().height;
			mcMainTab.getHeaderControls().forEach(function(each){
				if(each.getActualRect().height > vnTabHeight) vnTabHeight = each.getActualRect().height;
			});
				
			// 3. 알림컨트롤
			var vcNotifier = moRootAppIns.lookup(psNotifier);
			if(vcNotifier && vcNotifier.isFloated()) {
				// 다시 기본화면으로 돌아갈 때, 플로팅 되어있던 알림컨트롤 추가
				var vnTabHeight = mcMainTab.getHeaderControls()[0].getActualRect().height;
				mcMainTab.getHeaderControls().forEach(function(each){
					if(each.getActualRect().height > vnTabHeight) vnTabHeight = each.getActualRect().height;
				});
				this._app.getContainer().addChild(vcNotifier, {
					left : voMdiConst.left + "px",
					bottom : voMdiConst.bottom + vnTabHeight + "px",
					right : voMdiConst.right,
					height : vcNotifier.getActualRect().height + "px"
				});
			}
			
			var vnDiv = 1; // 화면분할 개수
			switch(psLayout){
				case msHorizontal : case msVertical : {
					vnDiv = 2;
					break;
				}
				case msDivision : {
					vnDiv = 4;
					break;
				}
				case msCascading : {
					vnDiv = psLayout;
					break;
				}
			}
			
			// 레이아웃을 변경할 때마다, 임베디드앱의 변경사항을 메인 탭에 저장한다.
			if(moDialogContent.length == 0) {
				
				/* 2 or 4분할의 앱인스턴스 저장 */
				var vcFloatGrp = moRootAppIns.lookup("grpFloat");
				
				if(vcFloatGrp) {
					// 분할 변경 시, 기존의 포틀릿(드래그,드롭 객체) 삭제
					removeDragManager(mcFloatGrp);
		
					var voChildren = vcFloatGrp.getChildren();
					voChildren.forEach(function(each, idx) {
						var vnIndex = null;
						mcMainTab.getTabItems().map(function(item, index){
							if(each.userAttr("tabId") == item.name) vnIndex = index;
							
							if(vnIndex != null) {
								mcMainTab.getTabItems()[vnIndex].content = each;
								return;
							}
						});
					});
					
					if(mcMainTab.userAttr(ATTR_FIXED_ITEM) === "Y" && mcMainTab.userAttr(ATTR_FIXED_ID) && mcMainTab.userAttr(ATTR_FIXED_ID) !== "") {
						mcMainTab.getTabItems()[0].visible = false;
					}
				}
				
			} else {
				/* 계단형의 앱인스턴스 저장 */
				for(var idx = 0; idx < moDialogContent.length; idx++){
					var voTabItem = new cpr.controls.TabItem();
					voTabItem.content = moDialogContent[idx];
					voTabItem.text = moDialogContent[idx].userAttr("appId");
					voTabItem.closable = moDialogContent[idx].userAttr("closable")=="true" ? true : false;
					mcMainTab.addTabItem(voTabItem);
					
					if(idx == 0 && mcMainTab.userAttr(ATTR_FIXED_ITEM) === "Y" && mcMainTab.userAttr(ATTR_FIXED_ID) && mcMainTab.userAttr(ATTR_FIXED_ID) !== "") {
						voTabItem.visible = false;
					}
				}
			}
		
			var voTabItems = mcMainTab.getTabItems();
			voTabItems.forEach(function(each){
				// tabItem.name 설정 (content 가 null 일 경우 탭아이템 구분가능)
				if(each.name == null || each.name == "") {
					each.name = each.content.uuid;
				}
				
				// 포커스 되어있던 아이템 선택
				if(each.content == mcFocusEmb) {
					mcMainTab.setSelectedTabItem(each);
				}
			})
			
			// 선택한 아이템
			var voSelectedTabItem = [];
			if(poSelection) {
				poSelection.forEach(function(each){
					if(each instanceof cpr.controls.TabItem) {
						voSelectedTabItem.push(each);
					} else {
						// 동일한 앱아이디 화면이 2개 이상일 경우, 각 content 식별을 itemIndex로 설정
						var vnItemIndex = each.row.getValue("value");
						var tabItem = null;
						if(isNaN(vnItemIndex)) {
							// window에서 다른 분할형태로 바뀔 경우, embeddedappId 
							tabItem = voTabItems.filter(function(each){
								if(each.content.id == vnItemIndex) return each;
							})[0];
						} else {
							tabItem = voTabItems[vnItemIndex];
						}
						if(tabItem) {
							voSelectedTabItem.push(tabItem);
						}
					}
				});
			}
			
			// 플로팅 컨트롤 모두 삭제
			this.removeAllFloat();
		
			if(psLayout == msDefault) {
				/* 전체화면 */
				
				// 탭아이템 헤더 visible하도록 설정
				voTabItems.forEach(function (each, index) {
					if(mcMainTab.userAttr(ATTR_FIXED_ITEM) === "Y" && mcMainTab.userAttr(ATTR_FIXED_ID) && mcMainTab.userAttr(ATTR_FIXED_ID) !== "" 
					&& index == 0) {
						each.visible = false;
					} else {
						each.visible = true;
					}
				});
				
				if(voSelectedTabItem.length > 0) {
					mcMainTab.setSelectedTabItem(voSelectedTabItem[0]);
		//			// 마지막 아이템 선택하도록 수정 (2021.07.27 수정)
		//			mcMainTab.setSelectedTabItem(voSelectedTabItem[voSelectedTabItem.length-1]);
				} else {
					var vnCtrlId = mcMainTab.userAttr(ATTR_FIXED_ID);
					var vcFixItem = moRootAppIns.lookup(vnCtrlId).getChild("btnDfItem");
					vcFixItem.click();
				}
				
				// (2021.07.27 추가)
		//		if (voTabItems.length > 1) {
		//			mcMainTab.setSelectedTabItem(voTabItems[voTabItems.length-1]);
		//		} else {
		//			var vnCtrlId = mcMainTab.userAttr(ATTR_FIXED_ID);
		//			var vcFixItem = moRootAppIns.lookup(vnCtrlId).getChild("btnDfItem");
		//			vcFixItem.click();
		//		}
				
				// 분할 --> 최대화일 경우 선택
				if(moMaximize) {
					voTabItems.forEach(function(each){
						if(each.content == moMaximize.getHost()) {
							mcMainTab.setSelectedTabItem(each);
						}
					});
					moMaximize = null;
					cpr.core.DeferredUpdateManager.INSTANCE.update();
				}
				
				if(mcMainTab.userAttr(ATTR_FIXED_ITEM) === "Y" && mcMainTab.userAttr(ATTR_FIXED_ID) && mcMainTab.userAttr(ATTR_FIXED_ID) !== "") {
		//			var vnCtrlId = mcMainTab.userAttr(ATTR_FIXED_ID);
		//			var vcFixItem = moRootAppIns.lookup(vnCtrlId);
		//			
		//			if(vcFixItem) {
		//				vcFixItem = mcMainTab.getTabItems()[vnCtrlId];
		//			}
		//			
		//			vcFixItem.visible = true;
					// (2021.07.27 추가)
					mcMainTab.getTabItems()[0].visible = false;
				}
				
				return;
				
			} else if(psLayout == msCascading){
				/* 계단분할 */
		
				moDialogContent = [];
				
				// 선택한 아이템만 계단형으로 분할
				if(voSelectedTabItem.length > 0) {
					voTabItems = voSelectedTabItem;
				}
				
				voTabItems.forEach(function(each, index) {
					_openDialog(each, index);
				});
		
			} else {
				// vertical, horizontal, division
				
				/* 2분할 or 4분할 */
		
				// 분할해서 보여줄 컨트롤 동적생성 (폼레이아웃)
				mcFloatGrp = moRootAppIns.lookup("grpFloat");
				if(mcFloatGrp == null) mcFloatGrp = new cpr.controls.Container("grpFloat");
				mcFloatGrp.style.addClass(msFloatGrpBgCls);
				
				// 분할그룹의 포틀릿 설정
				mcFloatGrp.userAttr("portlet", "Y");
				mcFloatGrp.userAttr("dataType","t");
				
				var voFormLayout = _createFormLayout(psLayout, voSelectedTabItem);
				mcFloatGrp.setLayout(voFormLayout);
				
				var voTabList = [];
				if(voSelectedTabItem.length > 0) {
					voTabList = voSelectedTabItem;
				} else {
					var vnLen = voTabItems.length;
					var vnStartIndex = vnLen-vnDiv > 0 ? vnLen-vnDiv : 0;
					
					// 보여줄 화면 개수만큼 헤더타이틀 뒤에서부터 가져온다
					voTabList =  voTabItems.slice(vnStartIndex, vnLen);
				}
				
				voTabList.forEach(function(each, index) {
					var vnRowIndex = 0;
					var vnColIndex = 0;
					
					if(psLayout == msHorizontal) vnRowIndex = index;
					if(psLayout == msVertical) vnColIndex = index;
					if(psLayout == msDivision) {
						vnRowIndex = parseInt(index / 2);
						vnColIndex = index % 2;
					} 
					
					var vcInsertContent = each.content;
					vcInsertContent.userAttr("tabId", each.name);
					voTabItems.map(function(arg){
						if(arg.content == vcInsertContent) {
							arg.content = null;
							return;
						}
					});
					
					mcFloatGrp.addChild(vcInsertContent, {
						rowIndex : vnRowIndex,
						colIndex : vnColIndex
					})
				});
				
				if(mnDivHeight < voMdiConst.height) mnDivHeight = voMdiConst.height;
				moRootAppIns.getContainer().floatControl(mcFloatGrp, {
					top : voMdiConst.top + vnTabHeight + "px",
					left : voMdiConst.left + "px",
					right : (voRootConst.right - voMdiActulRect.right) + "px",
					bottom : (voRootConst.bottom - voMdiActulRect.bottom) + "px",
				});
				
				
				cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){
					// 폼레이아웃 column 구획 변경
					_setColsWidPx(psLayout);
		
					// 포틀릿 이동 시작
					createDragManager(moRootAppIns);
				});
			}
			
			// 탭아이템 헤더 보이지 않도록 설정
			voTabItems.forEach(function (each) {
				each.visible = false;
			}); 
			 
			// 고정아이템이 있을 경우 보이지 않도록 설정
			if(mcMainTab.userAttr(ATTR_FIXED_ID)) {
		//		var vnCtrlId = mcMainTab.userAttr(ATTR_FIXED_ID);
		//		var vcFixItem = moRootAppIns.lookup(vnCtrlId);
		//		
		//		if(vcFixItem) {
		//			vcFixItem = mcMainTab.getTabItems()[vnCtrlId];
		//		}
		//		
		//		vcFixItem.visible = false;
				// (2021.07.27 추가)
				mcMainTab.getTabItems()[0].visible = false;
			}
			
			// 분할 시 알림 컨트롤을 최상위로 플로팅
			// 알림컨트롤 최하단으로 배치해서 플로팅 삭제
			if(vcNotifier) {
				mcNotifier = vcNotifier;
				var voNotiConstraint = moRootAppIns.getContainer().getConstraint(mcNotifier);
				if(vnDiv == msCascading) {
					this._app.getContainer().addChild(mcNotifier, voNotiConstraint);			
				} else {
					moRootAppIns.getContainer().floatControl(mcNotifier, voNotiConstraint);	
				}
			}
		}
		 
		 /**
		  * 폼레이아웃 생성
		  * horizontal, vertical, division 분할 시 띄우는 그룹에 적용
		  * @param {String} psLayout horizontal, vertical, division 중 택1
		  * @param {cpr.controls.TabItem[]|cpr.controls.Item[]} poSelection
		  */
		function _createFormLayout (psLayout, poSelection) {
			
			// TODO 폼레이아웃 관련 속성을 설정하기 위해서 아래의 코드에서 작성하십시오.
			var voFormLayout = new cpr.controls.layouts.FormLayout();
			voFormLayout.userResizingMode = "standard"; // resize모드 (none, standard, lightweight)
			
			/* 폼레이아웃 스타일 설정 */
			voFormLayout.horizontalSeparatorWidth = mnFormWidth;
			voFormLayout.horizontalSeparatorColor = msFormColor;
			voFormLayout.horizontalSeparatorClass = msFormClass
			voFormLayout.verticalSeparatorWidth = mnFormWidth;
			voFormLayout.verticalSeparatorColor = msFormColor;
			voFormLayout.verticalSeparatorClass = msFormClass;
					
			if(psLayout == msDivision) {
				var voConfig = _getFormConfig(2);
				voFormLayout.setRows(voConfig);
				voFormLayout.setColumns(voConfig);
			} else {
				var vnLeast = 2;
				if(poSelection && poSelection.length >= 2) {
					vnLeast = poSelection.length;
				}
				var vnRow = psLayout == msVertical ? 1 : vnLeast; 
				var vnCol = psLayout == msVertical ? vnLeast : 1;
				voFormLayout.setRows(_getFormConfig(vnRow));
				voFormLayout.setColumns(_getFormConfig(vnCol));
			}
			
			return voFormLayout;
		}
		
		/**
		 * 플로팅 하는 그룹(폼레이아웃) 의 구성 반환
		 * @param {Number} pnCnt
		 */
		function _getFormConfig (pnCnt) {
			
			var vaConfig = [];
			
			for(var idx = 0; idx < pnCnt; idx++){
				vaConfig.push("1fr");
			}
		
			return vaConfig;
		}
		
		
		/**
		 * 분할 형태가 Vertical 또는 Division 일 경우
		 * 분할영역의 폼레이아웃 Columns 구획을 fr -> px 로 변경합니다.
		 * @param {String} psLayout
		 */
		function _setColsWidPx (psLayout) {
			
			if(!mcFloatGrp || !mcFloatGrp.isFloated()) return;
			
			/** @type cpr.controls.layouts.FormLayout */
			var voLayout = mcFloatGrp.getLayout();
			var vnColumnCnt = voLayout.getColumns().length;
			var vnRowCnt = voLayout.getRows().length;
		
			var vnHorizontalSpacing = parseInt(voLayout.horizontalSpacing);
			var vnSideMargin = parseInt(voLayout.leftMargin) + parseInt(voLayout.rightMargin);
			
			// 앱 개수만큼 균등 간격 px 계산
			var voFlotActlRct = mcFloatGrp.getActualRect();
			var vnRealAppWidth = voFlotActlRct.width - vnSideMargin - (vnHorizontalSpacing * (vnColumnCnt -1)); // margin, spacing 을 제외한 나머지 width
			var vnMinWidth = vnRealAppWidth / vnColumnCnt; 
			var vnMinHeight = voFlotActlRct.height / vnRowCnt;
			
			// 세로분할 or 4분할 일 경우 column 을 fr -> px 로 변경
			if(psLayout == msVertical || psLayout == msDivision) {
				var vaCols = [];
				for(var idx = 0; idx < vnColumnCnt; idx++){
					vaCols.push(vnMinWidth + "px");
				}
			
				voLayout.setColumns(vaCols);
			}
		}
		
		
		/**
		 * 분할되어 있을 때 left or right 메뉴에 따른 Constraint 변경
		 * @param {cpr.controls.UIControl} pcGrpWrap left 또는 right 메뉴를 포함한 그룹 컨트롤 또는 메뉴 컨트롤
		 * @param {String} psDirection left 또는 right(소문자로 작성)
		 */
		comDivideScr.prototype.updateFloatConstraint = function (pcGrpWrap, psDirection) {
			
			if(moRootAppIns == null) return;
			if(mcMainTab == null) return;
			
			if(psDirection == null) {
				psDirection = "left";
			}
			
			var voMdiRect = mcMainTab.getOffsetRect();
			
			var vnTabHeight = mcMainTab.getHeaderControls()[0].getActualRect().height;
			var vnTabWidth= mcMainTab.getHeaderControls()[0].getActualRect().width;
			mcMainTab.getHeaderControls().forEach(function(each){
				if(each.getActualRect().height > vnTabHeight) vnTabHeight = each.getActualRect().height;
			});
				
			if(mcFloatGrp) {
				// 2 or 4분할일 경우 분할영역 플로팅 위치 변경
				// TODO 플로팅 위치를 변경하기 위해서 아래의 Constraint를 변경하십시오.
				moRootAppIns.getContainer().floatControl(mcFloatGrp, {
					top : voMdiRect.top + vnTabHeight + "px",
					left : voMdiRect.left + "px",
					right : (innerWidth-voMdiRect.right) + "px",
					bottom : (innerHeight-voMdiRect.bottom) + "px"
				});
			}
			
			if(mcNotifier) {
				// 알림컨트롤 플로팅 위치 변경
				var voNotiRect = mcNotifier.getActualRect();
				var voFloatCont = {
					left : voMdiRect.left + "px",
					right : voMdiRect.right + "px",
					bottom : voMdiRect.bottom + vnTabHeight + "px",
					height : voNotiRect.height + "px"
				};
				
				// 알림컨트롤 최하단으로 배치해서 플로팅 삭제
				if(moDialogContent.length > 0) {
					this._app.getContainer().addChild(mcNotifier, voFloatCont);
				} else {
					moRootAppIns.getContainer().floatControl(mcNotifier, voFloatCont);
				}
			}
		}
		
		
		/**
		 * 메뉴 선택
		 * @param {String} psAppId 앱ID
		 * @param {any} poSelectedMenu
		 * @param {
		 *   text : String, <!-- tabItem 텍스트 -->
		 *   tooltip : String, <!--  tabItem 툴팁 -->
		 *   closable : Boolean <!-- tabItems 닫기여부 -->
		 * } paProp tabItem 설정
		 * @param {Function} poFuncCallBack
		 */
		comDivideScr.prototype.selectMenu = function (psAppId, poSelectedMenu, paProp, poFuncCallBack) {
			
			if(mcMainTab == null) return;
			
			moRootAppIns= mcMainTab.getAppInstance().getRootAppInstance();
			var _this = this;
						
			var vcNewEc = new cpr.controls.EmbeddedApp("ea"+psAppId + "_"+ Math.random()*10);
			cpr.core.App.load(psAppId, function(loadedApp){
				if(loadedApp) {		
					vcNewEc.app = loadedApp;	
					vcNewEc.ready( function(inEm){
					vcNewEc.userAttr("tabId", vcNewEc.uuid);
		//				inEm.getEmbeddedAppInstance()._menu_id = poSelectedMenu.menu_id;
		//				inEm.getEmbeddedAppInstance().app 	= loadedApp;
		//				inEm.getEmbeddedAppInstance()._menu_id = psAppId;
					});
		
		            if(mcFloatGrp) {
						
						/* 2, 4분할 */
						var voLayout = mcFloatGrp.getLayout();
						var vnRows = voLayout.getRows().length;
						var vnCols = voLayout.getColumns().length;
						
						var voLastConstraint = mcFloatGrp.getConstraint(mcFloatGrp.getLastChild());
						var vnRowIndex = 0;
						var vnColIndex = 0;
						
						if(vnRows == 2 && vnCols == 2) {
							// division
							vnRowIndex = voLastConstraint? voLastConstraint.rowIndex : 0;
							vnColIndex = voLastConstraint? voLastConstraint.colIndex : 0;
							
							if(voLastConstraint) {
								if(voLastConstraint.rowIndex == voLayout.getRows().length-1 && voLastConstraint.colIndex == 1) {
									// 폼레이아웃이 모두 임베디드앱으로 가득차있는 경우 하나씩 밀어서 보여준다.
									var vnRow = 0;
									var vnCol = 0;
									
									mcFloatGrp.getLayout().getChildrenByLayoutOrder().forEach(function(each, index) {
										if(index == 0) {
											mcMainTab.getTabItems().forEach(function(item, idx){
												if(item.name == each.userAttr("tabId")) {
													mcMainTab.getTabItems()[idx].content = each;
												}
											});
											mcFloatGrp.removeChild(each); 
										} else {
											cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){
												mcFloatGrp.replaceConstraint(each, {
													rowIndex : parseInt((index-1) / 2), 
													colIndex : Math.abs((index % 2) - 1)
												});
											});
										}
									})
								} else {
									// 비어있는 공간에 추가한다.
									if(voLastConstraint.colIndex == 1) vnRowIndex++;
									vnColIndex = (vnColIndex + 1) % 2;
								}
							}
						}  else {
							 if (vnRows == 1) { // vertical 
							 	
								vnColIndex = mcFloatGrp.getChildrenCount();
								
								if(vnCols == mcFloatGrp.getChildrenCount()) {
									// 폼레이아웃 구획 추가
									voLayout.setColumns(_getFormConfig(vnCols+1));							
								 	mcFloatGrp.setLayout(voLayout);
								}else{
									if(vnCols == 2){// 최초 분할 지정시 메뉴 오픈이 안되어있는 상태에서 드래그앤드롭 이후 인덱스 예외 처리
										vnColIndex = voLastConstraint.colIndex == 1 ? 0 : 1;
									}
								}
							} else if (vnCols == 1) { // horizontal
							
								vnRowIndex = mcFloatGrp.getChildrenCount();
								if(vnRows == mcFloatGrp.getChildrenCount()) {
									// 폼레이아웃 구획 추가
									voLayout.setRows(_getFormConfig(vnRows+1));							
								 	mcFloatGrp.setLayout(voLayout);
								}else{
									if(vnRows == 2){// 최초 분할 지정시 메뉴 오픈이 안되어있는 상태에서 드래그앤드롭 이후 인덱스 예외 처리
										vnRowIndex = voLastConstraint.rowIndex == 1 ? 0 : 1;
									}
								}
							}
						}
						
						// 다른 컨텐츠의 위치가 모두 변경 된 후 추가
						cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){ 
							mcFloatGrp.addChild(vcNewEc, {
								rowIndex : vnRowIndex, 
								colIndex : vnColIndex
							});
							
							if(vnCols > 1) {
								_setColsWidPx(msVertical);
							}
							
							createDragManager(moRootAppIns);
						});
						
					} else if (moDialogContent.length > 0)  {
						/* 계단형 */
						
						var vnIndex = mcMainTab.getAppInstance().dialogManager.getDialogNames().length;
						_openDialog(vcNewEc, vnIndex);		
						if(paProp) vcNewEc.userAttr("text", paProp.text);
						
						return;
					}
					
					var tabItem = (function(tabFolder) {
						var tabItem_1 = new cpr.controls.TabItem();
						tabItem_1.text = paProp && paProp.text ? paProp.text : vcNewEc.app.title;
						tabItem_1.tooltip = paProp && paProp.tooltip ? paProp.tooltip : vcNewEc.app.title;
						tabItem_1.closable = paProp && paProp.closable != null ? paProp.closable : false;
		
						tabItem_1.content = null;
						tabItem_1.name = vcNewEc.uuid;
						if(poSelectedMenu){
							tabItem_1.userAttr("__menuInfo", JSON.stringify(poSelectedMenu.getRowData()));	
						}
						 // TODO 탭아이템에 관련된 설정을 작성하십시오.
						if(mcFloatGrp) {
							tabItem_1.visible = false;
						}
						
						return tabItem_1;				
					})(mcMainTab);
					
					if(mcFloatGrp == null && moDialogContent.length == 0) {
						// default 
						tabItem.content = vcNewEc;
					}
					
					mcMainTab.addTabItem(tabItem);
					mcMainTab.setSelectedTabItem(tabItem);
					
					if (poFuncCallBack != null && (typeof poFuncCallBack == "function")) {
						poFuncCallBack(vcNewEc);
					} 			
				}
			});
		}
		var voDialogManager = null;
		/**
		 * 다이얼로그 오픈
		 * @param {cpr.controls.TabItem|cpr.controls.EmbeddedApp} poTabItem
		 * @param {Number} pnIndex
		 */
		function _openDialog (poTabItem, pnIndex) {
			
			var voDialogApp = _createDialog(pnIndex);
			
			var voTabRect = mcMainTab.getOffsetRect();
			var vnTabHeight = mcMainTab.getHeaderControls()[0].getActualRect().height;
			
			/** @type cpr.controls.EmbeddedApp */
			var vcEmb = null;
			var vsEmbTitle = null;
			if(poTabItem.type == "embeddedapp") {
				vcEmb = poTabItem;
				vsEmbTitle = poTabItem.userAttr("text") ? poTabItem.userAttr("text") : poTabItem.app.title;
			} else {
				vcEmb = poTabItem.content;
				vsEmbTitle = poTabItem.text;
			}
			
			// 202107.06 최소화 버튼 존재 시, 최소화 영역 생성
			if(mcGrpBoundary == null && mbDialogMin) {
				mcGrpBoundary = new cpr.controls.Container();
				mcGrpBoundary.style.addClass(msDialogMinGrpCls);
				mcGrpBoundary.userAttr("minBoundary", "true");
				mcGrpBoundary.style.css("border", "1px solid lightgray");
			
				var flowlayout = new cpr.controls.layouts.FlowLayout();
				flowlayout.bottomMargin = 0;
				flowlayout.topMargin = 0;
				flowlayout.leftMargin = 0;
				flowlayout.rightMargin = 0;
				flowlayout.scrollable = false;
				mcGrpBoundary.setLayout(flowlayout);
				
				var container = mcMainTab.getAppInstance().getContainer();
				var vnHeight = 30;
				mcMainTab.getAppInstance().floatControl(mcGrpBoundary, {
					top : (voTabRect.top +  voTabRect.height - vnHeight) + "px",
					left : voTabRect.left + "px",
					width : voTabRect.width + "px",
					height : vnHeight + "px"
				});
			}
					
			var voDialogManager = mcMainTab.getAppInstance().dialogManager;
			voDialogManager.openDialog(voDialogApp, vcEmb.id, {}, function(dialog) {
				dialog.ready(function(dialogApp){
					// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
					dialog.modal = false; 
					dialog.initValue = vcEmb;
					dialog.headerTitle = vsEmbTitle;
					dialog.headerMax = true;
					dialog.headerMin = mbDialogMin; 
					
					if(mbFixFirst) {
						if(poTabItem.content && (poTabItem.content.app.id == msFixAppId)) {
							dialog.headerClose = false;
						} else {
							dialog.headerClose = true;
						}
					} else {	
						dialog.headerClose = true;
					}
					
					// TODO 다이얼로그 스타일을 변경하고자 할 경우엔 아래의 클래스를 수정하십시오.
					dialog.style.addClass(msDialogCls);
					
					// 계단형 분할 시 다이얼로그 소팅(위치설정)
					voDialogManager.sort(cpr.core.DialogSortType.cascade, {
						horizontalMargin : voTabRect.left,
						horizontalSpacing : mnHierarchyDistance, 
						verticalMargin : voTabRect.top + vnTabHeight, 
						verticalSpacing : mnHierarchyDistance,
						width : 600,
						height : 500
					});
					
					dialog.addEventListener("load", function(e){
						mcMainTab.removeTabItem(poTabItem);
						var vbClosable = poTabItem.closable != null ? poTabItem.closable.toString() : "true";
						
						vcEmb.userAttr("appId", vsEmbTitle);
						vcEmb.userAttr("closable", vbClosable);
						moDialogContent.push(vcEmb);     
					});
					
					// 2021.07.06 추가
					dialog.addEventListener("minimize", function(e){
						// 최소화 한 경우 위치 변경
						/*
						 * - 다이얼로그 일때 최초 한번 그룹 생성
						 * - 분할유형 변경될 때 그룹 삭제
						 */
						
						if(mcGrpBoundary != null && mbDialogMin) {
							var vcDialogBtn = new cpr.controls.Button();
							vcDialogBtn.value = dialog.headerTitle;
							vcDialogBtn.style.addClass(msDialogMinBtnCls);
							vcDialogBtn.addEventListenerOnce("click", function(e){
								/** @type cpr.controls.Button */
								var control = e.control;
								
								// 클릭 시 최소화 되어있던 다이얼로그 복구
								mcGrpBoundary.removeChild(control);
								var vsDialogName = voDialogManager.getDialogName(dialog);
								voDialogManager.getDialogByName(vsDialogName).restore();
							})
		
							mcGrpBoundary.addChild(vcDialogBtn, {
								autoSize : "width",
								height : "30px"
							});
						}				
					});
					
					dialog.addEventListener("close", function(e){
						moDialogContent.splice(moDialogContent.indexOf(poTabItem.content), 1);
		
						cpr.core.Platform.INSTANCE.unregister(voDialogApp);
					});
					
				});
			});
		}
		
		
		
		/**
		 * 선택/모두 닫기
		 * @param {cpr.controls.ComboBox} pcCombobox
		 * @param {String} psUnit 선택닫기 : "select" / 모두닫기 : "all" / 고정탭제외 닫기 : "fixClose"
		 * @param {cpr.controls.TabItem} pcCloseItem? 닫을 탭아이템
		 */
		comDivideScr.prototype.closeMenu = function (pcCombobox, psUnit, pcCloseItem) {
			
			if(mcMainTab == null) return;
			
			if(psUnit == "all") {
				/* 모두닫기 */
				this.removeAllFloat();
				mcMainTab.closeAll();
				
			} else if(psUnit == "fixClose") {
				/* 고정 탭 제외 닫기 */
				var voApp = mcMainTab.getAppInstance();
				var vcFixedId = mcMainTab.userAttr(ATTR_FIXED_ID);
				voApp.lookup(vcFixedId).visible = true;
				
				var voFixedTabItem = mcMainTab.getTabItems()[0];
				mcMainTab.closeOthers(voFixedTabItem);
		
				this.removeAllFloat();
			} else {
				/* 선택닫기 */
				if(pcCloseItem) {
					mcMainTab.close(pcCloseItem);	
					mcMainTab.setSelectedTabItem(mcMainTab.getTabItems()[0]);
				} else {
					cpr.core.NotificationCenter.INSTANCE.post("app-msg", {
						msg : "닫을 화면을 설정하세요."
					});
					return;
				}
				
				if(mcFloatGrp) {
					// 2분할 or 4분할 초기화
					this.divide(msDefault, mcNotifier); 
				}
			}
			
			if(pcCombobox) {
				pcCombobox.selectItemByValue("default", true);
			}
		}
		
		
		/**
		 * 플로팅 되어있는 분할 영역 반환
		 */
		comDivideScr.prototype.getDivGroup = function() {
			return mcFloatGrp;
		}
		
		
		/**
		 * 분할 시, 최대화 할 화면을 선택
		 * @param {cpr.core.AppInstance} poAppIns
		 */
		comDivideScr.prototype.maximize = function (poAppIns) {
			if(mcFloatGrp || moDialogContent.length > 0) {
				moMaximize = poAppIns;
			}
		}
		
		/**
		 * 
		 * @param {cpr.core.AppInstance} app
		 * @param {cpr.controls.TabFolder} tabfolder
		 */
		globals.comDivideScr = function(app, tabfolder) {
			return new comDivideScr(app, tabfolder);
		}
	});
})();
/// end - module/divideMdi
/// start - module/event
/*
 * Module URI: module/event
 * SRC: module/event.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/event", function(exports, globals, module){
		/************************************************
		 * event.module.js
		 * Created at 2021. 10. 15 오후 4:56:54.
		 *
		 * @author kjh
		 ************************************************/
		
		/**
		 * 앱 init시 처리로직 담당 변수
		 * - 반응형 작업
		 */
		var AppInitTask = {
			vaCtl : null, //대상컨트롤
			
			init : function(){
				var that = this;
				
				cpr.events.EventBus.INSTANCE.addFilter("init", function(e){
					if(e.control instanceof cpr.core.AppInstance){
						
						/** @type cpr.core.AppInstance */
						var appInstance = e.control;
						
						that.vaCtl = appInstance.getContainer().getAllRecursiveChildren(true);
		
						//that.FloatFooter.run(e);
						that.Responsive.run(e);
						that.AdabtiveTab.run(e);
						
						var vaGrids = appInstance.getContainer().getAllRecursiveChildren(false).filter(function(each){
								return each instanceof cpr.controls.Grid;
							}).forEach(function(each){
								if (each.userAttr("transform-on-mobile") == "true" && each.userAttr("hide-column-indicies") != ""){
									makeResponsiveGrid(each);
								}
						});
					}
				});
			},
			
			FloatFooter : {
				constants : {},
				run : function(e){
					if(!(e.control instanceof cpr.core.AppInstance)) return;
					
					var targetApp = e.control;
					var footer = targetApp.lookup("grpFooter");
					if(footer){
						targetApp.floatControl(footer, {
							bottom : 0,
							left : 0,
							right : 0,
							height : "40px"
							
						});
					}
				}
			},
			
			Responsive : {
				constants : {
					ATTR_MOBILE_H_MARGIN : "mobile-horizontal-margin",
					ATTR_MOBILE_V_MARGIN : "mobile-vertical-margin",
					ATTR_TABLET_H_MARGIN : "tablet-horizontal-margin",
					ATTR_TABLET_V_MARGIN : "tablet-vertical-margin",
					
					ATTR_MOBILE_COLUMN_COUNT : "mobile-column-count",
					ATTR_TABLET_COLUMN_COUNT : "tablet-column-count",
					//폼레이아웃 자식내 모바일일경우 숨김 지정
					ATTR_HIDE_ON_MOBILE : "hide-on-mobile",
					ATTR_NEEDS_AUTO_HEIGHT : "needs-auto-height",
					ATTR_COLLAPSE_DIRECTION : "collapse-direction",
					
					ATTR_MOBILE_MIN_HEIGHT : "mobile-min-height",
					ATTR_TABLET_MIN_HEIGHT : "tablet-min-height",
					
					ATTR_MOBILE_INDEX : "mobile-index",
					ATTR_TABLET_INDEX : "tablet-index",
					//모바일일 경우 그리드 cell 숨기기.
					ATTR_HIDE_CELL_INDICIES : "hide-cell-indicies"
				},
				
				run : function(e){
					if(!(e.control instanceof cpr.core.AppInstance)) return;
					
					/** @type cpr.core.AppInstance */
					var appInstance = e.control;
					var that = this;
					var mainAppId = cpr.core.Platform.INSTANCE.getAllLoadedApps().find(function(each){
						return each.id === "app/com/main/main"
					});
		
					if (!mainAppId) return;
					
					var mainApp = mainAppId.getInstances()[0];
					
					var cmbScreen = mainApp.lookup("cmbScreen");
					var vaCtl = AppInitTask.vaCtl
					vaCtl.some(function(each){
						if (each instanceof cpr.controls.Container) {
							if (each.getLayout() instanceof cpr.controls.layouts.FormLayout && each.userAttr("mobile-column-count") != "") {
								each.userAttr("responsive-configured", "true");
								var rForm = makeResponsive(each)
								
								each["_RForm"] = rForm;
								rForm.setColumnSettings("mobile", parseInt(each.userAttr(that.constants.ATTR_MOBILE_COLUMN_COUNT) || "0"));
								rForm.setColumnSettings("tablet", parseInt(each.userAttr(that.constants.ATTR_TABLET_COLUMN_COUNT) || "0"));
								rForm.start();
								
								if(cmbScreen && cmbScreen.value === "mobile"){
									cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){
										rForm._transform(parseInt(each.userAttr(that.constants.ATTR_MOBILE_COLUMN_COUNT) || "0"));
									});
									
								}
							}
							
							else if(each.getLayout() instanceof cpr.controls.layouts.VerticalLayout && (each.userAttr("mobile-fit") || each.userAttr("tablet-fit"))){
								var rVertical = makeVResponsive(each);
								rVertical.start();
							}
						}
						 if(each instanceof cpr.controls.Grid && each.userAttr(that.constants.ATTR_HIDE_CELL_INDICIES) != ""){
							makeResponsiveGrid(each)
						}	
					});
				}
			},
			
			AdabtiveTab : {
				constants : {},
				run : function(e){
					/** @type cpr.core.AppInstance */
					var appInstance = e.control;
					
					AppInitTask.vaCtl.filter(function(/* cpr.controls.UIControl */ each){
						return each instanceof cpr.controls.TabFolder && each.userAttr("transform-on-mobile") == "true";
					}).forEach(function(/* cpr.controls.UIControl */ each){
						var aTab = makeAdaptiveTab(each)
						aTab.start();
					});
				}
			}
		}
		
		/**
		 * 그리드 기능별 ui처리 담당변수
		 */
		var GridInitTask = {
			
			init : function(){
				var that = this;
				cpr.events.EventBus.INSTANCE.addFilter("header-check", function(e){
					//that.DeleteAllRow.run(e);
				});
				cpr.events.EventBus.INSTANCE.addFilter("header-uncheck", function(e){
					//that.RestoreAllRow.run(e);
				});
				cpr.events.EventBus.INSTANCE.addFilter("row-check", function(e){
					//that.DeleteRow.run(e);
				});
				cpr.events.EventBus.INSTANCE.addFilter("row-uncheck", function(e){
					//that.RestoreRow.run(e);
				});
				// 모든 selection-change 이벤트시 그리드에 대한  필터 추가(for. 그리드의 선택된 로우가 없을 경우 이벤트 전파 차단)
				cpr.events.EventBus.INSTANCE.addFilter("selection-change", function(e){
					that.ValidateSelection.run(e);
				});
				// 모든 before-selection-change 이벤트에시 그리드에 대한  필터만 추가.(for. 그리드의 선택된 로우가 없을 경우 이벤트 전파 차단)
				cpr.events.EventBus.INSTANCE.addFilter("before-selection-change", function(e){
					that.ValidateBeforeSelection.run(e);
				});
			},
		//	DeleteAllRow : {
		//		
		//		run : function(e){
		//			/** @type {cpr.controls.Grid} **/
		//			var control = e.control;
		//			if(!control instanceof cpr.controls.Grid) return;
		//			
		//			
		//			for(var i = 0; i < control.rowCount; i++){
		//				var each = control.getRow(i);
		//				each.setAttr("_befRowState", each.getState())
		//				control.deleteRow(each.getIndex());
		//		
		//				if(each.getState() === cpr.data.tabledata.RowState.INSERTDELETED){
		//					control.revertRowData(each.getIndex());
		//					i--;
		//				}
		//			}
		//		}
		//	},
		//	
		//	RestoreAllRow : {
		//		run : function(e){
		//			/** @type {cpr.controls.Grid} **/
		//			var control = e.control;
		//			if(!control instanceof cpr.controls.Grid) return;
		//			
		//			control.findAllRow("1==1").forEach(function(each){
		//				if(each.getState() === cpr.data.tabledata.RowState.DELETED){
		//					each.setState(each.getAttr("_befRowState"));
		//				}
		//				
		//			});
		//		}
		//	},
		//	DeleteRow : {
		//		run : function(e){
		//			/** @type {cpr.controls.Grid} **/
		//			var control = e.control;
		//			if(!control instanceof cpr.controls.Grid) return;
		//			
		//			e.row.setAttr("_befRowState", e.row.getState())
		//			control.deleteRow(e.row.getIndex());
		//			
		//			if(e.row.getState() === cpr.data.tabledata.RowState.INSERTDELETED){
		//				control.revertRowData(e.row.getIndex());
		//			}
		//		}
		//	},
		//	RestoreRow : {
		//		run : function(e){
		//			/** @type {cpr.controls.Grid} **/
		//			var control = e.control;
		//			
		//			if(!control instanceof cpr.controls.Grid || e.row.getState() !== cpr.data.tabledata.RowState.DELETED) return;
		//		
		//			e.row.setState(e.row.getAttr("_befRowState"));
		//		}
		//	},
			ValidateSelection : {
				run : function(e){
					 // 이벤트를 발생 시킨 컨트롤
				    var control = e.control;
				    /** @type cpr.core.AppInstance */
				    var _app = control.getAppInstance();
				    
				    // 이벤트 발송자가 그리드 이고.
				    if (control instanceof cpr.controls.Grid) {
				    	/** @type cpr.controls.Grid */
				    	var grid = control;
				    	if(grid.selectionUnit == "cell" && grid.getSelectedIndices()[0] == null){
				    		 e.stopPropagation();
				    	}else{
				    		var rowIndex = grid.selectionUnit != "cell" ? grid.getSelectedRowIndex() : grid.getSelectedIndices()[0]["rowIndex"];
					        // 그리드 선택 ROW가 -1이라면...
					        if (rowIndex < 0) {
					            // 이벤트 전파를 차단시킵니다.
					            e.stopPropagation();
					        }
				    	}
				    }
				}
			},
			ValidateBeforeSelection : {
				run : function(e){
					// 이벤트를 발생 시킨 컨트롤
				    var control = e.control;
				    /** @type cpr.core.AppInstance */
				    var _app = control.getAppInstance();
				    
				    // 이벤트 발송자가 그리드 이고.
				    if (control instanceof cpr.controls.Grid) {
				    	// 테스트 화면의 경우 이벤트 적용 안함
				    	if(e.newSelection[0] == null || e.newSelection[0] == undefined){
				    		// 이벤트 전파를 차단시킵니다.
				            e.stopPropagation();
						}
				    }
				}
			}
		//	,
		//	ClearValidationClass : {
		//		run : function(e){
		//			var formCtrlId = e.control.userAttr("bindDataFormId");
		//			
		//			if(formCtrlId){
		//				var formCtrl = e.control.getAppInstance().lookup(formCtrlId);
		//				
		//			}
		//		}
		//	}
		}
		
		/**
		 * 인풋박스 공통 이벤트처리 담당 변수
		 */
		var InputBoxInitTask = {
			init : function(){
				var that = this;
				cpr.events.EventBus.INSTANCE.addFilter("before-value-change", function(e){
					that.CaseTransform.run(e);
				});
			},
			
			CaseTransform : {
				run : function(e){
					// 이벤트를 발생 시킨 컨트롤
				    var control = e.control;
				    /** @type cpr.core.AppInstance */
				    
				    // 이벤트 발송자가 인풋박스이면.
				    if (control.type === "inputbox") {
				    	var inputLetter = control.userAttr("inputLetter");
						if (inputLetter == "uppercase") {
							if (/[a-z]/g.test(e.newValue)) {
								var newValue = e.newValue.toUpperCase();
								control.value = newValue;
								e.preventDefault();
								e.stopPropagation();
							}
						} else if (inputLetter == "lowercase") {
							if (/[A-Z]/g.test(e.newValue)) {
								var newValue = e.newValue.toLowerCase();
								control.value = newValue;
								e.preventDefault();
								e.stopPropagation();
							}
						}
				    }
				}
			}
		}
		
		var ExpressionRegister = {
			init : function(){
				//round 함수
				cpr.expression.ExpressionEngine.INSTANCE.registerFunction("getRound", function(value, position) {
					if(isNaN(value)) return 0;
					else if(value == Infinity || value == -Infinity) return 0;
					if(position == undefined || position == null) return Math.round(value);
					else return Math.round(value * (10 * position))/(10 * position);
				});
				//floor 함수
				cpr.expression.ExpressionEngine.INSTANCE.registerFunction("getFloor", function(value, position) {
					if(isNaN(value)) return 0;
					else if(value == Infinity || value == -Infinity) return 0;
					if(position == undefined || position == null) return Math.floor(value);
					else return Math.floor(value * (10 * position))/(10 * position);
				});
				//숫자 천단위 콤마 포맷
				cpr.expression.ExpressionEngine.INSTANCE.registerFunction("formatToNumber", function(value) {
					if(isNaN(value)) return value;
					return new String(value).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
				});
			}
		}
		
		
		AppInitTask.init();
		GridInitTask.init();
		InputBoxInitTask.init();
		ExpressionRegister.init();
	});
})();
/// end - module/event
/// start - module/extension
/*
 * Module URI: module/extension
 * SRC: module/extension.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/extension", function(exports, globals, module){
		/************************************************
		 * Control Wrapping Utils
		 * 각 사이트별 커스터마이징하여 사용
		 * version 2.0
		 ************************************************/
		
		// 의존 모듈 선언.
		module.depends("module/common");
		
		
		
		/* 앱스택 변수 *******************************************************************/
		
		var _LAST_KNOWN_STATE_ID = 0;
		/**
		 * 현재 앱 스택. 화면이 열린 후 열렸던 화면에 대한 스택을 쌓습니다.
		 * @type StackInfo[]
		 */
		var _stack = [];
		
		/**
		 * 앞으로 가기 앱 스택.
		 * @type StackInfo[]
		 */
		var _redoStack = [];
		var appStackInfo = null;
		/* **************************************************************************************************/
		
		/**
		 * AppStack(앱스택) 유틸
		 * @constructor
		 * @param {common.module} appKit
		 */
		function AppStackKit(appKit){
			this._appKit = appKit;
		
		};
		
		/**
		 * 메시지 ID에 해당되는 메시지를 반환한다.
		 * @param {cpr.controls.EmbeddedApp | cpr.controls.MDIFolder} 앱스택을 쌓을 컨트롤 embeddedApp or mdiFolder
		 */
		AppStackKit.prototype.start = function(control) {
			
			var type = null;
			if(control instanceof cpr.controls.EmbeddedApp){
				type = "EmbeddedApp";
			}else if(control instanceof cpr.controls.MDIFolder){
				type = "MDIFolder";
			}else{
				return ;
			}
			
			//앱스택 정보를 저장
			appStackInfo = (function(control, type){
				var appStackControl = control;
				var appStackType = type;
				
				return {
					getControl : function(){
						return appStackControl;
					},
					getType : function(){
						return appStackType;
					}
				}
			})(control, type);
			
			window.addEventListener("popstate", handlePoppedState);
		    
		};
		
		AppStackKit.prototype.stop = function(){
			appStackInfo = null;
			window.removeEventListener("popstate", handlePoppedState);
		} 
		
		/**
		 * @param {String} appId 스택을 쌓을 appId
		 */
		AppStackKit.prototype.push = function(appId){
			var type = appStackInfo.getType();
			if(type == "EmbeddedApp"){
				cpr.core.App.load(appId, function(loadedApp) {
					var newInfo = new StackInfo(appId);
					
					_stack.push(newInfo);
					
					if (_stack.length === 1) {
						history.replaceState(newInfo.state, loadedApp.title);
					} else {
						history.pushState(newInfo.state, loadedApp.title);
					}
				});
			}else{
				var newInfo = new StackInfo(appId);	
				_stack.push(newInfo);
					
				if (_stack.length === 1) {
					history.replaceState(newInfo.state, appId);
				} else {
					history.pushState(newInfo.state, appId);
				}
			}
			
		}
		
		/**
		 * 브라우저의 popstate 이벤트를 처리하는 핸들러.
		 * @param {PopStateEvent} e
		 */
		function handlePoppedState(e) {
			var state = e.state;
			if (!state) {
				return;
			}
			var type = appStackInfo.getType();
			var control = appStackInfo.getControl();	
			var prevAppInfo = _stack.filter(function( /* StackInfo */ each) {
				return each.state.id == state["id"];
			})[0];
			
			// 이후 기록에서 일치하는 항목 검색.
			var nextAppInfo = _redoStack.filter(function( /* StackInfo */ each) {
				return each.state.id == state["id"];
			})[0];
			
			var current;
			
			// 이전 항목 일치 처리.
			if (prevAppInfo) {
				while (getActiveStackInfo() != prevAppInfo) {
					if (_stack.length === 0) {
						return;
					}
					var current = _stack.pop();
					_redoStack.push(current);
				}
				current = getActiveStackInfo();
			}
			
			// 이후 항목 일치 처리.
			else if (nextAppInfo) {
				do {
					current = _redoStack.pop();
					_stack.push(current);
				} while (current !== nextAppInfo)
			}
			
			if(!current)	return ;
			var appId = current.state.appId;
			
			if(type == "EmbeddedApp"){
				cpr.core.App.load(current.state.appId, function(loadedApp) {
					control.app = loadedApp;
				});
			}else if(type == "MDIFolder"){
				/** @type cpr.controls.MDIFolder */
				var mdiFolder = control;
				
				var appIns = mdiFolder.getAppInstance();
				
				if(appIns.getRootAppInstance().hasAppMethod("doOpenMenuToMdi")){
					appIns.getRootAppInstance().callAppMethod("doOpenMenuToMdi", appId);		
				}
				
				/** Main의 메뉴호출방식이 app.id로 이루어질 경우 아래 로직 적용
				var currentTabItems = mdiFolder.getTabItems().filter(function(each){
					return each.content.app.id == appId;
				});
				if(currentTabItems.length > 0){
					var tabItem = currentTabItems[currentTabItems.length-1];
					mdiFolder.setSelectedTabItem(tabItem);
				}else{
					var appIns = mdiFolder.getAppInstance();
					var newItem = new cpr.controls.TabItem();
					var ea = new cpr.controls.EmbeddedApp();
					cpr.core.App.load(current.state.appId, function(loadedApp) {
						newItem.content = ea;
						newItem.text = loadedApp.title;
						newItem.closable = true;
						ea.app = loadedApp;
						mdiFolder.addTabItem(newItem);
						mdiFolder.setSelectedTabItem(newItem);
					});
				}**/
			}
		}
		
		/**
		 * 
		 */
		
		/**
		 * 현재 화면에 표시중인 앱 정보를 얻습니다.
		 */
		function getActiveStackInfo() {
			if (_stack.length > 0) {
				return _stack[_stack.length - 1];
			} else {
				return null;
			}
		}
		
		/**
		 * 각 앱의 정보를 담은 스택 엘리먼트 객체.
		 * @param {String} appId 앱 아이디
		 * @constructor
		 */
		function StackInfo(appId) {
			this.state = {
				"appId": appId,
				"id": _LAST_KNOWN_STATE_ID++, 
			};
		}
		
		
		
		/**
		 * ComUdcBtnKit(공통, 버튼) 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function ComUdcBtnKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 지정한 컨트롤의 Enable 속성을 설정한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {Boolean} pbEnable 컨트롤 활성화 여부
		 * @param {String | Array} paCtlId 배열 [I:신규, D:삭제, S:저장, 미지정 : 전체]
		 * @return void
		 */
		ComUdcBtnKit.prototype.setEnable = function(app, pbEnable, paCtlId) {
			if(!(paCtlId instanceof Array)){
				paCtlId = [paCtlId];
			}
			if (typeof (pbEnable) != "boolean") {
				pbEnable = ValueUtil.fixBoolean(pbEnable);
			}
			
			var comButton = this._appKit.Group.getAllChildrenByType(app, "udc.com.comButton");
			for (var i=0, len=comButton.length; i<len; i++) {	
				var ctrl = comButton[i];
				ctrl.setEnableCtrls(pbEnable, paCtlId);
			}
		};
		
		/**
		 * 공통 버튼 UDC 있는 컨트롤의 이벤트를 발생시킨다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤의 아이디
		 * @param {String} psEventType 이벤트명(ex-click)
		 */
		ComUdcBtnKit.prototype.dispatchEvent = function(app, psCtlId, psEventType){
			
			var comUdc;
			
			if(psCtlId == "btnSearch"){
				comUdc = this._appKit.Group.getAllChildrenByType(app, "udc.com.comBtnSearch");
			}else{
				comUdc = this._appKit.Group.getAllChildrenByType(app, "udc.com.comButton");
			}
			
			if(comUdc != null && comUdc.length > 0){
				var vcCtrl = comUdc[0].getEmbeddedAppInstance().lookup(psCtlId);
				if(vcCtrl){
					vcCtrl.dispatchEvent(new cpr.events.CEvent(psEventType));
				}
			}
		};
		
		
		
		/**
		 * 일반 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function ControlKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 지정한 컨트롤의 Visible 속성을 설정한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {Boolean} pbVisible 컨트롤 숨김 여부
		 * @param {#uicontrol | Array} paCtlId 컨트롤 ID 또는 ID 배열
		 * @return void
		 */
		ControlKit.prototype.setVisible = function(app, pbVisible, paCtlId) {
			if(!(paCtlId instanceof Array)){
				paCtlId = [paCtlId];
			}
			if (typeof (pbVisible) != "boolean") {
				pbVisible = ValueUtil.fixBoolean(pbVisible);
			}
			for (var i=0, len=paCtlId.length; i<len; i++) {
				app.lookup(paCtlId[i]).visible = pbVisible;
			}
		};
		
		/**
		 * 지정한 컨트롤의 Enable 속성을 설정한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {Boolean} pbEnable 컨트롤 활성화 여부
		 * @param {#uicontrol | Array} paCtlId 컨트롤 ID 또는 ID 배열
		 * @return void
		 */
		ControlKit.prototype.setEnable = function(app, pbEnable, paCtlId) {
			if(!(paCtlId instanceof Array)){
				paCtlId = [paCtlId];
			}
			if (typeof (pbEnable) != "boolean") {
				pbEnable = ValueUtil.fixBoolean(pbEnable);
			}
			var ctrl;
			for (var i=0, len=paCtlId.length; i<len; i++) {	
				ctrl = app.lookup(paCtlId[i]);
				if(ctrl) ctrl.enabled = pbEnable;
			}
		};
		
		/**
		 * 지정한 컨트롤의 ReadOnly 속성을 설정한다.<br>
		 * 만약, 해당 컨트롤에 readonly이 없을경우 enable 속성으로 제어된다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {Boolean} 		pbReadOnly  컨트롤 readOnly 여부
		 * @param {#uicontrol | Array} paCtlId 컨트롤 ID 또는 ID 배열
		 * @return void
		 */
		ControlKit.prototype.setReadOnly = function(app, pbReadOnly, paCtlId) {
			if(!(paCtlId instanceof Array)){
				paCtlId = [paCtlId];
			}
				
			for (var i=0, len=paCtlId.length; i<len; i++) {
				var voCtl = app.lookup(paCtlId[i]);
			  	if(voCtl == null || "undefined" == voCtl) continue;
				
				var vsCtlType = voCtl.type;
				if(voCtl.readOnly !== undefined){
					voCtl.readOnly = pbReadOnly;
				}else{
					this.setEnable(app, !pbReadOnly, paCtlId[i]);
				}
			}
		};
		
		/**
		 * 컨트롤의 지정된 사용자 정의 속성(userattr) 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 	  컨트롤 ID
		 * @param {String} psAttrName  속성
		 * @return {String} 속성값
		 */
		ControlKit.prototype.getUserAttr = function(app, psCtlId, psAttrName){
		   return app.lookup(psCtlId).userAttr(psAttrName);
		};
		
		/**
		 * 컨트롤의 지정된 사용자 정의 속성(userattr)의 값을 설정한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 	   컨트롤 ID
		 * @param {String} psAttrName  속성
		 * @param {String} psAttrValue 속성값
		 * @return void
		 */
		ControlKit.prototype.setUserAttr = function(app, psCtlId, psAttrName, psAttrValue){
			var ctrl = app.lookup(psCtlId);
			var userAttr = ctrl.userAttr();
			userAttr[psAttrName] = psAttrValue;
		};
		
		/**
		 * 컨트롤를 포커스(focus) 한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 	   컨트롤 ID
		 */
		ControlKit.prototype.setFocus = function(app, psCtlId){
			var ctrl = app.lookup(psCtlId);
			if(ctrl instanceof cpr.controls.UDCBase){
				var focused = false;
				var embApp = ctrl.getEmbeddedAppInstance();
				embApp.getContainer().getChildren().some(function(embCtrl){
					if(embCtrl.getBindInfo("value") && embCtrl.getBindInfo("value").property == "value"){
						embCtrl.focus();
						focused = true;
						return true;
					}
				});
				if(focused !== true){
					app.focus(ctrl);
				}
			}else{
				app.focus(ctrl);
			}
		}
		
		/**
		 * 컨트롤의 값을 초기화한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol | Array} paCtlId  일반 컨트롤 및 그리드 컨트롤 ID		
		 * @return void
		 */
		ControlKit.prototype.reset = function(app, paCtlId) {
			if(!(paCtlId instanceof Array)){
				paCtlId = [paCtlId];
			}
			var vcCtrl;
			for (var i=0, len=paCtlId.length; i<len; i++) {
				vcCtrl = app.lookup(paCtlId[i]);
				if(vcCtrl == null) continue;
				if(vcCtrl.type == "grid"){
					vcCtrl.dataSet.clear();
					//그리드 타이틀 영역의 데이터 건수 업데이트
					var titles = this._appKit.Group.getAllChildrenByType(app, "udc.com.comTitle");
					for(var j=0, jlen=titles.length; j<jlen; j++){
						if(titles[j] == null || titles[j].getAppProperty("ctrl") == null) continue;
						if(titles[j].getAppProperty("ctrl").id == vcCtrl.id){
							titles[j].setAppProperty("rowCount", vcCtrl.dataSet.getRowCount());
						}
					}
				}else if(vcCtrl.type == "container"){
					var voDs = this._appKit.Group.getBindDataSet(app, vcCtrl);
					if(voDs) voDs.clear();
					vcCtrl.redraw();
				}else{
					vcCtrl.value = "";
				}
			}
		};
		
		/**
		 * 특정 컨트롤의 자료를 갱신하고 다시 그린다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol | Array} paCtlId 일반 컨트롤 및 그리드 컨트롤 ID
		 * @return void
		 */
		ControlKit.prototype.redraw = function(app, paCtlId) {
			if(!(paCtlId instanceof Array)){
				paCtlId = [paCtlId];
			}
			for (var i=0, len=paCtlId.length; i<len; i++) {
				var vcCtrl = app.lookup(paCtlId[i]);
				if(vcCtrl) vcCtrl.redraw();
			}
		};
		
		/**
		 * 컨트롤의 지정된 style 속성 값을 가져옵니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤 ID
		 * @param {String} psAttrName style 속성명
		 * @return {String} style 속성값
		 */
		ControlKit.prototype.getStyleAttr = function(app, psCtlId, psAttrName){
			/**@type cpr.controls.UIControl*/
			var vcCtrl = app.lookup(psCtlId);
			return vcCtrl.style.css(psAttrName);
		};
		
		/**
		 * 컨트롤의 지정된 style 속성값을 설정한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤 ID
		 * @param {String} psAttrName 속성
		 * @param {String} psAttrValue 속성값
		 * @return void
		 */
		ControlKit.prototype.setStyleAttr = function(app, psCtlId, psAttrName, psAttrValue){
			/**@type cpr.controls.UIControl*/
			var vcCtrl = app.lookup(psCtlId);
			return vcCtrl.style.css(psAttrName, psAttrValue);
		};
		
		/**
		 * 컨트롤이 실제 그려진 사이즈를 리턴합니다.<br>
		 * 컨트롤이 화면에 그려지지 않은 상태인 경우는 모든 값이 0인 객체가 리턴됩니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId  컨트롤 ID
		 * @param {String} psPosition 구하고자하는 위치 및 크기 정보<br>(width, height, left, top, bottom, right)
		 * @return {Interface{width: Number, height: Number, left: Number, top: Number, bottom: Number, right: Number}} HTML DOM에서의 컨트롤의 위치 및 크기 정보
		 */
		ControlKit.prototype.getActualRectPosition = function(app, psCtlId, psPosition){
			/** @type cpr.controls.UIControl */
			var vcCtrl = app.lookup(psCtlId);
			var voActRec = vcCtrl.getActualRect();
			return voActRec[psPosition];
		};
		
		/**
		 * 해당 컨트롤의 제약 조건을 반환합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 반환하고자 하는 컨트롤 ID
		 * @param {String} psParentGrp? 상위 컨트롤 그룹내 컨트롤의 제약 조건을 구할시 사용
		 * @return {cpr.controls.layouts.Constraint} 해당하는 제약조건
		 */
		ControlKit.prototype.getConstraint = function(app, psCtlId, psParentGrp){
			var ctrl = app.lookup(psCtlId);
			var container;
			if(!ValueUtil.isNull(psParentGrp)){
				container = app.lookup(psParentGrp);
			}else{
				container = app.getContainer();		
			}
			return container.getConstraint(ctrl);
		};
		
		/**
		 * 컨트롤의 지정된 제약 조건(constraint)을 변경합니다.<br>
		 * 타겟 컨트롤에서 부모 컨트롤과의 연계된 위치를 변경합니다.<br>
		 * parameter의 constraints가 포함한 항목만 변경합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤의 ID
		 * @param {#container} psParentGrpId 상위 컨트롤의 ID (app의 container일 경우 null)
		 * @param {Object} poConstraint 제약조건<br>
		 * 					상위 컨트롤의 레이아웃이 formlayout일 경우 rowIndex, colIndex 를 반드시 포함한 조건을 설정하여야합니다.
		 * @return {Boolean} 성공여부
		 */
		ControlKit.prototype.updateConstraint = function(app, psCtlId, psParentGrpId, poConstraint){
		 	/** @type cpr.controls.UIControl */
		 	var vcChild = app.lookup(psCtlId);
		 	if(vcChild == null) return false;
		 	/** @type cpr.controls.Container */
		 	var voContainer = null;
		 	if(!ValueUtil.isNull(psParentGrpId)){
		 		voContainer = app.lookup(psParentGrpId);
		 	}else {
		 		voContainer = app.getContainer();
		 	}
		 	
		 	var voLayout = voContainer.getLayout();
		 	var voConstraint = null;
		 	if(voLayout instanceof cpr.controls.layouts.ResponsiveXYLayout){
		 		var voSrcConstraint = voContainer.getConstraint(vcChild)["positions"][0];
		 		voConstraint = {
		 			positions:[Object.assign(voSrcConstraint, poConstraint)]
		 		}
		 	}else {
		 		voConstraint = poConstraint;
		 	}
		 	
		 	return voContainer.updateConstraint(vcChild, voConstraint);
		};
		
		/**
		 * 해당 컨트롤의 이벤트를 발생시킨다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤의 ID
		 * @param {String} psEventType 이벤트명(ex-click)
		 */
		ControlKit.prototype.dispatchEvent = function(app, psCtlId, psEventType){
			var vcCtrl = app.lookup(psCtlId);
			if(vcCtrl){
				vcCtrl.dispatchEvent(new cpr.events.CEvent(psEventType));
			}
		};
		
		/**
		 * 지정한 컨트롤의 value를 지정한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤 ID
		 * @param {String} psValue 값
		 * @param {Boolean} pbEmitEvent? 값 변경후의 before-value-change, value-change 이벤트 발생시킬지 여부<br/>
		 *                  만약 값만 바꾸고, 이벤트 발생은 일어나지 않도록 하는 경우에만 false로 지정
		 * @return void
		 */
		ControlKit.prototype.setValue = function(app, psCtlId, psValue, pbEmitEvent){
		   var ctrl = app.lookup(psCtlId);
		   if(pbEmitEvent === false && ctrl.putValue != undefined){
		   		ctrl.putValue(psValue);
		   }else{
		   		ctrl.value = psValue;
		   }
		};
		
		/**
		 * @desc 지정한 컨트롤의 value를 취득한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤 ID
		 * @return void
		 */
		ControlKit.prototype.getValue = function(app, psCtlId){
		   return app.lookup(psCtlId).value;
		};
		
		/**
		 * @desc 지정한 컨트롤의 value를 취득한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtlId 컨트롤 ID
		 * @param {String} psProperty 컨트롤 속성명
		 * @return void
		 */
		ControlKit.prototype.getProperty = function(app, psCtlId, psProperty){
		   return app.lookup(psCtlId)[psProperty];
		};
		
		/**
		 * 파라미터로받은 parent하위의 모든 uiComponent들을 찾아 리턴합니다.(그룹, 임베디드앱, UDC일떄 사용)
		 * @param {cpr.core.AppInstance} app
		 * @param {cpr.controls.UIControl[]} poParent
		 * @return {cpr.controls.UIControl[]} 
		 */
		ControlKit.prototype.getAllUiControl = function(app, poParent, result){
			
			if(!(poParent instanceof Array)){
		      poParent = [poParent];
		   }
			result = result || []
			var childs = []
			
			
			poParent.forEach(function(each){ 
				if(each.type === "embeddedapp" || each instanceof cpr.controls.UDCBase){
					childs = childs.concat(each.getEmbeddedAppInstance().getContainer().getAllRecursiveChildren());
				}
				else if(each.type === "container"){
					childs = childs.concat(each.getAllRecursiveChildren())
				}
			});
			result = result.concat(childs);
			var containers = childs.filter(function(each){
				if(each.type === "embeddedapp" || each instanceof cpr.controls.UDCBase){
					return true;
				}
			})
		
			return containers.length === 0 ? result : this.getAllUiControl(app, containers, result)
		}
		
		/**
		 * app에 있는 모든 데이터 컨트롤을 리턴합니다.
		 * @param {cpr.core.AppInstance[]} apps
		 */
		ControlKit.prototype.getAllDataControl = function(apps){
			var getRecursiveApp = function(startApp, resArray){
				resArray = resArray || startApp;
				
				var appInstances = [];
				
				startApp.forEach(function(each){
					appInstances = appInstances.concat(
						each.getContainer().getAllRecursiveChildren().filter(function(ctrl){
								return ctrl.type === "embeddedapp" || ctrl instanceof cpr.controls.UDCBase
						}).map(function(emb){
							return emb.getEmbeddedAppInstance();
						})
					)
				});
				
				return appInstances.length === 0 ? resArray : getRecursiveApp(appInstances, resArray.concat(appInstances))
			}
			
			if(!(apps instanceof Array)){
		      apps = [apps];
		    }
		    var res = []
			getRecursiveApp(apps).forEach(function(/* cpr.core.AppInstance */ each){
				res = res.concat(each.getAllDataControls().filter(function(dataControl){
					return !(dataControl instanceof cpr.protocols.Submission);
				}))
			})
			return res;
		}
		
		/**
		 * 컨트롤에 invalid클래스를 추가합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#uicontrol} ctrlId
		 */
		ControlKit.prototype.addInvalidClass = function(app, ctrlId){
			if(!(app instanceof cpr.core.AppInstance) || !ctrlId) return;
			
			app.lookup(ctrlId).style.addClass("invalid")
		}
		
		/**
		 * 컨트롤에 invalid클래스를 제거합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#uicontrol} ctrlId
		 */
		ControlKit.prototype.removeInvalidClass = function(app, ctrlId){
			if(!(app instanceof cpr.core.AppInstance) || !ctrlId) return;
			
			app.lookup(ctrlId).style.removeClass("invalid")
		}
		
		/**
		 * 해당 컨트롤 하위에 있는 invalid클래스를 제거합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {String} ctrlId (그리드 / 그룹)
		 */
		ControlKit.prototype.removeInvalidClassAll = function(app, psCtrlId){
			var ctrl = app.lookup(psCtrlId);
		
			if(ctrl instanceof cpr.controls.Grid){
				var detailColumns = [];
				
				ctrl.detail.getCellIndices().forEach(function(each){
					detailColumns.push(ctrl.detail.getColumn(each));
				});
				
				detailColumns.forEach(function(/* cpr.controls.gridpart.GridColumn */ column){
					if(column.control){
						column.control.style.unbindClass();
					}
				});
			}
			else{
				this.getAllUiControl(app, ctrl).forEach(function(each){
					each.style.removeClass("invalid");
				});
			}
			
		}
		
		
		
		/**
		 * 데이터맵(DataMap) 데이터 컴포넌트 유틸
		 * @param {common.AppKit} appKit
		 */
		function DataMapKit(appKit){
			this._appKit = appKit;
		}
		
		/**
		 * 입력 받은 columnName에 해당되는 데이터를 반환
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#datamap} psDataMapId 데이터맵 ID
		 * @param {#column} psColumnName 값을 가져오고자 하는 컬럼명
		 * @return {Object} 해당 데이터<br>
		 * 					header dataType에 따라 반환타입이 정해짐<br>
							해당 columnName의 column이 존재 할 경우 해당 값 반환<br>
							해당 columnName의 값이 없을 경우 ""(공백) 반환<br>
							해당 columnName이 존재하지 않을 경우 null 반환
		 */
		DataMapKit.prototype.getValue = function(app, psDataMapId, psColumnName){
			/** @type cpr.data.DataMap */
			var vcDataMap = app.lookup(psDataMapId);
			return vcDataMap.getValue(psColumnName);
		};
		
		/**
		 * 입력 받은 columnName에 해당되는 데이터를 수정
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#datamap} psDataMapId 데이터맵 ID
		 * @param {#column} psColumnName 값을 가져오고자 하는 컬럼명
		 * @param {String} psValue 수정할 value 값
		 * @return {Boolean} 값 수정 성공 여부
		 */
		DataMapKit.prototype.setValue = function(app, psDataMapId, psColumnName, psValue){
			/** @type cpr.data.DataMap */
			var vcDataMap = app.lookup(psDataMapId);
			return vcDataMap.setValue(psColumnName, psValue);
		};
		
		/**
		 * 데이터를 모두 제거합니다.<br>
		 * (data가 모두 공백으로 설정됩니다.)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param  {#datamap} psDataMapId 데이터맵 ID
		 */
		DataMapKit.prototype.clear = function(app, psDataMapId){
			/** @type cpr.data.DataMap */
			var vcDataMap = app.lookup(psDataMapId);
			vcDataMap.clear();
		};
		
		/**
		 * 데이터를 모두 초기화합니다.<br>
		 * (data 모두 초기 설정값으로 설정됩니다.)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param  {#datamap} psDataMapId 데이터맵 ID
		 */
		DataMapKit.prototype.reset = function(app, psDataMapId){
			/** @type cpr.data.DataMap */
			var vcDataMap = app.lookup(psDataMapId);
			vcDataMap.reset();
		};
		
		/**
		 * 현재 데이터맵의 데이터를 타겟 데이터맵으로 복사합니다. <br>
		 * 복사시 타겟 데이터맵의 alterColumnLayout 속성에 따라 복사방법의 설정됩니다. 
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#datamap} psSourceDataMapId 데이터맵 ID
		 * @param {#datamap} psTargetDataMapId 복사 데이터가 들어갈 타겟 맵 ID
		 * @return {Boolean}
		 */
		DataMapKit.prototype.copyToDataMap = function(app, psSourceDataMapId, psTargetDataMapId){
			var vcDataMap = app.lookup(psSourceDataMapId);
			var vcTargetDataMap = app.lookup(psTargetDataMapId);
			return vcDataMap.copyToDataMap(vcTargetDataMap);
		};
		
		/**
		 * Column을 추가합니다.<br>
		 * Header정보에 추가되며, data가 있는 경우 row data에도 해당 column data가 추가됩니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#datamap} psDataMapId 데이터맵 ID
		 * @param {String} psColumnNm 추가하려는 Header 명
		 * @param {String} psValue? 초기값 설정
		 * @return {Boolean} 컬럼 추가 성공 여부
		 */
		DataMapKit.prototype.addColumn = function(app, psDataMapId, psColumnNm, psValue){
			var vcDataMap = app.lookup(psDataMapId);
			return vcDataMap.addColumn(new cpr.data.header.DataHeader(psColumnNm, "string"), psValue);
		};
		
		/**
		 * Column을 삭제합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#datamap} psDataMapId 데이터맵 ID
		 * @param {#column} psColumnName 삭제할 컬럼 명
		 * @return {Boolean} 컬럼 삭제 성공 여부
		 */
		DataMapKit.prototype.deleteColumn = function(app, psDataMapId, psColumnName){
			var vcDataMap = app.lookup(psDataMapId);
			return vcDataMap.deleteColumn(psColumnName);
		};
		
		/**
		 * 데이터맵이 비어있는지 체크합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#datamap} psDataMapId
		 */
		DataMapKit.prototype.isEmpty = function(app, psDataMapId){
			/** @type cpr.data.DataMap **/
			var dm = app.lookup(psDataMapId)
		
			return dm && dm.getColumnNames().every(function(col){
				return !dm.getString(col)
			})
		}
		
		/**
		 * @desc 데이터맵을 동적으로 생성합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} psDataMapId       생성할 데이터셋 아이디
		 * @param {Object} poColumnInfo      컬럼정보 ex) {column1 : "string"} : 컬럼명 : 타입
		 * @return {cpr.data.DataMap} 생성된 데이터맵
		 */
		DataMapKit.prototype.makeDataMap = function(app, psDataSetId, poColumnInfo){
			
			if(!psDataSetId || !poColumnInfo) return;
			
			var tmpDm = new cpr.data.DataMap(psDataSetId);
			var that = this;
			app.register(tmpDm);
			
			Object.keys(poColumnInfo).forEach(function(each){
				var columnNm = each;
				var type = poColumnInfo.each;
		
				that.addColumn(app, psDataSetId, columnNm, null, type)
			});
		
			return tmpDm;	
		}
		
		
		/**
		 * 데이터셋 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function DataSetKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 데이터셋 또는 데이터맵에 컬럼(Column)을 추가합니다.<br>
		 * Header정보 추가되며, data가 있는 경우 row data에도 해당 column data가 추가됩니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 * @param {String} psColumnNm 추가하려는 컬럼명
		 * @param {Object} psValue? 초기값 설정
		 * @param {"string" | "number" | "decimal" | "expression"} psColumnType? 컬럼유형
		 * @return {Boolean} 컬럼 추가 성공 여부
		 */
		DataSetKit.prototype.addColumn = function(app, psDataSetId, psColumnNm, psValue, psColumnType){
			/** @type cpr.data.DataSet */
			var dataset = app.lookup(psDataSetId);
			
			var columnType = !ValueUtil.isNull(psColumnType) ? psColumnType.toLowerCase() : "string";
			return dataset.addColumn(new cpr.data.header.DataHeader(psColumnNm, columnType), psValue);
		};
		
		/**
		 * 데이터셋 특정 값을 가져오는 함수 입니다.
		 * <pre><code>
		 * util.DataSet.getCondValue(app, "dsLttmRcd", "CD == '" + vsNewVal + "'", "CD_USG_01");
		 * </code></pre>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 * @param {String} psCondition 특정 값을 가져올 조건
		 * @param {#column} psColumnName 가져오려는 값의 컬럼명
		 */
		DataSetKit.prototype.getCondValue = function(app, psDataSetId, psCondition, psColumnName){
			/** @type cpr.data.DataSet */
			var dataset = app.lookup(psDataSetId);
			
			var voRow = dataset.findFirstRow(psCondition);
			return voRow != null ? voRow.getValue(psColumnName) : "";
		};
		
		/**
		 * 데이터셋 특정 값을 가져오는 함수 입니다.
		 * <pre><code>
		 * util.DataSet.getValue(app, "dsLttmRcd", 1, "CD_USG_01");
		 * </code></pre>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 * @param {Number} pnRowIndex 값을 가져올 row의 row index
		 * @param {#column} psColumnName 가져오려는 값의 컬럼명
		 */
		DataSetKit.prototype.getValue = function(app, psDataSetId, pnRowIndex, psColumnName){
			/** @type cpr.data.DataSet */
			var dataset = app.lookup(psDataSetId);
			
			return dataset.getValue(pnRowIndex, psColumnName)
		};
		
		
		/**
		 * 입력 받은 rowIndex와 columnName에 해당되는 데이터를 수정합니다.<br>
		 * <br>
		 * 1. 상태변경<br>
		 * 해당 columnName에 해당되는 Column이 DisplayColumn이 아니고 Row상태가 UNCHANGED 상태인 경우<br>
		 * Row 상태가 UPDATED로 바뀝니다.(UNCHANGED -> UPDATED)<br>
		 * DELEDED상태이거나 INSERTED상태인 row는 수정할 수 없습니다.<br>
		 * 2. 이벤트<br>
		 * 수정이 된 경우 <b>UPDATED 이벤트가 발생합니다.</b>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 * @param {Number} pnRowIndex 수정할 row의 row index
		 * @param {#column} psColumnName 수정할 column의 columnName
		 * @param {Object} psValue 수정할 value 값
		 * @return {Boolean} 값 수정 성공 여부
		 */
		DataSetKit.prototype.setValue = function(app, psDataSetId, pnRowIndex, psColumnName, psValue){
			/** @type cpr.data.DataSet */
			var vcDataSet =  app.lookup(psDataSetId);
			return vcDataSet.setValue(pnRowIndex, psColumnName, psValue);
		};
		
		/**
		 * 모든 데이터셋 정보를 제거합니다.<br>
		 * data, sort, filter가 제거됩니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 */
		DataSetKit.prototype.clear = function(app, psDataSetId) {
			/** @type cpr.data.DataSet */
			var vcDataSet = app.lookup(psDataSetId);
			vcDataSet.clear();
		}
		
		/**
		 * 지정한 범위 내의 row들 중 조건에 맞는 모든 Row 객체의 배열을 반환<br>
		 * 또는 지정한 범위 내의 row들 중 조건에 맞는 첫번째 Row 객체를 반환
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 * @param {String} psCondition 조건식<br>
		 *                 ex)"STUD_DIV_RCD == 'CT101REGU' && SA_NM == '컴퓨터정보과'"
		 * 					사용가능수식 !=", "!==", "$=", "%", "&&", "(", "*", "*=", "+", ",", "-", ".", "/", "/*", "//", "<", "<=", "==", "===", ">", ">=", "?", "[", "^=", "||"
		 * @param {Boolean} pbAllStatus?
		 *                             true : 조건에 맞는 모든 row 리턴<br>
		 *                             default : 조건에 맞는 첫번째 row 리턴
		 * @param {Number} pnStartIdx? Number  범위지정 시작 row index
		 * @param {Number} pnEndIdx? Number  범위지정 끝 row index
		 * @retrun 데이터 로우
		 */
		DataSetKit.prototype.findRow = function(app, psDataSetId, psCondition, pbAllStatus, pnStartIdx, pnEndIdx) {
			/** @type cpr.data.DataSet */
			var vcDataSet = app.lookup(psDataSetId);
		
			if(pbAllStatus){
				return vcDataSet.findAllRow(psCondition, pnStartIdx, pnEndIdx);
			}else{
				return vcDataSet.findFirstRow(psCondition, pnStartIdx, pnEndIdx);
			}
		};
		
		/**
		 * 지정한 범위 내의 row들 중 조건에 맞는 첫번째 Row 객체에 해당하는 컬럼의 value를 취득
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 * @param {String} psCondition 조건식<br>
		 *                 ex)"STUD_DIV_RCD == 'CT101REGU' && SA_NM == '컴퓨터정보과'"
		 * 					사용가능수식 !=", "!==", "$=", "%", "&&", "(", "*", "*=", "+", ",", "-", ".", "/", "/*", "//", "<", "<=", "==", "===", ">", ">=", "?", "[", "^=", "||"
		 * @param {#column} psColumnName 컬럼명
		 * @param {Number} pnStartIdx?  범위지정 시작 row index
		 * @param {Number} pnEndIdx?   범위지정 끝 row index
		 * @retrun 데이터 로우
		 */
		DataSetKit.prototype.getFindRowValue = function(app, psDataSetId, psCondition, psColumnName, pnStartIdx, pnEndIdx) {
			var voRow = this.findRow(app, psDataSetId, psCondition, false, pnStartIdx, pnEndIdx);
			if(voRow != null){
				return voRow.getValue(psColumnName);
			}else{
				return null;
			}
		};
		
		/**
		 * 현재 Row 수를 반환
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId 데이터셋 ID
		 * @retrun {Number} 로우 갯수
		 */
		DataSetKit.prototype.getRowCount = function(app, psDataSetId) {
			/** @type cpr.data.DataSet */
			var vcDataSet = app.lookup(psDataSetId);
			return vcDataSet.getRowCount();
		};
		
		/**
		 * 현재 데이터셋의 데이터를 타겟 데이터셋으로 복사합니다.<br>
		 * 타겟 데이터셋의 존재하는 컬럼의 데이터만 복사됩니다.<br>
		 * 복사시 추가되는 데이터는 INSERT 상태입니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스 
		 * @param {#dataset} psSourceDataSetId DataSet ID
		 * @param {#dataset} psTargetDataSetId 복사 데이터가 들어갈 타겟 DataSet ID
		 * @param {String} psFilterCondition? 복사시 필터링할 조건 (생략시 전체 복사, target의 기존 데이터는 삭제됨)<br>
		 * 				   "STUD_DIV_RCD == 'CT101REGU' && SA_NM == '컴퓨터정보과'" (동일한 로우가 있을경우 복사안함)
		 * @return {Boolean}
		 */
		DataSetKit.prototype.copyToDataSet = function(app, psSourceDataSetId, psTargetDataSetId, psFilterCondition){
			var vcSourceDataSet = app.lookup(psSourceDataSetId);
			var vcTargetDataSet = app.lookup(psTargetDataSetId);
			if(!psFilterCondition) vcTargetDataSet.clear();
			else{
				var vaFindRow = vcTargetDataSet.findAllRow(psFilterCondition);
				if(vaFindRow != null && vaFindRow.length > 0){
					return;
				}
			}
			return vcSourceDataSet.copyToDataSet(vcTargetDataSet, psFilterCondition);
		};
		
		/**
		 * rowData를 입력받아 원하는 특정 row index의 앞이나 뒤에 신규 row를 추가합니다.<br>
		 * <b>INSERTED 이벤트가 발생합니다.</b>
		 * @param {cpr.core.AppInstance} app 앱인스턴스 
		 * @param {#dataset} psDataSetId DataSet ID
		 * @param {Number} pnIndex index 삽입하고자 하는 row index
		 * @param {Boolean} pbAfter 해당 row index의 뒤에 삽입할지 여부 (true:뒤 / false:앞)
		 * @param {cpr.data.RowConfigInfo} poRowData 추가할 row data (key: header명, value: value 를 갖는 json data)<br>
		{[columnName: string]: string | number | boolean}
		*  @return {cpr.data.Row} 추가한 신규 Row 객체
		 */
		DataSetKit.prototype.insertRow = function(app, psDataSetId, pnIndex, pbAfter, poRowData){
			/** @type cpr.data.DataSet */
			var vcDataSet = app.lookup(psDataSetId);
			if(poRowData == null){
				return vcDataSet.insertRow(pnIndex, pbAfter);
			}else{
				return vcDataSet.insertRowData(pnIndex, pbAfter, poRowData);
			}
		
		};
		
		/**
		 * 
		 * @param {cpr.core.AppInstance} app
		 * @param {String} psGridId
		 * @param {cpr.events.CSelectionEvent} evt
		 * @param {String} paDataSetId
		 * @param {any} pfConfirmCallback
		 */
		DataSetKit.prototype.isModifyForRowBeforeChangEvent = function(app, psGridId, evt, paDataSetId, pfConfirmCallback){
			
			//데이터셋에 row가 추가되면 신규(insert이벤트)와 selection-change가 같이 발생하기때문에 신규행일경우 체크하지 않음?
			if(app.lookup(psGridId).dataSet && app.lookup(psGridId).dataSet.getRowState(evt.newSelection[0]) === cpr.data.tabledata.RowState.INSERTED) return;
			var SelectStrategy = {
				"grid" : {
					select : function(/* cpr.controls.Grid */ ctrl, idx){
						if(ctrl && !ValueUtil.isNull(idx)) ctrl.selectRows(idx);			
					},
					getIndex : function(selection){
						return selection[0]
					}
				},
				"tree" : {
					select : function(/* cpr.controls.Tree */ ctrl, idx){
						ctrl.selectItem(idx);
						ctrl.redraw();
					},
					getIndex : function(selection){
						return selection[0]
					}
				},
				"tabfolder" : {
					select : function(/* cpr.controls.TabFolder */ tab, idx){
						if(tab && !ValueUtil.isNull(idx)){
							tab.setSelectedTabItem(tab.getTabItemByID(idx));
						}
					},
					getIndex : function(selection){
						return selection.id;
					}
				}
			}
			
			/** @type cpr.data.DataSet[] */
			var targetDs = [];
			
			if(!(app.lookup(psGridId) instanceof cpr.controls.TabFolder)) targetDs.push(app.lookup(psGridId).dataSet.id);
			
			if(!(paDataSetId instanceof Array)){
		     	paDataSetId = [paDataSetId];
		    }
		    targetDs = targetDs.concat(paDataSetId)
			
			var isModify = this.isModify(app, targetDs);
		    if(isModify){
		    	this._appKit.Msg.confirmDialog(app, "CRM-M003", null, function(e){
		    		var ctrl = app.lookup(psGridId);
		    		var idxRetouchCnt = 0;
		    		var insertedRowIdxs = [];
		    		var strategy = SelectStrategy[ctrl.type];
		    		
					if(e.control.returnValue.closeState === "confirm"){
						
						if(pfConfirmCallback && typeof pfConfirmCallback === "function"){
							pfConfirmCallback();
						}
		
						targetDs.forEach(function(dsId){
							/** @type cpr.data.DataSet */
							var ds = app.lookup(dsId)
							
							if(ctrl.type !== "tabfolder" && ds.id === ctrl.dataSet.id){
								insertedRowIdxs = ds.getRowStatedIndices(cpr.data.tabledata.RowState.INSERTED);
								insertedRowIdxs = insertedRowIdxs.concat(ds.getRowStatedIndices(cpr.data.tabledata.RowState.INSERTDELETED));
							}
							ds.revert();
						});
						insertedRowIdxs.forEach(function(each){
							if(evt.newSelection[0] > each){
								idxRetouchCnt++;
							}
						});
						
						
						strategy.select(ctrl, strategy.getIndex(evt.newSelection) - idxRetouchCnt);
					}
					else{
						strategy.select(ctrl, strategy.getIndex(evt.oldSelection));
					}
				})
		    }
		    
		    return !(isModify);
		}
		
		/**
		 * 신규시 데이터 변경사항 체크
		 * @param {cpr.core.AppInstance} app
		 * @param {#grid} psGridId
		 * @param {#dataset} psGridId
		 * @param {Function} pfCallback
		 */
		DataSetKit.prototype.isModifyForInsertRow = function(app, psGridId, paDataSetId, pfCallback) {
			if(!app || !psGridId) return;
			if(!app || !paDataSetId) return;
			
			if(!(paDataSetId instanceof Array)){
		     	paDataSetId = [paDataSetId];
		    }
			
			/** @type cpr.controls.Grid **/
			var grid = app.lookup(psGridId);
			var selectedRow = grid.getSelectedRow() === null? 0 : grid.getSelectedRow().getIndex();
			paDataSetId.push(grid.dataSet.id);
			
			if (this.isModify(app, paDataSetId)) {
				this._appKit.Msg.confirmDialog(app, "CRM-M003", null, function(e) {
					if (e.control.returnValue.closeState === "confirm") {
						
						var mainGridModify = grid.dataSet.isModified();
						
						if(mainGridModify){
							selectedRow--;
						}
						grid.selectRows(selectedRow, false)
						
						paDataSetId.forEach(function(each){
							app.lookup(each).revert();
						});
						pfCallback(selectedRow);
						//grid.dataSet.revert();
						
		
					}
				});
			}
			else pfCallback(selectedRow);
		}
		
		/**
		 * 
		 * @param {cpr.core.AppInstance} app
		 * @param {Array} paDataSetId
		 * @param {Function} pfConfirmCallback
		 * @param {cpr.data.DataMap} searchDm
		 * @param {cpr.events.CDataEvent} evt
		 */
		DataSetKit.prototype.isModifyForSearchBox = function(app, paDataSetId, pfConfirmCallback, searchDm, evt){
			if(!app || !paDataSetId) return;
		
			if(!(paDataSetId instanceof Array)){
		     	paDataSetId = [paDataSetId];
		    }
			var that = this;
		    var isModify = this.isModify(app, paDataSetId);
		    //그리드 타이틀 영역의 데이터 건수 0건으로 초기화
			var titles = that._appKit.Group.getAllChildrenByType(app, "udc.sys.gridFunction");
			for(var i=0, len=titles.length; i<len; i++){
				titles[i].setAppProperty("rowCount", 0);
			}
		    if(isModify){
		    	this._appKit.Msg.confirmDialog(app, "CRM-M003", null, function(e){
		    		if(e.control.returnValue.closeState === "confirm"){
		    			paDataSetId.forEach(function(each){
							app.lookup(each).revert();
						});
						
						if(searchDm && evt){
							searchDm.setValue(evt.columnName, evt.currentValue);
						}
						pfConfirmCallback();
						app.getContainer().redraw();
		    		}
		    		else{
		    			
		    		}
		    	})
		    }
		    else pfConfirmCallback();
		    
		    
		    return !isModify;
		}
		/**
		 * 
		 * @param {cpr.core.AppInstance} app
		 * @param {cpr.events.CUIEvent} evt
		 * @param {Function} pfConfirmCallback
		 */
		DataSetKit.prototype.isAppModifyForTabClose = function(app, evt, pfConfirmCallback){
			
			
			/** @type {cpr.data.DataSet[]} **/
			var allDataControl = this._appKit.Control.getAllDataControl(app).filter(function(each){
				return each instanceof cpr.data.DataSet;
			});
			var isModify = false;
			
			isModify = allDataControl.some(function(each){
				if(each.isModified()) return true;
			});
		
			if(isModify){
				this._appKit.Msg.confirmDialog(app, "CRM-M003", null, function(e){
		    		if(e.control.returnValue.closeState === "confirm"){
		    			allDataControl.forEach(function(each){
							each.revert();
						});
						
						if(evt){
							/** @type {cpr.controls.MDIFolder} **/
							var mdi = evt.control;
							/** @type {cpr.controls.TabItem} **/
							var willCloseTabItem = evt.content;
							
							var items = mdi.getTabItems();
		
							var nextIdx = items.findIndex(function(each){
								return each.id === willCloseTabItem.id
							})-1;
							var nextTabItem = mdi.getTabItemByID(items[nextIdx].id)
							mdi.close(willCloseTabItem);
						}
						pfConfirmCallback(nextTabItem);
		    		}
		    	})
			}
			else{
				pfConfirmCallback()
			}
			return !isModify
		}
		
		/**
		 * @desc 데이터셋에 수정유무를 반환합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app
		 * @param {#dataset | #dataset[]} paDataSetId
		 * @param {"I" | "U" | "D"} psState?
		 * @return {Boolean} 수정유무
		 */
		DataSetKit.prototype.isModify = function(app, paDataSetId, psState){
			 if(!(paDataSetId instanceof Array)){
		     	paDataSetId = [paDataSetId];
		     }
			
		    return paDataSetId.some(function(each){
		     	/**
		     	 * @type cpr.data.DataSet
		     	 */
		     	var ds = app.lookup(each);
		     	if(!psState && ds.isModified()){
		     		return true;
		     	}
		     	else if(psState === "I" && ds.getRowStatedIndices(cpr.data.tabledata.RowState.INSERTED).length > 0){
		     		return true;
		     	}
		     	else if(psState === "U" && ds.getRowStatedIndices(cpr.data.tabledata.RowState.UPDATED).length > 0){
		     		return true;
		     	}
		     	else if(psState === "D" && ds.getRowStatedIndices(cpr.data.tabledata.RowState.DELETED).length > 0){
		     		return true;
		     	}
		     })
		}
		
		
		
		/**
		 * 특정 row index의 데이터만 원복시킵니다<br>
		 * @param {cpr.core.AppInstance} app 앱인스턴스 
		 * @param {#dataset} psDataSetId DataSet ID
		 * @param {Number} pnIndex index 삽입하고자 하는 row index
		*  @return {cpr.data.Row} 추가한 신규 Row 객체
		 */
		DataSetKit.prototype.revertRow = function(app, psDataSetId, pnIndex){
			/** @type cpr.data.DataSet */
			var vcDataSet = app.lookup(psDataSetId);
			vcDataSet.revertRow(pnIndex);
		};
		
		
		/**
		 * 특정 Row의 상태 값을 string 타입으로 반환합니다. <br>
		 * @param {cpr.core.AppInstance} app 앱인스턴스 
		 * @param {#dataset} psDataSetId DataSet ID
		 * @param {Number} pnIndex index  row index
		*  @return {String} Row을 찾을 수 없을 경우 null을 반환하고 그렇지 않은 경우 아래 값 중 하나를 반환합니다.
						       변경되지 않은 상태 : "UC", "UNCHANGED"
						    신규 상태 : "I", "INSERTED"
						     수정 상태 : "U", "UPDATED"
						     삭제 상태 : "D" , "DELETED"
						    추가되었다가 삭제된 상태 : "ID", "INSERTDELETED"
		 */
		DataSetKit.prototype.getRowStateString = function(app, psDataSetId, pnIndex){
			/** @type cpr.data.DataSet */
			var vcDataSet = app.lookup(psDataSetId);
			return vcDataSet.getRowStateString(pnIndex);
		};
		
		
		/**
		 * row index를 입력받아 해당 row를 제거합니다.
		 *  DELETED 이벤트가 발생합니다.  <br>
		 * @param {cpr.core.AppInstance} app 앱인스턴스 
		 * @param {#dataset} psDataSetId DataSet ID
		 * @param {Number} pnIndex index  삭제하고자하는 row index
		*  @return {Boolean} 삭제 성공 여부
		 */
		DataSetKit.prototype.deleteRow = function(app, psDataSetId, pnIndex){
			/** @type cpr.data.DataSet */
			var vcDataSet = app.lookup(psDataSetId);
			return vcDataSet.deleteRow(pnIndex);
		};
		
		/**
		 * @desc 데이터셋에서 삭제상태인 행을찾아 리스트에서 삭제합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app
		 * @param {#dataset} psDataSetId
		 * @return {cpr.data.DataSet} 
		 */
		DataSetKit.prototype.removeRows = function(app, psDataSetId){
			
			if(!app || !psDataSetId || !(app.lookup(psDataSetId) instanceof cpr.data.DataSet)) return;
			/** 
			 * @type cpr.data.DataSet
			 */
			var targetDs = app.lookup(psDataSetId);
		
			for(var i = 0; i < targetDs.getRowCount(); i++){
				var row = targetDs.getRow(i);
				if(row.getState() === cpr.data.tabledata.RowState.DELETED){
					targetDs.realDeleteRow(row.getIndex());
					i--;
				}
			}
			
			return targetDs;
		}
		
		/**
		 * @desc 데이터셋에 중복된 데이터가 있는지 체크합니다. (pk로 사용할 컬럼을 DataSet의 info에 ","로 구분지어 기술해야한다.)
		 * @author kjh
		 * @param {cpr.core.AppInstance} app
		 * @param {#dataset} psDataSetId
		 * @return {Boolean} 중복 데이터 존재 유무
		 */
		DataSetKit.prototype.dupExistCheck = function(app, psDataSetId){
			if(!app || !psDataSetId || !(app.lookup(psDataSetId) instanceof cpr.data.DataSet)) return null;
			
			/**
			 * @type cpr.data.DataSet
			 */
			var targetDs = app.lookup(psDataSetId);
			
			if(ValueUtil.isNull(targetDs.info)) return false;
			
			var pkCols = ValueUtil.split(targetDs.info, ",");
			var pkValues = [];
		
			targetDs.forEachOfUnfilteredRows(function(row){
				var pkValue = ""
				pkCols.forEach(function(col){
					pkValue += row.getString(col);
				});
				
				pkValues.push(pkValue);
			});
			
			return pkValues.some(function(each){
				return pkValues.indexOf(each) !== pkValues.lastIndexOf(each);
			});
		}
		
		/**
		 * @desc 데이터셋이 비어있는지 유무를 리턴합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app
		 * @param {#dataset} psDataSetId
		 * @return {Boolean} 비어있는지 유무
		 */
		DataSetKit.prototype.isEmpty = function(app, psDataSetId){
			/**
			 * @type cpr.data.DataSet
			 */
			var ds = app.lookup(psDataSetId);
			
			if(!ds || !(ds instanceof cpr.data.DataSet)) return;
			return ds.getRowCount() == 0
		}
		
		/**
		 * @desc 조건에 맞는 행들을 찾아 특정컬럼의 합계를 반환합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId     데이터셋 아이디
		 * @param {String} psCondition       검색조건
		 * @param {#column} psColumn         합계를 구할 컬럼명(Number타입이어야함)
		 * @param {Number} pnStartIndex?     검색시작 row Index
		 * @param {Number} pnLastIndex?      검색마지막 row Index 
		 * @return {Number} 합계
		 */
		DataSetKit.prototype.getCaseSum = function(app, psDataSetId, psCondition, psColumn, pnStartIndex, pnLastIndex){
			/**
			 * @type cpr.data.DataSet
			 */
			var targetDataSet = app.lookup(psDataSetId);
			if(!targetDataSet || !(targetDataSet instanceof cpr.data.DataSet) || !psColumn) return 0;
			
			var rows = targetDataSet.findAllRow(psCondition, pnStartIndex, pnLastIndex);
			
			return rows.reduce(function(acc, cur){
				if(!ValueUtil.isNumber(acc)){
					acc = acc.getNumber(psColumn)
				}
				return acc + cur.getNumber(psColumn) || 0;
			}, 0);
		}
		
		/**
		 * @desc 조건에 맞는 행들을 찾아 특정컬럼의 평균을 반환합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId     데이터셋 아이디
		 * @param {String} psCondition       검색조건
		 * @param {#column} psColumn         평균을 구할 컬럼명(Number타입이어야함)
		 * @param {Number} pnStartIndex?     검색시작 row Index
		 * @param {Number} pnLastIndex?      검색마지막 row Index 
		 * @return {Number} 평균값
		 */
		DataSetKit.prototype.getCaseAvg = function(app, psDataSetId, psCondition, psColumn, pnStartIndex, pnLastIndex){
			/**
			 * @type cpr.data.DataSet
			 */
			var targetDataSet = app.lookup(psDataSetId);
			if(!targetDataSet || !(targetDataSet instanceof cpr.data.DataSet) || !psColumn) return 0;
			
			var rows = targetDataSet.findAllRow(psCondition, pnStartIndex, pnLastIndex);
			
			return Number(rows.reduce(function(acc, cur){
				if(!ValueUtil.isNumber(acc)){
					acc = acc.getNumber(psColumn)
				}
				return acc + cur.getNumber(psColumn) || 0;
			}, 0) / rows.length);
		}
		
		/**
		 * @desc 조건에 맞는 행들을 찾아 특정컬럼의 최대값을 반환합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId     데이터셋 아이디
		 * @param {String} psCondition       검색조건
		 * @param {#column} psColumn         최대값을 구할 컬럼명(Number타입이어야함)
		 * @param {Number} pnStartIndex      검색시작 row Index
		 * @param {Number} pnLastIndex       검색마지막 row Index 
		 * @return {Number} 평균값
		 */
		DataSetKit.prototype.getCaseMax = function(app, psDataSetId, psCondition, psColumn, pnStartIndex, pnLastIndex){
			/**
			 * @type cpr.data.DataSet
			 */
			var targetDataSet = app.lookup(psDataSetId);
			if(!targetDataSet || !(targetDataSet instanceof cpr.data.DataSet) || !psColumn) return 0;
			
			var rows = targetDataSet.findAllRow(psCondition, pnStartIndex, pnLastIndex);
			
			return rows.reduce(function(prev, cur){
				if(!ValueUtil.isNumber(prev)){
					prev = prev.getValue(psColumn)
				}
				
				return prev > cur.getValue(psColumn) ? prev : cur.getValue(psColumn)
			});
		}
		
		/**
		 * @desc 조건에 맞는 행들을 찾아 특정컬럼의 최소값을 반환합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#dataset} psDataSetId     데이터셋 아이디
		 * @param {String} psCondition       검색조건
		 * @param {#column} psColumn         최소값을 구할 컬럼명(Number타입이어야함)
		 * @param {Number} pnStartIndex      검색시작 row Index
		 * @param {Number} pnLastIndex       검색마지막 row Index 
		 * @return {Number} 평균값
		 */
		DataSetKit.prototype.getCaseMin = function(app, psDataSetId, psCondition, psColumn, pnStartIndex, pnLastIndex){
			/**
			 * @type cpr.data.DataSet
			 */
			var targetDataSet = app.lookup(psDataSetId);
			if(!targetDataSet || !(targetDataSet instanceof cpr.data.DataSet) || !psColumn) return 0;
			
			var rows = targetDataSet.findAllRow(psCondition, pnStartIndex, pnLastIndex);
			
			return rows.reduce(function(prev, cur){
				if(!ValueUtil.isNumber(prev)){
					prev = prev.getValue(psColumn)
				}
				
				return prev > cur.getValue(psColumn) ? cur.getValue(psColumn) : prev
			}, 0);
		}
		
		/**
		 * @desc 데이터셋을 동적으로 생성합니다.
		 * @author kjh
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} psDataSetId       생성할 데이터셋 아이디
		 * @param {Object} poColumnInfo      컬럼정보 ex) {column1 : "string"} : 컬럼명 : 타입
		 * @return {cpr.data.DataSet} 생성된 데이터셋
		 */
		DataSetKit.prototype.makeDataList = function(app, psDataSetId, poColumnInfo){
			
			if(!psDataSetId || !poColumnInfo) return;
			
			var tmpDs = new cpr.data.DataSet(psDataSetId);
			var that = this;
			app.register(tmpDs);
			
			Object.keys(poColumnInfo).forEach(function(each){
				var columnNm = each;
				var type = poColumnInfo.each;
		
				that.addColumn(app, psDataSetId, columnNm, null, type)
			});
		
			return tmpDs;	
		}
		
		
		
		/**
		 * Dialog 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function DialogKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 모달(Modal) 팝업을 호출한다.
		 * <pre><code>
		 * Dialog.open(app, "app/cmn/CMN001", 700, 500, function(dialog){...});<br>
		 * <p>또는</p><br>
		 * Dialog.open(app, "app/cmn/CMN001", 700, 500, function(dialog){...}, {key1:"value1", key2:"value2"},{left : 400, top : 200});
		 * </code></pre>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#app} appid 팝업 화면 주소
		 * @param {Number} width 팝업 창의 가로 사이즈
		 * @param {Number} height 팝업 창의 세로 사이즈
		 * @param {Function} handler 팝업이 닫힐 때 콜백함수(callback function)
		 * @param {Object} initValue? 초기 파라메터 key/value쌍으로 팝업창에 넘길 파라메터 JSON 데이터 [예시)-{key1:"value1", key2:"value2"}]
		 * @param { {left? : Number <!--다이얼로그의 x좌표 (default : 가운데 위치) -->, top? : Number <!-- 다이얼로그의 y좌표 (default : 가운데 위치) -->,
		 * headerVisible? : Boolean <!-- 다이얼로그 헤더 보이기 여부 (default : true) -->, headerMovable? : Boolean <!--다이얼로그 헤더를 통해 이동 가능 여부 (default : true)  -->,
		 * headerClose? : Boolean <!--다이얼로그 헤더 close 버튼 보이기 여부 (default : true)  -->, resizable? :Boolean <!-- 다이얼로그 Rect 부분에 크기 조정 가능 여부 (default : true) -->,
		 * headerMin? :Boolean <!--다이얼로그 헤더 최소화 버튼 보이기 여부 (default : false)  -->, headerMax? :Boolean <!--  다이얼로그 헤더 최대화 버튼 보이기 여부 (default : false) -->
		 *   }} prop? 팝업 설정 속성
		 */
		DialogKit.prototype.open = function(app, appid, width, height, handler, initValue, prop) {
			if (initValue == null) {
				initValue = {};
			}
			//윈도우 최소 창크기보다 작은 경우... 윈도우 사이즈에 맞게 사이즈 조정
			var windowWidth = (window.innerWidth | document.body.clientWidth)-10;
			var windowHeight = (window.innerHeight | document.body.clientHeight)-45;
			if(windowWidth < width) width = windowWidth;
			if(windowHeight < height) height = windowHeight;
		
			var dialogProp = {
				width : Number(width) + 10,
				height : Number(height) + 45,
				headerVisible : (prop && prop.headerVisible != undefined) ? prop.headerVisible : true,
				headerMovable : (prop && prop.headerMovable != undefined) ? prop.headerMovable : true,
				headerClose : (prop && prop.headerClose != undefined) ? prop.headerClose : true,
				resizable : (prop && prop.resizable != undefined) ? prop.resizable : false,
				headerMin : (prop && prop.headerMin != undefined) ? prop.headerMin : false,
				headerMax : (prop && prop.headerMax != undefined) ? prop.headerMax : false
			};
			
			if(prop != null && prop.left) { dialogProp.left = prop.left; }
			if(prop != null && prop.top) { dialogProp.top = prop.top; }
		
			// App에서 Dialog
			app.getRootAppInstance().openDialog(appid, dialogProp, function(/* cpr.controls.Dialog */dialog) {
				dialog.app.isPopup = true;
				dialog.app.modal = true;
				dialog._originWidth = dialogProp["width"];
				dialog._originHeight = dialogProp["height"];
				
				initValue._dialogRef = dialog;
				
				if (dialog.app.title) { 
					dialog.headerTitle = dialog.app.title;
				}
				if (handler) {
					dialog.addEventListenerOnce("close", handler);
				}
				if (initValue) {
					dialog.initValue = initValue;
				}
			});
		};
		
		/**
		 * 모달리스(Modaless) 팝업을 호출한다.
		 * <pre><code>
		 * Dialog.openModaless(app, "app/cmn/CMN001", 700, 500, function(dialog){...});<br>
		 * <p>또는</p><br>
		 * Dialog.openModaless(app, "app/cmn/CMN001", 700, 500, function(dialog){...}, {key1:"value1", key2:"value2"},{left : 400, top : 200});
		 * </code></pre>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#app} appid 팝업 화면 주소
		 * @param {Number} width 팝업 창의 가로 사이즈
		 * @param {Number} height 팝업 창의 세로 사이즈
		 * @param {Function} handler 팝업이 닫힐 때 콜백함수(callback function)
		 * @param {Object} initValue? 초기 파라메터 key/value쌍으로 팝업창에 넘길 파라메터 JSON 데이터[예시)-{key1:"value1", key2:"value2"}]
		 * @param { {left? : Number <!--다이얼로그의 x좌표 (default : 가운데 위치) -->, top? : Number <!-- 다이얼로그의 y좌표 (default : 가운데 위치) -->,
		 * headerVisible? : Boolean <!-- 다이얼로그 헤더 보이기 여부 (default : true) -->, headerMovable? : Boolean <!--다이얼로그 헤더를 통해 이동 가능 여부 (default : true)  -->,
		 * headerClose? : Boolean <!--다이얼로그 헤더 close 버튼 보이기 여부 (default : true)  -->, resizable? :Boolean <!-- 다이얼로그 Rect 부분에 크기 조정 가능 여부 (default : true) -->,
		 * headerMin? :Boolean <!--다이얼로그 헤더 최소화 버튼 보이기 여부 (default : false)  -->, headerMax? :Boolean <!--  다이얼로그 헤더 최대화 버튼 보이기 여부 (default : false) -->
		 *   }} prop? 팝업 설정 속성
		 */
		DialogKit.prototype.openModaless = function(app, appid, width, height, handler, initValue, prop) {
			if (initValue == null) {
				initValue = {};
			}
			
			var dialogProp = {
				width : width,
				height : height,
				modal: false,
				headerVisible : (prop && prop.headerVisible) ? prop.headerVisible : true,
				headerMovable : (prop && prop.headerMovable) ? prop.headerMovable : true,
				headerMax : (prop && prop.headerMax) ? prop.headerMax : true,
				headerClose : (prop && prop.headerClose) ? prop.headerClose : true,
				resizable : (prop && prop.resizable) ? prop.resizable : true,
				headerMin : (prop && prop.headerMin != undefined) ? prop.headerMin : false,
				headerMax : (prop && prop.headerMax != undefined) ? prop.headerMax : false
			};
			
			if(prop != null && prop.left) { dialogProp.left = prop.left; }
			if(prop != null && prop.top) { dialogProp.top = prop.top; }
		
			app.getRootAppInstance().openDialog(appid, dialogProp, function(/* cpr.controls.Dialog */dialog) {
				dialog.app.isPopup = true;
				dialog.app.modal = false;
				if (dialog.app.title) { 
					dialog.headerTitle = dialog.app.title;
				}
				if (handler) {
					dialog.addEventListenerOnce("close", handler);
				}
				if (initValue) {
					dialog.initValue = initValue;
				}
			});
		};
		
		/**
		 * 현재 앱이 팝업인지 여부를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @return {Boolean} 
		 */
		DialogKit.prototype.isPopup = function(app){
			
		//	var voRootDiaMng = app.getRootAppInstance().dialogManager;
		//	var vaDiaLogNm = voRootDiaMng.getDialogNames();
		//	var isPopup = false;
		//	vaDiaLogNm.every(function(diaLogNm){
		//		var voDialog = voRootDiaMng.getDialogByName(diaLogNm);
		//		if(voDialog.getAppInstance().id == app.app.id){
		//				isPopup = true;
		//				return false;
		//		}
		//	})
		//	return isPopup;
			return (!ValueUtil.isNull(app.getHost()) && app.app.isPopup === true) ? true : false;
		};
		
		
		/**
		 * window open<br>
		 * var voMap = new cpr.utils.ObjectMap();<br>
			voMap.put("CLX_PATH", "app/tst/tstPTaskRsltImg");<br>
			voMap.put("imgData", "imgData");<br>
			voMap.put("popUpCls", "rsltImg");<br>
			voMap.put("testImagePath", util.DataMap.getValue(app, "dmParamImg", "testImagePath"));<br>
			util.Dialog.windowOpen(app, "/TstTaskMng/index.do", "_popup", voMap);
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} psActionUrl 팝업 aution URL
		 * @param {#app} psPopId 팝업 ID
		 * @param {cpr.utils.ObjectMap} Parameter map
		 * @param {Number} width?
		 * @param {Number} height?
		 * @param {Number} top?
		 * @param {Number} left?
		 * @param {Boolean} isModal?
		 * @return {Boolean} 
		 */
		DialogKit.prototype.windowOpen = function(app, psActionUrl, psPopId, pmParameter, width, height, top, left, isModal){
		
		   var vnWidth     = width == null ? window.screen.availWidth : width;
		   var vnHeight     = height == null ? window.screen.availHeight : height;
		   var vnTop       = top == null ? (window.screen.availHeight - height) / 2 : top;
		   var vnLeft      = left == null ? (window.screen.availWidth - width) / 2 : left;
		   var initValue   = {}
		    if (vnTop < 0)  vnTop  = 0;
		    if (vnLeft < 0) vnLeft = 0;
		   var vbIsModal = isModal == null ? false : isModal;
		   var vsProp = "menubar=0,resizable=yes,scrollbars=yes,status=0,top="+vnTop+",left="+vnLeft+",width="+vnWidth+",height="+vnHeight;
		   var openWindow = window.open("about:blank", psPopId, vsProp);
		   
		   var voPostMethod = new cpr.protocols.HttpPostMethod(psActionUrl, psPopId);
		   
		   if(pmParameter != null){
			   Object.keys(pmParameter).forEach(function(key, value){
			   		voPostMethod.addParameter(key, ValueUtil.fixNull(value));
				});	
		   }
				
			voPostMethod.submit();
			voPostMethod.dispose();
		   
		   window._app = app;
		   return openWindow;
		};
		
		/**
		 * 특정 컨트롤/컨트롤 그룹을 앱화면의 상단에 플로팅으로 띄운다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtrl 플로팅으로 띄울 컨트롤ID (로드마스크일 경우 udc.com.loadmask)
		 * @param {#uicontrol} psTargetCtl 특정 컨트롤 위에 플로팅 할시 컨트롤ID
		 * @param {Number} x x축 포지션 위치
		 * @param {Number} y y축 포지션 위치
		 * @param {Number} width 컨트롤 넓이
		 * @param {Number} height 컨트롤 높이
		 */
		DialogKit.prototype.floading = function(app, psCtrl, psTargetCtl, x, y, width, height){
			
			/**@type cpr.controls.UIControl */
			var ctrl;
			if("udc.com.loadmask" == psCtrl){
				ctrl = new udc.com.loadmask("udc.com.loadmask");
			}else{
				ctrl = app.lookup(psCtrl);	
			}
			if(ctrl == null) return false;
			if(ctrl.visible === false){
				ctrl.visible = true;
			}
			
			
			var showConstraint = {	};
			var container = app.getContainer();
			if(psTargetCtl != null){
				var ctrlTarget = app.lookup(psTargetCtl);
				showConstraint = ctrlTarget.getActualRect();
			}else{
				showConstraint = {
					"position" : "absolute",
					"width" : width+"px",
					"height" : height+"px"
				};
			
				if(this.isPopup(app)){
					if(((y+height) - container.getActualRect().top) > container.getActualRect().height )
						showConstraint.top = (y - (container.getActualRect().top + height)) +"px";
					else
						showConstraint.top = (y - container.getActualRect().top) +"px";
					
					showConstraint.left = (x - (container.getActualRect().left + width)) + "px";
				}else{
					showConstraint.top = (y - 90) + "px";
					if(x < width){
						showConstraint.left = "0px";
					}else{
						showConstraint.left = (x - width - 230) + "px";
					}
				}
			}
			
			//floating하기 전에 해당 컨트롤의 부모객체 정보를 저장함
			var map = app.__floatingMap ? app.__floatingMap : new cpr.utils.ObjectMap();
			map.put(ctrl.id, ctrl.getParent());
			if(app.__floatingMap == null || app.__floatingMap == undefined){
				app.__floatingMap = map;
			}
			
			var layout = container.getLayout();
			if(layout instanceof cpr.controls.layouts.FormLayout
				|| layout instanceof cpr.controls.layouts.VerticalLayout){
				app.floatControl(ctrl, showConstraint);
			}else{
				container.addChild(ctrl, showConstraint);
			}
		};
		
		/**
		 * 앱화면의 상단에 플로팅으로 띄워진 컨트롤/컨트롤그룹을 제거한다.
		 * @param @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#uicontrol} psCtrl 플로팅으로 띄워진 컨트롤ID
		 */
		DialogKit.prototype.removefloading = function(app, psCtrl){
			var ctrl = app.lookup(psCtrl);
			if(ctrl == null) return false;
			
			var container = app.getContainer();
			var layout = container.getLayout();
			if(layout instanceof cpr.controls.layouts.FormLayout
				|| layout instanceof cpr.controls.layouts.VerticalLayout){
				app.removeFloatingControl(ctrl);
			}else{
				container.removeChild(ctrl);
			}
			
			if(app.__floatingMap){
				var parent = app.__floatingMap.get(ctrl.id);
				if(ctrl.visible != false){
					ctrl.visible = false;
				}
				parent.addChild(ctrl);
				app.__floatingMap.remove(ctrl.id)
			}
		};
		
		
		
		/**
		 * Embeded앱 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function EmbeddedAppKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * Embeded 앱내의 함수를 호출한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#embeddedapp} psEmbeddedappId 임베디드 앱 ID
		 * @param {String} psFuncName 호출 함수명
		 * @param {String | Array} paArgs 함수에 전달할 아규먼트 
		 * @return {any} method 내 파라미터
		 */
		EmbeddedAppKit.prototype.callAppMethod = function(app, psEmbeddedappId, psFuncName, paArgs){
			/** @type cpr.controls.EmbeddedApp */
			var emb = app.lookup(psEmbeddedappId);
			var value = null;
			if(emb){
				emb.ready(function(e){
					if(!e.hasAppMethod(psFuncName)){
						alert("The embeded page not have "+psFuncName+" function! (script error)");
						return null;
					}
					value = e.callAppMethod(psFuncName, paArgs);
				});
			}
			return value;
		};
		
		/**
		 * 임베디드 앱을 포함하고 있는 Host앱의 특정 함수를 호출한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {String} psFuncName 호출 함수명
		 * @param {String | Array} paArgs? 함수에 전달할 아규먼트 
		 * @return {any} 반환값
		 */
		EmbeddedAppKit.prototype.callHostAppMethod = function(app, psFuncName, paArgs){
			/** @type cpr.core.AppInstance */
			var hostApp = app.getHostAppInstance();
			if(hostApp && hostApp.hasAppMethod(psFuncName)){
				return hostApp.callAppMethod(psFuncName, paArgs);
			}
			return null;
		};
		
		/**
		 * 해당 임베디드 앱에 연결된 페이지의 앱 APP가 존재하는지 여부를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#embeddedapp} psEmbeddedappId 임베디드 앱 ID
		 * @return {Boolean} 임베디드 앱 유/무 반환
		 */
		EmbeddedAppKit.prototype.hasPage = function(app, psEmbeddedappId){
			/** @type cpr.controls.EmbeddedApp */
			var emb = app.lookup(psEmbeddedappId);
			return (emb && emb.app) ? true : false;
		};
		
		/**
		 * Embeded 앱에 호출할 화면을 설정한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#embeddedapp} psEmbeddedappId 임베디드 앱 ID
		 * @param {#app} psAppId 호출할 화면 앱ID
		 * @param {any} poInitValue? 초기 파라메터
		 */
		EmbeddedAppKit.prototype.setPage = function(app, psEmbeddedappId, psAppId, poInitValue){
			/** @type cpr.controls.EmbeddedApp */
			var emb = app.lookup(psEmbeddedappId);
			return new Promise(function(resolve, reject) {
				if(emb){
					cpr.core.App.load(psAppId, function(loadedApp){
					   if(loadedApp){
					   	 /*로그된 앱을 임베디드 앱에 설정*/
					      emb.app = loadedApp;
					      emb.ready(function(e){
					      	/*통신전달값*/
					      	emb.initValue = poInitValue;
					      	resolve(emb);
					      });
					   }
					});
				}else{
					throw new cpr.exceptions.IllegalArgumentException("not found embedded app");
				}
			});
		};
		
		/**
		 * 임베디드 컨트롤에 포함되어있는 앱객체들을 제거합니다. 
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#embeddedapp} psEmbeddedappId 임베디드 앱 ID
		 */
		EmbeddedAppKit.prototype.dispose = function(app, psEmbeddedappId){
			/** @type cpr.controls.EmbeddedApp */
			var emb = app.lookup(psEmbeddedappId);
			if(emb && emb.getEmbeddedAppInstance()){
				emb.getEmbeddedAppInstance().dispose();
			}
		};
		
		
		
		/**
		 * FreeForm컨트롤 유틸<br>
		 * - 일반적으로 그리드가 바인딩되었거나 데이터셋을 사용하는 폼레이아웃 컨트롤에 적용<br>
		 * - 그리드 + 상세(폼레이아웃) 화면에서 주로 사용 <br>
		 * - 바인드컨텍스트가 지정된 그리드 및 트리컨트롤의 데이터셋 제어 
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function FreeFormKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 입력용 폼레이아웃 컨트롤들에 대해 초기화 로직을 수행한다.<br>
		 *  폼레이아웃의 class는 form-box 지정 필수<br>
		 * 1. 데이터 여부에 따른 비활성화 처리 (load, filter 이벤트)<br>
		 *     (데이터가 없으면 입력 안됨 처리)<br>
		 * 2. appHeader에서 폼레이아웃의 class가 form-box일 경우 초기화 지정<br>
		 *  - 사이트별 Customizing 필요
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container | Array} paFreeFormId 프리폼 ID 또는 ID배열
		 */
		FreeFormKit.prototype.init = function(app, paFreeFormId) {
			if(!(paFreeFormId instanceof Array)){
				paFreeFormId = [paFreeFormId];
			}
			var vcForm = null, voBindContext = null, voDs = null;
			var voMap = new cpr.utils.ObjectMap();
			var voBindMap = new cpr.utils.ObjectMap();
			for(var i=0, len=paFreeFormId.length; i<len; i++){
				/**@type cpr.controls.Container */
				vcForm = app.lookup(paFreeFormId[i]);
				if(vcForm == null) continue;
				
				voBindContext = this._appKit.Group.getBindContext(app, vcForm);
				if(voBindContext){
					voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
					vcForm._originEnabled = vcForm.enabled;
					if(vcForm.getBindInfo("enabled") != null){
						vcForm._expressEnabled = vcForm.getBindInfo("enabled").expression;
					}
					if(voDs._freeforms){
						voDs._freeforms.push(vcForm.id);
					}else{
						voDs._freeforms = [vcForm.id];
					}	
				}
				
				var childCtrls = vcForm.getAllRecursiveChildren();
				childCtrls.forEach(function(ctrl){
					if(ctrl.type == "numbereditor"){
						if(ctrl.spinButton != false && ctrl.style.css("text-align") == ""){
							ctrl.style.css({"text-align":"center"});
						}
						if((ctrl.format === "0000" || ctrl.format === "9999") && ctrl.max == 0){
							ctrl.max = 1.7976931348623157E308;
						}
					}
				});
				
				if(voDs){
					if(voMap.get(voDs.id) == null){
						voMap.put(voDs.id, voDs);
					}
					
					if(voBindContext.grid == null && voBindMap.get(voDs.id) == null){
						voBindMap.put(voDs.id, voDs);
						voDs.stateRestore = true; //현재값과 Origin이 같으면... 변경없도록 처리
					}
				}
			}
			
			var _app = app, _appKit = this._appKit;
			voMap.keys().forEach(function(key){
				voMap.get(key).addEventListener("load", function(/* cpr.events.CDataEvent */e){
					var dataset = e.control;
					var freeforms = dataset._freeforms;
					freeforms.forEach(function(/* eachType */ formId){
						/**@type cpr.controls.Container */
						var form = _app.lookup(formId);
						//데이터가 없으면... 프리폼 비활성화
						if(dataset.getRowCount() < 1) {
							if(form._expressEnabled){
								form.unbind("enabled");
							}
							form.enabled = false;
						}else{
							//데이터가 있으면  프리폼 활성화
							if(form._originEnabled !== false){
								if(form._expressEnabled){
									form.bind("enabled").toExpression(form._expressEnabled);
								}else{
									form.enabled = true;
								}
							}
						}
					});
				});
				
				voMap.get(key).addEventListener("filter", function(/* cpr.events.CDataEvent */e){
					var dataset = e.control;
					var freeforms = dataset._freeforms;
					freeforms.forEach(function(/* eachType */ formId){
						/**@type cpr.controls.Container */
						var form = _app.lookup(formId);
						//데이터가 없으면... 프리폼 비활성화
						if(dataset.getRowCount() < 1) {
							if(form._expressEnabled){
								form.unbind("enabled");
							}
							form.enabled = false;
						}else{
							//데이터가 있으면 있고, 조회권한이 아니고... 프리폼 활성화
							if(form._originEnabled !== false){
								if(form._expressEnabled){
									form.bind("enabled").toExpression(form._expressEnabled);
								}else{
									form.enabled = true;
								}
							}
						}
					});
				});
			});
		};
		
		
		/**
		 * 프리폼(폼레이아웃)에 신규 행(Row)을 추가한다.<br>
		 * 바인드컨텍스트로 연결된 트리 및 그리드 컨트롤의 insertrow 수행<br>
		 *  - 사이트별 Customizing 필요
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psFreeFormId 프리폼 ID
		 * @param {#column} psEditCol 신규 이후 포커스 COLUMN명
		 * @param {Number} pnRowIdx? 추가하고자 하는 Row index<br>
		 *                 (defalut : 현재 선택된 로우 이후)
		 * @param {Object} poRowData? 추가할 row data (key: header명, value: value 를 갖는 json data)
		 * @return {cpr.controls.provider.GridRow} 추가한 Row의 GridRow 객체
		 */
		FreeFormKit.prototype.insertRow = function(app, psFreeFormId, psEditCol, pnRowIdx, poRowData) {
			/**@type cpr.controls.Container */
			var vcForm = app.lookup(psFreeFormId);
			var voBindContext = this._appKit.Group.getBindContext(app, vcForm);
			
			var vcGrid = voBindContext.grid;
			var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
			/**@type cpr.controls.Tree */
			var vcTree = app.lookup(voDs._treeId);
			var rowIndex = -1;
			if(!ValueUtil.isNull(pnRowIdx)){
				rowIndex = pnRowIdx;
			}else{
				if(vcTree){
					rowIndex = vcTree.getIndex(vcTree.getSelectionFirst());
				}else{
					rowIndex = voBindContext.grid ? this._appKit.Grid.getIndex(app, voBindContext.grid.id) : voBindContext.rowIndex;
				}
			}
			
			// InsertRow
			var insertedRow = null;
			if(poRowData != null){
				insertedRow = voDs.insertRowData(rowIndex, true, poRowData);
			}else{
				if(vcTree){
					// 트리
					var vsSelVal = ValueUtil.fixNull(vcTree.value);
					
					var voRow = {};
					voRow[vcTree.itemSetConfig.label] = "";
					voRow[vcTree.itemSetConfig.value] = "";
					voRow[vcTree.itemSetConfig.parentValue] = vsSelVal;
					
					insertedRow = voDs.insertRowData(rowIndex, true, voRow);
					if(vsSelVal != ""){
						var voItem = vcTree.getItemByValue(vsSelVal);
						vcTree.expandItem(voItem);
					}
				}else{
					insertedRow = voDs.insertRow(rowIndex, true);
				}
			}
			
			// SelectRow
			if(vcTree){
				// 트리
				vcTree.selectItemByValue("DEFAULT", true);
				vcTree.focusItem(vcTree.getItem(insertedRow.getIndex()));
			}else if(vcGrid){
				// 그리드
		//		vcGrid.selectRows(-1, false);
				vcGrid.clearSelection();
				vcGrid.selectRows(insertedRow.getIndex(), true);
			}else{
				// 프리폼
				vcForm.redraw();
			}
			if(vcForm._expressEnabled){
				vcForm.bind("enabled").toExpression(vcForm._expressEnabled);
			}else{
				vcForm.enabled = true;
			}
			
			// Focus
			if(psEditCol){
				var vcCtrl = this._appKit.Group.getDataBindedControl(app, vcForm.id, psEditCol);
				if(vcCtrl) vcCtrl.focus();
			}
			
			return insertedRow;
		};
		
		/**
		 * 프리폼(폼레이아웃)에 행(Row)을 삭제한다.<br>
		 * 바인드컨텍스트로 연결된 트리 및 그리드 컨트롤의 delete로직 수행<br>
		 * - 사이트별 Customizing 필요
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psFreeFormId 프리폼 ID
		 * @param {String} psAftMsg? 메시지 유형(CRM)
		 * @return void
		 */
		FreeFormKit.prototype.deleteRow = function(app, psFreeFormId, psAftMsg) {
			var _this = this;
			/** @type cpr.controls.Container */
			var vcForm = app.lookup(psFreeFormId);
			/** @type cpr.bind.BindContext */
			var voBindContext = this._appKit.Group.getBindContext(app, vcForm);
			
			var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
			var vcGrid = voBindContext.grid;
			/** @type cpr.controls.Tree */
			var vcTree = app.lookup(voDs._treeId);
			var rowIndex = voBindContext.grid ? this._appKit.Grid.getIndex(app, voBindContext.grid.id) : voBindContext.rowIndex;
			if(voDs == null || voDs.getRowCount() < 1){
				//삭제할 데이터가 없습니다.
				this._appKit.Msg.alert("INF-M007");
			}else{
				if(!ValueUtil.isNull(psAftMsg)){
					//삭제하시겠습니까?
					if(this._appKit.Msg.confirm("CRM-M002")){
						if(voDs.getRowState(rowIndex) == cpr.data.tabledata.RowState.INSERTED){
							voDs.revertRow(rowIndex);
							vcForm.redraw();
							if(vcGrid){
								vcGrid.redraw();
								//가장 마지막 행에서 신규 행 추가 후, 삭제할 경우에 가장 마지막 행을 선택해줌
								if(voDs.getRowCount() -1 < rowIndex){
									vcGrid.selectRows([rowIndex-1]);
								}
							} 
							if(vcTree) vcTree.redraw();
							//데이터 건수가 없으면... 프리폼 비활성화
							if(voDs.getRowCount() < 1) {
								vcForm.enabled = false;
							}
							return false;
						}else{
							voDs.setRowState(rowIndex, cpr.data.tabledata.RowState.DELETED);
							return true;
						}
					}
				}else{
					if(voDs.getRowState(rowIndex) == cpr.data.tabledata.RowState.INSERTED){
						voDs.revertRow(rowIndex);
					}else{
						voDs.setRowState(rowIndex, cpr.data.tabledata.RowState.DELETED);
					}
				}
			}
			
			return false;
		};
		
		/**
		 * 프리폼(폼레이아웃)에 바인딩된 값을 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psFreeFormId 프리폼 ID
		 * @param {#column} psColumnName 컬럼명
		 * @return {String} 프리폼의 컬럼값
		 */
		FreeFormKit.prototype.getValue = function(app, psFreeFormId, psColumnName){
			/** @type cpr.controls.Container */
			var vcForm = app.lookup(psFreeFormId);
			var voBindContext = this._appKit.Group.getBindContext(app, vcForm);
			/** @type cpr.data.DataSet */
			var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
			var rowIndex = voBindContext.grid ? this._appKit.Grid.getIndex(app, voBindContext.grid.id) : voBindContext.rowIndex;
			
			return voDs.getValue(rowIndex, psColumnName);
		};
		
		/**
		 * 프리폼(폼레이아웃)에 바인딩된 값을 변경한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psFreeFormId 프리폼 ID
		 * @param {#column} psColumnName 컬럼명
		 * @param {String} psValue 변경하고자 하는 값
		 * @return void
		 */
		FreeFormKit.prototype.setValue = function(app, psFreeFormId, psColumnName, psValue){
			/** @type cpr.controls.Container */
			var vcForm = app.lookup(psFreeFormId);
			var voBindContext = this._appKit.Group.getBindContext(app, vcForm);
			/** @type cpr.data.DataSet */
			var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
			var rowIndex = voBindContext.grid ? this._appKit.Grid.getIndex(app, voBindContext.grid.id) : voBindContext.rowIndex;
			
			voDs.setValue(rowIndex, psColumnName, psValue);
			vcForm.redraw();
		};
		
		/**
		 * 프리폼(폼레이아웃) 내의 특정 컬럼을 포커싱한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psFreeFormId 프리폼 ID
		 * @param {#column} psColumnName 포커싱할 컬럼명
		 */
		FreeFormKit.prototype.setFocus = function(app, psFreeFormId, psColumnName){
			/** @type cpr.controls.Container */
			var vcForm = app.lookup(psFreeFormId);
			
			var vcCtrl = this._appKit.Group.getDataBindedControl(app, vcForm.id, psColumnName);
			if(vcCtrl) this._appKit.Control.setFocus(app, vcCtrl.id);
		};
		
		/**
		 * 프리폼(폼레이아웃)의 변경사항을 되돌린다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psFreeFormId  해당 그룹 아이디
		 * @param {Number} pnRowIndex? 되돌릴 행의 index
		 * @param {#column} psEditCol? 포커싱할 컬럼명
		 * @return void
		 */
		FreeFormKit.prototype.revertRow = function(app, psFreeFormId, pnRowIndex, psEditCol){
			/**@type cpr.controls.Container */
			var vcForm = app.lookup(psFreeFormId);
			var voBindContext = this._appKit.Group.getBindContext(app, vcForm);
			/**@type cpr.controls.Grid */
			var vcGrid = voBindContext.grid;
			/**@type cpr.data.DataSet */
			var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
		
			var vnRowIndex = 0;
			if(!ValueUtil.isNull(pnRowIndex)){
				vnRowIndex = pnRowIndex;
			}else{
				if(vcGrid) vnRowIndex = this._appKit.Grid.getIndex(vcGrid.getAppInstance(), vcGrid.id);
				else vnRowIndex = voBindContext.rowIndex;
			}
			//데이터 Revert
			var rowData = voDs.getRow(vnRowIndex).getRowData();
			var vsGridRowState = vcGrid.getRowState(vnRowIndex);
			for(var column in rowData){
				voDs.setValue(vnRowIndex, column, voDs.getOriginalValue(vnRowIndex, column));
			}
			voDs.getRow(vnRowIndex).setState(cpr.data.tabledata.RowState.UNCHANGED);
			if(vsGridRowState == cpr.data.tabledata.RowState.INSERTED){
				vcGrid.setRowState(vnRowIndex, vsGridRowState);
			}
			var vcTree = app.lookup(voDs._treeId); 
				
			if(vcGrid) vcGrid.redraw();
			if(vcTree) vcTree.redraw();
			vcForm.redraw();
			
			if(!ValueUtil.isNull(psEditCol)){
				var vcCtrl = this._appKit.Group.getDataBindedControl(app, vcForm.id, psEditCol);
				if(vcCtrl) vcCtrl.focus();
			}
		};
		
		/**
		 * 프리폼(폼레이아웃)의 변경사항을 되돌린다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psFreeFormId  해당 그룹 아이디
		 * @return void
		 */
		FreeFormKit.prototype.revertAllData = function(app, psFreeFormId){
			/**@type cpr.controls.Container */
			var vcForm = app.lookup(psFreeFormId);
			var voBindContext = this._appKit.Group.getBindContext(app, vcForm);
			
			var vcGrid = voBindContext.grid;
			var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
			var vcTree = app.lookup(voDs._treeId); 
			
			//데이터 Revert
			voDs.revert();
				
			if(vcGrid) vcGrid.redraw();
			if(vcTree) vcTree.redraw();
			vcForm.redraw();
		};
		
		/**
		 * 프리폼(폼레이아웃)의 변경사항 유/무를 반환를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container | Array} paFreeFormId 프리폼 ID
		 * @param {"MSG" | "CRM"} psAftMsg? 
		 *						MSG : 변경사항 내역이 없을 경우 '변경된 내역이 없습니다.' 메세지 출력<br>
		 *  					CRM : 변경내역이 존재할경우 '변경사항이 반영되지 않았습니다. 계속 하시겠습니까?' confirm 메시지출력 
		 * @return {Boolean} 데이터 변경 여부
		 */
		FreeFormKit.prototype.isModified = function(app, paFreeFormId, psAftMsg){
			if(!(paFreeFormId instanceof Array)){
				paFreeFormId = [paFreeFormId];
			}
			
			psAftMsg = psAftMsg == null ? "" : psAftMsg;
			
			var modify = false;
			var vcGroup = null;
			for (var i=0, len=paFreeFormId.length; i<len; i++) {
				if(paFreeFormId[i] instanceof cpr.controls.Container) {
					vcGroup = paFreeFormId[i];
				}else{
					vcGroup = app.lookup(paFreeFormId[i]);
				}
				
				var voDataSet = this._appKit.Group.getBindDataSet(app, vcGroup);
				if(voDataSet != null && voDataSet.isModified()) {
					modify = true;
					break;
				}
			}
			
			if(modify){
				if(psAftMsg.toUpperCase() == "CRM"){//변경사항이 반영되지 않았습니다. 계속 하시겠습니까? confirm
					if(!this._appKit.Msg.confirm("CRM-M003", [vcGroup.fieldLabel])) return true;
					else return false;
				}
			}else{
				if(psAftMsg.toUpperCase() == "MSG"){//변경된 내역이 없습니다.
					this._appKit.Msg.notify(app, "INF-M006");
				}
			}
			
			return modify;
		};
		
		
		
		/**
		 * 그리드(Grid) 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function GridKit(appKit){
			this._appKit = appKit;
		//	this._userAttr = {
		//		  bindDataFormId : "bindDataFormId"
		//		, ignoreModify :    "ignoreModify"
		//		, columnMoveFix :    "columnMoveFix"
		//		, columnResizeFix :    "columnResizeFix"
		//		, columnSortFix :    "columnSortFix"
		//		, clickModeFix :    "clickModeFix"
		//		, enableCheckDuplicatePk :    "enableCheckDuplicatePk"
		//	}
		};
		
		/**
		 * 그리드를 초기화한다.<br/>
		 * appHeader에서 그리드 초기화 수행<br/>
		 * 1. 상태 컬럼 바인드 지정  (N, U, D)<br/>
		 * 2. 인덱스컬럼 text및 css지정<br/>
		 * 3. 소트 컬럼 자동지정 <br/>
		 * 4. 그리드, 프리폼 PK컬럼 enable 설정<br/>
		 *   - 그리드의 선택형 컨텍스트 사용 그룹은 그리드의 사용자속성 bindDataFormId 지정 필수<br/>
		 *   - 그리드 PK컬럼의 사용자 속성 editablePK = "Y"이면 enable 설정 X<br/>
		 * 5. update이벤트 추가 ( 저장후 그리드의 마지막 작업행을 찾기 위함)<br/>
		 * 6. 그리드 매핑 데이터셋에 load 이벤트 추가 (그리드의 마지막행 찾기, 조회 건수 업데이트)<br/>
		 * 7. 그리드 selection-dispose 이벤트 추가(삭제로 인한, 선택행이 없는 경우... 이전 행 자동 선택하도록(행 추가 -> 삭제시))<br/>
		 * 그리드에 대한 공통 로직 및 이벤트 추가 용도<br/>
		 *  - appHeader에서 공통 적용됨<br/>
		 *  - 사이트별 Customizing 필요
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid | Array} paGridId 그리드 ID
		 * @return void
		 */
		GridKit.prototype.init = function(app, paGridId){
			if(!(paGridId instanceof Array)){
				paGridId = [paGridId];
			}
			
			//Index 컬럼 반환
			function getIndexDetailColumn(poGrid){
				var detail = poGrid.detail;
				var column;
				for(var i=0, len=detail.cellCount; i<len; i++){
					column = detail.getColumn(i);
					if(column.columnType == "rowindex"){
						return column;
					}
				}
				return null;
			}
			var _app = app;
			var _appKit = this._appKit;
			for (var i=0, len=paGridId.length; i <len; i++) {
				/**
				 * @type cpr.controls.Grid
				 */
				var vcGrid = (paGridId[i] instanceof cpr.controls.Grid) ? paGridId[i] : _app.lookup(paGridId[i]);
				if(vcGrid == null) continue;
				
		//		var isNotcolumnSortable = ValueUtil.fixBoolean(vcGrid.userAttr("columnSortFix"));
				var vcDataSet =  vcGrid.dataSet;
				vcDataSet._gridId = vcGrid.id;
				
				//상태컬럼
				var statusColumn = this.getHeaderStatusColumn(app, vcGrid.id);
				if(statusColumn != null){
					// Status 컬럼 숨김
					//statusColumn.visible = false;
					var detailColumn = vcGrid.detail.getColumn(statusColumn.colIndex);
					var statusColumnCtrl = detailColumn ? detailColumn.control : null;
					if(statusColumnCtrl){
						/*
						statusColumnCtrl.bind("value").toExpression("switch(getStateString()){ case 'I' : 'N'  case 'U' : 'U'  case 'D' : 'D'  default : ''}");
						statusColumnCtrl.style.css({"text-align" : "center"});*/
						statusColumnCtrl.style.bindClass().toExpression("switch(getStateString()){ case 'I' : 'state-txt insert'  case 'U' : 'state-txt update'  case 'D' : 'state-txt delete'  default : ''}");
					}
				}
				//인덱스컬럼
				var indexColumn = getIndexDetailColumn(vcGrid);
				if(indexColumn != null){
					indexColumn.style.css({"text-align" : "center"});
					var hIndexColumn = vcGrid.header.getColumn(indexColumn.colIndex);
					if(hIndexColumn && hIndexColumn.text != "No") hIndexColumn.text = "No";
				}
				
				//소트 컬럼 자동지정
		//		if(isNotcolumnSortable != true){
					var dColumn, hColumn, vaHColumns;
		//			var vsFixColSort = "";
					for(var j=0, jlen=vcGrid.detail.cellCount; j<jlen; j++){
						dColumn = vcGrid.detail.getColumn(j);
						if(dColumn.columnType == "checkbox" || dColumn.columnType == "rowindex") continue;
						if(dColumn.columnName == null || dColumn.columnName == "") continue;
						
		//				vsFixColSort = dColumn.control ? dColumn.control.userAttr("columnSortFix") : ""; //컬럼 정렬무시옵션
						vaHColumns = vcGrid.header.getColumnByColIndex(dColumn.colIndex, dColumn.colSpan);
						if(vaHColumns){
							vaHColumns.forEach(function(/* cpr.controls.gridpart.GridColumn */ column){
		//						if(vsFixColSort !== "Y"){
									column.sortable = true;
		//						}
								if(column.targetColumnName == null || column.targetColumnName == "") {
									column.targetColumnName = dColumn.columnName;
								}
							});
						}
					}
		//		}
				/*
				//읽기 전용 컬럼 헤더 Text 변경
				var vbGReadOnly = vcGrid.readOnly === true ? true : false;
				var readHTextClass = "readonly";
				var readHColor = "#959495";
				if(vbGReadOnly){
					vcGrid.style.header.css({color: readHColor});
					for(var k=0, klen=vcGrid.detail.cellCount; k<klen; k++){
						var dColumn = vcGrid.detail.getColumn(k);
						if(dColumn.control){
							if(dColumn.controlType == "numbereditor"){
								if(dColumn.control.spinButton != false && dColumn.control.style.css("text-align") == ""){
									dColumn.control.style.css({"text-align":"center"});
								}
							}
							if((dColumn.control.format === "0000" || dColumn.control.format === "9999") && dColumn.control.max == 0){
								dColumn.control.max = 1.7976931348623157E308;
							}
						}
					};
				}else{
					var vaHeaderColumn = null;
					for(var k=0, klen=vcGrid.detail.cellCount; k<klen; k++){
						var dColumn = vcGrid.detail.getColumn(k);
						if(dColumn.columnType == "rowindex"){
							vaHeaderColumn = vcGrid.header.getColumnByColIndex(dColumn.colIndex, dColumn.colSpan);
							vaHeaderColumn.forEach(function(column){
								column.style.addClass(readHTextClass);
							});
						}else if(dColumn.control == null || dColumn.controlType == "output" || dColumn.controlType == "image" || dColumn.controlType == "button"){
							vaHeaderColumn = this.getHeaderColumnByColIdex(app, vcGrid.id, dColumn.colIndex);
							vaHeaderColumn.forEach(function(column){
								column.style.addClass(readHTextClass);
							});
						}else if((dColumn.control.getBindInfo("readOnly") == undefined && dColumn.control.readOnly === true) || (dColumn.control.getBindInfo("enabled") == undefined && dColumn.control.enabled === false)){
							vaHeaderColumn = this.getHeaderColumnByColIdex(app, vcGrid.id, dColumn.colIndex);
							vaHeaderColumn.forEach(function(column){
								if(column.style.getClasses().indexOf("require") == -1){
									column.style.addClass(readHTextClass);
								}
							});
						}
						
						if(dColumn.control){
							if(dColumn.controlType == "numbereditor" && dColumn.control.spinButton != false && dColumn.control.style.css("text-align") == ""){
								dColumn.control.style.css({"text-align":"center"});
							}
						}
					}
				}
				*/
				//헤더 컬럼 Visible 원래값 저장
				var vsHidenColumnIdxs = "";
				for(var k=0, klen=vcGrid.header.cellCount; k<klen; k++){
					if(vcGrid.header.getColumn(k).visible === false){
						vsHidenColumnIdxs += k+",";
					}
				}
				vcGrid.userAttr("originHiddenColumns", vsHidenColumnIdxs);
				
				//그리드 PK컬럼 enable 설정
				var vaPkColumnNames = ValueUtil.split(vcDataSet.info, ",");
				var vsDataBindCtxId = vcGrid.userAttr("bindDataFormId");
				vaPkColumnNames.some(function(value, idx){
					if(value == "") return false;
					//그리드 PK컬럼 설정(필수 스타일, 활성화/비활성화 바인딩 처리등)
					var columns = vcGrid.detail.getColumnByName(value);
					var vaHColumns = _appKit.Grid.getHeaderColumn(_app, vcGrid.id, value);
					if(columns != null && columns.length > 0){
						columns.forEach(function(col){
							if(col.control){
								if(col.control.userAttr("editablePK") !== "Y"){
									col.control.bind("enabled").toExpression("getStateString() == 'I' ? true : false");
									col.control.userAttr("required", "Y");
									if(vaHColumns){
										vaHColumns.forEach(function(/* cpr.controls.gridpart.GridColumn */ column){
											if(column.cellIndex == col.cellIndex) {
												column.style.setClasses("require");
											}
										});
									}
								}
							}
						});
					}
				});
				
				//프리폼 PK 컬럼 설정 
				if(!ValueUtil.isNull(vsDataBindCtxId) && vaPkColumnNames.length > 0){
					var freeformes = ValueUtil.split(vsDataBindCtxId, ",");
					freeformes.forEach(function(/* eachType */ formId){
						/**@type cpr.controls.Container */
						var freeform = _app.lookup(formId);
						if(freeform != null){
							var vaChildCtrls = freeform.getAllRecursiveChildren();
							vaPkColumnNames.some(function(value, idx){
								if(value == "") return false;
								vaChildCtrls.some(function(ctrl, ix){
									if(ctrl.type == "output") return false;
									if(ctrl.userAttr("ignorePk") == "Y") return false;
									if(ctrl.userAttr("editablePK") == "Y") return false;
									var bind = ctrl.getBindInfo("value");
									if(bind && bind.type == "datacolumn" && value == bind.columnName){
										ctrl.bind("enabled").toExpression("getStateString() == 'I' ? true : false");
										ctrl.userAttr("required", "Y");
									}
								});
							});	
						}
					});
				}
				var vsItemKey = app.id + vcGrid.id;
				var layout = localStorage.getItem(vsItemKey);
				if(!ValueUtil.isNull(layout)){
					vcGrid.setColumnLayout(JSON.parse(layout));	
				}
				
				//마지막 작업행을 찾기위해서...그리드 findRow 설정
				vcDataSet.addEventListener("update", function(/* cpr.events.CDataEvent */e){
					/** 
					 * @type cpr.data.DataSet
					 */
					var dataset = e.control;
					var rowIndex = e.row.getIndex();
					var row = e.row;
					var vaPkColumns = ValueUtil.split(dataset.info, ",");
					if(vaPkColumns.length < 1){
						dataset._findRowCondition = null;
					}else{
						var vaTempCond = [];
						vaPkColumns.forEach(function(column){
							vaTempCond.push(column + "==" + "'" + dataset.getValue(rowIndex, column) + "'");
						});
						dataset._findRowCondition = vaTempCond.length > 0 ? vaTempCond.join(" && ") : null;
					}
					
				});
				//그리드에 바인딩된 데이터셋(Dataset)이 로드될 때 처리
				//마지막행 찾기, 조회 건수 업데이트
				vcDataSet.addEventListener("load", function(/* cpr.events.CDataEvent */e){
					/** @type cpr.data.DataSet */
					var dataset = e.control;
					/** @type cpr.controls.Grid */
					var grd = dataset.getAppInstance().lookup(dataset._gridId);
					if(grd == null) return;
					
					//대상 그리드가 정렬된 상태라면... 정렬을 푼다.
					if(dataset.getSort() != ""){
						dataset.clearSort();
					}
					
					//마지막 작업행 찾기
					if(dataset.getRowCount() > 0) {
						if(dataset._findRowCondition){
							var row = dataset.findFirstRow(dataset._findRowCondition);
							if(row) {
								if(grd.selectionUnit == "cell"){
									grd.focusCell(row.getIndex(), 0);
									grd.moveToCell(row.getIndex(), 0);
								}else{
									setTimeout(function(){
										_appKit.Grid.selectRow(_app, grd.id, row.getIndex());
									}, 200);
								}
							}else{
								grd.selectionUnit == "cell" ? grd.focusCell(0, 0) : _appKit.Grid.selectRow(_app, grd.id, 0);
							}
						}else{
							if(grd.selectionUnit == "cell") grd.focusCell(0, 0); else _appKit.Grid.selectRow(_app, grd.id, 0);
						}
					}else{
					}
					
					//마지막 작업행 정보 Clear
					dataset._findRowCondition = null;
					
					//그리드 타이틀 영역의 데이터 건수 업데이트
					var titles = _appKit.Group.getAllChildrenByType(_app, "udc.com.comTitle");
					for(var i=0, len=titles.length; i<len; i++){
						if(titles[i] == null) continue;
						if(titles[i].getAppProperty("ctrl") == null) continue;
						if(titles[i].getAppProperty("ctrl").id == grd.id){
							titles[i].setAppProperty("rowCount", dataset.getRowCount());
							break;
						}
					}
				});
				
				vcDataSet.addEventListener("filter", function(e){
					/** @type cpr.data.DataSet */
					var dataset = e.control;
					/** @type cpr.controls.Grid */
					var grd = dataset.getAppInstance().lookup(dataset._gridId);
					if(grd == null) return;
					
					var titles = _appKit.Group.getAllChildrenByType(_app, "udc.com.comTitle");
					for(var i=0, len=titles.length; i<len; i++){
						if(titles[i] == null) continue;
						if(titles[i].getAppProperty("ctrl") == null) continue;
						if(titles[i].getAppProperty("ctrl").id == grd.id){
							titles[i].setAppProperty("rowCount", dataset.getRowCount());
							break;
						}
					}
				});
				//행 삭제로 인한, 선택행이 없는 경우... 이전 행 자동 선택하도록(행 추가 -> 삭제시)
				vcGrid.addEventListener("selection-dispose", function(/* cpr.events.CGridEvent */e){
					var oldSelection = e.oldSelection;
					if (oldSelection != null && oldSelection.length > 0 && oldSelection[0] > -1 && oldSelection[0] < e.control.rowCount) {
						e.control.selectRows(oldSelection[0]);
					}
				});
				
				vcGrid.addEventListener("selection-change", function(e){
					var grid = e.control;
					var bindFormId = grid.userAttr("bindDataFormId");
					
					if(bindFormId && app.lookup(bindFormId).userAttr("validationStatus") === "invalid"){
						ValueUtil.split(bindFormId, ",").forEach(function(each){
		
							_appKit.Control.getAllUiControl(app, app.lookup(bindFormId)).forEach(function(each){
								each.style.removeClass("invalid");
							});
							app.lookup(bindFormId).redraw();
							
							
						});
					}
				});
				
				//그리드 키다운(Up/Down) 이벤트 처리 - 현재 포커싱된 그리드 객체정보 저장
		//		vcGrid.addEventListener("keydown", function(/* cpr.events.CKeyboardEvent */ e){
		//			if(e.keyCode == cpr.events.KeyCode.UP || e.keyCode == cpr.events.KeyCode.DOWN){
		//				_appKit.getMainApp(e.control.getAppInstance()).__focusGrid = e.control;
		//			}
		//		});
			}
		};
		
		/**
		 * 그리드 특정 cell의 값을 변경한다. (detail 영역) <br>
		 * (주의) for문 등으로 대량의 데이터를 setCellValue 호출하는 경우에는 pbEmitEvent값을 false로 주어서, 스크립트 실행시간을 줄여줄 수 있다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @param {String | Number} psDataColmnId cellIndex 값을 변경하고자 하는 cell의 cell index <br>(또는 binding된 data column name)
		 * @param {String} psValue 변경하고자 하는 값
		 * @param {Number} pnRowIndex? 값을 변경하고자 하는 cell의 row index<br>
		 *                 (defalut : 선택된 rowindex)
		 * @param {Boolean} pbEmitEvent? 이벤트(before-update, update)를 발생시킬지 여부
		 * @return void
		 */
		GridKit.prototype.setCellValue = function(app, psGridId, psDataColmnId, psValue, pnRowIndex, pbEmitEvent){
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var rowIndex = pnRowIndex == null ? this.getIndex(app, psGridId) : pnRowIndex;
			
			vcGrid.setCellValue(rowIndex, psDataColmnId, psValue, pbEmitEvent);
		};
		
		/**
		 * 그리드 특정 cell의 값을 반환한다.(detail 영역) 
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @param {String | Number} psDataColmnId cellIndex 값을 가져오고자 하는 cell의 cell index
		 * 											<br> (또는 binding된 data column name)
		 * @param {Number} pnRowIndex? 값을 변경하고자 하는 cell의 row index<br>
		 *                 (defalut : 선택된 rowindex)
		 * @return {Object} 해당 cell의 값
		 */
		GridKit.prototype.getCellValue = function(app, psGridId, psDataColmnId, pnRowIndex){
			/**@type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var rowIndex = pnRowIndex == null ? this.getIndex(app, psGridId) : pnRowIndex;
			return vcGrid.getCellValue(rowIndex, psDataColmnId);
		};
		
		/**
		 * 그리드 특정 row cell의 origin 값을 반환한다.(detail 영역) 
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @param {String | Number} psDataColmnId cellIndex 값을 가져오고자 하는 cell의 cell index<br> (또는 binding된 data column name)
		 * @param {Number} pnRowIndex? 값을 가져오고자 하는  cell의  행인덱스<br/>
		 *                 defalut : 선택된 rowindex
		 * @return {any} 해당 cell의 값
		 */
		GridKit.prototype.getOriginCellValue = function(app, psGridId, psDataColmnId, pnRowIndex){
			/**@type cpr.controls.Grid */
			var grid = app.lookup(psGridId);
			var rowIndex = pnRowIndex == null ? this.getIndex(app, psGridId) : pnRowIndex;
			return grid.dataSet.getOriginalValue(rowIndex, psDataColmnId);
		};
		
		/**
		 * 그리드 특정 row index의 GridRow객체를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @param {Number} pnRowIndex? 값을 가져오고자 하는  cell의  행인덱스<br/>
		 *                 defalut : 선택된 rowindex
		 * @return {cpr.controls.provider.GridRow} 해당 index의 GridRow 객체
		 */
		GridKit.prototype.getDataRow = function(app, psGridId, pnRowIndex){
			/**@type cpr.controls.Grid */
			var grid = app.lookup(psGridId);
			var rowIndex = pnRowIndex == null ? this.getIndex(app, psGridId) : pnRowIndex;
			return grid.getDataRow(rowIndex);
		};
		
		/**
		 * 현재 연결된 데이터 구조체에 sort 조건을 변경하고, sort 적용<br>
		 * <pre><code>
		 * Grid.sort(app, "grd1", "a, b DESC")
		 * </code></pre>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @param {String} psCondition sort 조건식
		 * @return void
		 */
		GridKit.prototype.sort = function(app, psGridId, psCondition){
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			vcGrid.clearSort();
			vcGrid.sort(psCondition);
			vcGrid.redraw();
		};
		
		/**
		 * 그리드 초기화(데이터 clear)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid | Array} paGridId 그리드 ID
		 * @return void
		 */
		GridKit.prototype.reset = function(app, paGridId){
			if(!(paGridId instanceof Array)){
				paGridId = [paGridId];
			 }
			
			for (var i = 0; i < paGridId.length; i++) {
				var vcGrid = app.lookup(paGridId[i]);
				vcGrid.dataSet.clear();
				vcGrid.redraw();
			}
		};
		
		
		/**
		 * 현재 연결된 데이터 구조체에 filter 조건을 변경하고, filter합니다.<br/>
		 * <pre><code>
		 * Grid.filter(app, "grd1", "age >= 20")
		 * </code></pre>
		 * 	=> "age"컬럼의 값이 20이상인 값만 필터링합니다.<br/>
		 * <pre><code>
		 * Grid.filter(app, "grd1", "name ^= '김'")
		 * </code></pre>
		 * 	=> "name"컬럼의 값이 '김'으로 시작하는 값만 필터링합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 아이디
		 * @param {#expression} psCondition filter 조건식
		 * @return void
		 */
		GridKit.prototype.filter = function(app, psGridId, psCondition){
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var vsFilter = vcGrid.getFilter();
			if(!ValueUtil.isNull(vsFilter)){
				vcGrid.clearFilter();	
			}
			vcGrid.filter(psCondition);
		};
		
		
		/**
		 * 그리드의 변경사항 유/무를 반환를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid | Array} paGridId 그리드 ID
		 * @param {"MSG" | "CRM" | "SAVE"} psAftMsg? 
		 *						MSG : 변경사항 내역이 없을 경우 '변경된 내역이 없습니다.' 메세지 출력<br>
		 *  					CRM : 변경내역이 존재할경우 '변경사항이 반영되지 않았습니다. 계속 하시겠습니까?' confirm 메시지출력 <br>
		 * 						SAVE : 변경된 데이터가 있습니다. 저장 하시겠습니까? confirm 메시지출력
		 * @param {cpr.events.CSelectionEvent} event? 이벤트 객체
		 * @param {Function} poCallBackFunc? 콜백함수
		 * @return {Boolean} 데이터 변경 여부
		 */
		GridKit.prototype.isModified = function(app, paGridId, psAftMsg, event, poCallBackFunc){
			//유효성 체크로 인해서 행선택 변경 발생으로 변경여부 체크가 되는 경우는 SKIP...
			if(event != null && event.control != null && event.control.userAttr("selectionChangeByValidation") === "true"){
				event.control.removeUserAttr("selectionChangeByValidation");
				return false;
			}
			
			if(!(paGridId instanceof Array)){
				paGridId = [paGridId];
			}
			psAftMsg = psAftMsg == null ? "" : psAftMsg;
			
			var modify = false;
			var vcGrid = null;
			for (var i=0, len=paGridId.length; i<len; i++) {
				if(paGridId[i] instanceof cpr.controls.Grid) { 
					vcGrid = paGridId[i];
				}else{
					vcGrid = app.lookup(paGridId[i]);
				}
				
				//사용자 정의 속성에 modify 무시 속성이 있는 경우... SKIP
				if(vcGrid.userAttr("ignoreModify") === "Y") continue;
				if(vcGrid.dataSet == null) continue;
				
				if (vcGrid.dataSet.isModified()) {
					modify = true;
					break;
				}
			}
			
			if(modify){
				if(psAftMsg.toUpperCase() == "CRM"){//변경사항이 반영되지 않았습니다. 계속 하시겠습니까? confirm
					if(!this._appKit.Msg.confirm("CRM-M003", [vcGrid.fieldLabel])) return true;
					else return false;
				}
			}else{
				if(psAftMsg.toUpperCase() == "MSG"){//변경된 내역이 없습니다.
					this._appKit.Msg.notify(app, "INF-M006");
				}
			}
			
			return modify;
		};
		
		/**
		 * 해당 그리드의 체크된 행(Row)이나 선택된 행의 인덱스를 반환한다.(check된 행이 있는 경우, 체크된 행이 우선적으로 반환된다.)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @return {Number[]} 선택된 row index 배열
		 */
		GridKit.prototype.getCheckOrSelectedRowIndex = function(app, psGridId){
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			if(vcGrid.rowCount < 1) return [];
			
			var vaChkIndexs = vcGrid.getCheckRowIndices();
			if(vaChkIndexs != null && vaChkIndexs.length > 0 ){
				return vaChkIndexs;
			}else{
				if(vcGrid.selectionUnit == "cell"){
					var vaSelIndices = vcGrid.getSelectedIndices();
					var rowIndices = [];
					for(var i=0, len=vaSelIndices.length; i<len; i++){
						rowIndices.push(vaSelIndices[i].rowIndex);
					}
					return rowIndices;
				}else{
					return vcGrid.getSelectedRowIndices();
				}
			}
		};
		
		/**
		 * 해당 그리드의 체크된 행(Row)의 인덱스를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @return {Number[]} 선택된 row index 배열
		 */
		GridKit.prototype.getCheckedRowIndex = function(app, psGridId){
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			if(vcGrid.rowCount < 1) return [];
			
			var vaChkIndexs = vcGrid.getCheckRowIndices();
			if(vaChkIndexs != null && vaChkIndexs.length > 0 ){
				return vaChkIndexs;
			}else{
				return [];
			}
		};
		
		/**
		 * 그리드 내 변경된 특정 행(Row)의 데이터를 원상태로 복구한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 * @param {Number} pnRowIndex? 원복하고 싶은 row index<br>
		 *                 (default : 현재 체크 및 선택된 로우)
		 * @return void
		 */
		GridKit.prototype.revertRowData = function(app, psGridId, pnRowIndex){
			/**@type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			
			if(pnRowIndex == null){
				var vaSelectIdx = this.getCheckOrSelectedRowIndex(app, psGridId);
				if(vaSelectIdx.length < 1){
					return false;
				}
				var vcDataSet = vcGrid.dataSet;
				var rowIndex;
				for(var i = vaSelectIdx.length - 1; i >= 0; i--) {
					rowIndex = vaSelectIdx[i];
					if(vcGrid.isCheckedRow(rowIndex)) {
						vcGrid.setCheckRowIndex(rowIndex, false); //체크 해제
					}
					var vsStatus = "";
				    if (vcDataSet != null ){
						vsStatus = vcDataSet.getRowStateString(rowIndex);			    	
				    }
					vcGrid.revertRowData(rowIndex); //데이터 원복
					//신규 행이면...
					if (vsStatus == "I") {
						if(rowIndex == vcGrid.getRowCount()){
							if(rowIndex == 0){
								vcGrid.clearSelection();
							}else{
								this.selectRow(app, vcGrid.id, rowIndex-1);
							}
						}else{
							this.selectRow(app, vcGrid.id, rowIndex);
						}
					}
				}
			}else{
				vcGrid.revertRowData(pnRowIndex);
			}
		};
		
		/**
		 * 그리드 내에서 변경된 모든 데이터를 원상태로 복구한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId  그리드 ID
		 */
		GridKit.prototype.revertAllData = function(app, psGridId){
			var vcGrid = app.lookup(psGridId);
			vcGrid.revertData();
		};
		
		/**
		 * 그리드의 특정 행 데이터를 그룹 폼의 데이터셋에 복사한다.<br/>
		 * (사용처) 그리드의 데이터셋을 바인딩하여 사용하지 않는 경우에... 그리드의 선택된 행 데이터를 프리폼/그룹에 매핑하기 위한 용도임
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드ID
		 * @param {#container} psTargetForm 복사할 Group Form ID
		 * @param {Number} pnRowIdx 복사할 그리드 로우 인덱스 
		 * @return void
		 */
		GridKit.prototype.copyRowToGroupForm = function(app, psGridId, psTargetForm, pnRowIdx){
			var vcGrid = app.lookup(psGridId);
			var rowIndex = pnRowIdx == null ? this.getIndex(app, psGridId) : pnRowIdx;
			
			var vcGrpFrm = app.lookup(psTargetForm);
			vcGrpFrm.getBindContext().rowIndex = rowIndex;
			vcGrpFrm.redraw();
		};
		
		/**
		 * 소스(Source) 그리드의 선택된 행(Row)의 데이터를 타겟(Target) 그리드로 복사한다.<br>
		 * 단, 복사할려는 데이터가 타겟 그리드에 이미 존재하는 경우에는 복사하지 않는다.(중복 복사 방지)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psSrcGridId 그리드 ID
		 * @param {#grid} psDesGridId 복사할 그리드 ID
		 * @param {Number} pnSrcRowIdx? 그리드 로우 인덱스<br>
		 *                 default : 체크된 row 나 선택된 row 인덱스를 취득 (check우선)
		 * @return void
		 */
		GridKit.prototype.copyToGridData = function(app, psSrcGridId, psDesGridId, pnSrcRowIdx){
			var vcSrcGrid = app.lookup(psSrcGridId);
			var vcDesGrid = app.lookup(psDesGridId);
			
			var rowIndexs = pnSrcRowIdx == null ? this.getCheckOrSelectedRowIndex(app, psSrcGridId) :  pnSrcRowIdx;
			if(!(rowIndexs instanceof Array)){
				rowIndexs = [rowIndexs];
			}
			//복사할 ROW가 없으면...SKIP
			if (rowIndexs.length < 1) return;
			
			var srcDataSet = vcSrcGrid.dataSet;
			var tarDataSet = vcDesGrid.dataSet;
			for (var i=0, len=rowIndexs.length; i<len; i++) {
				//신규 후 삭제된 행은 제외
				if(srcDataSet.getRowState(rowIndexs[i]) == cpr.data.tabledata.RowState.INSERTDELETED) continue;
				
				var data = srcDataSet.getRowData(rowIndexs[i]);
				// json 형식의 row의 데이터
				var str = [];
				// 이미 존재하는 row를 찾기 위해 row의 모든 column을 비교하는 조건 제작
				// str = "column1 == 'value1' && column2 == 'value2'..."
				for ( var key in data) {
					str.push(key + " == '" + data[key] + "'");
				}
				str = str.join(" && ");
				// 조건에 맞는 row 탐색
				var findRow = tarDataSet.findAllRow(str);
				// 조건에 해당하는 row가 없다면 target 그리드에 선택된 row를 추가
				if (findRow == null || findRow.length < 1) {
					tarDataSet.addRowData(data);
				}
			}
			
			vcDesGrid.redraw();
		};
		
		/**
		 * 소스(Source) 그리드의 모든 행(Row)의 데이터를 타겟(Target) 그리드로 복사한다.<br>
		 * 단, 복사할려는 데이터가 타겟 그리드에 이미 존재하는 경우에는 복사하지 않는다.(중복 복사 방지)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psSrcGridId 그리드 ID
		 * @param {#grid} psDesGridId 복사할 그리드 ID
		 * @return void
		 */
		GridKit.prototype.copyToAllGridData = function(app, psSrcGridId, psDesGridId){
			var vcSrcGrid = app.lookup(psSrcGridId);
		
			var indices = [];
			for (var i=0, len=vcSrcGrid.rowCount; i<len; i++) {
				indices.push(i);
			}
			
			this.copyToGridData(app, psSrcGridId, psDesGridId, indices);
		};
		
		/**
		 * 그리드 작업행을 찾기 위한 조건을 설정한다. 데이터셋에 설정된 PK정보를 기준으로 자동 지정된다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {Number} pnRowIndex? 그리드 로우(Row) 인덱스
		 * @param {Boolean} pbForce? 기존에 로우에 대한 정보가 있으면 SKIP 여부
		 * @return void
		 */
		GridKit.prototype.markFindRowCondition = function(app, psGridId, pnRowIndex, pbForce){
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var voDataSet = vcGrid.dataSet;
			
			if(pbForce != undefined && ValueUtil.fixBoolean(pbForce) === true){
				if(!ValueUtil.isNull(voDataSet._findRowCondition)) return;
			}
			
			var rowIndex = !ValueUtil.isNull(pnRowIndex) ? pnRowIndex : this.getIndex(app, psGridId);
			
			var vaTempCond = [];
			var vaPkColumns = ValueUtil.split(voDataSet.info, ",");
			vaPkColumns.forEach(function(column){
				vaTempCond.push(column + "==" + "'" + voDataSet.getValue(rowIndex, column) + "'");
			});
			
			if(vaTempCond.length > 0){
				voDataSet._findRowCondition = vaTempCond.join(" && ");
			}else{
				voDataSet._findRowCondition = null;
			}
		};
		
		/**
		 * 소스(Source) 그리드의 선택된 행(Row)의 데이터를 타겟(Target) 그리드로 이동한다.<br>
		 * 데이터 이동 후, 소스(Source) 그리드의 이동된 행(Row)의 상태는 delete모드로 상태값만 변경된다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psSrcGridId 그리드ID
		 * @param {#grid} psDesGridId 이동할 그리드 ID
		 * @param {Number | Number[]} pnSrcRowIdx? 그리드 로우 인덱스<br/>
		 *                            default : 체크된 row 나 선택된 row 인덱스를 취득 (check우선)
		 * @return void
		 */
		GridKit.prototype.moveToGridData = function(app, psSrcGridId, psDesGridId, pnSrcRowIdx){
			var vcSrcGrid = app.lookup(psSrcGridId);
			var vcDesGrid = app.lookup(psDesGridId);
			
			var rowIndexs = pnSrcRowIdx == null ? this.getCheckOrSelectedRowIndex(app, psSrcGridId) :  pnSrcRowIdx;
			if(!(rowIndexs instanceof Array)){
				rowIndexs = [rowIndexs];
			}
			//이동할 ROW가 없으면...SKIP
			if(rowIndexs.length < 1) return;
			
			var srcDataSet = vcSrcGrid.dataSet;
			var tarDataSet = vcDesGrid.dataSet;
			for(var i=0, len=rowIndexs.length; i<len; i++){
				//신규 후 삭제된 행은 제외
				if(srcDataSet.getRowState(rowIndexs[i]) == cpr.data.tabledata.RowState.INSERTDELETED) continue;
				
				tarDataSet.addRowData(srcDataSet.getRowData(rowIndexs[i]));
			}
			vcDesGrid.redraw();
			vcSrcGrid.deleteRow(pnSrcRowIdx);
		};
		
		/**
		 * 소스(Source) 그리드의 모든 데이터행(Row)을 타겟(Target) 그리드로 이동한다.<br>
		 * 데이터 이동 후, 소스(Source) 그리드의 이동된 행(Row)의 상태는 delete모드로 상태값만 변경된다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psSrcGridId 그리드 ID
		 * @param {#grid} psDesGridId 이동할 그리드 ID
		 */
		GridKit.prototype.moveToAllGridData = function(app, psSrcGridId, psDesGridId) {
			var vcSrcGrid = app.lookup(psSrcGridId);
		
			var indices = [];
			for (var i=0, len=vcSrcGrid.rowCount; i<len; i++) {
				indices.push(i);
			}
			
			this.moveToGridData(app, psSrcGridId, psDesGridId, indices);
		};
		
		/**
		 * 그리드에서 로우(Row)를 선택해준다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드ID
		 * @param {Number | Number[]} pnRowIndex? 포커스를 부여할 Row의 인덱스(default : 현재 행 인덱스)
		 * @param {Boolean} pbEmitEvent? 이벤트(before-selection-change, selection-change)를 발생시킬지 여부
		 * @return void
		 */
		GridKit.prototype.selectRow = function(app, psGridId, pnRowIndex, pbEmitEvent) {
			/** @type cpr.controls.Grid */
			var grid = app.lookup(psGridId);
			if(pnRowIndex == null || pnRowIndex == undefined){
				pnRowIndex = this.getIndex(app, psGridId);
			}
			
			grid.selectRows(pnRowIndex, pbEmitEvent);
			if(!(pnRowIndex instanceof Array)){
				grid.focusCell(pnRowIndex, 0);
				grid.moveToCell(pnRowIndex, 0);
			}
		};
		
		/**
		 * 그리드에서 조건을 만족하는 로우(Row)를 선택해준다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드ID
		 * @param {String} psCondition 조건식<br>
		 *                 ex)"STUD_DIV_RCD == 'CT101REGU' && SA_NM == '컴퓨터정보과'"
		 * 					사용가능수식 !=", "!==", "$=", "%", "&&", "(", "*", "*=", "+", ",", "-", ".", "/", "/*", "//", "<", "<=", "==", "===", ">", ">=", "?", "[", "^=", "||"
		 * @param {Number} pnCellIdx? 포커스를 부여할 Cell의 인덱스<br>
		 *                 (default : 조건에 만족하는 행 select)
		 * @return void
		 */
		GridKit.prototype.selectRowByCondition = function(app, psGridId, psCondition, pnCellIdx) {
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var voRow = vcGrid.findFirstRow(psCondition);
			
			if(voRow){
				if(pnCellIdx) vcGrid.focusCell(voRow.getIndex(), pnCellIdx);
				else vcGrid.selectRows(voRow.getIndex());
			}
		};
		
		/**
		 * 그리드 행선택 변경 이벤트 발생시, 변경 이전에 선택된 행을 선택해준다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {cpr.events.CSelectionEvent} event 그리드 선택행 변경 이벤트
		 * @param {Boolean} emitEvent? 이벤트(before-selection-change, selection-change)를 발생시킬지 여부
		 * @return void
		 */
		GridKit.prototype.selectBeforeRow = function(app, event, emitEvent) {
			/** @type cpr.controls.Grid */
			var vcGrid = event.control;
			var emit = emitEvent === true ? true : false;
			
			var voOldSelection = event.oldSelection[0];
			var vsPkValues = this.getRowPKColumnValues(app, vcGrid.id, voOldSelection);
			var voFindRow = vcGrid.findFirstRow(vsPkValues);
			if(voFindRow){
				vcGrid.clearSelection(false);
				if(vcGrid.selectionUnit == "cell"){
					vcGrid.selectCells([{rowIndex:voFindRow["rowIndex"], cellIndex:voFindRow["cellIndex"]}], emit);
				}else{
					vcGrid.selectRows(voFindRow.getIndex(), emit);
				}
			}
		};
		
		/**
		 * 그리드에 신규 행(Row)을 추가한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId      그리드 ID
		 * @param {String | Number} pnEditCellIdx 시작 cellIndex cell index 또는 column name
		 * @param {Number} pnRowIdx? 추가하고자 하는 Row index<br>
		 *                 (defalut : 현재 선택된 로우 이후)
		 * @param {Object} poRowData? 추가할 row data<br> (key: header명, value: value 를 갖는 json data)
		 * @return {cpr.controls.provider.GridRow} 추가한 Row의 GridRow 객체.
		 */
		GridKit.prototype.insertRow = function(app, psGridId, pnEditCellIdx, pnRowIdx, poRowData) {
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var rowIndex = pnRowIdx == null ? this.getIndex(app, psGridId) : pnRowIdx;
			
			var insertedRow = null;
			if(poRowData != null)
				insertedRow = vcGrid.insertRowData(rowIndex, true, poRowData);
			else
				insertedRow = vcGrid.insertRow(rowIndex, true);
			
			var vnInsIdx = insertedRow.getIndex();
			
			if(vcGrid.readOnly){
				vcGrid.selectRows([ vnInsIdx ]);
			}else{
				vcGrid.selectRows([ vnInsIdx ]);
				vcGrid.setEditRowIndex(vnInsIdx, true);
			}
			
				
			if(pnEditCellIdx){
				vcGrid.focusCell(vnInsIdx, pnEditCellIdx);
				//포커싱할 컬럼이 UDC인 경우에...
				if(!ValueUtil.isNumber(pnEditCellIdx)){
					for(var i=0,len=vcGrid.detail.cellCount; i<len; i++){
						if(vcGrid.detail.getColumn(i).columnName == pnEditCellIdx){
							var ctrl = vcGrid.detail.getColumn(i).control;
							if(ctrl instanceof cpr.controls.UDCBase){
								var empApp = ctrl.getEmbeddedAppInstance();
								ctrl = AppUtil.getUDCBindValueControl(ctrl);
								if(ctrl) empApp.focus(ctrl.id);
							}
							break;
						}
					}
				}
			}else{
				vcGrid.focusCell(vnInsIdx, 0);
			}
			//그리드에 바인딩된 프리폼이 있는 경우... 프리폼 활성화
			if(!ValueUtil.isNull(vcGrid.userAttr("bindDataFormId"))){
				var freeformes = ValueUtil.split(vcGrid.userAttr("bindDataFormId"), ",");
				freeformes.forEach(function(/* eachType */ formId){
					/**@type cpr.controls.Container */
					var freeform = vcGrid.getAppInstance().lookup(formId);
					if(freeform != null){
						if(freeform._expressEnabled) freeform.bind("enabled").toExpression(freeform._expressEnabled);
						else freeform.enabled = true;
					}
				});
			}
			
			return insertedRow;
		};
		
		/**
		 * 그리드에 단 한건의 신규 행(Row)을 추가한다. (단하나의 신규 행만 추가하고자 하는 경우에 사용)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId      그리드 ID
		 * @param {String | Number} pnEditCellIdx 시작 cell index 또는 column name
		 * @param {#grid | Array} paModifiedGrid
		 * @param {Number} pnRowIdx? 추가하고자 하는 Row index<br>
		 *                 (defalut : 현재 선택된 로우 이후)
		 * @param {Object} poRowData? 추가할 row data<br> (key: header명, value: value 를 갖는 json data)
		 * @return {cpr.controls.provider.GridRow} 추가한 Row의 GridRow 객체
		 */
		GridKit.prototype.insertRowOnlyOne = function(app, psGridId, pnEditCellIdx, paModifiedGrid, pnRowIdx, poRowData) {
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			if(vcGrid == null) return null;
			var rowIndex = pnRowIdx == null ? this.getIndex(app, psGridId) : pnRowIdx;
			
			var insertedRow = null;
			if(vcGrid.dataSet.getRowStatedCount(cpr.data.tabledata.RowState.INSERTED) > 0){
				for(var i=0, len=vcGrid.rowCount; i<len; i++){
					if(vcGrid.getRowState(i) == cpr.data.tabledata.RowState.INSERTED){
						insertedRow = vcGrid.getRow(i);
						break;
					}
				}
			}
			
			if(insertedRow){
				//신규 추가된 행이 존재합니다.변경사항이 반영되지 않았습니다. 계속 하시겠습니까?
				if(!this._appKit.Msg.confirm("CRM-M206", [vcGrid.fieldLabel])) return null;
				this._appKit.Control.reset(app, paModifiedGrid);
				var vaColumns = vcGrid.dataSet.getColumnNames();
				vaColumns.forEach(function(column){
					vcGrid.setCellValue(insertedRow.getIndex(), column, "", false);
				});
			}else{
				if(this.isModified(app, paModifiedGrid, "CRM")) return null;
				this._appKit.Control.reset(app, paModifiedGrid);
				insertedRow = vcGrid.insertRow(rowIndex, true);
			}
			
			var vnInsIdx = insertedRow.getIndex();
			if(vcGrid.readOnly){
				vcGrid.selectRows([ vnInsIdx ]);
			}else{
				vcGrid.selectRows([ vnInsIdx ]);
				vcGrid.setEditRowIndex(vnInsIdx, true);
			}
				
			if(pnEditCellIdx){
				vcGrid.focusCell(vnInsIdx, pnEditCellIdx);
				//포커싱할 컬럼이 UDC인 경우에...
				if(!ValueUtil.isNumber(pnEditCellIdx)){
					for(var i=0,len=vcGrid.detail.cellCount; i<len; i++){
						if(vcGrid.detail.getColumn(i).columnName == pnEditCellIdx){
							var ctrl = vcGrid.detail.getColumn(i).control;
							if(ctrl instanceof cpr.controls.UDCBase){
								var empApp = ctrl.getEmbeddedAppInstance();
								ctrl = AppUtil.getUDCBindValueControl(ctrl);
								if(ctrl) empApp.focus(ctrl.id);
							}
							break;
						}
					}
				}
			}
			
			return insertedRow;
		};
		
		/**
		 * 그리드의 선택된 행(Row)를 삭제한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {Number | Number[]} pnRowIdx? 삭제하고자 하는 Row index<br>
		 *                 default : 체크된 row 나 선택된 row 인덱스를 취득 (check우선)
		 * @return {Number[]} 삭제된 행 (배열)                
		 */
		GridKit.prototype.deleteRow = function(app, psGridId, pnRowIdx) {
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var _this = this;
			
			var rowIndexs = pnRowIdx == null ? this.getCheckOrSelectedRowIndex(app, psGridId) :  pnRowIdx;
			
			if(!(rowIndexs instanceof Array)){
				rowIndexs = [pnRowIdx];
			}
			//삭제할 행이 없는 경우... 메시지 박스를 보여줌
			if(rowIndexs.length < 1){
				//삭제할 데이터가 없습니다.
				this._appKit.Msg.alert("INF-M007");
				return false;
			}
			
			//신규 후 삭제시... 디테일 데이터에 대한 Reference 삭제(삭제 플래그로 업데이트)
			var vaDetailCtrls = null;
			
			var vcDataSet = vcGrid.dataSet;
			for(var i = rowIndexs.length - 1; i >= 0; i--) {
			    var rowIdx = rowIndexs[i];
			    vcGrid.deleteRow(rowIdx);
			    
				if (vcDataSet != null ){
					if (vcDataSet.getRowState(rowIdx) == cpr.data.tabledata.RowState.INSERTDELETED) {
						
						vcGrid.revertRowData(rowIdx);
						if(rowIdx == vcGrid.getRowCount()){
							if(rowIdx == 0){
								vcGrid.clearSelection();
							}else{
								vcGrid.selectRows(rowIdx-1);						
							}
						}else{
							vcGrid.selectRows(rowIdx);
						}
					}
				}	
			}
			
			//그리드에 바인딩된 프리폼이 있는 경우... 프리폼 활성화
			if(!ValueUtil.isNull(vcGrid.userAttr("bindDataFormId"))){
				var freeformes = ValueUtil.split(vcGrid.userAttr("bindDataFormId"), ",");
				freeformes.forEach(function(/* eachType */ formId){
					/**@type cpr.controls.Container */
					var freeform = vcGrid.getAppInstance().lookup(formId);
					if(freeform != null){
						var voDs = _this._appKit.Group.getBindDataSet(freeform.getAppInstance(), freeform);
						//데이터 건수가 없으면... 프리폼 비활성화
						if(voDs.getRowCount() < 1) {
							freeform.enabled = false;
						}
					}
				});
			}
			
			return rowIndexs;
		};
		
		/**
		 * 특정 row의 상태값을 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {Number} pnRowIdx 상태를 알고자 하는 row index
		 * @return {cpr.data.tabledata.RowState} 해당 row index의 상태값<br>
					<b>state 종류</b><br>
					cpr.data.tabledata.RowState.EMPTIED : 삭제된 로우를 커밋 시 삭제된 배열을에서 제거하기 위한 임시 상태<br>
					cpr.data.tabledata.RowState.UNCHANGED : 변경되지 않은 상태<br>
					cpr.data.tabledata.RowState.INSERTED : 행이 신규로 추가된 상태<br>
					cpr.data.tabledata.RowState.UPDATED : 행이 수정된 상태<br>
					cpr.data.tabledata.RowState.DELETED : 행이 삭제된 상태<br>
					cpr.data.tabledata.RowState.INSERTDELETED : 행이 추가되었다가 삭제된 상태
		 */
		GridKit.prototype.getRowState = function(app, psGridId, pnRowIdx) {
			var vcGrid = app.lookup(psGridId);
			var rowIndex = pnRowIdx == null ? this.getIndex(app, psGridId) : pnRowIdx;
			return vcGrid.getRowState(rowIndex);
		};
		
		/**
		 * 특정 row의 상태를 변경한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {cpr.data.tabledata.RowState} state 변경할 상태값. <br>
				<b>state 종류</b><br>
				cpr.data.tabledata.RowState.UNCHANGED : 변경되지 않은 상태<br>
				cpr.data.tabledata.RowState.INSERTED : 행이 신규로 추가된 상태<br>
				cpr.data.tabledata.RowState.UPDATED : 행이 수정된 상태<br>
				cpr.data.tabledata.RowState.DELETED : 행이 삭제된 상태<br>
		 * @param {Number} pnRowIdx 변경하고자 하는 row index
		 */
		GridKit.prototype.setRowState = function(app, psGridId, state, pnRowIdx) {
			var vcGrid = app.lookup(psGridId);
			var rowIndex = pnRowIdx == null ? this.getIndex(app, psGridId) : pnRowIdx;
			vcGrid.setRowState(rowIndex, state);
		};
		
		/**
		 * 전체 row의 상태값을 특정 상태(state)로 일괄 업데이트 한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {cpr.data.tabledata.RowState} state 변경할 상태값<br>
				<b>state 종류</b><br>
				cpr.data.tabledata.RowState.UNCHANGED : 변경되지 않은 상태<br>
				cpr.data.tabledata.RowState.INSERTED : 행이 신규로 추가된 상태<br>
				cpr.data.tabledata.RowState.UPDATED : 행이 수정된 상태<br>
				cpr.data.tabledata.RowState.DELETED : 행이 삭제된 상태<br>
		 */
		GridKit.prototype.setRowStateAll = function(app, psGridId, state) {
			var vcGrid = app.lookup(psGridId);
			var vcDataSet = vcGrid.dataSet;
			vcDataSet.setRowStateAll(state);
			vcGrid.redraw();
		};
		
		/**
		 * 해당 상태 값을 갖는 row를 검색하여 row index 배열을 반환합니다.
		 * <pre><code>
		 * Grid.getRowStatedIndices(app,"grd1",cpr.data.tabledata.RowState.UPDATED);
		 * </code></pre>
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {cpr.data.tabledata.RowState} state 검색할 상태값<br>
					<b>state 종류</b><br>
					cpr.data.tabledata.RowState.UNCHANGED : 변경되지 않은 상태<br>
					cpr.data.tabledata.RowState.INSERTED : 행이 신규로 추가된 상태<br>
					cpr.data.tabledata.RowState.UPDATED : 행이 수정된 상태<br>
					cpr.data.tabledata.RowState.DELETED : 행이 삭제된 상태<br>
		 * @return {Array} row index 배열
		 */
		GridKit.prototype.getRowStatedIndices = function(app, psGridId, state) {
			var vcGrid = app.lookup(psGridId);
			return vcGrid.dataSet.getRowStatedIndices(state);
		};
		
		/**
		 * 그리드의 로우 갯수 반환
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @return {Number}  로우 카운트 
		 */
		GridKit.prototype.getRowCount = function(app, psGridId) {
			var vcGrid = app.lookup(psGridId);
			return vcGrid.rowCount;
		};
		
		/**
		 * 그리드의 현재 선택된 행의 인덱스(Index)를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @return {Number}  로우(Row) 인덱스 
		 */
		GridKit.prototype.getIndex = function(app, psGridId) {
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			return vcGrid.selectionUnit != "cell" ? vcGrid.getSelectedRowIndex() : vcGrid.getSelectedIndices()[0]["rowIndex"];
		};
		
		/**
		 * 그리드의 타이틀명을 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @return {String} 타이틀 문자열 
		 */
		GridKit.prototype.getTitle = function(app, psGridId) {
			var titleCtlrs = this._appKit.Group.getAllChildrenByType(app, "udc.com.comTitle");
			if(titleCtlrs != null){
				for(var i=0, len=titleCtlrs.length; i<len; i++){
					if(titleCtlrs[i].ctrl && titleCtlrs[i].ctrl.id == psGridId){
						return titleCtlrs[i].title;
					}
				}
			}
			return "";
		};
		
		/**
		 * 그리드의 특정 컬럼에 포커싱을 처리한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {String} psDataColumnId 데이터 컬럼 cell index 또는 column name
		 * @param {Number} pnRowIndex? 행 인덱스
		 * @return void
		 */
		GridKit.prototype.setFocusColumn = function(app, psGridId, psDataColumnId, pnRowIndex) {
			/** @type cpr.controls.Grid */
			var grid = app.lookup(psGridId);
			var rowIndex = pnRowIndex == null ? this.getIndex(app, psGridId) : pnRowIndex;
			
			if(grid.readOnly){
				grid.selectRows([ rowIndex ]);
			}else{
				grid.selectRows([ rowIndex ]);
				grid.setEditRowIndex(rowIndex, true);
			}
			grid.focusCell(rowIndex, psDataColumnId);
		};
		
		/**
		 * 그리드 디테일 columnname로 헤더 컬럼 취득
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {#column} psColumnName 컬럼명
		 * @return {Array} 헤더 컬럼 배열Array (cpr.controls.gridpart.GridColumn)
		 */
		GridKit.prototype.getHeaderColumn = function(app, psGridId, psColumnName) {
			/** @type cpr.controls.Grid*/
			var vcGrid = app.lookup(psGridId);
		    var vaDetailColumn = vcGrid.detail.getColumnByName(psColumnName);
			
			var vaHeaderColumns = new Array();
			vaDetailColumn.forEach(function(dColumn){
		//		var vaHeaderColumn = vcGrid.header.getColumnByColIndex(dColumn.colIndex, dColumn.colSpan);
		//		vaHeaderColumn.forEach(function(hColumn){
		//			vaHeaderColumns.push(hColumn);	
		//		});
				var vaHeaderCellIndex = vcGrid.getHeaderCellIndices(dColumn.cellIndex);
				vaHeaderCellIndex.forEach(function(each){
					vaHeaderColumns.push(vcGrid.header.getColumn(each));
				});
			});
			
			return vaHeaderColumns;
		};
		
		/**
		 * 그리드 디테일 컬럼의 ColIndex로 헤더 컬럼 취득
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드ID
		 * @param {Number} pnColIndex 컬럼 ColIndex
		 * @return {Array} 헤더 컬럼 배열Array (cpr.controls.gridpart.GridColumn)
		 */
		GridKit.prototype.getHeaderColumnByColIdex = function(app, psGridId, pnColIndex) {
			/** @type cpr.controls.Grid*/
			var vcGrid = app.lookup(psGridId);
			var voHeader = vcGrid.header;
			
			var vaHeaderColumns = new Array();
			var hColumn;
			for(var i=0, len=voHeader.cellCount; i<len; i++){
				hColumn = voHeader.getColumn(i);
				if(hColumn != null && hColumn.colIndex == pnColIndex){
					vaHeaderColumns.push(hColumn);
				}
			}
			
			return vaHeaderColumns;
		};
		
		/**
		 * 그리드 헤더 컬럼의 텍스트(text) 문자열을 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {#column} psColumnName 컬럼명
		 * @return {String} 헤더 컬럼 text
		 */
		GridKit.prototype.getHeaderColumnText = function(app, psGridId, psColumnName) {
			var vaColumns = this.getHeaderColumn(app, psGridId, psColumnName);
			return vaColumns.length > 0 ? vaColumns[0].getText() : "";
		};
		
		/**
		 * 그리드 헤더 중에 STATUS 컬럼 객체를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @return {cpr.controls.gridpart.GridHeaderColumn} 헤더 컬럼
		 */
		GridKit.prototype.getHeaderStatusColumn = function(app, psGridId) {
			var header = app.lookup(psGridId).header;
			var column = null;
			for(var i=0, len=header.cellCount; i<len; i++){
				column = header.getColumn(i);
				if(column.getText() == "F"){
					return column;
				}
			}
			return null;
		};
		
		/**
		 * 그리드 내 컬럼을 숨긴다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {#column} psColumnName 컬럼 명
		 * @return void
		 */	 
		GridKit.prototype.hideColumn = function(app, psGridId, psColumnName){
		 	/** @type cpr.controls.Grid*/
		 	var vcGrid = app.lookup(psGridId);
			var vaColumns = this.getHeaderColumn(app, psGridId, psColumnName);
		//	if(vaColumns.length > 0){
		//	 	vcGrid.columnVisible(vaColumns[0].colIndex, false);
		//	}
			if(vaColumns) {
				vaColumns.forEach(function(/* cpr.controls.gridpart.GridHeaderColumn */each){
					each.visible = false;
				});
			}
		};
		 
		/**
		 * 그리드 컬럼을 보이도록 변경한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {#column} psColumnName 컬럼명
		 * @return void
		 */	 
		GridKit.prototype.showColumn = function(app, psGridId, psColumnName){
		 	/** @type cpr.controls.Grid*/
		 	var vcGrid = app.lookup(psGridId);
			var vaColumns = this.getHeaderColumn(app, psGridId, psColumnName);
		//	if(vaColumns.length > 0){
		//	 	vcGrid.columnVisible(vaColumns[0].colIndex, true);
		//	}
			if(vaColumns) {
				vaColumns.forEach(function(/* cpr.controls.gridpart.GridHeaderColumn */each){
					each.visible = true;
				});
			}
		};
		
		/**
		 * 그리드 데이터를 조건에 맞게 필터링한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {#expression} psCondition 데이터 필터링 조건
		 * @return void
		 */	
		GridKit.prototype.setFilter = function(app, psGridId, psCondition){
		 	/** @type cpr.controls.Grid*/
		 	var grid = app.lookup(psGridId);
			grid.setFilter(psCondition);
		};
		
		/**
		 * 그리드 데이터 필터링을 취소한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @return void
		 */	
		GridKit.prototype.clearFilter = function(app, psGridId){
		 	/** @type cpr.controls.Grid*/
		 	var grid = app.lookup(psGridId);
			grid.clearFilter();
		};
		
		
		/**
		 * 그리드의 데이터셋의 FindRow를 지정한다.<br>
		 * 해당 함수 사용시 그리드 조회시 psFindRowCond로 지정된 행이 자동 선택된다. 
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {String} psCondition 조건식 <br/>
		 *                 ex)"STUD_DIV_RCD == 'CT101REGU' && SA_NM == '컴퓨터정보과'" <br/>
		 * 					사용가능수식 !=", "!==", "$=", "%", "&&", "(", "*", "*=", "+", ",", "-", ".", "/", "/*", "//", "<", "<=", "==", "===", ">", ">=", "?", "[", "^=", "||" 
		 * @return void
		 */
		GridKit.prototype.setFindRowCondition = function(app, psGridId, psCondition){
			var vcGrid = app.lookup(psGridId);
			vcGrid.dataSet._findRowCondition = psCondition;
		};
		
		/**
		 * 현재 로우의 key(pk) value를 반환한다. 
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {Number} pnRowIndex? 취득하고자하는 row index. <br/>
		 *                 defalut : 선택된 rowindex
		 * @return {String}
		 */
		GridKit.prototype.getRowPKColumnValues = function(app, psGridId, pnRowIndex){
			/** @type cpr.controls.Grid*/
			var vcGrid = app.lookup(psGridId);
			var vcDataSet = vcGrid.dataSet;
			
			var rowIndex = pnRowIndex == null ? this.getIndex(app, psGridId) : pnRowIndex;
			
			var vaPkColmns = ValueUtil.split(vcDataSet.info, ",");
			var vaTempCond = [];
			vaPkColmns.forEach(function(column){
				var vsPkValue = vcDataSet.getValue(rowIndex, column);
				vaTempCond.push(column + "==" + "'" + vcDataSet.getValue(rowIndex, column) + "'"); 
			});
			
			return vaTempCond.length > 0 ? vaTempCond.join(" && ") : "";
		};
		
		/**
		 * 그리드의 선택 유/무 체크 및 PK값이 입려되어 있는지를 체크한다. 
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {String | Array} paIgnoreCol PK값 입력 체크 예외 컬럼명
		 * @return {Boolean}
		 */
		GridKit.prototype.checkSelectionWithPkValues = function(app, psGridId, paIgnoreCol){
			/** @type cpr.controls.Grid*/
			var vcGrid = app.lookup(psGridId);
			var rowIndex = this.getIndex(app, vcGrid.id);
			//Row 선택여부 확인
			if(rowIndex < 0){
				this._appKit.Msg.alert("INF-M129", [vcGrid.fieldLabel]); //선택된 데이터가 없습니다.
				return false;
			}
			//ROW의 PK값 입력여부 체크
			var vaPKColumns = ValueUtil.split(ValueUtil.fixNull(vcGrid.dataSet.info), ",");
			var valid = true, text, focusColumn, vbChk = false;
			for(var i=0, len=vaPKColumns.length; i<len; i++){
				if(ValueUtil.isNull(vcGrid.getCellValue(rowIndex, vaPKColumns[i]))){
				    if(!(paIgnoreCol instanceof Array)){
				        paIgnoreCol = [paIgnoreCol];
				    }
				    
				    vbChk = false;
		            paIgnoreCol.some(function(colName){
		                if(colName == vaPKColumns[i]) {
		                	vbChk = true;
		                	return false;
		                }
		            });
		            
		            if(vbChk) continue;
					
					valid = false;
					focusColumn = vaPKColumns[i];
					text = this.getHeaderColumnText(app, vcGrid.id, focusColumn);
					break;
				}
			}
			
			if(!valid){
				//항목은 필수입력 항목입니다.
				this._appKit.Msg.alert("WRN-M001", [vcGrid.fieldLabel+"의 "+text]);
				vcGrid.setEditRowIndex(rowIndex, true);
				vcGrid.focusCell(rowIndex, focusColumn);
				//포커싱할 컬럼이 UDC인 경우에...
				var vaDetailColumns = vcGrid.detail.getColumnByName(focusColumn);
				var dctrl = vaDetailColumns != null && vaDetailColumns.length > 0 ? vaDetailColumns[0].control : null;
				if(dctrl != null && dctrl instanceof cpr.controls.UDCBase){
					var empApp = dctrl.getEmbeddedAppInstance();
					dctrl = AppUtil.getUDCBindValueControl(dctrl);
					if(dctrl) empApp.focus(dctrl.id);
				}
				return false;
			}
			
			return true;
		};
		
		/**
		 * 현재 로우의 key(pk) value를 반환한다. <br>
		 * - 사이트별 Customizing 필요
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#grid} psGridId 그리드 ID
		 * @param {String} psFileName export 파일명
		 * @param {String} psExcludeColumns? 출력시 제외할 컬럼명(여러개인 경우 콤마로 구분)<br> ex-COL1,COL2,COL3
		 * @param {String} psFileType?  파일유형(xls,xlsx,cvs)
		 * @param {Array} metadata 엑셀 익스포트시 설정 정보 (암호, 출력용지방향) 
		 * @param {Boolean} pbExcludeHideColumn 숨김컬럼 제외 여부
		 * @param {String} psExCludePart? 출력시 제외영역(ex-footer, gfooter)
		 * @param {{applyFormat? : Boolean <!-- 익스포트시 포맷을 적용시킬 지 여부 (default true) --> ,
		 * freezeHeader? : Boolean <!--엑셀 익스포트시 헤더 부분을 틀고정할지 여부를 설정 (default false)  -->,
		 * useFormat? : Boolean <!--엑셀로 익스포트시 엑셀의 format 기능을 사용할지 여부 (default true)  -->,
		 * applySuppress? : Boolean <!--  엑셀 익스포트시 suppress, mergedToIndexExpr에 의한 셀 병합을 반영할지 여부 (default false) -->}} options? 그리드 엑셀 익스포트 옵션
		 * @param {String} psRowIndex? 익스포트시킬 특정 row index(여러개인 경우 콤마로 구분)
		 * @param {(datas : Number, rowIndex : Number)=>Void } handler? 엑셀 익스포트시 행별 스타일 또는 데이터를 변경할 수 있는 핸들러
		 * @return void
		 */
		GridKit.prototype.exportData = function(app, psGridId, psFileName, psExcludeColumns, psFileType, metadata, pbExcludeHideColumn, psExCludePart, options, psRowIndex, handler){
			var _this = this;
			/** @type cpr.controls.Grid */
			var vcGrid = app.lookup(psGridId);
			var vsFileType = !ValueUtil.isNull(psFileType) ? psFileType : "xlsx";
			
			pbExcludeHideColumn = ValueUtil.isNull(pbExcludeHideColumn) ? true : pbExcludeHideColumn;
			
			var subExport = new cpr.protocols.Submission();
			subExport.action = "../export/" + psFileName.replace("\/", "") + "."+vsFileType;
			subExport.mediaType = "application/json";
			subExport.responseType = "blob";
			subExport.addParameter("filename", psFileName.replace("\/", ""));
			//기본 출력 제외 컬럼(인덱스 컬럼, 선택용 체크 컬럼)
			var voColumn, voHColumn;
			var vaExcludeCellIndexs = [];
			var vaExportRowIndex = [];
			for(var i=0, len=vcGrid.detail.cellCount; i<len; i++){
				voColumn = vcGrid.detail.getColumn(i);
				if(voColumn.columnType == "checkbox" || voColumn.columnType == "rowindex"){
					vaExcludeCellIndexs.push(i);
				}else if(voColumn.control instanceof cpr.controls.UDCBase){
					if(voColumn.control == null || voColumn.control.getBindInfo("value") == null){
						vaExcludeCellIndexs.push(i);
					}
				}
		//		else if(voColumn.columnName == null || voColumn.columnName == ""){
		//			vaExcludeCellIndexs.push(i);
		//		}
				else{
					//숨김컬럼 제외
					if(pbExcludeHideColumn){
						// 디테일 셀인덱스에 해당하는 헤더 셀 인덱스 반환
						voHColumn = vcGrid.getHeaderCellIndices(i); 
						if(voHColumn != null && voHColumn.length > 0){
							voHColumn.forEach(function(vnCellIndex) {
								if(vcGrid.header.getColumn(vnCellIndex).visible===false) {
									vaExcludeCellIndexs.push(vnCellIndex);
								}
							})
						}
					}
		//			if(pbExcludeHideColumn){
		//				voHColumn = this.getHeaderColumn(app, psGridId, voColumn.columnName);
		//				if(voHColumn != null && voHColumn.length > 0){
		//					if(voHColumn[0].visible === false){
		//						vaExcludeCellIndexs.push(i);
		//					}
		//				}
		//			}
				}
			}
			
			//상태컬럼 제외
			var statusColumn = this.getHeaderStatusColumn(app, vcGrid.id);
			if(statusColumn != null){
				vaExcludeCellIndexs.push(statusColumn.colIndex);
			}
			
			//그외 추가적인 출력 제외 컬럼이 존재하는 경우
			if(!ValueUtil.isNull(psExcludeColumns)){
				var vaExclColumns = ValueUtil.split(psExcludeColumns, ",");
				var vaDColumns;
				for(var j=0, jlen=vaExclColumns.length; j<jlen; j++){
					vaDColumns = vcGrid.detail.getColumnByName(vaExclColumns[j]);
					if(vaDColumns){
						vaDColumns.forEach(function(/* Object */ each){
		//					vaExcludeCellIndexs.push(each.colIndex);
							vaExcludeCellIndexs.push(each.cellProp.constraint["cellIndex"]);
						});
					}
				}
			}
			
			// 출력시킬 특정 로우 인덱스
			if(!ValueUtil.isNull(psRowIndex)) {
				vaExportRowIndex  = ValueUtil.split(psRowIndex,",");
			}  else {
				for (var a = 0 ; a < vcGrid.getRowCount(); a++) {
					vaExportRowIndex.push(a);
				}
			}
			
			var exportData = vcGrid.getExportData({
				exceptStyle:false,
				applyFormat : (options && options.applyFormat? options.applyFormat : true),
				freezeHeader : (options && options.freezeHeader? options.freezeHeader :false),
				applySuppress : (options && options.applySuppress? options.applySuppress :false),
				useFormat : (options && options.useFormat ? options.useFormat : true),
				excludeCols: vaExcludeCellIndexs,
				rows : vaExportRowIndex,
				rowDataHandler: handler
			});
		
			if (metadata != null) {
				exportData["metadata"] = {};
				if (metadata["password"] != null) {
					exportData["metadata"]["password"] = metadata["password"];
				}
				if (metadata["printPageOrientation"] != null) {
					exportData["metadata"]["printPageOrientation"] = metadata["printPageOrientation"];
				}
			}
			//풋터 또는 그룹풋터 제외하는 경우
			if(!ValueUtil.isNull(psExCludePart)){
				var len = exportData.rowgroups.length;
				for(var i = (len-1); i >= 0; i--) {
					if (exportData.rowgroups[i].region == psExCludePart) {
						exportData.rowgroups.splice(i,1);
					}
				}
			}
			
			//그리드 출력 스타일지정
			for (var i=0, len=exportData.rowgroups.length; i<len; i++) {
				// band별로 원하는 스타일 추가 가능 (header, detail, footer, gheader, gfooter)
				var rowGroup = exportData.rowgroups[i];
				var cellLength = rowGroup.style.length;
				for (var j = 0; j < cellLength; j++) {
					rowGroup.style[j].style["border-bottom-color"] = "black";
					rowGroup.style[j].style["border-bottom-style"] = "solid";
					rowGroup.style[j].style["border-bottom-width"] = "1px";
					rowGroup.style[j].style["border-left-color"] = "black";
					rowGroup.style[j].style["border-left-style"] = "solid";
					rowGroup.style[j].style["border-left-width"] = "1px";
					rowGroup.style[j].style["border-right-color"] = "black";
					rowGroup.style[j].style["border-right-style"] = "solid";
					rowGroup.style[j].style["border-right-width"] = "1px";
					rowGroup.style[j].style["border-top-color"] = "black";
					rowGroup.style[j].style["border-top-style"] = "solid";
					rowGroup.style[j].style["border-top-width"] = "1px";
					
					if (rowGroup.region == "header") {
						rowGroup.style[j].style["background-color"] = "#dddddd";
						rowGroup.style[j].style["text-align"] = "center";
					}
				}
			}
			
			subExport.setRequestObject(exportData);
		
			subExport.send();
		};
		
		/**
		 * 그리드의 행 레이아웃을 정의합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#grid} psGridId
		 * @param {Number} pnRowCnt 그리드에 보여질 Header와 Detail영역의 Row수 
		 * @param {Number} pnDefaultMergedColIndex
		 */
		GridKit.prototype.addHeaderRow = function(app, psGridId, pnRowCnt, pnDefaultMergedColIndex){
			/**
			 * @type cpr.controls.Grid
			 */
			var grid = app.lookup(psGridId);
		
			var originConfig = grid.getInitConfig();
			var originRowCnt = originConfig.header.rows.length;
			
			originConfig.header.rows = []
			for(var i = 0; i < pnRowCnt; i++){
				originConfig.header.rows.push({height : '24px'});	
			}
			
			originConfig.header.cells.forEach(function(cell){
				
				if(cell.constraint.colIndex <= pnDefaultMergedColIndex){
					cell.constraint.rowSpan = originConfig.header.rows.length;
				}
			});
		
			grid.init(_.clone(originConfig));
		}
		
		/**
		 * 그리드의 행 레이아웃을 정의합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#grid} psGridId
		 * @param {Number} pnRowCnt 그리드에 보여질 Header와 Detail영역의 Row수 
		 * @param {Number} pnDefaultMergedColIndex
		 */
		GridKit.prototype.addDetailRow = function(app, psGridId, pnRowCnt, pnDefaultMergedColIndex){
			/**
			 * @type cpr.controls.Grid
			 */
			var grid = app.lookup(psGridId);
			
			var originConfig = grid.getInitConfig();
			var originRowCnt = originConfig.detail.rows.length;
			
			originConfig.detail.rows = []
			for(var i = 0; i < pnRowCnt; i++){
				originConfig.detail.rows.push({height : '24px'});	
			}
			
			originConfig.detail.cells.forEach(function(cell){
				
				if(cell.constraint.colIndex <= pnDefaultMergedColIndex){
					cell.constraint.rowSpan = originConfig.detail.rows.length;
				}
			});
			//originConfig.columns = originConfig.columns.slice(0, 18)
			originConfig.autoFit = "all"
		
			grid.init(_.clone(originConfig));
		}
		
		/**
		 * 그리드의 행 레이아웃을 정의합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#grid} psGridId
		 * @param {Number} pnRowCnt 그리드에 보여질 Header와 Detail영역의 Row수 
		 * @param {Number} pnDefaultMergedColIndex 자동으로 머지될 컬럼 인덱스(ex 2: 2열 이전의 컬럼은 자동으로 머지됩니다.)
		 */
		GridKit.prototype.defineRowLayout = function(app, psGridId, pnRowCnt, pnDefaultMergedColIndex){
			/**
			 * @type cpr.controls.Grid
			 */ 
			var grid = app.lookup(psGridId);
			var initConfig = grid.getInitConfig();
		
			if(!grid["_originConfigInfo"]){
				var dataSet = initConfig.dataSet
				initConfig.dataSet = null;
				grid["_originConfigInfo"] = deepCopy(initConfig)
				
				initConfig.dataSet = dataSet;
				grid["_originConfigInfo"].dataSet = dataSet;
			}
			
			//STEP1 - header, detail의 영역을 늘려 셀이 들어갈 공간 확보
			//헤더영역 row수 조정
			this.addHeaderRow(app, psGridId, pnRowCnt, pnDefaultMergedColIndex);
			//디테일영역 row수 조정
			this.addDetailRow(app, psGridId, pnRowCnt, pnDefaultMergedColIndex);
		
			var headerCells = [];
			var nextColIdx = pnDefaultMergedColIndex + 1;
			var layout = grid.getColumnLayout();
			
			
			var rowCursor = 0
			var cellCursor = 0
			
			var cellCntInRow = Math.ceil(( (layout.detail.length > layout.header.length ? layout.detail.length : layout.header.length
			                                -pnDefaultMergedColIndex - 1) / pnRowCnt));
		
			if(grid["_originConfigInfo"]){
				initConfig.columns = deepCopy(grid["_originConfigInfo"].columns.slice(0, cellCntInRow + pnDefaultMergedColIndex +1 ));
			}
			else{
				initConfig.columns = initConfig.columns.slice(0, cellCntInRow + pnDefaultMergedColIndex +1 );
			}
			
			//STEP2 - header영역에 셀을 재배치
			for(var i = pnDefaultMergedColIndex + 1; i < initConfig.header.cells.length; i++){
				
		
				var headerCell = initConfig.header.cells[i];
				headerCell.constraint.colIndex = nextColIdx;
				headerCell.constraint.rowIndex = rowCursor;
				nextColIdx += headerCell.constraint.colSpan || 1 ;
				cellCursor += headerCell.constraint.colSpan || 1; 
				
				if(cellCursor >= cellCntInRow){
					cellCursor = 0;
					nextColIdx = pnDefaultMergedColIndex + 1;
					rowCursor++;
				}
				
			}
			
			
			nextColIdx = pnDefaultMergedColIndex + 1;
			cellCursor = 0;
			rowCursor = 0;
			
			//STEP3 - detail영역에 셀을 재배치
			for(var i = pnDefaultMergedColIndex + 1; i < initConfig.detail.cells.length; i++){
				
				
				var detailCell = initConfig.detail.cells[i];
				detailCell.constraint.colIndex = nextColIdx;
				detailCell.constraint.rowIndex = rowCursor;
				nextColIdx += detailCell.constraint.colSpan || 1 
				cellCursor += detailCell.constraint.colSpan || 1 
		
				if(cellCursor >= cellCntInRow){
					cellCursor = 0;
					nextColIdx = pnDefaultMergedColIndex + 1;
					rowCursor++;
				}
			}
			
			//STEP4 - 변경한 config정보 반영
			grid.init(initConfig);
			
			/**
			 * 깊은복사
			 * @param {any} obj
			 */
			function deepCopy(obj) {
			    if (obj === null || typeof (obj) !== 'object' || 'isActiveClone' in obj)
			        return obj;
			
			    if (obj instanceof Date)
			        var temp = new obj.constructor(); //or new Date(obj);
			    else
			        var temp = obj.constructor();
			
			    for (var key in obj) {
			        if (Object.prototype.hasOwnProperty.call(obj, key)) {
			            obj['isActiveClone'] = null;
			            temp[key] = deepCopy(obj[key]);
			            delete obj['isActiveClone'];
			        }
			    }
			    return temp;
			}
		}
		
		GridKit.prototype.revertRowLayout = function(app, psGridId){
			/**
			 * @type cpr.controls.Grid
			 */
			var grid = app.lookup(psGridId);
			grid.init(grid["_originConfigInfo"]);
			grid["_originConfigInfo"] = null;
		}
		
		
		
		/**
		 * Group컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function GroupKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 그룹 초기화시 공통 적용
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param  * @param {Array} paGrpId 그룹ID 배열
		 */
		GroupKit.prototype.init = function(app, paGrpId) {
		}
		
		/**
		 * 조회조건 및 작업영역 그룹 컨트롤 초기화<br>
		 * 1. AppProperties.SEARCH_BTN_ID 설정에 따라 조회조건 변경시 작업영역 데이터 Clear (선택)<br>
		 *   - 조회영역내 조회조건 컨트롤의 selection-change, value-change시 작업영역(paDisableCtl) disable 및 그리드, 프리폼 초기화<br>
		 * 2. 조회조건 변경시 작업영역 데이터 변경시 알림(확인) 메시지 출력 <br>
		 *  - appHeader에서 공통 적용됨<br>
		 * 3. 조회버튼의 ID는 'btnSearch'' 또는 value를 '조회''로 지정해야함<br>
		 *  - 사이트별 Customizing 필요<br>
		 * 4. input 컨트롤의 사용자 속성에 autoKeydownSearch = "Y" 지정시 keydown 이벤트 등록 (조회버튼 클릭)
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psSearchBoxId  		 조회조건 영역 그룹컨트롤ID
		 * @param {#container | Array} paDisableCtl	 조회조건 변경시 비활성화 처리되는 영역의 그룹 컨트롤ID
		 * @param {#uicontrol | Array} paExceptCtl? 적용 제외 컨트롤 ID
		 * @return void
		 */
		GroupKit.prototype.initSearchBox = function(app, psSearchBoxId, paDisableCtl, paExceptCtl){
			//비활성화 영역 컨트롤
			paDisableCtl = paDisableCtl != null ? paDisableCtl : new Array();
			if(!(paDisableCtl instanceof Array)){
				paDisableCtl = [paDisableCtl];
			}
			//적용 제외 컨트롤 목록
			paExceptCtl = paExceptCtl != null ? paExceptCtl : new Array();
			if(!(paExceptCtl instanceof Array)){
				paExceptCtl = [paExceptCtl];
			}
			
			var _app = app;
			var _appKit = this._appKit;
			var vsSchBtnId = AppProperties.SEARCH_BTN_ID;
			
		//	var vaSearchBoxIds = ValueUtil.split(psSearchBoxId, ",");
		//	paDisableCtl.forEach(function(item){
		//		var ctrl = _app.lookup(item);
		//		if(ctrl) ctrl.style.addClass("data-box");
		//	});
			
			function doAddSearchBoxEvent(ctrl, psSearchBoxId){
				//조회버튼인 경우
				if ( ctrl.type == "button" && (ctrl.id && ctrl.id.match(vsSchBtnId) || ctrl.value == "조회")){
					
					paExceptCtl.push(ctrl.id);
					vsSchBtnId = ctrl.id;
					ctrl.addEventListener("click", function(/* cpr.events.CEvent */ e){
						if(e.defaultPrevented === false){
							doShadowView(_app, true, psSearchBoxId);					
						}
					});
				}else{
					if(ctrl.type == "button" || ctrl.type == "output" || ctrl.type == "img" || ctrl.visible === false || ctrl.readOnly === true) return;
					
		//			if(ctrl.type == "numbereditor"){
		//				if(ctrl.spinButton != false && ctrl.style.css("text-align") == ""){
		//					ctrl.style.css({"text-align":"center"});
		//				}
		//				if((ctrl.format === "0000" || ctrl.format === "9999") && ctrl.max == 0){
		//					ctrl.max = 1.7976931348623157E308;
		//				}
		//			}
		
					/**
					 * 변경사항이 있는 경우
					 * 계속진행을 하시겠습니까? 에서 취소 선택시 업무단 value-change 이벤트가 호출되지 않게 하기 위해
					 * before 이벤드를 추가함.
					 */			
					var bfEventType = (ctrl.type == "combobox" || ctrl.type == "radiobutton") ? "before-selection-change" : "before-value-change";
					ctrl.addEventListener(bfEventType, function(e){
						if(_appKit.isAppModified(_app, "CRM", _app.getContainer())){
							return false;
						}else{
							return true;
						}
						return true;
					});
					
					var vbUseSearchBoxClear = AppProperties.IS_SEARCH_CLEAR;
					
					//조회조건 변경시 작업 영역 초기화
					if(vbUseSearchBoxClear){
						var eventType = (ctrl.type == "combobox" || ctrl.type == "radiobutton") ? "selection-change" : "value-change";
						ctrl.addEventListener(eventType, function(e){
							
							//화면내의 모든 데이터 Clear
							var dataSets = _appKit.getAllAppModifiedDataSet(_app);
							if(dataSets != null && dataSets.length > 0){
								dataSets.forEach(function(ds){
									ds.clear();
								});
							}
							doShadowView(_app, false);
						});
					}
					
					//인풋박스 컨트롤 Keydown 이벤트 추가
					if( (ctrl.type == "inputbox" || ctrl.type == "numbereditor") && ctrl.userAttr("autoKeydownSearch") == "Y"){
						ctrl.addEventListener("keydown", function(/* cpr.events.CKeyboardEvent */ e){
							if(e.keyCode == cpr.events.KeyCode.ENTER){
								//Enter키 입력시, 조회 버튼 클릭 이벤트 발생
								_appKit.Control.dispatchEvent(app, vsSchBtnId, "click");
								//_appKit.Header.dispatchEvent(app, "btnSearch", "click");
								var comBtnSch = _appKit.Group.getAllChildrenByType(app, "udc.com.comBtnSearch");
								if(comBtnSch != null && comBtnSch.length > 0){
									var vcCtrl = comBtnSch[0].getEmbeddedAppInstance().lookup(vsSchBtnId);
									if(vcCtrl){
										vcCtrl.dispatchEvent(new cpr.events.CEvent("click"));
									}
								}
							}
						});
					}
				}
			}
			
			function doShadowView(app, pbEnable, psSearchBoxId){
				if(paDisableCtl.length > 0){
		//			setTimeout(function(){
						if(vaSearchBoxIds.length > 1){
							var vnIdx = vaSearchBoxIds.indexOf(psSearchBoxId);
							_appKit.Control.setEnable(app, pbEnable, paDisableCtl[vnIdx]);
						}else{
							_appKit.Control.setEnable(app, pbEnable, paDisableCtl);
						}
						
		//			}, 50);
				}else{
					if(pbEnable === false){
						if(_app.lookup("grpSchShell") == null){
							var disableCtl = new cpr.controls.Container("grpSchShell");
							disableCtl.style.css({"background-color":"#ededed", "opacity":"0.2"});
							disableCtl.setLayout(new cpr.controls.layouts.XYLayout());
							/** @type cpr.controls.Container */
							var vcSearchBox = _app.lookup(psSearchBoxId);
							var heightPosix = vcSearchBox.getActualRect()["height"];
							_app.getContainer().addChild(disableCtl, {
										"top": (Number(heightPosix)+35)+"px",
										"right": "5px",
										"bottom": "5px",
										"left": "5px"
									});
						}
					}else{
						_app.getContainer().removeChild(_app.lookup("grpSchShell"), true);
					}
				}
			}
			
			var initFocus = false;
			function doFocusCtrl(poCtrl){
				if(poCtrl.type == "button" || poCtrl.type == "output" || poCtrl.type == "img") return;
				
				if(!initFocus){
					poCtrl.focus();
					initFocus = true;
				}
			}
			var vaSearchBoxIds = ValueUtil.split(psSearchBoxId, ",");
			for(var z=0, zlen=vaSearchBoxIds.length; z<zlen; z++){
				/** @type cpr.controls.Container */
				var vcSearchBox = app.lookup(vaSearchBoxIds[z]);
				if(vcSearchBox){
					var childCtrls = _appKit._getChildren(vcSearchBox);
					for (var i=0, len=childCtrls.length; i<len; i++) {
						//udc컨트롤일 경우.
						if(childCtrls[i] instanceof cpr.controls.UDCBase){
							var embApp = childCtrls[i].getEmbeddedAppInstance();
							embApp.getContainer().getChildren().some(function(ctrl){
								if(ctrl instanceof cpr.controls.Container){
									ctrl.getChildren().some(function(subCtrl){
										doAddSearchBoxEvent(subCtrl, vaSearchBoxIds[z]);
										doFocusCtrl(subCtrl);
									});
								}else{
									doAddSearchBoxEvent(ctrl, vaSearchBoxIds[z]);
									doFocusCtrl(ctrl);
								}
							});
						}else{
							//이벤트 추가
							doAddSearchBoxEvent(childCtrls[i], vaSearchBoxIds[z]);
							//포커싱
							doFocusCtrl(childCtrls[i]);
						}
					}
					doShadowView(_app, false, vaSearchBoxIds[z]);
				}
			}
		};
		
		/**
		 * 해당 그룹 컴포넌트 내의 DataColumn에 바인딩된 컨트롤 객체를 반환한다.<br>
		 * 이는 프리폼 내의 DataColumn의 값을 갖는(바인딩) 컨트롤을 찾기 위해 사용된다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#container} psGrpId 그룹ID
		 * @param {#column} psDataColumnNm datacolumn 명
		 * @return {Object} 컨트롤 객체
		 */
		GroupKit.prototype.getDataBindedControl = function(app, psGrpId, psDataColumnNm){
			/** @type cpr.controls.Container */
			var _grpKit = this._appKit.Group;
			var vcFrf = app.lookup(psGrpId);
			var vaChild = vcFrf.getChildren();
			var vcBindCtrl = null;
			vaChild.some(function(ctrl, idx){
				if(vcBindCtrl) return true;
				
				if(ctrl.type == "container") vcBindCtrl = _grpKit.getDataBindedControl(app, ctrl.id, psDataColumnNm);
				if(ctrl.type == "output") return false;
				var bind = ctrl.getBindInfo("value");
				if(bind && bind.type == "datacolumn" && psDataColumnNm === bind.columnName){
					if(ctrl instanceof cpr.controls.UDCBase){
						vcBindCtrl = AppUtil.getUDCBindValueControl(ctrl);
					}else{
						vcBindCtrl = ctrl;
					}
					
					return true;
				}
			});
			
			return vcBindCtrl;
		};
		
		/**
		 * 그룹 또는 컨테이너 내의 특정 타입에 해당하는 자식 컨트롤을 취득한다.<br>
		 * (사용처) 해당 화면내의 특정 유형의 컨트롤 목록을 얻고자 하는 경우에 사용
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {String} psCtlType		 컨트롤 타입(ex: grid)
		 * @param {cpr.controls.Container} poContainer 		자식 컨트롤을 취득하고자 하는 부모 컨테이너 객체  	
		 * @param {Boolean} pbRecursive? 자식 컨테이너를 Recusive하게 찾을건지 여부
		 * @return {Array} 자식 컨트롤 객체 배열
		 */
		GroupKit.prototype.getAllChildrenByType = function(app, psCtlType, poContainer, pbRecursive) {
			var vaTypesChild = new Array();
			
			var container = app.getContainer();
			function getChildRecursive(psCtlType, poContainer){
			    var vaChildCtrls = poContainer ? (pbRecursive === true ? poContainer.getAllRecursiveChildren() : poContainer.getChildren()) : (pbRecursive === true ? container.getAllRecursiveChildren() : container.getChildren());
			    for (var i=0, len=vaChildCtrls.length; i<len; i++) {
			        if (vaChildCtrls[i].type == psCtlType) {
			        	vaTypesChild.push(vaChildCtrls[i]);
			        }else if (vaChildCtrls[i] instanceof cpr.controls.Container ) {
			        	getChildRecursive(psCtlType, vaChildCtrls[i]);
			        }else if(vaChildCtrls[i] instanceof cpr.controls.UDCBase){
			        	var voUdcApp = vaChildCtrls[i].getEmbeddedAppInstance();
			        	if(voUdcApp) getChildRecursive(psCtlType, voUdcApp.getContainer());
			        }else if(vaChildCtrls[i] instanceof cpr.controls.EmbeddedApp){
			        	var voEmbApp = vaChildCtrls[i].getEmbeddedAppInstance();
			        	if(voEmbApp) getChildRecursive(psCtlType, voEmbApp.getContainer());
			        }
			    }
			    vaChildCtrls = null;
			}
			
			getChildRecursive(psCtlType, poContainer);
			
			return vaTypesChild;
		};
		
		/**
		 * 그룹 또는 컨테이너 내의 특정 ID를 갖는 자식 컨트롤을 취득한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {Array} paCtrlIds		 컨트롤 ID 배열
		 * @param {cpr.controls.Container} poContainer? 자식 컨트롤을 취득하고자 하는 부모 컨테이너 객체  	
		 * @return {Array} 자식 컨트롤 객체 배열
		 */
		GroupKit.prototype.getControlByID = function(app, paCtrlIds, poContainer) {
			if(!(paCtrlIds instanceof Array)){
				paCtrlIds = [paCtrlIds];
			}
			var vaChildCtrls = new Array();
			var container = poContainer ? poContainer : this._appKit.getMainApp(app).getContainer();
			function getChildRecursive(paCtrlIds, poContainer){
			    var childCtrls = poContainer.getAllRecursiveChildren();
			    for (var i=0, len=childCtrls.length; i<len; i++) {
			        if (paCtrlIds.indexOf(childCtrls[i].id) != -1) {
			        	vaChildCtrls.push(childCtrls[i]);
			        }else if(childCtrls[i] instanceof cpr.controls.UDCBase){
			        	var voUdcApp = childCtrls[i].getEmbeddedAppInstance();
			        	if(voUdcApp) getChildRecursive(paCtrlIds, voUdcApp.getContainer());
			        }else if(childCtrls[i] instanceof cpr.controls.EmbeddedApp){
			        	var voEmbApp = childCtrls[i].getEmbeddedAppInstance();
			        	if(voEmbApp) getChildRecursive(paCtrlIds, voEmbApp.getContainer());
			        }
			    }
			}
			
			getChildRecursive(paCtrlIds, container);
			
			return vaChildCtrls;
		};
		
		/**
		 * 그룹 컨트롤에 바인딩된 데이터셋을 반환한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {cpr.controls.Container} poContainer 		자식 컨트롤을 취득하고자 하는 부모 컨테이너 객체 
		 * @return {cpr.data.DataSet} 바인딩된 데이터셋 객체
		 */
		GroupKit.prototype.getBindDataSet = function(app, poContainer){
			/**@type cpr.data.DataSet */
			var voDataSet = null;
			/** @type cpr.bind.BindContext */
			var voBindContext = this.getBindContext(app, poContainer);
			if(voBindContext instanceof cpr.bind.GridSelectionContext){
				voDataSet = voBindContext.grid.dataSet;
			}else if(voBindContext instanceof cpr.bind.DataRowContext){
				voDataSet = voBindContext.dataSet;
			}
			
			return voDataSet;
		};
		
		/**
		 * 그룹 컨트롤의 바인딩 문맥(Context) 객체를 반환한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {cpr.controls.Container} poContainer 		자식 컨트롤을 취득하고자 하는 부모 컨테이너 객체 
		 * @return {cpr.bind.BindContext} 바인딩 Context 객체
		 */
		GroupKit.prototype.getBindContext = function(app, poContainer){
			/** @type cpr.bind.BindContext */
			var voBindContext = poContainer.getBindContext();
			if(voBindContext == null || voBindContext == undefined){
				var vaChildCtrls = this.getAllChildrenByType(app, "container", poContainer);
				vaChildCtrls.forEach(function(/* Object */ ctrl){
					if(ctrl.getBindContext()){
						voBindContext = ctrl.getBindContext();
						return true;
					}
				});
			}
			
			return voBindContext;
		};
		/**
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {cpr.controls.Container} poContainer 자식 컨트롤을 취득하고자 하는 부모 컨테이너 객체 
		 */
		GroupKit.prototype.setFloatGrp = function(app, poGroup) {
			var _app = app;
			
			for (var i = 0; i < poGroup.getChildrenCount(); i++) {
				var pogrpChid = poGroup.getChildren()[i];
				
				if (pogrpChid instanceof cpr.controls.Container) {
					pogrpChid.getLayout().topMargin = 10;
					pogrpChid.getLayout().bottomMargin = 10;
					pogrpChid.getLayout().spacing = 3;
				}
			}
			
			poGroup.style.css({
				"border-top": "1px solid #DFDFDF",
				"background-color": "#FFFFFF"
			})
			
			poGroup.visible = true;
			
			var rightSpacing, leftSpacing;
			if(app.getHostAppInstance().app.id != AppProperties.MAIN_APP_ID) {
				rightSpacing = "0px";
				leftSpacing  = "0px";
			}else{
				rightSpacing = "11px";
				leftSpacing  = "11px";
			}
			
			
			poGroup.style.css({
				position: "absolute",
				right: rightSpacing,
				left: leftSpacing,
				bottom: "0px",
				height: "54px"
			});
			
			_app.floatControl(poGroup);
		};
		 
		/**
		 * Layout의 Type명을 정의한다. 
		 *    사용예 : Group.layoutClass["XYLayout"];
		 * 
		 * 
		 * @author : append 2021-09-09  : kjj 
		 */
		GroupKit.prototype.layoutClass = {
			   "XYLayout"          : cpr.controls.layouts.XYLayout 
			 , "ResponsiveXYLayout": cpr.controls.layouts.ResponsiveXYLayout
			 , "VerticalLayout"    : cpr.controls.layouts.VerticalLayout
			 , "FlowLayout"        : cpr.controls.layouts.FlowLayout
		} ;
		
		/**
		 * contaner 의 layout type을 반환한다. 
		 * 사용예 :
		 *    Group.getLayoutType( "voGroup001"" ) == "XYLayout"
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {cpr.controls.Container} psContainer id
		 * @return {String}  : [ XYLayout , ResponsiveXYLayout, VerticalLayout, FlowLayout, FlowLayout ]
		 * @author : append 2021-09-09  : kjj 
		 */
		GroupKit.prototype.getLayoutTypeString = function(app, psContainer){  
			var poContainer = app.lookup(psContainer) ;
			
			if( poContainer == null || poContainer == undefined ) return "" ;
			
			var voLayout = poContainer.getLayout() ;
			
			var vLayoutNm = "XYLayout" ;
			  
			if( voLayout instanceof cpr.controls.layouts.XYLayout){
				vLayoutNm = "XYLayout" ;
			}else if( voLayout instanceof cpr.controls.layouts.ResponsiveXYLayout){
				vLayoutNm = "ResponsiveXYLayout" ; 
			}else if( voLayout instanceof cpr.controls.layouts.VerticalLayout){
				vLayoutNm = "VerticalLayout" ; 
			}else if( voLayout instanceof cpr.controls.layouts.FlowLayout){
				vLayoutNm = "FlowLayout" ; 
			} 
			return vLayoutNm ; 
			
		} ;
		
		/**
		 * contaner 의 layout type을 반환한다. 
		 * 사용예 :
		 *    Group.getLayoutType( voGroup001 ) instanceof cpr.controls.layouts.XYLayout
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {cpr.controls.Container} psContainer id
		 * @return {cpr.controls.layouts}  : cpr.controls.layouts.XYLayout , cpr.controls.layouts.ResponsiveXYLayout, cpr.controls.layouts.VerticalLayout, cpr.controls.layouts.FlowLayout, cpr.controls.layouts.FlowLayout
		 * @author : append 2021-09-09  : kjj 
		 */
		GroupKit.prototype.getLayoutType = function(app, psContainer){   
			 
			var vLayoutNm = this.getLayoutTypeString(app, psContainer); 
			 
			return this.layoutClass[vLayoutNm] ; 
			
		} ;
		
		/**
		 * 그룹에 속해있는 컨트롤의 데이터를 초기화 한다.
		 * @param {any} app
		 * @param {#Container} psGrpId
		 */
		GroupKit.prototype.clear = function(app, psGrpId) {
			var _app = app;
			var targetGrp = _app.lookup(psGrpId);
			var _appkit_ = this._appKit;
			var bindContext = _appkit_.Group.getBindContext(_app, targetGrp);
			
			if (bindContext) {
				if (bindContext.grid) {
					this._appKit.FreeForm.revertRow(_app, psGrpId);
				} else if (bindContext.dataSet) {
					var voDs = bindContext.dataSet;
					
					var vnRowIndex = bindContext.rowIndex;
					//데이터 Revert
					var rowData = voDs.getRow(vnRowIndex).getRowData();
					var vsGridRowState = voDs.getRowState(vnRowIndex);
					for (var column in rowData) {
						voDs.setValue(vnRowIndex, column, voDs.getOriginalValue(vnRowIndex, column));
					}
					//2019.11.21 추가
					if (vsGridRowState == cpr.data.tabledata.RowState.INSERTED) {
						voDs.setRowState(vnRowIndex, vsGridRowState);
					}
					
					_appkit_.Control.redraw(_app, targetGrp.id);
				} else if (bindContext.dataMap) {
					
					var voDm = bindContext.dataMap;
					
					var colNms = voDm.getColumnNames();
					
					colNms.forEach(function(each) {
						voDm.setValue(each, voDm.getOriginalValue(each));
					});
					
					_appkit_.Control.redraw(_app, targetGrp.id);
				} else {
					var targetGrp = _app.lookup(psGrpId);
					
					targetGrp.getAllRecursiveChildren().forEach(function(each) {
						if (each.type == "output" || each.type == "button") return false;
						
						each.value = "";
					});
				}
			} else {
				var targetGrp = _app.lookup(psGrpId);
				
				targetGrp.getAllRecursiveChildren().forEach(function(each) {
					if (each instanceof cpr.controls.Container) {
						each.getAllRecursiveChildren().forEach(function(child) {
							if (child.type == "output" || child.type == "button") return false;
							
							child.value = "";
						});
					} else if (each instanceof cpr.controls.UDCBase) {
						var embApp = each.getEmbeddedAppInstance();
						var children = embApp.getContainer().getAllRecursiveChildren();
						
						children.forEach(function(udcChild) {
							if (udcChild instanceof cpr.controls.Container) {
								_appkit_.Group.clear(embApp, udcChild.id);
							} else {
								if (udcChild.type == "output" || udcChild.type == "button") return false;
								
								udcChild.value = "";
							}
						});
					} else {
						if (each.type == "output" || each.type == "button") return false;
						
						each.value = "";
					}
					
				});
			}
		}
		
		/**
		 * pc/mobile 화면보기 전환
		 * @param {cpr.core.AppInstance} app
		 * @param {"pc" | "mobile"} screenName
		 */
		GroupKit.prototype.changeScreen = function(app, screenName){
			
			var that = this;
			var actions = {
				pc: function() {
					app.getContainer().style.css("min-width", "1340px");
					that.getAllChildrenByType(app, "container", app.getContainer(), true).forEach(function(each) {
						if (each._RForm) each._RForm._restore();
					});
		
				},
				mobile: function() {
					app.getContainer().style.css("min-width", "none");
					that.getAllChildrenByType(app, "container", app.getContainer(), true).forEach(function(each) {
						if (each._RForm) {
							each._RForm._transform(each._RForm._columnSettings["mobile"]);
						}
					})
		
				}
			}
			actions[screenName]();
		}
		
		
		
		/**
		 * 메인 MDI 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function MDIKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * close 메인 MDI의 탭으로 화면을 오픈한다.<br>
		 * - Root App에 해당 함수 필요(doOpenMenuToMdi)<br>
		 * - 사이트별 Customizing 필요
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#mdifolder} psMenuId 메뉴ID
		 */
		MDIKit.prototype.open = function(app, psMenuId, poParam){
			if(app.getRootAppInstance().hasAppMethod("doOpenMenuToMdi")){
				app.getRootAppInstance().callAppMethod("doOpenMenuToMdi", psMenuId, poParam);		
			}
		};
		
		/**
		 * Msg(메시지) 유틸<br>
		 * language.json 참조
		 * @constructor
		 * @param {common.module} appKit
		 */
		function MsgKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 메시지 ID에 해당되는 메시지를 반환한다.
		 * @param {String} psMsgId  메시지 ID
		 * @param {String | Array} paArgs 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 * @return {String} 메시지 문자열
		 */
		MsgKit.prototype.getMsg = function(psMsgId, paArgs) {
		    if (psMsgId == null || psMsgId == "") return "";
		    var psMsg = cpr.I18N.INSTANCE.message("NLS-"+psMsgId);
		    if (psMsg == null || psMsg.indexOf("NLS-") >= 0) { return psMsgId.replace(/\\n/gi, "\n"); }
		    
		    if(!ValueUtil.isNull(paArgs)){
		    	if(!(paArgs instanceof Array)){
		    		paArgs = [paArgs];
		    	}
		    	//정규 표현식 사용하여 동적 메시지 치환
		    	var regExp = psMsg.match(/\{[0-9]+\}/ig);
				regExp.forEach(function(/* String */ exp){
					var idx = ValueUtil.fixNumber(exp.replace("{", "").replace("}", "").trim());
					psMsg = psMsg.replace(exp, new String(paArgs[idx]).replace(/\r\n/ig, ""));
				});
		    }
		    
		    return psMsg.replace(/\\n/ig, "\n");
		};
		
		/**
		 * 확인 선택용 Confirm 메시지 박스를 띄운다.
		 * <pre><code>
		 * Msg.confirm("CRM-M001");<br>
		 * <p>또는</p><br>
		 * Msg.confirm("CRM-M016", ["선택된 파일"]);
		 * </code></pre>
		 * @param {String} psMsgId 메시지 ID
		 * @param {String | Array} paArgs? 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 * @return {Boolean} Confirm 창의 확인 결과
		 */
		MsgKit.prototype.confirm = function(psMsgId, paArgs) {
			return confirm(this.getMsg(psMsgId, paArgs));
		};
		
		/**
		 * Confirm 에 해당하는 메시지, CFM 에 등록된 메세지만 가져옵니다.<br>
		 * ex) Msg.confirm("CMN00002"); -> CFM-CMN00002 : 저장하시겠습니까?
		 *
		 * @param {cpr.core.AppInstance} app - 앱인스턴스 객체
		 * @param {String} psMsgId 메시지 ID
		 * @param {Array || String} paArgs 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 * @param {Function} callFunClose 확인을 클릭시 동작하는 내용 
		 * @param {Function} callFunCancel 취소을 클릭시 동작하는 내용 
		 * @param {String} closeBtnValue  확인버튼 "확인" 값 커스텀 (Optional)
		 * @param {String} cancleBtnValue  취소버튼 "취소" 값 커스텀 (Optional) 
		 * @param {psTitle} psTitle  메시지 영역의 타이틀 명  (Optional) 
		 * @return {Boolean} Confirm 창의 확인 결과
		 */
		MsgKit.prototype.confirmDlg = function(app, psMsgId, psaArgs, callFunClose, callFunCancel, closeBtnValue, cancleBtnValue, psTitle) {
			return this._appKit.showMsg(app, "confirm", this.getMsg(psMsgId, psaArgs), callFunClose, null, callFunCancel, closeBtnValue, null, cancleBtnValue, psTitle);
		};
		
		
		/**
		 * 메시지 구독대상에게 알림처리 한다.<br>
		 * (main.clx의 cpr.core.NotificationCenter.INSTANCE.subscribe()
		 * <pre><code>
		 * Msg.notify(app, "CMN-M001");
		 * </code></pre>
		 * @param {cpr.core.AppInstance} app 앱인스턴스 객체
		 * @param {String} psMsgId 메시지ID
		 * @param {String | Array} paArgs? 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 * @param {"INFO" | "WARNING" | "DENGER"} psMsgType? 출력타입 (default : INFO)
		 * @param {Number} pnDelay? notify 사용시 알림창이 표시되는 시간 설정
		 * @param {Boolean} pbKeep? 이전 메시지를 유지시킬지 여부 
		 * @return void
		 */
		MsgKit.prototype.notify = function(app, psMsgId, paArgs, psMsgType, pnDelay) {
			
			var voMsgInfo = {};
			voMsgInfo.TYPE = psMsgType;
			voMsgInfo.MSG = this.getMsg(psMsgId, paArgs);
			if(pnDelay != null){
				voMsgInfo.DELAY = pnDelay;
			}
			cpr.core.NotificationCenter.INSTANCE.post(AppProperties.MSG_TOPIC_ID, voMsgInfo);
			
			/* 헤더에 메시지 표현.
			var _app = this._appKit.getMainApp(app);
			_app = _app != null ? _app : app;
			
			var vaChildCtrls = _app.getContainer().getChildren();
			var vaSubChildCtrls = null;
			var appHeader = null;
			for (var i=0, len=vaChildCtrls.length; i<len; i++) {
		        if (vaChildCtrls[i] instanceof udc.com.appHeader ) {
		        	appHeader = vaChildCtrls[i];
		        	break;
		        }else if(vaChildCtrls[i].type == "container" && vaChildCtrls[i].style.getClasses().indexOf("header-box") != -1){
		        	vaSubChildCtrls = vaChildCtrls[i].getChildren();
		        	for (var j=0, jlen=vaSubChildCtrls.length; j<jlen; j++) {
		        		if (vaSubChildCtrls[j] instanceof udc.com.appHeader ) {
				        	appHeader = vaSubChildCtrls[j];
				        	break;
				        }
		        	}
		        	if(appHeader != null) break;
		        }
		    }
		    //갱신된 데이터가 조회되었습니다. 메시지 유지 여부 설정
		    if(!ValueUtil.isNull(_app.__keep_msg)){
		    	psMsgId = _app.__keep_msg;
		    	_app.__keep_msg = "";
		    }else{
		    	if(ValueUtil.fixBoolean(pbKeep)) app.__keep_msg = psMsgId;
				else _app.__keep_msg = "";
		    }
		    
		    if(appHeader){
		    	var embApp = appHeader.getEmbeddedAppInstance();
				var vcOptMsg = embApp.lookup("optAppMsg");
				var vcNotifier = embApp.lookup("notiInfo");
				var vsNotiMsg = this.getMsg(psMsgId, paArgs);
				if(vcNotifier.visible){
					vcNotifier.info(vsNotiMsg);
				}
				vcOptMsg.value = vsNotiMsg;
				vcOptMsg.style.animateFrom({
					"transform": "translateY(-30px) ",
					"opacity": "0"
				});
		    }*/
		};
		
		/**
		 * 메시지를 웹브라우저의 alert 알림창으로 띄운다.
		 * <pre><code>
		 * Msg.alert("CMN-M001");<br>
		 * <p>또는</p><br>
		 * Msg.alert("CRM-M016", ["선택된 파일"]);
		 * </code></pre>
		 * @param {String} psMsgId 메시지ID
		 * @param {String | Array} paArgs? 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 */
		MsgKit.prototype.alert = function(psMsgId, paArgs) {
		    alert(this.getMsg(psMsgId, paArgs));
		};
		
		/**
		 * 메시지 출력 alert
		 * @param {cpr.core.AppInstance} app - 앱인스턴스 객체
		 * @param {} psMsgId 메시지ID
		 * @param {Array || String} psaArgs 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 * @param {Function} callFunClose 확인을 클릭시 동작하는 내용 
		 * @param {String} closeBtnValue  확인버튼 "확인" 값 커스텀 (Optional)
		 * @return {Boolean} Confirm 창의 확인 결과
		 * @param {psTitle} psTitle  메시지 영역의 타이틀 명  (Optional) 
		 */
		MsgKit.prototype.alertDlg = function(app, psMsgId, psaArgs, callFunClose, closeBtnValue, psTitle) {
			return this._appKit.showMsg(app, "alert", this.getMsg(psMsgId, psaArgs), callFunClose, null, null, closeBtnValue, null, null, psTitle);
		};
		
		/**
		 * alert 박스를 띄운다.
		 * <pre><code>
		 * Msg.alert("CRM-M001");<br>
		 * <p>또는</p><br>
		 * Msg.confirm("CRM-M016", ["선택된 파일"]);
		 * </code></pre>
		 * @param {String} psMsgId 메시지 ID
		 * @param {String | Array} paArgs? 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 */
		MsgKit.prototype.alertDialog = function(app, psMsgId, paArgs) {
			this._appKit.Dialog.open(app, "app/cmn/alert", 350, 260, null, this.getMsg(psMsgId, paArgs))
		};
		
		/**
		 * 확인 선택용 Confirm 메시지 박스를 띄운다.
		 * <pre><code>
		 * Msg.confirm("CRM-M001");<br>
		 * <p>또는</p><br>
		 * Msg.confirm("CRM-M016", ["선택된 파일"]);
		 * </code></pre>
		 * @param {String} psMsgId 메시지 ID
		 * @param {String | Array} paArgs? 메시지 내용 중 @로 표시된 부분 넣어줄 데이터 배열
		 * @return {Boolean} Confirm 창의 확인 결과
		 */
		MsgKit.prototype.confirmDialog = function(app, psMsgId, paArgs, pfCloseCallback) {
			return this._appKit.Dialog.open(app, "app/cmn/confirm", 350, 260, pfCloseCallback, this.getMsg(psMsgId, paArgs))
		};
		
		
		
		
		
		
		
		
		/**
		 * 리스트 형태 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function SelectKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 입력한 index의 위치에 새로운 item을 추가한다.
		 * <pre><code>
		 * SelectCtl.addItem(app, "cmb1", "라벨1", "값1");<br>
		 * <p>또는</p><br>
		 * SelectCtl.addItem(app, "cmb1", "라벨1", "값1", 0);
		 * </code></pre>
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId		 select ID (only Combo, List, Radio, CheckBox Group)
		 * @param {String} psLabel		 추가할 item의 label
		 * @param {String} psValue		 추가할 item의 value
		 * @param {Number} pnIndex? 추가할 item의 index (default는 마지막 행 뒤에 추가됨)
		 * @return void 
		 */
		SelectKit.prototype.addItem = function(app, psCtlId, psLabel, psValue, pnIndex){
			/** @type cpr.controls.ComboBox */
			var vcCtl = app.lookup(psCtlId);
			var item;
			
			if(ValueUtil.isNull(pnIndex)){
				vcCtl.addItem(new cpr.controls.Item(psLabel, psValue));
			}else{
				if(pnIndex >= 0 && pnIndex <= vcCtl.getItemCount()){
					if(pnIndex == 0){
						item = vcCtl.getItem(pnIndex);
						vcCtl.insertItemBefore(new cpr.controls.Item(psLabel, psValue), item);
					} else {
						item = vcCtl.getItem(pnIndex - 1);
						vcCtl.insertItemAfter(new cpr.controls.Item(psLabel, psValue), item);
					}
				}
			}
		};
		
		/**
		 * 지정한 인덱스(Index)의 아이템 라벨(label)을 반환한다.<br>
		 * multiple "true"의 경우 index에 해당하는 여러 라벨값을 알고자 할 때, pnIndex는 구분자를 기준으로 조인된 String 형태를 가진다.
		 * <pre><code>
		 * SelectCtl.getItemLabel(app, "cmb1");<br>
		 * <p>또는</p><br>
		 * SelectCtl.getItemLabel(app, "cmb1", "1,2,3");
		 * </code></pre>
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId		컨트롤ID
		 * @return {String | Array}	multiple : true 일 경우 Array(String)<br>
		 * 							multiple : false 일 경우 String
		 * @param {Number} pnIndex? 인덱스 번호
		 * @return {String | Array}	multiple : true 일 경우 Array(String)<br>
		 * 							multiple : false 일 경우 String
		 */
		SelectKit.prototype.getItemLabel = function(app, psCtlId, pnIndex){
			var vcCtl = app.lookup(psCtlId);
			if(ValueUtil.isNull(pnIndex)){
				var item = vcCtl.getSelectionFirst();
				return item ? item.label : "";
			}else{
				if(vcCtl.multiple){//다중 선택 가능한 경우 라벨 배열 반환
					var vaIdx = ValueUtil.split(pnIndex, ",");
					for(var i=0, len=vaIdx.length; i<len; i++){
						vaIdx[i] = vcCtl.getItem(vaIdx[i]).label;
					}
					return vaIdx;
				}else{
					return vcCtl.getItem(pnIndex).label;
				}
			}
		};
		
		/**
		 * 지정한 인덱스(Index)의 아이템 값(value)을 반환한다.<br>
		 * multiple "true"의 경우 index에 해당하는 여러 value 값을 알고자 할 때, pnIndex는 구분자를 기준으로 조인된 String 형태를 가진다.
		 * <pre><code>
		 * SelectCtl.getItemValue(app, "cmb1");<br>
		 * <p>또는</p><br>
		 * SelectCtl.getItemValue(app, "cmb1", "1,2,3");
		 * </code></pre>
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId		컨트롤ID
		 * @param {Number} pnIndex? 인덱스 번호
		 * @return {String | Array}	multiple : true 일 경우 Array(String)<br>
		 * 							multiple : false 일 경우 String
		 */
		SelectKit.prototype.getItemValue = function(app, psCtlId, pnIndex){
			/**@type cpr.controls.ComboBox */
			var vcCtl = app.lookup(psCtlId);
			if(ValueUtil.isNull(pnIndex)){
				var item = vcCtl.getSelectionFirst();
				return item ? item.value : "";
			}else{
				if(vcCtl.multiple){//다중 선택 가능한 경우 값 배열 반환
					var vaIdx = ValueUtil.split(pnIndex, ",");
					for(var i=0, len=vaIdx.length; i<len; i++){
						vaIdx[i] = vcCtl.getItem(vaIdx[i]).value;
					}
					return vaIdx;
				}else{
					return vcCtl.getItem(pnIndex).value;
				}
			}
		};
		
		/**
		 * 지정한 인덱스(Index)의 아이템 값(value)을 반환한다.<br>
		 * multiple "true"의 경우 index에 해당하는 여러 value 값을 알고자 할 때, pnIndex는 구분자를 기준으로 조인된 String 형태를 가진다.
		 * <pre><code>
		 * SelectCtl.getItemValue(app, "cmb1", "1,2,3");
		 * </code></pre>
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId		컨트롤ID
		 * @param {Number} pnIndex? 인덱스 번호
		 * @return {String | Array}	multiple : true 일 경우 Array(String)<br>
		 * 							multiple : false 일 경우 String
		 */
		SelectKit.prototype.getValue = function(app, psCtlId, pnIndex){
			/**@type cpr.controls.ComboBox */
			var ctrl = app.lookup(psCtlId);
			if(ValueUtil.isNull(pnIndex)){
				var item = ctrl.getSelectionFirst();
				return item ? item.value : "";
			}else{
				if(ctrl.multiple){//다중 선택 가능한 경우 값 배열 반환
					var vaIdx = ValueUtil.split(pnIndex, ",");
					for(var i=0, len=vaIdx.length; i<len; i++){
						vaIdx[i] = ctrl.getItem(vaIdx[i]).value;
					}
					return vaIdx;
				}else{
					return ctrl.getItem(pnIndex).value;
				}
			}
		};
		
		/**
		 * 컨트롤의 값을 셋팅한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId		컨트롤ID
		 * @param {String} psValue  컨트롤값
		 * @param {boolean} pbEmitEvent? value-changed 이벤트 발생시킬지 여부
		 */
		SelectKit.prototype.setValue = function(app, psCtlId, psValue, pbEmitEvent){
			/**@type cpr.controls.ComboBox */
			var ctrl = app.lookup(psCtlId);
			if(pbEmitEvent != undefined && pbEmitEvent === false){
				ctrl.putValue(psValue);
			}else{
				ctrl.value = psValue;
			}
		};
		
		/**
		 * 현재 선택 중인 아이템의 index를 반환한다.<br>
		 * multiple "true"의 경우, index는 배열의 형태로 반환된다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId		select ID
		 * @return {Number | Array}	multiple : true 일 경우 Array(Number)<br>
		 * 							multiple : false 일 경우 Number 		
		 */
		SelectKit.prototype.getSelectedIndex = function(app, psCtlId){
			/** @type cpr.controls.ComboBox */
			var vcCtl = app.lookup(psCtlId);
			var vaItems = vcCtl.getSelection();
			if(vcCtl.multiple){
				var vaIndices = new Array();
				for(var i=0, len=vaItems.length; i<len; i++){
					vaIndices.push(vcCtl.getIndex(vaItems[i]));
				}
				return vaIndices;
			}else{
				return vcCtl.getIndex(vaItems[0]);
			}
		};
		
		/**
		 * 인덱스(Index) 또는 value에 해당하는 아이템(Item)을 선택한다.<br>
		 * multiple "true"의 경우 여러 개의 아이템을 선택하고자 할 때, puRowIdx는 구분자를 기준으로 조인된 String 형태를 가진다.
		 * <pre><code>
		 * SelectCtl.selectItem(app, "cmb1", "0");<br>
		 * <p>또는<p>
		 * SelectCtl.selectItem(app, "cmb1", "값1,값2,값3");
		 * </code></pre>
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId		컨트롤ID
		 * @param {String | Array} puRowIdx 인덱스 또는 value 값
		 * @param {Boolean} emitEvent? 이벤트(before-selection-change, selection-change)를 발생시킬지 여부
		 * @return {Boolean} 
		 */
		SelectKit.prototype.selectItem = function(app, psCtlId, puRowIdx, emitEvent){
			/**@type cpr.controls.CheckBoxGroup */
			var vcCtl = app.lookup(psCtlId);
			
			if(vcCtl == null || vcCtl == undefined) return false;
			
			puRowIdx = ValueUtil.split(puRowIdx, ",");
			if(vcCtl.multiple){//다중 선택 가능한 경우
				if(puRowIdx.length > 0){
					if(!ValueUtil.isNumber(puRowIdx[0])){
						for(var i=0, len=puRowIdx.length; i<len; i++){
							puRowIdx[i] = vcCtl.getIndexByValue(puRowIdx[i]);
						}
					}
					vcCtl.selectItems(puRowIdx, emitEvent);
				}
			}else{
				if(puRowIdx.length > 0){
					if(!ValueUtil.isNumber(puRowIdx[0])){
						var item = vcCtl.getItemByValue(puRowIdx[0]);
						if(item) vcCtl.selectItemByValue(puRowIdx[0], emitEvent);
						else vcCtl.selectItem(0, emitEvent);
					} else {
						if(Number(puRowIdx[0]) >= vcCtl.getItemCount()){
							vcCtl.selectItem(0, emitEvent);
						}else{
							vcCtl.selectItem(puRowIdx[0], emitEvent);
						}
					}
				}
			}
			
			return true;
		};
		
		/**
		 * 모든 아이템을 선택한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId	컨트롤ID
		 * @return void
		 */
		SelectKit.prototype.selectAllItem = function(app, psCtlId){
			/** @type cpr.controls.ComboBox */
			var vcCtl = app.lookup(psCtlId);
			var indices = new Array();
			for(var i=0, len=vcCtl.getItemCount(); i<len; i++){
				indices.push(i);
			}
			vcCtl.selectItems(indices);
		};
		
		/**
		 * 해당 컨트롤 아이템을 필터링 한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId	컨트롤ID
		 * @param {String} psCondition 필터 조건
		 * @return void
		 */
		SelectKit.prototype.setFilter = function(app, psCtlId, psCondition){
			/** @type cpr.controls.ComboBox */
			var ctrl = app.lookup(psCtlId);
			ctrl.setFilter("value == null || value == '' || ("+ psCondition +")");
		};
		
		/**
		 * 컨트롤의 필터링을 해제한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId	컨트롤ID
		 * @return void
		 */
		SelectKit.prototype.clearFilter = function(app, psCtlId){
			/** @type cpr.controls.ComboBox */
			var ctrl = app.lookup(psCtlId);
			ctrl.clearFilter();
		};
		
		/**
		 * 콤보박스의 값을 Reset한다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId	컨트롤ID
		 */
		SelectKit.prototype.reset = function(app, psCtlId){
			/** @type cpr.controls.ComboBox */
			var vcCtl = app.lookup(psCtlId);
			if(vcCtl.dataSet){
				vcCtl.dataSet.clear();
			}
			vcCtl.value = "";
		};
		
		
		/**
		 * 필터링 할 컬럼명(psFilterColumnName)은 데이터셋의 컬럼명을 작성한다.<br>
		 * 그리드에서 사용 금지<br>
		 * @desc 두 개의 List형 컨트롤이 종속 관계를 가질 때, 종속되는 컨트롤의 데이터를 필터링하기 위한 메소드
		 * @param {#uicontrol} psMainId				 메인 컨트롤 ID
		 * @param {#uicontrol} psSubId				 적용될 컨트롤 ID
		 * @param {#column} psFilterColumnName	 적용될 컨트롤의 필터링 할 컬럼명
		 * @param {Boolean} pbFirstItemSelect?  첫번째 아이템 선택 여부  default : true
		 * @return void
		 */
		SelectKit.prototype.cascadeList = function(app, psMainId, psSubId, psFilterColumnName, pbFirstItemSelect){
			var voMainCtl = app.lookup(psMainId);
			var voSubCtl = app.lookup(psSubId);
		
			if(voMainCtl == null || voSubCtl == null){
				return;
			}
			pbFirstItemSelect = pbFirstItemSelect == null ? true : pbFirstItemSelect;
		
			var vaItems = voMainCtl.getSelection();
			var vsValue = "";
			if(vaItems.length > 0){
				vsValue = vaItems[0].value;
			}
		
			voSubCtl.clearFilter();
		
			var voFirstItem = voSubCtl.getItem(0);
			var vsFirstItemValue = voFirstItem.value;
			var vsFirstItemLable = voFirstItem.label;
		
			//'전체' 아이템 여부
			var vbAllStatus = false;
			//var vsGlsAll = cpr.I18N.INSTANCE.message("UI-GLS-ALL");
			var vsGlsAll = "전체";
		
			if( vsGlsAll ==  vsFirstItemLable && ( ValueUtil.isNull(vsFirstItemValue) || vsFirstItemValue.indexOf("%") != -1)){
				vbAllStatus = true;
			}
		
			//전체아이템이 포함됐을 경우
			if(vbAllStatus)	{
				var vsFilter = psFilterColumnName + "== '" + vsValue + "' || ( label == '" +  vsGlsAll + "' && (value == '' || value == '%'))";
				voSubCtl.setFilter(vsFilter);
				if(pbFirstItemSelect)
					this.selectItem(app, psSubId, 0);
			}else{
				voSubCtl.setFilter(psFilterColumnName + "== '" + vsValue + "'");
				if(pbFirstItemSelect){
					var vaSubCtlItems = voSubCtl.getItems();
					if(vaSubCtlItems.length > 0){
						this.selectItem(app, psSubId, vaSubCtlItems[0].value);
					}else{
						this.selectItem(app, psSubId, 0);
					}
				}
		
			}
		
			voSubCtl.redraw();
		};
		
		/**
		 * 콤보박스에 매핑된 데이터셋의 컴럼값을 입력조건에 따라 가져온다.
		 * @param {cpr.core.AppInstance} 	app 앱인스턴스
		 * @param {#uicontrol} psCtlId	컨트롤ID
		 * @param {String} psColName 찾을 컬럼명
		 * @param {String} condition 조건 (예: "CD == 'test'")
		 * @return {String} 컬럼값
		 */
		SelectKit.prototype.findValue = function(app, psCtlId, psColName, condition){
			/** @type cpr.controls.ComboBox */
			var ctrl = app.lookup(psCtlId);
			if(ctrl.dataSet){
				var findRow = ctrl.dataSet.findFirstRow(condition);
				if(findRow) {
					return findRow.getValue(psColName);
				}
			}
		};
		
		
		
		/**
		 * 서브미션 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function SubmissionKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * Submission Before Handler<br/>
		 * 사이트별 Customizing 필요<br/>
		 *  - 시스템 컬럼 수정 필요 (CRT_USER_ID, CRT_PGM_ID, CRT_IP_MAC, UPD_USER_ID, UPD_PGM_ID, UPD_IP_MAC)
		 * @param {cpr.events.CSubmissionEvent} e
		 * @private
		 */
		SubmissionKit.prototype._onBeforeSubmit = function(e) {
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submit = e.control;
			var _app = submit.getAppInstance();
			 
		
			//for.AUTO SAVE
			submit.setDataRowHandler(function(/** @type cpr.data.Row */ rowdata) {
				var additionalValue = {};
				//PK키 original값 추가
				var dsInfo = rowdata.getDataSetInfo();
				if(dsInfo && (rowdata.getState() == cpr.data.tabledata.RowState.UPDATED || cpr.data.tabledata.RowState.DELETED)){
					var vaPks = dsInfo.split(",");
					vaPks.some(function(value, idx){
						value = value.replace(/(^\s*)|(\s*$)/g, "")
						if(value == "") return false;
						
						additionalValue[value + "__origin"] = rowdata.getOriginalValue(value);
					});
				}else if(dsInfo && (rowdata.getState() == cpr.data.tabledata.RowState.INSERTED)){
					var vaPks = dsInfo.split(",");
					vaPks.some(function(value, idx){
						value = value.replace(/(^\s*)|(\s*$)/g, "")
						if(value == "") return false;
						
						additionalValue[value + "__origin"] = rowdata.getValue(value);
					});
				}
				
				return additionalValue;
			});
		};
		
		/**
		 * Submission Receive Handler<br/>
		 * 사이트별 Customizing 필요<br/>
		 *  - 1. 에러메시지 키 변경 필요
		 * @param {cpr.events.CSubmissionEvent} e
		 * @param {Boolean} pbSuccess
		 * @private
		 */
		SubmissionKit.prototype._onSubmitReceive = function(e, pbSuccess) {
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submission = e.control;
			var xhr = submission.xhr;
			var contentType = xhr.getResponseHeader("Content-Type");
			if(contentType == null) return true;
			
			contentType = contentType.toLowerCase();
			if (contentType.indexOf(";") > -1) {
				contentType = contentType.substring(0, contentType.indexOf(";"));
			}
			contentType = ValueUtil.trim(contentType);
			if ("application/json" != contentType || "text/tab-separated-values" == contentType) {
				return true;
			}
			
			var response = xhr.responseText;
			var jsonRes = JSON.parse(response);
			
			var errMsgInfo = jsonRes["ERRMSGINFO"];
			if (errMsgInfo) {
				var vsErrMsg = "";
				try{
					var vsErrMsg = "\"" +  errMsgInfo.ERRMSG+ "\"";
					vsErrMsg = Function('"use strict";return (' + vsErrMsg + ')')();	
		//			vsErrMsg = eval("\"" +  errMsgInfo.ERRMSG+ "\"");	
				}catch(e){
					vsErrMsg = errMsgInfo.ERRMSG;
				}
				
				alert(vsErrMsg.replace(/\r\n/ig, "\n").replace(/\\n/gi, "\n"));
				var urlContext = top.location.pathname.substring(0, top.location.pathname.indexOf("/",2));
				if(urlContext == "/") urlContext = "";
				
				//사용자 세션없는 오류인 경우
				if(errMsgInfo.STATUSCODE == "401") {
					top.location.href = urlContext+"/";
				}
		//		//사용자 세션없는 오류인 경우
		//		if("CMN003.CMN@CMN003" == errMsgInfo.ERRCODE){
		//			top.location.href = urlContext+"/logout.jsp";
		//		//중복로그인 오류인 경우
		//		}else if("CMN003.CMN@CMN062" == errMsgInfo.ERRCODE){
		//			top.location.href = urlContext+"/logout.jsp";
		//		}
				return false;
			}
				
			return true;
		};
		
		/**
		 * @param {cpr.events.CSubmissionEvent} e
		 * @private
		 */
		SubmissionKit.prototype._onSubmitLoadProgress = function(e) {
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submission = e.control;
			var loadmask = this._getLoadMask(submission);
			if(loadmask){
				try {
					if( submission.responseType === "blob" ){
						loadmask.module.progress(e.total, e.loaded);
					}else if ( submission.responseType === "text" ){
						if(submission.getResponseDataCount() > 0){
							var rowCnt = submission.getResponseData(0).data.getRowCount();
							loadmask.module.count(rowCnt);
						}
					}
		//			if(submission.getResponseDataCount() > 0){
		//				var rowCnt = submission.getResponseData(0).data.getRowCount();
		//				loadmask.module.count(rowCnt);
		//			}
				}catch(ex){
					console.log(ex.toString());
					
				}
			}
		};
		
		/**
		 * @param {cpr.events.CSubmissionEvent} e
		 * @private
		 */
		SubmissionKit.prototype._onSubmitUploadProgress = function(e) {
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submission = e.control;
			var loadmask = this._getLoadMask(submission);
			if(loadmask){
				loadmask.module.showProgress();
				//console.log(e.loaded + " : " + e.total);
				loadmask.module.progress(e.loaded, e.total);
			}
		};
		
		/**
		 * @param {cpr.events.CSubmissionEvent} e
		 * @private
		 */
		SubmissionKit.prototype._onSubmitProgress = function(e) {
			
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submission = e.control;
			var loadmask = this._getLoadMask(submission);
			if(loadmask){
				loadmask.module.showProgress();
				//console.log(e.loaded + " : " + e.total);
				loadmask.module.progress(e.loaded, e.total);
			}
		};
		
		
		/**
		 * @param {cpr.events.CSubmissionEvent} e
		 * @param {Boolean} pbSuccess
		 * @private
		 */
		SubmissionKit.prototype._onSubmitSuccess = function(e, pbSuccess) {
			return pbSuccess;
		};
		
		/**
		 * Submission Error Handler
		 * @param {cpr.events.CSubmissionEvent} e
		 * @private
		 */
		SubmissionKit.prototype._onSubmitError = function(e) {
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submission = e.control;
			var _app = submission.getAppInstance();
			var msg = submission.getMetadata("ERRMSG");
			var code = submission.getMetadata("STATUSCODE");
			
			var xhr = e.control.xhr;
			var statusMsg = this._appKit.Msg.getMsg("ERR-" + xhr.status);
			
			msg = ValueUtil.isNull(msg) ? statusMsg : msg;	
			
			if(e.nativeEvent){
				msg = "network : " + e.nativeEvent.type;
			}else{
				if(ValueUtil.isNull(msg)){
				//시스템 내부 장애가 발생하였습니다.\n 관리자에게 문의 하시기 바랍니다.
					msg = "ERR-SRV"
				}
			}
			this._appKit.Msg.notify(_app, msg, null,"DANGER");
			this._appKit.coverPage(_app);
			return false;
		};
		
		/**
		 * Submission Error Status Handler
		 * 서브미션이 전송된 후 수신받은 서버의 응답상태코드가 200이 아닐 때 발생합니다.
		 * error-status 이벤트 핸들러에서 이벤트의 preventDefault함수를 호출하면 서버의 응답메세지를 모두 수신한 후 submit-error이벤트를 발생시킵니다. 
		 * preventDefault함수를 호출하지 않으면 서버의 응답메세지를 수신하지 않고 즉시 submit-error이벤트를 발생시킵니다.
		 * 비동기로 동작할 때만 사용할 수 있습니다. 
		 * @param {cpr.events.CSubmissionEvent} e
		 * @private
		 */
		SubmissionKit.prototype._onSubmitErrorStatus = function(e) {
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submission = e.control;
		//	var xhr = submission.xhr;
		//	//에러코드
		//	xhr.status;
			e.preventDefault();
			return false;
		};
		
		
		/**
		 * Submission Done Handler<br/>
		 * 1. 서버에서 생성된 최신 로우 찾기<br/>
		 * 2. 어플리케이션 비즈니스 콜백 메소드 실행<br/>
		 * 3. 로딩 마스크 제거<br/>
		 * @param {cpr.events.CSubmissionEvent} e
		 * @param {Function} poCallbackFunc
		 * @param {Boolean} pbSuccess
		 * @param {Boolean} pbAppDisable
		 * @private
		 */
		SubmissionKit.prototype._onSubmitDone = function(e, poCallbackFunc, pbSuccess, pbAppDisable) {
			/** 
			 * @type cpr.protocols.Submission
			 */
			var submission = e.control;
			var _app = submission.getAppInstance();
			
			//마지막 행찾기
			var vsFindRowKey = submission.getMetadata("strFindRowKey");
			if(!ValueUtil.isNull(vsFindRowKey)){
				var vnDsCnt = submission.getRequestDataCount();
				var voDs, vaFindKey;
				var vaFindRowKeys = ValueUtil.split(vsFindRowKey, "|");
				var findKey = null;
				for(var i=0, len=vaFindRowKeys.length; i<len; i++){
					findKey = ValueUtil.trim(vaFindRowKeys[i]);
					if(findKey == "") continue;
					vaFindKey = ValueUtil.split(findKey, ":");
					if(vaFindKey.length == 2){
						for(var j=0; j<vnDsCnt; j++){
							voDs = submission.getRequestData(j).data;
							if(voDs.type != "dataset") continue;
							if(voDs.id == vaFindKey[0]){
								voDs._findRowCondition = vaFindKey[1];
								break;
							}
						}
					}else{
						for(var j=0; j<vnDsCnt; j++){
							voDs = submission.getRequestData(j).data;
							if(voDs.type != "dataset") continue;
							voDs._findRowCondition = vaFindKey[0];
						}
					}
				}
			}
			
			var loadmask = this._getLoadMask(submission);
			if(loadmask && loadmask.module.isVisibleProgress && loadmask.module.isVisibleProgress()){
				loadmask.module.progress(100, 100);	
			}
			
			var idx = this._appKit._activeSubmission.indexOf(submission);
			if(idx != -1) {
				this._appKit._activeSubmission.splice(idx, 1);
			}
			
			//실패한 경우.. 커버를 씌움
			if(pbAppDisable === true && pbSuccess != true){
				this._appKit.coverPage(_app);
			}
			
			submission.removeAllFileParameters();
			submission.removeAllParameters();
		//	submission.removeAllEventListeners();
		
			//콜백이 존재하는 경우... 콜백함수 호출	
			//콜백을 제일 뒤로 옮김
			if (poCallbackFunc != null && (typeof poCallbackFunc == "function")) {
				poCallbackFunc(pbSuccess, e.control);
			}
			
			// submission success에서 다른 submission을 실행했을 경우 loadmask를 내리지 않는다.
			if(this._appKit._activeSubmission.length == 0) {
				// hide loadmask
				try{
					this._appKit.hideLoadMask(_app);
				}catch(ex){
					console.log(ex.toString());
				}
			}
		};
		
		/**
		 * @param {cpr.protocols.Submission} poSubmission
		 * @private
		 */
		SubmissionKit.prototype._getLoadMask = function(poSubmission) {
			var _app = poSubmission.getAppInstance();
			if(_app == null) return null;
			
			if(_app.isUDCInstance()){
				_app = _app.getHostAppInstance();
			}
			
			var _container = null;
			if(_app.getHost() && _app.getHost().modal === true){
				_container = _app.getContainer();
			}else{
				//_container = _app.getRootAppInstance().getContainer();
				_container = _app.getContainer();
			}
			_app = _container.getAppInstance();
			
			return _app.lookup("__loadmask__");
		};
		
		/**
		 * 해당 서브미션 요청 데이터를 가지고 있는지 체크
		 * @param {cpr.protocols.Submission} poSubmission 서브미션 객체
		 * @param {String} psDataId  데이터셋/맵 ID
		 * @private
		 */
		SubmissionKit.prototype._hasRequestData = function(poSubmission, psDataId){
			for(var i=0, len=poSubmission.getRequestDataCount(); i<len; i++){
				if(poSubmission.getRequestData(i).data.id == psDataId){
					return true;
				}
			}
			return false;
		}
		
		/**
		 * 해당 서브미션 요청 데이터를 가지고 있는지 체크
		 * @param {cpr.protocols.Submission} poSubmission  서브미션 객체
		 * @param {String} psDataId 데이터셋/맵 ID
		 * @private
		 */
		SubmissionKit.prototype._hasResponseData = function(poSubmission, psDataId){
			for(var i=0, len=poSubmission.getResponseDataCount(); i<len; i++){
				if(poSubmission.getResponseData(i).data.id == psDataId){
					return true;
				}
			}
			return false;
		}
		
		/**
		 * 전송시 추가로 전달되는 파라미터를 추가합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#submission} psSubmissionId 서브미션 ID
		 * @param {String} psParamName 파라미터의 이름
		 * @param {String} psValue 파라미터의 값
		 * @return void
		 */
		SubmissionKit.prototype.addParameter = function(app, psSubmissionId, psParamName, psValue){
			/** @type cpr.protocols.Submission */
			var vcSubmission = app.lookup(psSubmissionId);
			vcSubmission.addParameter(psParamName, psValue);
		};
		
		/**
		 * 전송시 추가로 전달되는 파라미터를 추가합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#submission} psSubmissionId 서브미션 ID
		 * @param {Array} paFiles 파일의 객체
		 * @return void
		 */
		SubmissionKit.prototype.addFileParameter = function(app, psSubmissionId, paFiles){
			/** @type cpr.protocols.Submission */
			var vcSubmission = app.lookup(psSubmissionId);
			if(paFiles == null) return;
			if(paFiles instanceof Array){
				paFiles.forEach(function(voFile){
					vcSubmission.addFileParameter("exb.fileupload.filelist", voFile);
				});
			}else{
				vcSubmission.addFileParameter("exb.fileupload.filelist", paFiles);
			}
		};
		
		/**
		 * 전송시 추가로 전달되는 파라미터를 추가합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#submission} psSubmissionId 서브미션 ID
		 * @param {#datamap | #dataset} psDataId 데이터셋 또는 데이터맵 ID
		 * @param {String} psAlias? 요청 데이터의 Alias명(요청데이터 명칭이 다른 경우에만 지정)
		 * @param {String} psPayloadType? 요청 데이터의 payloadType (all, modified)
		 * @return void
		 */
		SubmissionKit.prototype.addRequestData = function(app, psSubmissionId, psDataId, psAlias, psPayloadType){
			/** @type cpr.protocols.Submission */
			var submission = app.lookup(psSubmissionId);
			submission.addRequestData(app.lookup(psDataId), psAlias, psPayloadType);
		};
		
		/**
		 * 전송시 추가로 응답데이터를 추가합니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#submission} psSubmissionId 서브미션 ID
		 * @param {#datamap | #dataset} psDataId 데이터셋 또는 데이터맵 ID
		 * @param {Boolean} pbAdd 데이터셋 옵션 설정된 데이터셋에 데이터를 모두 지우고 추가할지 기존 데이터를 남기고 추가 할지 여부
		 * @param {String} psAlias? 응답 데이터의 Alias명(응답데이터 명칭이 다른 경우에만 지정)
		 * @return void
		 */
		SubmissionKit.prototype.addResponseData = function(app, psSubmissionId, psDataId, pbAdd, psAlias){
			/** @type cpr.protocols.Submission */
			var submission = app.lookup(psSubmissionId);
			submission.addResponseData(app.lookup(psDataId), pbAdd, psAlias);
		};
		
		/**
		 * 서브미션 호출<br/>
		 * - 사이트별 Customizing 필요<br/>
		 * - 서브미션에 before-submit,  receive, submit-error, submit-success, submit-done 이벤트 부여
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#submission} 	 psSvcId 서브미션 ID
		 * @param {Function} successCallback 서브미션 후 콜백 메소드
		 * @param {Boolean}  pbAppEnable? 서브미션 오류 및 exception 발생시 커버페이지를 씌움
		 * @param {String} maskType
		 */
		SubmissionKit.prototype.send = function(app, psSvcId, successCallback, pbAppEnable, maskType){
			var _app = app;
			var submission = _app.lookup(psSvcId);
			if(!submission || submission.status == "SENDING") return;
		//	if(!submission) return;
			
			//context-path를 고려하여, action URL이 ../로 시작하도록 변경
			if(submission.action.indexOf("/") == 0){
				submission.action = ".."+submission.action;
			}
			// multipart/form-data인 경우 maskType을 pro로 설정
		//	if(submission.mediaType === "multipart/form-data") {
		//		maskType="pro";
		//	}
			
			//어플리케이션 전체에 마스크(Mask)를 씌운다.
			this._appKit.showLoadMask(app, maskType);
			
			if(submission.userAttr("responseType") === "TSV" || submission.fallbackContentType === "text/tab-separated-values")	{
				var loadmask = this._getLoadMask(submission);
				if ( submission.responseType === "text" ){
					loadmask.module.count(0);
					loadmask.module.show();
				}
				
				submission.addEventListener("submit-load-progress", function(e){
					_this._onSubmitLoadProgress(e);
				}); 
			}
			
			var vbSuccess = true;
			var _this = this;
			submission.addEventListenerOnce("before-submit", function(e){
				_this._onBeforeSubmit(e);
			});
			
			if(submission.mediaType==="multipart/form-data") {
				submission.addEventListener("submit-upload-progress", function(e){
					_this._onSubmitUploadProgress(e);
				});
			}
			
			if(submission.responseType === "blob"){
				submission.addEventListenerOnce("submit-progress", function(e){
					_this._onSubmitProgress(e);
				}); 	
			}
			
			submission.addEventListenerOnce("receive", function(e){
				vbSuccess = _this._onSubmitReceive(e);
			}); 
					
			submission.addEventListenerOnce("submit-error", function(e){
				vbSuccess = _this._onSubmitError(e);
			}); 
			
			submission.addEventListenerOnce("error-status", function(e){
				vbSuccess = _this._onSubmitErrorStatus(e);
			}); 
					
			submission.addEventListenerOnce("submit-success", function(e){
				vbSuccess = _this._onSubmitSuccess(e, vbSuccess);
			});
			
			submission.addEventListenerOnce("submit-done", function(e) {
				_this._onSubmitDone(e, successCallback, vbSuccess, pbAppEnable);
			});
			
			this._appKit._activeSubmission[this._appKit._activeSubmission.length] = submission;
			submission.send();
		};
		
		
		
		/**
		 * 탭(TabFolder) 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function TabKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 현재 선택된 탭아이템 id를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tabfolder} psTabId 탭 ID
		 * @return {Number} 탭아이템 id (탭아이템id는 인덱스와 유사 탭아이템 순서대로 id 부여됨)
		 */
		TabKit.prototype.getSelectedId = function(app, psTabId){
			/** @type cpr.controls.TabFolder */
			var vcTab = app.lookup(psTabId);
			var vcTabItem = vcTab.getSelectedTabItem();
			
			return vcTabItem ? vcTabItem.id : "";
		};
		
		/**
		 * 현재 선택된 탭아이템 Text를 반환한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#TabFolder} psTabId 탭 Id
		 * @return {Number} 탭아이템 Text (탭아이템id는 인덱스와 유사 탭아이템 순서대로 id 부여됨)
		 */
		TabKit.prototype.getSelectedNm = function(app, psTabId) {
			/** @type cpr.controls.TabFolder */
			var vcTab = app.lookup(psTabId);
			var vcTabItem = vcTab.getSelectedTabItem();
			
			return vcTabItem ? vcTabItem.text : "";
			
		};
		
		/**
		 * 입력한 id에 해당하는 탭 아이템을 선택한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tabfolder} psTabId 탭 ID
		 * @param {Number} pnIndex 탭아이템 ID
		 * @param {Boolean} emitEvent? 이벤트(before-selection-change, selection-change)를 발생시킬지 여부
		 */
		TabKit.prototype.setSelectedTabItemById = function(app, psTabId, pnId, emitEvent){
			/** @type cpr.controls.TabFolder */
			var vcTab = app.lookup(psTabId);
			
			var vaTabItem = vcTab.getTabItems();
			var vcTabItem = vaTabItem.filter(function(item){
				return item.id == pnId;
			});
			
			var emit = emitEvent != undefined ? emitEvent : true;
			vcTab.setSelectedTabItem(vcTabItem[0], emit);
		};
		
		/**
		 * 탭 페이지를 숨기거나/보여준다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tabfolder} psTabId 탭ID
		 * @param {Number} pnIndex 탭아이템 Index
		 * @param {Boolean} pbVisible 숨김여부
		 */
		TabKit.prototype.setVisibleTabItem = function(app, psTabId, pnIndex, pbVisible){
			/** @type cpr.controls.TabFolder */
			var vcTab = app.lookup(psTabId);
			
			var vaTabItem = vcTab.getTabItems();
			var vcTabItem = vaTabItem.filter(function(item){
				return item.id == pnIndex;
			});
			
			if(vcTabItem){
				vcTabItem[0].visible = pbVisible;
			}
		};
		
		/**
		 * 탭 페이지 버튼을 활성화시키거나 비활성화 시킨다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tabfolder} psTabId 탭 ID
		 * @param {String | Array} paIndex  활성화/비활성화 할 탭 Index 또는 Index 배열 (탭 index 시작 = 1) 
		 * @param {Boolean} psEnable  활성화여부
		 */
		TabKit.prototype.setEnableTabItem = function(app, psTabId, paIndex, psEnable){
			/* 2019-05-13 ssb 작성 */
			/** @type cpr.controls.TabFolder */
			var vcTab = app.lookup(psTabId);
			
			if(!(paIndex instanceof Array)){
				paIndex = [paIndex];
			}
			var vaTabItem = vcTab.getTabItems();
			
			for (var i=0, len=paIndex.length; i<len; i++) {
				var vnTabIdx  = paIndex[i] - 1;
				vaTabItem[vnTabIdx].enabled = psEnable;
			}
		};
		
		
		
		/**
		 * 트리(Tree) 컨트롤 유틸
		 * @constructor
		 * @param {common.AppKit} appKit
		 */
		function TreeKit(appKit){
			this._appKit = appKit;
		};
		
		/**
		 * 트리 컨트롤 초기화.<br>
		 *  - 사이트별 Customizing 필요
		 * @param {any} app
		 * @param {#tree} paTreeId
		 */
		TreeKit.prototype.init = function(app, paTreeId){
			if(!(paTreeId instanceof Array)){
				paTreeId = [paTreeId];
			}
			var _app = app;
			var _appKit = this._appKit;
			for (var i=0, len=paTreeId.length; i <len; i++) {
				/**
				 * @type cpr.controls.Tree
				 */
				var vcTree = (paTreeId[i] instanceof cpr.controls.Tree) ? paTreeId[i] : _app.lookup(paTreeId[i]);
				if(vcTree == null) continue;
				
				var vcDataSet =  vcTree.dataSet;
				vcDataSet._treeId = vcTree.id;
				var vsDataBindCtxId = vcTree.userAttr("bindDataFormId");
				
				if(vsDataBindCtxId != null && vsDataBindCtxId != ""){
					vcTree.addEventListener("selection-change", function(e){
						/**
						 * @type cpr.controls.Tree
						 */
						var tree = e.control;
						var voSelectedItem = e.newSelection[0];
						var itemIdx = tree.getIndex(voSelectedItem);
						var voContext = new cpr.bind.DataRowContext(vcDataSet, itemIdx);
						
						var freeformes = ValueUtil.split(vsDataBindCtxId, ",");
						freeformes.forEach(function(/* eachType */ formId){
							var vcGrp = _app.lookup(formId);
							vcGrp.setBindContext(voContext);
							
							vcGrp.redraw();
						});
					});
					
					//그룹 PK컬럼 enable 설정
					var vaPkColumnNames = ValueUtil.split(vcDataSet.info, ",");
					vaPkColumnNames.some(function(value, idx){
						if(value == "") return false;
						
						//프리폼 PK 컬럼 취득 
						if(!ValueUtil.isNull(vsDataBindCtxId)){
							var freeformes = ValueUtil.split(vsDataBindCtxId, ",");
							freeformes.forEach(function(/* eachType */ formId){
								/**@type cpr.controls.Container */
								var freeform = _app.lookup(formId);
								var vaChildCtrls = freeform.getChildren();
								vaChildCtrls.some(function(ctrl, idx){
									if(ctrl.type == "output") return false;
									if(ctrl.userAttr("ignorePk") == "Y") return false;
									
									var bind = ctrl.getBindInfo("value");
									if(bind && bind.type == "datacolumn" && value == bind.columnName){
										ctrl.bind("enabled").toExpression("getStateString() == 'I' ? true : false");
										ctrl.userAttr("required", "Y");
										ctrl.style.setClasses("require");
									}
								});
							});
						}
					});
					
					//마지막 작업행 findRow
					vcDataSet.addEventListener("update", function(/* cpr.events.CDataEvent */e){
						/** 
						 * @type cpr.data.DataSet
						 */
						var dataset = e.control;
						var rowIndex = e.row.getIndex();
						var vaPkColumns = ValueUtil.split(dataset.info, ",");
						if(vaPkColumns.length < 1){
							dataset._findTreeCondition = null;
						}else{
							var vaTempCond = [];
							vaPkColumns.forEach(function(column){
								vaTempCond.push(dataset.getValue(rowIndex, column));
							});
							
							if(vaTempCond.length > 0){
								dataset._findTreeCondition = vaTempCond.join("");
							}else{
								dataset._findTreeCondition = null;
							}
						}
					});
					
					//트리에 바인딩된 데이터셋(Dataset)이 로드될 때 처리
					//마지막행 찾기, 조회 건수 업데이트
					vcDataSet.addEventListener("load", function(/* cpr.events.CDataEvent */e){
						
						/** @type cpr.data.DataSet */
						var dataset = e.control;
						/** @type cpr.controls.Tree */
						var tree = _app.lookup(dataset._treeId);
						if(tree == null) return;
						
						//대상 그리드가 정렬된 상태라면... 정렬을 푼다.
						if(dataset.getSort() != ""){
							dataset.clearSort();
						}
						
						//마지막 작업행 찾기
						if(dataset.getRowCount() > 0) {
							if(dataset._findTreeCondition){
								
								cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(e){
									var voRow = dataset.findFirstRow(tree.itemSetConfig.value + "=='" + dataset._findTreeCondition + "'");
									var vnIdx = voRow.getIndex();
									tree.selectItem(vnIdx);
									tree.focusItem(tree.getItem(vnIdx));
								});
							}else{
								cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(e){
									var item = tree.getItem(0);
									_appKit.Tree.expandParentItem(_app, tree.id, item);
									tree.selectItem(0, true);
								});
							}
						}
						//마지막 작업행 정보 Clear
						dataset._findTreeCondition = null;
						
					});
				}
			}
		};
		/**
		 * 현재 선택된 아이템의 value를 반환한다.
		 * @param {cpr.core.AppInstance} 		app 앱인스턴스
		 * @param {#tree} psTreeId	 트리 ID
		 * @param {String} psDiv? 얻어올 값 영역(label 또는 value)
		 * @return {String | Array}  multiple : true 일 경우 Array(String)<br>
		 *                           multiple : false 일 경우 String  
		 */
		TreeKit.prototype.getSelectedValue = function(app, psTreeId, psDiv){
			/** @type cpr.controls.Tree */
			var vcTree = app.lookup(psTreeId);
			var vaItem = vcTree.getSelection();
			//아이템이 없으면... 공백 반환
			if(vaItem.length < 1) return "";
			
			psDiv = (psDiv != null ? psDiv.toUpperCase() : "VALUE");
			if(vcTree.multiple){
				var vaValues = new Array();
				vaItem.forEach(function(vcItem){
					if(psDiv == "LABEL")
						vaValues.push(vcItem.label);
					else
						vaValues.push(vcItem.value);
				});
				return vaValues;
			}else{
				return psDiv == "LABEL" ? vaItem[0].label : vaItem[0].value;
			}
		};
		
		
		/**
		 * 입력한 value에 해당하는 아이템의 label 또는 parentValue를 반환한다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#tree} psTreeId	트리 ID
		 * @param {String} psValue	search value
		 * @param {String} psDiv	가지고 오는 구분자 값(LABEL(디폴트), PVALUE)
		 * @return {String}
		 */
		TreeKit.prototype.getItem = function(app, psTreeId, psValue, psDiv){
			var vcTree = app.lookup(psTreeId);
			if(!!psDiv) psDiv = psDiv.toUpperCase();
			psDiv = !!psDiv ? psDiv : "LABEL";
		
			try {
				var vaItem = vcTree.getSelection();
				if(!psValue && vcItem > 0) psValue = vaItem[0].value;
			} catch(e){
				return null;
			}
		
			var voItem = vcTree.getItemByValue(psValue);
		
			if(!voItem) return null;
		
			if(psDiv == "LABEL"){
				return voItem.label;
			} else {
				return voItem.parentValue;
			}
		};
		
		/**
		 * 해당 아이템의 상위 아이템을 펼친다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tree} psTreeId		 트리 ID
		 * @param {Object} poItem		 item
		 * @param {Boolean} pbHierarchy? 계층적으로 모든 상위까지 펼칠지 여부 (false인 경우, 바로 상위의 부모 아이템만 펼친다.)
		 * @return void
		 */
		TreeKit.prototype.expandParentItem = function(app, psTreeId, poItem, pbHierarchy){
			/** @type cpr.controls.Tree */
			var vcTree = app.lookup(psTreeId); 
			var vaParentItem = new Array();
			pbHierarchy == !!pbHierarchy ? pbHierarchy : true;
			
			function checkExpandItem(poPItem){
				var item = vcTree.getItemByValue(poPItem.parentValue);
				if(item != null && item.value != "" && !vcTree.isExpanded(item)){
					vaParentItem.push(item);
					checkExpandItem(item);
				}
			}
			if(pbHierarchy){
				checkExpandItem(poItem);
			}else{
				vaParentItem.push(vcTree.getItemByValue(poItem.parentValue));
			}
			
			for(var i=0, len=vaParentItem.length; i<len; i++){
				if(vaParentItem[i]){
					vcTree.expandItem(vaParentItem[i]);	
				}
			}
		};
		
		/**
		 * 트리 선택 아이템 변경 이벤트 발생시, 변경 이전에 선택된 아이템을 선택해준다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {cpr.events.CSelectionEvent} event 트리 선택 아이템 변경 이벤트
		 * @param {Boolean} emitEvent? 이벤트(before-selection-change, selection-change)를 발생시킬지 여부
		 * @return void
		 */
		TreeKit.prototype.selectBeforeRow = function(app, event, emitEvent) {
			/** @type cpr.controls.Tree */
			var vcTree = event.control;
			var emit = emitEvent === true ? true : false;
			
			var voOldSelection = event.oldSelection[0];
			var vsOldVal = voOldSelection.value;
			vcTree.selectItemByValue(vsOldVal, emit);
			vcTree.focusItem(voOldSelection);
		};
		
		/**
		 * 입력한 label 또는 value에 해당하는 트리 아이템을 선택한다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tree} psTreeId	 트리 ID
		 * @param {String} psValue	 search value
		 * @param {String} psDiv	 가지고 오는 구분자 값(VALUE(디폴트), LABEL)
		 * @return void
		 */
		TreeKit.prototype.selectItem = function(app, psTreeId, psValue, psDiv){
			var vcTree = app.lookup(psTreeId);
		
			if(!!psDiv) psDiv = psDiv.toUpperCase();
			psDiv = !!psDiv ? psDiv : "VALUE";
		
			if(psDiv == "VALUE"){
				vcTree.selectItemByValue(psValue);
			} else {
				vcTree.selectItemByLabel(psValue);
			}
		};
		
		/**
		 * 아이템에 해당하는 모든 child item을 펼치거나 닫습니다.
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tree} psTreeId		트리 ID
		 * @param {Boolean} pbExpand	펴기 : true, 닫기 : false
		 * @param {Object} poItem?		item 생략가능 (default 최상위 item)
		 * @return void
		 */
		TreeKit.prototype.expandAllItems = function(app, psTreeId, pbExpand, poItem){
			var vcTree = app.lookup(psTreeId);
		
			if(!!poItem){
				if(pbExpand){
					vcTree.expandItem(poItem);
					vcTree.expandAllItems(poItem);
				} else {
					vcTree.collapseItem(poItem);
					vcTree.collapseAllItems(poItem);
				}
			} else {
				pbExpand ? vcTree.expandAllItems() : vcTree.collapseAllItems();
			}
		
		};
		
		/**
		 * 현재 선택된 트리 인덱스
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {#tree} psTreeId		트리 ID
		 * @return {Number} 현재 선택된 트리 인덱스
		 */
		TreeKit.prototype.getIndex = function(app, psTreeId){
			
			/**@type cpr.controls.Tree */
			var vcTree = app.lookup(psTreeId);
			var selectItem = vcTree.getSelectionFirst();
			if(selectItem){
				return selectItem.row.getIndex();	
			}
			return null;
		};
		
		
		
		
		
		
		
		exports.AppStackKit = AppStackKit;
		exports.ComUdcBtnKit = ComUdcBtnKit;
		exports.ControlKit = ControlKit;
		exports.DataMapKit = DataMapKit;
		exports.DataSetKit = DataSetKit;
		exports.DialogKit = DialogKit;
		exports.EmbeddedAppKit = EmbeddedAppKit;
		exports.FreeFormKit = FreeFormKit;
		exports.GridKit = GridKit;
		exports.GroupKit = GroupKit;
		exports.MDIKit = MDIKit;
		exports.MsgKit = MsgKit;
		exports.SelectKit = SelectKit;
		exports.SubmissionKit = SubmissionKit;
		exports.TabKit = TabKit;
		exports.TreeKit = TreeKit;
	});
})();
/// end - module/extension
/// start - module/mdiTabClose
/*
 * Module URI: module/mdiTabClose
 * SRC: module/mdiTabClose.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/mdiTabClose", function(exports, globals, module){
		/************************************************
		 * mdiTabClose.module.js
		 * Created at 2020. 3. 30. 오후 2:47:55.
		 *
		 * Version 1.1
		 * Updated Date : 2021-04-21
		 *
		 * @author daye
		 ************************************************/
		
		/*
		 * 본 모듈은 MDI폴더에서 열려있는 텝 아이템을 가져옵니다.
		 * 불러온 탭아이텝 리스트를 통해 특정, 또는 모든 아이템을 닫을 수 있습니다.
		 * 일부를 닫을 경우에는, 현재 탭폴더에 열려있는 탭아이템을 체크박스 그룹으로 확인해 닫을 수 있습니다.
		 * [닫기] 또는 빈 공간을 누르면 체크박스그룹은 사라집니다.
		 * [분할] 을 누르면 선택한 아이템을 분할해서 볼 수 있습니다. 단, [분할]하기 위해서 DivideMdi.module.js 모듈과 함께 사용해야합니다.
		 * DivideMdi.module.js 는 [게시판 > eXbuilder6자료 > MDI폴더 분할 공통모듈] 에서 다운로드 받을 수 있습니다.
		 * 
		 * [사용가능한 메서드]
		 * 1. getTabList : 열려있는 텝 아이템을 호출한 뒤, [분할] or [닫기]를 할 수 있습니다.
		 * 2. closeTabAll : 열려있는 모든 텝아이템을 닫습니다.
		 */
		
		
		/************************************************
		 * 전역변수 (변경 가능)
		 ************************************************/
		/**
		 * 탭폴더의 고정 탭아이템 여부
		 * @type {Boolean}
		 */
		var mbFixed = false;
		
		/**
		 * 분할 - 전체화면
		 * @type {String}
		 */
		var msDefault = "default";
		
		/**
		 * 분할 - 세로분할
		 * @type {String}
		 */
		var msVertical = "vertical";
		
		/**
		 * 분할 - 4분할
		 * @type {String}
		 */
		var msDivision = "division";
		
		/**
		 * 분할 - 계단형 (팝업)
		 * @type {String}
		 * 
		 */
		var msCascading = "window";
		
		/**
		 * 이전 분할 레이아웃
		 * default : 전체화면
		 * @type {String}
		 */
		var msBeforeLayout = msDefault;
		
		/**
		 * 그룹 스타일 클래스
		 * @type {String}
		 */
		var msPopGrpWrapCls = "dropdown-menu";
		
		/**
		 * 그룹 내 버튼 스타일 클래스
		 * @type {String}
		 */
		var msBtnClosCls = "btn-primary";
		
		/**
		 * 체크박스그룹 스타일 클래스
		 * @type {String}
		 */
		var msCheckBoxCls = "cl-checkbox";
		
		/**
		 * 사용자속성
		 * 분할할 때 사용하는 콤보박스에 설정하는 속성명
		 * @type {String}
		 */
		var ATTR_DIVIDE_LAYOUT = "divide-layout";
		
		/************************************************
		 * 전역 변수 (변경 불가능)
		 ************************************************/
		/**
		 * 분할/닫기 선택 콤보박스
		 * @type {cpr.controls.ComboBox}
		 */
		var mcCmbLayout = null;
		
		/**
		 * 계단형 분할 여부
		 * @type {Boolean}
		 */
		var mbFlatCascading = false;
		
		/**
		 * 계단형 분할일 경우, 분할된 앱인스턴스 정보 저장
		 * @type {JSON[]}
		 */
		var maCascading = [];
		
		
		/************************************************
		 * 프로토타입 선언
		 ************************************************/
		/**
		 * 
		 * @param {cpr.core.AppInstance} app
		 * @param {any} comDiv
		 */
		var mdiTabClose = function (app, comDiv) {
			this._app = app;
			this._divide = comDiv;
		}
		
		/**
		 * 첫번째 아이템을 고정합니다.
		 */
		mdiTabClose.prototype.setFixedItem = function() {
			mbFixed = true;
		}
		
		/**
		 * 계단형 객체 저장
		 * @param {any} paWindow
		 */
		mdiTabClose.prototype.getWindow = function(paWindow) {
			maCascading = paWindow;
		}
		
		
		/**
		 * 열려있는 탭아이텝 중 특정 아이템을 닫습니다.
		 * @param {cpr.controls.UIControl} pcCtrl (분할/닫기)버튼
		 * @param {String} psCls 분할:divide / 닫기:close
		 */
		mdiTabClose.prototype.getTabList = function (pcCtrl, psCls) {
			if(this._divide == null) return;
			var comDiv = this._divide;
		
			var vcMDIFolder = comDiv.getMdiFolder();
			if(vcMDIFolder == null) return;
		
			var voTabItems = vcMDIFolder.getTabItems();
			voTabItems.forEach(function(each, index) {
				if(each.text == "tempItem") voTabItems.splice(index, 1);
			})
		
			if(voTabItems.length == 0 && this._app.dialogManager.getDialogNames().length == 0) {
				alert("분할 할 탭 아이템이 없습니다.");
				_setCmbDefault(pcCtrl);
				return;
			}
			
			// 레이아웃 변경시 다이얼로그 뜨지 않도록 수정(2021.07.27 수정)	
			if(pcCtrl.type == "combobox") {
				mcCmbLayout = pcCtrl;
				mcCmbLayout.getParent().userAttr("divide", "true");
				_divideGroup(voRootAppIns, mcCmbLayout, vcMDIFolder, comDiv);
			}
			
			/** @type cpr.core.AppInstance */
			var voRootAppIns = this._app.getRootAppInstance();
			
			
			// 레이아웃 변경시 다이얼로그 뜨지 않도록 수정(2021.07.27 수정)	
			var vcItemGrp = _createGroup(vcMDIFolder, psCls, comDiv);
			if(vcItemGrp) {
				voRootAppIns.getContainer().addEventListener("click", function(e){
					var voActualRect =	vcItemGrp.getActualRect();
					if(voActualRect.width == 0 && voActualRect.height == 0) return;
					
					var vaFolatedCtrls = [];
					var vcGrpPopWrap = voRootAppIns.lookup("grpPopWrap");
					if(vcGrpPopWrap) {
						if(vcGrpPopWrap.userAttr("floating")) vaFolatedCtrls.push(vcGrpPopWrap);
					} else {
						vaFolatedCtrls = voRootAppIns.getContainer().getAllRecursiveChildren().filter(function(each){
							return each.userAttr("floating") == "true";
						});
					}
			
					vaFolatedCtrls.forEach(function(each){
						if(each.userAttr("divide") != "true") _setCmbDefault(pcCtrl);
						voRootAppIns.getContainer().removeChild(each, true);
					});
				});
				
				// 그룹 안에 탭아이템 추가 후 플로팅
				_insertOpenItems(this._app, vcMDIFolder, vcItemGrp, comDiv);
				vcItemGrp.userAttr("floating", "true");
				
				var vnTabItems = voTabItems.length;
				if(maCascading.length > 0) vnTabItems += maCascading.length;
				voRootAppIns.floatControl(vcItemGrp, {
					top : pcCtrl.getActualRect().bottom + "px",
					right : pcCtrl.getParent().getOffsetRect().width - pcCtrl.getOffsetRect().right + 3 + "px", // margin 5px - border 1px*2 = 3
					width : (250 * Math.ceil(vnTabItems/4)) + "px",
					height : "200px"
				});
			}
		}
		
		
		
		/**
		 * 열려있는 탭아이템을 모두 닫습니다.
		 * @param {#combobox} psCmbId? 분할 콤보박스 ID
		 */
		mdiTabClose.prototype.closeTabAll = function (psCmbId) {
			if(this._divide == null) return;
			
			var comDiv = this._divide;
			
			/** @type cpr.controls.MDIFolder */
			var vcMDIFolder = comDiv.getMdiFolder();
			if(vcMDIFolder == null) return;
			
			var vcCombobox = this._app.lookup(psCmbId);
			
			var voTabItems = vcMDIFolder.getTabItems();
			// TODO confirm 이외의 팝업으로 확인창을 띄우기 위해서 아래의 코드를 수정하십시오.
			if(confirm("오픈된 전체 화면을 닫으시겠습니까?")) {
				if (mbFixed){
					// (2021.07.27 추가)
					comDiv.divide("default", null, voTabItems);
					comDiv.closeMenu(vcCombobox, "fixClose");
				} else {
					comDiv.closeMenu(vcCombobox, "all");
				}
				
				maCascading = [];
				mbFlatCascading = false;
			}
		}
		
		
		/************************************************
		 * 내부 API
		 ************************************************/
		cpr.events.EventBus.INSTANCE.addFilter("before-selection-change", function(e){
			var control = e.control;
			if(control.type == "combobox" && control.userAttr(ATTR_DIVIDE_LAYOUT) == "true")	{
				msBeforeLayout = e.oldSelection[0].value;
			}
		});
		
		/**
		 * 레이아웃 콤보박스 초기화
		 * @param {cpr.controls.ComboBox} pcCmb
		 */
		function _setCmbDefault (pcCmb) {
			if(pcCmb.type == "combobox") {
				pcCmb.style.removeClass(pcCmb.value);
				pcCmb.style.addClass(msBeforeLayout);
				pcCmb.value = msBeforeLayout;
			}
		}
		
		
		/**
		 * 탭아이템을 보여줄 그룹을 생성합니다.
		 * @param {cpr.controls.TabFolder | cpr.controls.MDIFolder} pcMDIFolder 탭폴더
		 * @param {String} psCls 구분(분할:divide, 닫기:close, 둘다:all)
		 */
		function _createGroup (pcMDIFolder, psCls, comDiv) {
			
			var voRootAppIns = pcMDIFolder.getAppInstance().getRootAppInstance();
			var dialogManager = voRootAppIns.dialogManager;
			
			// 그룹추가
			var vcGroup = new cpr.controls.Container("grpPopWrap");
			vcGroup.style.addClass(msPopGrpWrapCls);
			vcGroup.addEventListener("click", function(e){
				vcGroup.style.css("z-index", "1");
				e.stopPropagation();
			});
			
			// 버티컬레이아웃 추가
			var vcItemListGrp = new cpr.controls.Container("grpList");
			var verticalLayout = new cpr.controls.layouts.VerticalLayout();
			vcItemListGrp.setLayout(verticalLayout);
			vcGroup.addChild(vcItemListGrp, {
				top : "0px",
				left : "0px",
				right : "0px",
				bottom : "50px",
			});
			
			// TODO [닫기]버튼에 대한 속성 및 스타일을 수정하십시오.
			var vnEabledDialog = 0;
			dialogManager.getDialogNames().forEach(function(each){
				if(each.indexOf("ea") != -1) vnEabledDialog++;
			}); 
			var vcCloseBtn = new cpr.controls.Button("btnClose");
			vcCloseBtn.value = "닫기";
			vcCloseBtn.enabled = vnEabledDialog == 0 ? true : false;
			vcCloseBtn.style.addClass(msBtnClosCls);
			vcCloseBtn.addEventListener("click", function(e){	
				var control = e.control;
				_closeGroup(control, pcMDIFolder, comDiv);
			});
			
			// TODO [분할]버튼에 대한 속성 및 스타일을 수정하십시오. 
			var vcDivBtn = new cpr.controls.Button("btnDivide");
			vcDivBtn.value = "분할";
			vcDivBtn.style.addClass(msBtnClosCls);
			vcDivBtn.addEventListener("click", function(e){	
				var control = e.control;
				var voRootAppIns = control.getAppInstance().getRootAppInstance();
				control.getParent().userAttr("divide", "true");
				_divideGroup(pcMDIFolder.getAppInstance(), control, pcMDIFolder, comDiv);
			});
			
			// [닫기]버튼 추가
			if(psCls.toUpperCase() == "CLOSE") {
				vcGroup.addChild(vcCloseBtn, {
					left : "calc(50% - 35px)",
					bottom : "10px",
					width : "70px",
					height : "30px",
				});
			}
			
			// [분할]버튼 추가
			if(psCls.toUpperCase() == "DIVIDE") {
				vcGroup.addChild(vcDivBtn, {
					left : "calc(50% - 35px)",
					bottom : "10px",
					width : "70px",
					height : "30px",
				});
			}
			
			// [닫기], [분할] 모두 추가
			if(psCls.toUpperCase() == "ALL") {
				vcGroup.addChild(vcCloseBtn, {
					left : "calc(50% - 75px)",
					bottom : "10px",
					width : "70px",
					height : "30px",
				});
				vcGroup.addChild(vcDivBtn, {
					left : "50%",
					bottom : "10px",
					width : "70px",
					height : "30px",
				});
			}
			
			return vcGroup;
		}
		
		
		/**
		 * 열려있는 탭아이템 리스트를 추가합니다. (체크박스그룹)
		 * @param {cpr.core.AppInstance} poApp
		 * @param {cpr.controls.TabFolder | cpr.controls.MDIFolder} pcMDIFolder
		 * @param {cpr.controls.Container} pcParent 리스트를 추가한 부모그룹
		 */
		function _insertOpenItems (poApp, pcMDIFolder, pcParent, comDiv) {
			
			var vcDataSet = poApp.lookup("dsOpenItems");
			if(vcDataSet == undefined || vcDataSet == null) { // 생성한 데이터셋은 최초한번만 register 하도록 수정
				vcDataSet = new cpr.data.DataSet("dsOpenItems");
				vcDataSet.parseData({
					columns : [
						{dataType: "string", name: "label"},
						{dataType: "string", name: "value"},
						{dataType: "string", name: "appId"},
					]
				});
				poApp.register(vcDataSet);
			}
			
			if(pcMDIFolder) {
				var voTabItems = pcMDIFolder.getTabItems();
				maCascading = [];
				
				// 계단형에서 다른형태로 분할 시 삭제된 아이템을 누락할 수 있도록 수정
				var vaDialogNms = poApp.dialogManager.getDialogNames().filter(function(each){
					return each.indexOf("ea") != -1;
				});
				if(vaDialogNms.length > 0) {
					// 계단형일 경우
					var voLoadApps = cpr.core.Platform.INSTANCE.getAllLoadedApps();
					vaDialogNms.forEach(function(each, index){
						maCascading.push({
							label :  poApp.dialogManager.getDialogByName(each).headerTitle,
							value : each,
							appId : each.slice(2, each.lastIndexOf("_"))
						});
					});
				}
				
				if(maCascading.length > 0) {
					maCascading.forEach(function(each){
						voTabItems.push(each)
					});
				}
				
				vcDataSet.clear();
				for(var idx = 0; idx < voTabItems.length; idx++){
					
					if(voTabItems[idx].text != "tempItem") {
						var vsLabel = "";
						var vsValue = "";
						var vsAppId = "";
						
						if(voTabItems[idx] instanceof cpr.controls.TabItem) {
							vsLabel = voTabItems[idx].text;
							vsValue = voTabItems[idx].itemIndex;
						} else if( voTabItems[idx] instanceof cpr.controls.Item){
							vsLabel = voTabItems[idx].row.getValue("label");
							vsValue = voTabItems[idx].row.getValue("value");
							vsAppId = voTabItems[idx].row.getValue("appId");
						} else {
							vsLabel = voTabItems[idx].label;
							vsValue = voTabItems[idx].value;
							vsAppId = voTabItems[idx].appId;
						}
						
						if(voTabItems[idx] instanceof cpr.controls.TabItem && pcMDIFolder.type == "mdifolder") {
							if(voTabItems[idx].content && voTabItems[idx].content.app) {
								vsAppId = voTabItems[idx].content.app.id;						
							} else {
								// 분할 된 상태에서 새로 추가한 메뉴에 대한 appId 설정
								/** @type cpr.controls.Container */
								var vcGrpFloat = comDiv.getDivGroup();
								if(vcGrpFloat) {
									var vcEmb = vcGrpFloat.getChildren().filter(function(each){
										return each.uuid == voTabItems[idx].name;
									})[0];
									vsAppId = vcEmb.app.id;		
								} else {
									var vsTempId = voTabItems[idx].content.id;
									vsAppId = vsTempId.slice(2, vsTempId.lastIndexOf("_"));
								}
							}
						}
						
						vcDataSet.addRowData({
							label : vsLabel,
							value : vsValue,
							appId : vsAppId
						})
					}
				}
			}
			
			// 체크박스를 추가할 버티컬레이아웃
			var voVerticalLayout = pcParent.getAllRecursiveChildren().filter(function(each) {
				if(each.id == "grpList") {
					return each;
				}
			})[0];
			
			
			// 체크박스 추가(전체선택)
			var vcCheckBox = new cpr.controls.CheckBox();
			vcCheckBox.text = "전체선택";
			vcCheckBox.style.addClass(msCheckBoxCls);
			vcCheckBox.addEventListener("value-change", _onCbxValueChange);
			voVerticalLayout.addChild(vcCheckBox, {
				"autoSize": "height",
				"width": "200px",
				"height": "30px"
			});
			
			if(mcCmbLayout) {
				var vnItemCnt = pcMDIFolder.getTabItems().length + maCascading.length;
				if(mcCmbLayout.value == "default" || mcCmbLayout.value == "division") {
					vcCheckBox.enabled = false;
				}
			}
			
			// 체크박스 그룹 추가 (현재 열려있는 탭아이템 목록)
			// TODO 체크박스그룹의 속성 및 스타일을 설정하십시오.
			var vcOpenItemCbg = new cpr.controls.CheckBoxGroup();
			vcOpenItemCbg.colCount = Math.ceil(vcDataSet.getRowCount()/4);
			vcOpenItemCbg.addEventListener("selection-change", _onOpenItemSelectionChange);
			vcOpenItemCbg.setItemSet(vcDataSet, {
				"label": "label",
				"value": "value"
			});
			voVerticalLayout.addChild(vcOpenItemCbg, {
				"autoSize": "height",
				"width": "200px",
				"height": "30px"
			})
			
			// 고정탭아이템 있을 때 해당 체크박스 아이템 disable 처리
			if(mbFixed) {
				var vsExp = "";
				vcOpenItemCbg.enabledItemExp = vsExp;
			}
		}
		
		
		/**
		 * 선택한 아이템을 분할합니다.
		 * 해당 함수를 사용하기 위해서 DivideMdi.module.js 와 함께 사용하십시오.
		 * @param {cpr.core.AppInstance} poApp
		 * @param {cpr.controls.UIControl} pcControl
		 * @param {cpr.controls.MDIFolder | cpr.controls.TabFolder} pcTabFolder
		 */
		function _divideGroup (poApp, pcControl, pcMDIFolder, comDiv) {
			var vcParent = pcControl.getParent();
			// 레이아웃 변경시 다이얼로그 뜨지 않도록 수정(2021.07.27 수정)
			if(vcParent) {
				/** @type cpr.controls.CheckBox */
				var vcCheckAll = null;
				/** @type cpr.controls.CheckBoxGroup */
				var vcCheckList = null;
				
				vcParent.getAllRecursiveChildren().forEach(function(each){
					if(each.type == "checkboxgroup") {
						vcCheckList = each;
					} else if( each.type == "checkbox") {
						vcCheckAll = each;
					}
				});		
				
				if(vcCheckAll && vcCheckList) {
					maCascading = [];
					var voSelection = vcCheckList.getSelection();
					
					if(voSelection.length == 0) {
						if(mcCmbLayout && mcCmbLayout.value	== msDefault) {
							voSelection = [];
						} else {
							alert("분할 할 아이템을 선택해주세요.");
							return;
						}
					}
					
					var vsLayout = msDefault;
					if(mcCmbLayout) {
						vsLayout = mcCmbLayout.value;
					} else {
						// 분할모드를 선택하지 않은 경우 선택 개수에 따라 자동으로 분할모드 설정
						if(voSelection.length == 2) {
							vsLayout = msVertical;	
						} else if(voSelection.length ==3 || voSelection.length == 4){
							vsLayout = msDivision;	
						} else if(voSelection.length > 4) {
							vsLayout = msCascading;
							if(mbFlatCascading) { // 이미 계단형일 경우 다시 계단형분할 방지
								alert("4개 이하의 탭 아이템만 분할 할 수 있습니다.");
								return;
							}
						}
					}
					
					// 계단형일 경우, 아이템 저장
					if(vsLayout == msCascading) maCascading = voSelection;
		
					// 선택한 아이템을 분할합니다.
					comDiv.divide(vsLayout, null, voSelection);
				
					// 그룹 삭제
					if(pcControl.getParent()) {
						_removeFloating(pcControl.getParent(), comDiv);
					}
					
					if(vsLayout == msCascading) {
						mbFlatCascading = true;
					} else {
						mbFlatCascading = false;
					}
				}
			}
		}
		
		
		/**
		 * 선택한 탭아이템 닫기
		 * @param {cpr.controls.UIControl} pcControl
		 * @param {cpr.controls.TabFolder | cpr.controls.MDIFolder} pcMDIFolder
		 */
		function _closeGroup (pcControl, pcMDIFolder, comDiv) {
		
			var vcParent = pcControl.getParent();
		
			if(vcParent) {
				/** @type cpr.controls.CheckBox */
				var vcCheckAll = null;
				/** @type cpr.controls.CheckBoxGroup */
				var vcCheckList = null;
				
				vcParent.getAllRecursiveChildren().forEach(function(each){
					if(each.type == "checkboxgroup") {
						vcCheckList = each;
					} else if( each.type == "checkbox") {
						vcCheckAll = each;
					}
				});		
				
				if(vcCheckAll && vcCheckList) {
					var voSelection = vcCheckList.getSelection();
					voSelection.forEach(function(each){
						var vsValue = each.row.getValue("value");
						var vsAppId = each.row.getValue("appId");
						var vcClosableItem = null;
						
						if(pcMDIFolder.type == "tabfolder") {
							vcClosableItem = pcMDIFolder.getTabItemByID(vsValue);
						} else {
							vcClosableItem = pcMDIFolder.findItemWithAppID(vsAppId);
						}
						
						var voRootAppIns = pcControl.getAppInstance().getRootAppInstance();
						if(voRootAppIns.lookup("grpFloat")) {
							comDiv.closeMenu(mcCmbLayout, "select", vcClosableItem);
						}
						
						pcMDIFolder.close(vcClosableItem);
					});
					
					// 그룹 삭제
					_removeFloating(pcControl.getParent(), comDiv);
				}
			}
		}
		
		
		/**
		 * 플로팅 되어있던 그룹을 모두 삭제합니다.
		 * @param {cpr.controls.Container} pcFloatGroup
		 */
		function _removeFloating(pcFloatGroup, comDiv) {
			var voRootAppIns = pcFloatGroup.getAppInstance().getRootAppInstance();
			
			if(pcFloatGroup.isFloated()) {
				voRootAppIns.getContainer().removeChild(pcFloatGroup, true);
			}
		
			if(mbFlatCascading && voRootAppIns.dialogManager.getDialogNames().length != 0) {
				comDiv.removeAllFloat();
			}
		}
		
		
		/**
		 * 체크박스 그룹의 selection-change 이벤트리스너
		 * @param {cpr.events.CUIEvent} e
		 */
		function _onOpenItemSelectionChange (e) {
			
			/** @type cpr.controls.CheckBoxGroup */
			var control = e.control
			var vcParent = control.getParent();
		
			/** @type cpr.controls.CheckBox */
			var vcCbxAll = vcParent.getChildren().filter(function(each) {
				if(each.type == "checkbox"){
					return each;
				}
			})[0];
			
			/* 체크박스그룹을 모두 체크하면 모두 선택도 체크 */
			if (control.getSelection().length == control.getItemCount()){
				vcCbxAll.putValue("true");
			} else {
				vcCbxAll.putValue("");
			}
			
			if(mcCmbLayout) {
				if(mcCmbLayout.value == "default") {
					_enabledCbg(control, 1);
				}
				if(mcCmbLayout.value == "division") {
					_enabledCbg(control, 4);
				}
			}
		}
		
		/**
		 * 체크박스그룹 아이템 enabled 설정
		 * @param {cpr.controls.CheckBoxGroup} pcCbg
		 * @param {Number} vnSelection 최대 선택 개수
		 */
		function _enabledCbg (pcCbg, vnSelection) {
			var voSelection = pcCbg.getSelection();
			var voEnable = [];
			voSelection.forEach(function(each){
				voEnable.push("value == '" + each.value + "'");
			});
		
			if(voSelection.length == vnSelection) {
				var vsExp = voEnable.join(" || ");
				pcCbg.enabledItemExp = vsExp;
			} else {
				pcCbg.enabledItemExp = "";
			}
		}
		
		/**
		 * 체크박스의 value-change 이벤트리스너
		 * @param {cpr.events.CUIEvent} e
		 */
		function _onCbxValueChange(e){
			
			/** @type cpr.controls.CheckBox */
			var control = e.control;
			var vcParent = control.getParent();
			
			/** @type cpr.controls.CheckBoxGroup */	
			var vcCbgItems = vcParent.getChildren().filter(function(each) {
				if(each.type == "checkboxgroup"){
					return each;
				}
			})[0];
			
			/* 전체 선택의 체크 상태에 따라 체크박스그룹의 체크를 전체 선택하거나 전체 선택 해제 */
			if (control.checked == true) {
				vcCbgItems.selectAllItems();
			} else {
				vcCbgItems.clearSelection();
			}
		}
		
		/**
		 * 
		 * @param {cpr.core.AppInstance} app
		 */
		globals.mdiTabClose = function(app, comDiv) {
			return new  mdiTabClose(app, comDiv);
		}
	});
})();
/// end - module/mdiTabClose
/// start - module/mobileCalendar
/*
 * Module URI: module/mobileCalendar
 * SRC: module/mobileCalendar.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/mobileCalendar", function(exports, globals, module){
		/************************************************
		 * mobileCalendar.module.js
		 * Created at 2021. 5. 10. 오전 11:53:57.
		 *
		 * Version 1.0
		 * Updated Date : 2021-09-23
		 * 
		 * @author daye
		 ************************************************/
		
		/*
		 * 모바일에서 볼 수 있는 캘린더 모듈
		 * mbUse = true 일 때 사용 가능 하며, 
		 * 데이트 인풋의 사용자 속성이 mobile-calendar=true 로 설정되고 모바일 화면일 때 팝업형태로 제공됩니다.
		 * 
		 * [모바일 캘린더 형태]
		 * 1. 캘린더 형태(Android datePicker 형태)
		 * 2. 스핀 형태 - mbSpinDatePicker=true 로 설정하여 사용 가능
		 */
		
		
		/************************************************
		 * 변경 가능 변수
		 ************************************************/
		/**
		 * 모듈 사용 여부
		 * @type {Boolean}
		 */
		var mbUse = true;
		
		/**
		 * 모바일 캘린더 형태
		 * default : false (캘린더 형태)
		 * true 일 경우에는 스핀형태로 제공합니다.
		 * @type {Boolean}
		 */
		var mbSpinDatePicker = false;
		
		/**
		 * 사용자 속성
		 * 모바일 캘린더를 사용하기 위한 데이트인풋에 작성합니다.
		 * true 일 때 사용 가능
		 * @type {String}
		 */
		var ATTR_MOBILE_CALENDAR = "mobile-calendar";
		
		/**
		 * 다이얼로그 overlay 스타일 클래스
		 * @type {String}
		 */
		var msDialogOverlayCls = "cl-overlay";
		
		/**
		 * 다이얼로그 스타일 클래스
		 * @type {String}
		 */
		var msDialogCls = "rounded-0";
		
		/**
		 * [취소] 버튼 스타일 클래스
		 * @type {String}
		 */
		var msCancleBtnCls = "btn-primary rounded-0";
		
		/**
		 * [확인] 버튼 스타일 클래스
		 * @type {String}
		 */
		var msConfirmBtnCls = "btn-primary rounded-0";
		
		/**
		 * 버튼 높이
		 * @type {Number}
		 */
		var mnBtnHeight = 50;
		
		/**
		 * 커스텀 스크롤 사용 여부
		 * @type {Boolean}
		 */
		var mbCustomScroll = false;
		
		/* ******************************
		 *  캘린더형 다이얼로그
		 ********************************/
		/**
		 * 다이얼로그 headerTitle 을 선택날짜로 변경 여부
		 * @type {Boolean}
		 */
		var mbDateTitle = false;
		
		/**
		 * root 컨테이너 스타일 클래스
		 * @type {String}
		 */
		var msRootCtnCls = "";
		
		/**
		 * 캘린더 스타일 클래스
		 * @type {String}
		 */
		var msCalendarCls = "mobile-cal";
		
		/* ******************************
		 * 스핀형 다이얼로그
		 * *******************************/
		/**
		 * 다이얼로그 내부 그룹 스타일 클래스	
		 * @type {String}
		 */
		var msFormCls = "calendar-box border-0";
		
		/**
		 * 다이얼로그 내부 그리드 스타일 클래스
		 * @type {String}
		 */
		var msGrdCls = "border-0";
		
		/**
		 * 그리드 행 높이
		 * @type {Number}
		 */
		var mnRowHeight = 50;
		
		/**
		 * 
		 * @type {String}
		 */
		var msLangYear = cpr.I18N.INSTANCE.message("year") || "년";
		
		/**
		 * 
		 * @type {String}
		 */
		var msLangMonth = cpr.I18N.INSTANCE.message("month") || "월";
		
		/**
		 * 
		 * @type {String}
		 */
		var msLangDate = cpr.I18N.INSTANCE.message("date") || "일";
		
		/**
		 * 
		 * @type {String}
		 */
		var msLangCancel = cpr.I18N.INSTANCE.message("cancel") || "취소";
		
		/**
		 * 
		 * @type {String}
		 */
		var msLangConfirm = cpr.I18N.INSTANCE.message("confirm") || "확인";
		
		
		/************************************************
		 * 내부 변수
		 ************************************************/
		
		/**
		 * 다이얼로그 뜨는 위치
		 */
		var maProp = {
			left : 0,
			right : 0,
			bottom : 0,
			height : 0
		}
		
		/**
		 * 다이얼로그 name
		 */
		var msDialogNm = "mobileCalendarDialog";
		
		/**
		 * 언어코드
		 */
		var msLocale = "ko";
		
		/************************************************
		 * 이벤트 버스
		 ************************************************/
		if(mbUse) {
			cpr.events.EventBus.INSTANCE.addFilter("click", fn_click);
			cpr.events.EventBus.INSTANCE.addFilter("touchend", fn_click); // 모바일 이벤트 버스 (최초 preventInput=false 일 경우)
		}
		
		/**
		 * 클릭 이벤트 버스
		 * @param {cpr.events.CMouseEvent} e
		 */
		function fn_click (e) {
			/** @type cpr.controls.DateInput */
			var control = e.control;
			
			if(control.type == "dateinput" && control.userAttr(ATTR_MOBILE_CALENDAR) == "true") {
				
				if(control.readOnly) return;
				
				/** @type cpr.core.AppInstance */
				var voAppInstance = control.getAppInstance();
				var vsTargetScreen = voAppInstance.targetScreen.name;
				
				if(vsTargetScreen == "mobile") {
					// 모바일 화면일 경우에만 팝업형태 datePicker 제공
					
					// 0. locale 설정
					msLocale = _.clone(cpr.I18N.INSTANCE.currentLanguage);
					cpr.I18N.INSTANCE.currentLanguage = control.locale;
					
					if(!control.preventInput && e.type == "touchend" && e.target.classList.contains("cl-dateinput-button")) {
						/*
						 * 모바일 (touchend event 발생)
						 * 최초 다이얼로그 캘린더 컨트롤 포커스 시, 데이트 인풋 click 이벤트 전파 
						 * -> open 후 click event 에서 close 되도록 수정
						 */
						control.open();
					} else {
						/*
						 * 데스크탑 (click event 발생)
						 * click 과 동시에 calendar 가 오픈되므로 항상 close 처리 필요
						 */
						control.close();
					}
					
					// 1) 키보드, 캘린더 오픈 방지
					control.preventInput = true;
					
					// 1-1) preventInput 속성 즉시 적용
					cpr.core.DeferredUpdateManager.INSTANCE.update();
		
					// 2) 기본 캘린더 오픈 방지
					e.preventDefault();
					
					// 3) 팝업생성
					var voApp = null;
					if(mbSpinDatePicker) {
						voApp = _createSpinApp(control);
					} else {
						voApp = _createBasicApp(control);	
					}
		
					_openDialog(voAppInstance, voApp, control);
				}
			}
		} 
		
		
		/**
		 * TYPE2 - 스핀형태
		 * 다이얼로그로 띄우기 위한 앱을 생성합니다.
		 * @param {cpr.controls.DateInput} pcDateInput
		 */
		function _createSpinApp (pcDateInput) {
		
			var vsAppId = "Mobile_Spin_Calendar_$" + (Math.floor(Math.random()*100)+1);
			var newApp = new cpr.core.App(vsAppId, {
				onPrepare: function(loader){
				},
				onCreate: function(/* cpr.core.AppInstance */ app, exports){
					var linker = {};
					// Start - User Script
					var voAppConf = cpr.core.AppConfig.INSTANCE;
					var voI18Conf = voAppConf.getEnvConfig();
					voI18Conf.setValue("useCustomScrollbar", mbCustomScroll);
					
					function onBodyLoad (/*  cpr.events.CEvent */ e) {
						
						/** @type cpr.controls.Grid */
						var grdYear = app.lookup("grdYear");
						/** @type cpr.controls.Grid */
						var grdMonth = app.lookup("grdMonth");
						/** @type cpr.controls.Grid */
						var grdDate = app.lookup("grdDate");
						
						/** @type cpr.data.DataSet */
						var dsYear = app.lookup("dsYear");
						/** @type cpr.data.DataSet */
						var dsMonth = app.lookup("dsMonth");
						/** @type cpr.data.DataSet */
						var dsDate = app.lookup("dsDate");
						
						/* 1. 각 년/월/일 데이터 추가 */ 
						var initValue = app.getHostProperty("initValue");
						var minDate = pcDateInput.minDate;
						var maxDate = pcDateInput.maxDate;
						
						// 1-1) 년도 데이터
						var vsMinYear = minDate.getFullYear();
						var vsMaxYear = maxDate.getFullYear();
						for(var idx = vsMinYear; idx <= vsMaxYear; idx++){
							dsYear.addRowData({
								"label" : idx + msLangYear,
								"value" : idx
							})
						}
						
						// 1-2) 월 데이터
						for(var idx = 1; idx <= 12; idx++){
							dsMonth.addRowData({
								"label" : idx + msLangMonth,
								"value" : idx
							})
						}
						
						// 1-3) 일 데이터
						for(var idx = 1; idx <= 31; idx++){
							dsDate.addRowData({
								"label" : idx + msLangDate,
								"value" : idx
							})
						}
		
						/* 2. setState unchanged */
						dsYear.commit();
						dsMonth.commit();
						dsDate.commit();
						
						/* 3. dialog Animation */
						var dialog = app.getHost();
						if (dialog && dialog instanceof cpr.controls.Dialog) {
							var vnHeight = innerHeight * 0.4;
							dialog.style.animateTo({
								"transform": "translateY(" + maProp.bottom + "px)",
								"max-height": vnHeight + "px",
							}, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
							
							cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function() {
								
								// 다이얼로그 animateTo 가 완료되었을 때 constraint 변경
								var dialogManager = dialog.getAppInstance().dialogManager;
								var oldConstraint = dialogManager.getConstraintByName(msDialogNm);
								var newConstraint = oldConstraint;
								newConstraint.height = vnHeight;
								dialogManager.replaceConstraintByName(msDialogNm, newConstraint);
								
								/* 4. Selection */
								grdDate.addEventListenerOnce("measure-size", function() {
									
									// 그리드가 아래에서 위로 모두 올라온 후 focusCell
									cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function() {
										/* Selection Focus */
										var vsYear = initValue ? moment(initValue).format("YYYY") : new Date().getFullYear();
										var vnYearIndex = dsYear.getColumnData("value").indexOf(vsYear + "");
										grdYear.focusCell(vnYearIndex, 0);
										
										var vsMonth = initValue ? Number(moment(initValue).format("MM")) : new Date().getMonth() + 1;
										var vnMonthIndex = dsMonth.getColumnData("value").indexOf(vsMonth + "");
										grdMonth.focusCell(vnMonthIndex, 0);
										
										var vsDate = initValue ? Number(moment(initValue).format("DD")) : new Date().getDate();
										var vnDateIndex = dsDate.getColumnData("value").indexOf(vsDate + "");
										grdDate.focusCell(vnDateIndex, 0);
									})
								})
							})
						}
					};
						
					/**
					 * 선택 날짜에 따른 날짜 enable 처리
					 */
					function _setEnableCalendar () {
						/** @type cpr.controls.Grid */
						var grdYear = app.lookup("grdYear");
						/** @type cpr.controls.Grid */
						var grdMonth = app.lookup("grdMonth");
						/** @type cpr.controls.Grid */
						var grdDate = app.lookup("grdDate");
						
						// Date filter
						var minDate = pcDateInput.minDate;
						var maxDate = pcDateInput.maxDate;
						
						var voYearRow =  grdYear.getSelectedRow();
						var voMonthRow =  grdMonth.getSelectedRow();
						
						// 1-1) 선택 년도에 따른 월 enabled
						if(voYearRow) {
							var vsYearSelection = voYearRow.getRowData()["value"];
							if(vsYearSelection == minDate.getFullYear()) {
								grdMonth.setFilter("value >= " + (minDate.getMonth()+1));
							}
							else if(vsYearSelection == maxDate.getFullYear()) {
								grdMonth.setFilter("value <= " + (maxDate.getMonth()+1));
							} else {
								grdMonth.clearFilter();
							}
						}
						
						// 1-2) 선택 년도, 월 에 따른 일 enabled
						if(voYearRow && voMonthRow) {
							var vsMonthSelection = voMonthRow.getRowData()["value"];
							if(vsYearSelection == minDate.getFullYear() && vsMonthSelection == minDate.getMonth()+1) {
								grdDate.setFilter("value >= " + minDate.getDate());
							}
							else if(vsYearSelection == maxDate.getFullYear() && vsMonthSelection == maxDate.getMonth()+1) {
								grdDate.setFilter("value <= " + maxDate.getDate());
							}
							else {
								var lastDate = new Date(Number(vsYearSelection), Number(vsMonthSelection), 0);
								grdDate.setFilter("value <= " + lastDate.getDate());
							}
						}
					}
					
					function onGrdSelectionChange(/* cpr.events.CSelectionEvent */ e){
						_setEnableCalendar();
					};
					
					function onBtnCancelClick (/*cpr.events.CMouseEvent*/ e) {
						app.close();
					}
					
					function onBtnConfirmClick (/*cpr.events.CMouseEvent*/ e) {
						var year = app.lookup("grdYear").getSelectedRow().getRowData()["value"] + "";
						var month = ("0" + app.lookup("grdMonth").getSelectedRow().getRowData()["value"]).slice(-2);
						var date = ("0" + app.lookup("grdDate").getSelectedRow().getRowData()["value"]).slice(-2);
						
						var vsSelectedDate = year+month+date;
						
						// enabledDateExp 로 비활성 날짜 제어
						var vsValidDate = year+"-"+month+"-"+date;
						var enabledExp = pcDateInput.enabledDateExp;
						var vsExp = "new Date(vsValidDate)."+ enabledExp;
						if(!(eval(vsExp))) {
							alert("선택 불가능한 날짜 입니다.");
							return false;
						}
						
						app.close(vsSelectedDate);
					}
					// End - User Script
					
					// Header
					var dataSet_1 = new cpr.data.DataSet("dsYear");
					dataSet_1.parseData({
						"columns" : [
							{"name": "label"},
							{"name": "value"}
						]
					});
					app.register(dataSet_1);
					
					var dataSet_2 = new cpr.data.DataSet("dsMonth");
					dataSet_2.parseData({
						"columns" : [
							{"name": "label"},
							{"name": "value"}
						]
					});
					app.register(dataSet_2);
					
					var dataSet_3 = new cpr.data.DataSet("dsDate");
					dataSet_3.parseData({
						"columns" : [
							{"name": "label"},
							{"name": "value"}
						]
					});
					app.register(dataSet_3);
					
					app.supportMedia("all and (min-width: 1024px)", "default");
					app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
					app.supportMedia("all and (max-width: 499px)", "mobile");
					
					// Configure root container
					var container = app.getContainer();
					container.style.css({
						"width" : "100%",
						"top" : "0px",
						"height" : "100%",
						"left" : "0px"
					});
					
					var vaRows = (function(pnHeight){
						var rows = [];
						rows.push("1fr");
						rows.push(pnHeight + "px");
						return rows;
					})(mnBtnHeight)
					
					// Layout
					var formlayout_1 = new cpr.controls.layouts.FormLayout();
					formlayout_1.setRows(vaRows);
					formlayout_1.setColumns(["1fr", "1fr"]);
					formlayout_1.horizontalSpacing = "0px";
					formlayout_1.verticalSpacing = "0px";
					formlayout_1.verticalSeparatorClass = "class";
					formlayout_1.verticalSeparatorWidth = 1;
					container.setLayout(formlayout_1);
					
					// UI Configuration
					var vcGroup = new cpr.controls.Container("grpForm");
					vcGroup.style.addClass(msFormCls);
					container.addChild(vcGroup, {
						rowIndex : 0,
						colIndex : 0,
						colSpan : 2
					});
					
					var formlayout_2 = new cpr.controls.layouts.FormLayout();
					formlayout_2.setRows(["1fr"]);
					formlayout_2.setColumns(["1fr", "1fr", "1fr"]);
					formlayout_2.horizontalSpacing = "0px";
					formlayout_2.scrollable = false;
					vcGroup.setLayout(formlayout_2);
					
					
					var grid_1 = new cpr.controls.Grid("grdYear");
					grid_1.style.addClass(msGrdCls);
					grid_1.init({
						"dataSet": app.lookup("dsYear"),
						"columns": [{"width": "10px"}],
						"detail": {
							"rows": [{"height": "" + mnRowHeight+ "px"}],
							"cells": [{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "label";
								}
							}]
						}
					});
					if(typeof onGrdSelectionChange == "function"){
						grid_1.addEventListener("selection-change", onGrdSelectionChange);
					}
					vcGroup.addChild(grid_1, {
						rowIndex : 0,
						colIndex : 0
					});
					
					var grid_2 = new cpr.controls.Grid("grdMonth");
					grid_2.style.addClass(msGrdCls);
					grid_2.init({
						"dataSet": app.lookup("dsMonth"),
						"columns": [{"width": "10px"}],
						"detail": {
							"rows": [{"height": "" + mnRowHeight+ "px"}],
							"cells": [{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "label";
								}
							}]
						}
					});
					if(typeof onGrdSelectionChange == "function"){
						grid_2.addEventListener("selection-change", onGrdSelectionChange);
					}
					vcGroup.addChild(grid_2, {
						rowIndex : 0,
						colIndex : 1
					});
					
					var grid_3 = new cpr.controls.Grid("grdDate");
					grid_3.style.addClass(msGrdCls);
					grid_3.init({
						"dataSet": app.lookup("dsDate"),
						"columns": [{"width": "10px"}],
						"detail": {
							"rows": [{"height": "" + mnRowHeight+ "px"}],
							"cells": [{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "label";
								}
							}]
						}
					});
					vcGroup.addChild(grid_3, {
						rowIndex : 0,
						colIndex : 2
					});
					
					var vcCancelBtn = new cpr.controls.Button("btnCancel");
					vcCancelBtn.value = msLangCancel;
					vcCancelBtn.style.addClass(msCancleBtnCls);
					if(typeof onBtnCancelClick == "function"){
						vcCancelBtn.addEventListener("click", onBtnCancelClick);
					}
					container.addChild(vcCancelBtn, {
						rowIndex : 1,
						colIndex : 0
					});
					
					var vcConfirmBtn = new cpr.controls.Button("btnConfirm");
					vcConfirmBtn.value = msLangConfirm;
					vcConfirmBtn.style.addClass(msConfirmBtnCls);
					if(typeof onBtnConfirmClick == "function"){
						vcConfirmBtn.addEventListener("click", onBtnConfirmClick);
					}
					container.addChild(vcConfirmBtn, {
						rowIndex : 1,
						colIndex : 1
					});
					
					if(typeof onBodyLoad == "function"){
						app.addEventListener("load", onBodyLoad);
					}
				}
			});
			newApp.title = vsAppId;
			cpr.core.Platform.INSTANCE.register(newApp);
			
			return newApp;
		}
		
		/**
		 * TYPE1 - 캘린더형태
		 * 다이얼로그로 띄우기 위한 앱을 생성합니다.
		 * @param {cpr.controls.DateInput} pcDateInput
		 */
		function _createBasicApp (pcDateInput) {
			
			var vsAppId = "Mobile_Calendar_$" + (Math.floor(Math.random()*100)+1);
			var newApp = new cpr.core.App(vsAppId, {
				onPrepare: function(loader){
				},
				onCreate: function(/* cpr.core.AppInstance */ app, exports){
					var linker = {};
					// Start - User Script
					var voAppConf = cpr.core.AppConfig.INSTANCE;
					var voI18Conf = voAppConf.getEnvConfig();
					voI18Conf.setValue("useCustomScrollbar", mbCustomScroll);
					
					function onBodyLoad (/* cpr.events.CEvent */ e) {
						/** @type cpr.controls.Calendar */
						var vcCalendar = app.lookup("cal1");
						
						// 캘린더 기본 속성 설정
						vcCalendar.defaultDate = pcDateInput.defaultDate;
						vcCalendar.locale = pcDateInput.locale;
						vcCalendar.enabledDateExp = pcDateInput.enabledDateExp;
						vcCalendar.minDate = pcDateInput.minDate;
						vcCalendar.maxDate = pcDateInput.maxDate;
						
						// initValue 설정
						var initValue = app.getHostProperty("initValue");
						if(initValue) vcCalendar.value = initValue;
						
						var dialog = app.getHost();
						if (dialog && dialog instanceof cpr.controls.Dialog) {
							// dialog Height 설정
							var vnHeight = innerHeight * 0.8;
							dialog.style.animateTo({
								"transform": "translateY(-" + maProp.bottom + "px)",
								"max-height": vnHeight + "px",
							}, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
							
							cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function() {
								
								// 다이얼로그 animateTo 가 완료되었을 때 constraint 변경
								var dialogManager = dialog.getAppInstance().dialogManager;
								var oldConstraint = dialogManager.getConstraintByName(msDialogNm);
								var newConstraint = oldConstraint;
								newConstraint.height = vnHeight;
								dialogManager.replaceConstraintByName(msDialogNm, newConstraint);
							})
						}
					}
					
					function onCalendarValueChange (/* cpr.events.CSelectionEvent */ e) {
						
						/** @type cpr.controls.Calendar */
						var calendar = e.control;
						
						// 달력 선택 시 선택날짜 headerTitle 로 설정
						var dialog = app.getHost();
						if (dialog && dialog instanceof cpr.controls.Dialog) {
							if(mbDateTitle) {
								var vaDayNames = ["일", "월", "화",  "수", "목", "금", "토"];
								dialog.headerTitle = cpr.utils.Util.template("${year}년 ${month}월 ${date}일 (${day})", {
									year : moment(calendar.value).format("YYYY"),
									month : moment(calendar.value).format("MM"),
									date : moment(calendar.value).format("DD"),
									day : vaDayNames[moment(calendar.value).days()]
								})
							}
						}
					}
					
					function onBtnCancelClick (/* cpr.events.CMouseEvent */ e) {
						app.close();
					}
					
					function onBtnConfirmClick ( /* cpr.events.CMouseEvent */ e) {
						/** @type cpr.controls.Calendar */
						var vcCalendar = app.lookup("cal1");
						app.close(vcCalendar.value);
					}
					
					// End - User Script
					
					// Header
					
					app.supportMedia("all and (min-width: 1024px)", "default");
					app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
					app.supportMedia("all and (max-width: 499px)", "mobile");
					
					// Configure root container
					var container = app.getContainer();
					container.style.addClass(msRootCtnCls);
					container.style.css({
						"width" : "100%",
						"top" : "0px",
						"height" : "100%",
						"left" : "0px"
					});
					
					var vaRows = (function(pnHeight){
						var rows = [];
						rows.push("1fr");
						rows.push(pnHeight + "px");
						return rows;
					})(mnBtnHeight)
					
					// Layout
					var formlayout_1 = new cpr.controls.layouts.FormLayout();
					formlayout_1.setRows(vaRows);
					formlayout_1.setColumns(["1fr", "1fr"]);
					formlayout_1.horizontalSpacing = "0px";
					formlayout_1.verticalSpacing = "0px";
					formlayout_1.verticalSeparatorWidth = 1;
					container.setLayout(formlayout_1);
					
					// UI Configuration
					var calendar_1 = new cpr.controls.Calendar("cal1");
					calendar_1.footerVisible = false;
					calendar_1.style.addClass(msCalendarCls);
					if(typeof onCalendarValueChange == "function"){
						calendar_1.addEventListener("value-change", onCalendarValueChange); //  변경
					}
					container.addChild(calendar_1, {
						rowIndex : 0,
						colIndex : 0,
						colSpan : 2
					});
					
					var vcCancelBtn = new cpr.controls.Button("btnCancel");
					vcCancelBtn.value = msLangCancel;
					vcCancelBtn.style.addClass(msCancleBtnCls);
					if(typeof onBtnCancelClick == "function"){
						vcCancelBtn.addEventListener("click", onBtnCancelClick);
					}
					container.addChild(vcCancelBtn, {
						rowIndex : 1,
						colIndex : 0
					});
					
					var vcConfirmBtn = new cpr.controls.Button("btnConfirm");
					vcConfirmBtn.value = msLangConfirm;
					vcConfirmBtn.style.addClass(msConfirmBtnCls);
					if(typeof onBtnConfirmClick == "function"){
						vcConfirmBtn.addEventListener("click", onBtnConfirmClick);
					}
					container.addChild(vcConfirmBtn, {
						rowIndex : 1,
						colIndex : 1
					});
					
					if(typeof onBodyLoad == "function"){
						app.addEventListener("load", onBodyLoad);
					}
				}
			});
			newApp.title = vsAppId;
			cpr.core.Platform.INSTANCE.register(newApp);
			
			return newApp;
		}
		
		/**
		 * 다이얼로그를 띄웁니다.
		 * @param {cpr.core.AppInstance} poAppIns
		 * @param {cpr.core.App} poDialogApp
		 * @param {cpr.controls.DateInput} pcDateInput
		 */
		function _openDialog (poAppIns, poDialogApp, pcDateInput) {
			
			if(!(poAppIns instanceof cpr.core.AppInstance)) return;
			if(!(poDialogApp instanceof cpr.core.App)) return;
			
			var vsHeaderTitle = pcDateInput.fieldLabel;
			var vcTargetCtrl = poAppIns.lookup(vsHeaderTitle);
			if(vcTargetCtrl) {
				vsHeaderTitle = vcTargetCtrl.value;
			}
			
			poAppIns.getRootAppInstance().dialogManager.openDialog(poDialogApp, msDialogNm, maProp, function(dialog) {
				
				dialog.headerTitle = vsHeaderTitle || "Selected Date";
				dialog.resizable = false;
				dialog.headerMovable = false;
				dialog.headerClose = false;
				
				var date = pcDateInput.dateValue || pcDateInput.defaultDate;
				dialog.initValue = moment(date).format("YYYYMMDD");
				
				// 다이얼로그 스타일
				dialog.style.addClass(msDialogCls);
				dialog.style.overlay.addClass(msDialogOverlayCls);
				dialog.style.css("min-height", "0px");
				
				dialog.addEventListener("init", function(e){
					dialog.getEmbeddedAppInstance().getContainer().getLayout().scrollable = false;
				});
				
				dialog.addEventListener("transitionend", function(e){
					dialog.getEmbeddedAppInstance().getContainer().getLayout().scrollable = true;
					dialog.redraw();
				});
				
				dialog.addEventListener("overlay-click", function(e){
					dialog.close();
				});
				
				dialog.addEventListener("close", function(e){
					var returnValue = dialog.returnValue;
					if(returnValue) {
						pcDateInput.putValue(returnValue);
					}
					
					// locale 원복
					cpr.I18N.INSTANCE.currentLanguage = msLocale;
					
					// 앱 unregister
					cpr.core.Platform.INSTANCE.unregister(poDialogApp);
				});
			})
		}
	});
})();
/// end - module/mobileCalendar
/// start - module/PopupManager
/*
 * Module URI: module/PopupManager
 * SRC: module/PopupManager.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/PopupManager", function(exports, globals, module){
		/************************************************
		 * PopupManager.module.js
		 * Created at 2018. 12. 18. 오후 2:30:51.
		 *
		 * @author tomato
		 ************************************************/
		var Position = {
			left: "left",
			top: "top",
			bottom: "bottom",
			right: "right"
		};
		var _baseCtrl = null;
		var _popupCtrl = null;
		var _buffer = 3;
		
		exports.tooltipPopup = function(/*cpr.controls.UIControl*/baseCtrl,/*cpr.controls.UIControl*/popupCtrl, options) {
			if(baseCtrl ==null|| popupCtrl == null){
				return;
			}
			var tp = options? options.position: "top";
		
			var baseCtrlRect = baseCtrl.getActualRect();
		
			var left = baseCtrlRect.left;
			
			var docHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
			var docWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
			
			var rootApp = baseCtrl.getAppInstance().getRootAppInstance();
			//스크롤이 이동한 크기
			var scrollRect = rootApp.getContainer().getViewPortRect();
		
			if (tp == "bottom") {
				//스크롤 위치의 값을 계산 20181214
				var top = baseCtrlRect.bottom + scrollRect.top + _buffer;
				popupCtrl.style.css({
					position: "absolute",
					overflow: "auto",
					left: -left + "px",
					top: top + "px"
				});
			}else if(tp == "left"){
				var top = baseCtrlRect.top;
				var right = (docWidth- baseCtrlRect.left) - scrollRect.left;
				popupCtrl.style.css({
					position: "absolute",
					overflow: "auto",
					right: right + "px",
					top: top + "px"
				});
			} else if(tp =="right"){
				var top = baseCtrlRect.top;
				var left = baseCtrlRect.right;
				popupCtrl.style.css({
					position: "absolute",
					overflow: "auto",
					left: left+ "px",
					top: top + "px"
				});
			} else {
				//스크롤 위치의 값을  계산 20181214
				var bottom = ((docHeight -baseCtrlRect.top) - scrollRect.top) + _buffer;
				popupCtrl.style.css({
					position: "absolute",
					overflow: "auto",
					left: -left + "px",
					bottom: bottom + "px"
		
				});
			}
			if(options && options.width){
				popupCtrl.style.css("width",options.width+"px");
			}
			if(options && options.height){
				popupCtrl.style.css("height",options.height+"px");
			}
			popupCtrl.style.css("visibility", "hidden"); //처음 생성시 DOM을 보이지 않게하고 위치에 따른 크기를 계산.
		
			cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function() {
				if (!_popupCtrl) {
					return;
				}
				if (checkOverflowRight(_popupCtrl)) {
					var left = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
					var baseCtrlRect = _baseCtrl.getActualRect();
					var posX = left - (Math.abs(baseCtrlRect.left) + baseCtrlRect.width);
					_popupCtrl.style.removeStyle("left");
					_popupCtrl.style.css({
						right: posX + "px"
					});
				} else if(checkOverflowLeft(_popupCtrl)&& (tp=="left"||tp=="right")){
					var baseCtrlRect = _baseCtrl.getActualRect();
					var posX = baseCtrlRect.left + baseCtrlRect.width;
					_popupCtrl.style.removeStyle("right");
					_popupCtrl.style.css({
						left: posX + "px"
					});
				}else {
					var left = parseInt(_popupCtrl.style.css("left"));
					_popupCtrl.style.css("left", Math.abs(left) + "px");
				}
				_popupCtrl.style.removeStyle("visibility");
				
				_baseCtrl = null;
				_popupCtrl= null;
				
			});
			_baseCtrl = baseCtrl;
			_popupCtrl = popupCtrl;
			rootApp.getContainer().floatControl(popupCtrl);
		}
		
		/**
		 * 오른쪽으로 넘어가는지 확인합니다.
		 * @param ctrl
		 */
		function checkOverflowRight(/*cpr.controls.UIControl*/ctrl){
			var left = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
			var rect = ctrl.getActualRect();
			
			var isOverflow = Math.abs(rect.left) + rect.width >left;
			return isOverflow;
		}
		
		/**
		 * 왼쪽으로 넘어가는지 확인합니다.
		 * @param ctrl
		 */
		function checkOverflowLeft(/*cpr.controls.UIControl*/ctrl){
			
			if(ctrl.getActualRect().left<0){
				return true;
			}
			return false;
			
			
		}
	});
})();
/// end - module/PopupManager
/// start - module/portletDragManager
/*
 * Module URI: module/portletDragManager
 * SRC: module/portletDragManager.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/portletDragManager", function(exports, globals, module){
		/************************************************
		 * hansCustom.module.js
		 * Created at 2020. 2. 19. 오전 10:25:50.
		 * 
		 * Version 1.2
		 * Updated Date : 2021-07-06
		 * 
		 * @author HANS
		 ************************************************/
		
		/*
		 * 본 모듈은 폼 레이아웃 내에서 사용자가 구획을 드래그 앤 드랍하여 포틀릿의 특성을 구현하기 위해서 만들어진 공통 모듈입니다.
		 * 포틀릿을 구현한 뒤 개인화를 위해 쿠키에 저장하여 관리할 수 있습니다.
		 * 
		 * [사용법]
		 * 로드되는 모든 화면에 대해서 이벤트 캐치를 하지 않습니다.
		 * 따라서 각 화면의 BodyLoad시점에서 글로벌 함수 출판된 createDragManager를 사용하고 사용자속성을 정의합니다.
		 * 개인화를 하기위해서는 글로벌 함수로 출판된 portletIndividual을 사용합니다. 
		 * 개인화와 관련된 함수는 글로벌 함수인 portletIndividual의 하위에 속해있습니다.
		 * 
		 * 1. 포틀릿을 적용할 그룹(폼레이아웃일때만 가능)을 선택한 뒤, 선택한 그룹의 사용자 속성으로 portlet 을 정의하고 값은 Y로 지정합니다.
		 * 2. 해당 포틀릿이 한 화면에서 하나의 폼 레이아웃에서만 사용하는게 아닐 경우가 있을 수 있기 때문에, dataType이라는 사용자 속성을 사용하여 드래그소스,
		 * 	   드랍타겟에 대한 범위를 제한할 수 있습니다. (단, dataType속성에 대한 값은 unique해야 합니다.)
		 * 3. 화면이 로딩되었을 때, onBodyLoad이벤트리스너에서 출판된 메서드 createDragManager를 호출합니다.
		 * 4. 드래그앤드랍을 빈공간에 할 경우, 타겟컨트롤이 없는경우에는 드랍이 불가능합니다.
		 *     따라서 해당 구획에는 빈 그룹을 배치해야 가능합니다.
		 * 
		 * [사용가능한 메서드]
		 * 1. createDragManager : 드래그앤드롭을 시작합니다.
		 * 2. removeDragManager : 드래그앤드롭 객체를 삭제합니다.
		 * 3. setDragManagerStop : 전체 포틀릿 적용을 해제합니다.
		 * 4. setResizePortlet : 포틀릿을 확대/축소합니다. (마우스가 눌린 시점부터 발생하기 때문에 mouseDown 이벤트리스너에서 호출하여 사용합니다.)
		 * 5. setCookie : 쿠키를 생성합니다.
		 * 6. getCookie : 쿠키를 반환합니다. 반환되는 쿠키는 포틀릿의 constraint 형식으로 반환됩니다.
		 * 7. deketeCookie : 쿠키를 삭제합니다.
		 */
		
		
		/************************************************
		 * 사용자 설정가능 멤버변수
		 ************************************************/
		/**
		 * 포틀릿 적용 여부
		 * @type {Boolean}
		 */
		var mbDraggable = true;
		
		/**
		 *  소스컨트롤 확대 및 축소 여부
		 * @type {Boolean}
		 */
		var mbResize = false;
		
		/**
		 * 포틀릿 위치 고정
		 * 컨트롤의 우측 상단에서만 포틀릿이 가능합니다.
		 * @type {Boolean}
		 */
		var mbPosFix = true;
		
		/**
		 * 중복컨트롤에 대해 포틀릿 이동 및 확대/축소 적용여부
		 * true 일 경우에 컨트롤 중복을 피합니다.
		 * @type {Boolean}
		 */
		var mbPermitDupl = true; 
		
		/**
		 * 드래그 시 row증가 여부
		 * @type {Boolean}
		 */
		var mbIncreaseRow = false;
		
		/**
		 * 드래그앤드롭 시, 소스컨트롤 크기유지 여부 
		 * @type {Boolean}
		 */
		var mbDropOrginSize = true; 
		
		/**
		 * 타겟 컨트롤 스타일
		 */
		var maTargetStyle = {
			"box-shadow" : "0 3px 12px 1px rgba(44,55,130,0.15)",
		}
		
		/**
		 * 사용자 속성 (portlet)
		 * 포틀릿 사용 여부
		 * @type {String}
		 */
		var ATTR_USE_PORTLET = "portlet"; 
		
		/**
		 * 사용자 속성 (dataType) 
		 * 포틀릿 영역 지정 시 사용
		 * @type {String}
		 */
		var ATTR_DATA_TYPE = "dataType";
		
		/**
		 * 피드백(드래그 시 플로팅 되는 컨트롤) 인라인 스타일
		 */
		var maFeedbackStyle = {
			"opacity" : "0.8",
			"border": "solid 1px red",
			"text-align" : "center",
			"color" : "black",
			"border-radius": "10px",
			"background": "white",
			"box-shadow": "0px 2px 10px #ddd",
			"transition" : "all 0s ease-in-out",
			"cursor": "se-resize"
		};
		
		/**
		 * 피드백(드래그 시 플로팅 되는 컨트롤) 스타일 클래스
		 * @type {String}
		 */
		var msFeedbackCls = "feedback";
		
		/**
		 * mbPosFix 가 true 일 때 
		 * portlet 이 가능한 영역 사이즈 (컨트롤 우측 위)
		 * @type {Number}
		 */
		var mnFixArrange = 30;
		
		/**
		 * mbPosFix 가 true 일 때
		 * portlet이 가능한 영역을 보이기 위한 스타일 클래스
		 * @type {String}
		 */
		var msFixCls = "ctrl-span";
		
		/************************************************
		 * 내부 시스템 멤버변수 (변경X)
		 ************************************************/
		/**
		 * 드래그 할 때 플로팅되는 컨트롤
		 * @type {cpr.controls.Output}
		 */
		var mcFeedback;
		
		/**
		 * 드래그 소스 배열
		 * @type {cpr.controls.DragSource[]}
		 */
		var maDragSource = []; 
		
		/**
		 * 드롭타겟 배열
		 * @type {cpr.controls.DropTarget[]}
		 */
		var maDropTarget =[]; 
		
		/**
		 * 드래그의 이동량
		 * @type {cpr.geometry.Dimension}
		 */
		var maDragDelta = null;
		
		
		/************************************************
		 * API
		 ************************************************/
		/**
		 * 드래그 시작하는 메서드
		 * @param {cpr.core.AppInstance} app 앱인스턴스
		 * @param {Boolean} pbPermitDupl? 드래그앤드롭 시 아이템간 중복 시 드롭여부(true:중복된 아이템과 위치 스위칭, false : 드롭방지), default true
		 * @param {Boolean} pbIncRow? 드래그 시 마지막 행 기준 한 행 추가여부(true/false), default false
		 * @param {Boolean} pbDrpOrgSz? 드래그앤드롭 시 소스컨트롤 크기유지 여부(true/false) default true
		 */
		function createDragManager(app, pbPermitDupl, pbIncRow, pbDrpOrgSz){
			
			/* 드래그앤드롭시 중복허용 */
			if(pbPermitDupl != null) {
				mbPermitDupl = pbPermitDupl;
			}
			
			/*. 드래그 시 한 행씩 추가 */
			if(pbIncRow != null) {
				mbIncreaseRow = pbIncRow;
			}
			
			/* 드래그앤드롭시 소스컨트롤 크기유지 */
			if(pbDrpOrgSz != null) {
				mbDropOrginSize = pbDrpOrgSz;
			}
			
			var voApp = app;
			var voContainer = voApp.getContainer();
			
			var vaRecursiveCtrls = voContainer.getAllRecursiveChildren();
			var vaDraggableContainers = vaRecursiveCtrls.filter(function(each){
				if (each.userAttr(ATTR_USE_PORTLET)== "Y") {
					return each;
				}
			});
		
			vaDraggableContainers.forEach(function(/** cpr.controls.Container*/each){
					var vsDataType = each.userAttr(ATTR_DATA_TYPE);
					each.getChildren().forEach(function(eachs){
						if(eachs.userAttr("isAlready") == "") {
							eachs.userAttr("isAlready","Y");
							_createDragSource(voApp, eachs, vsDataType);
						}
				});
				_createDropTarget(each, vsDataType);
			});
		
		}
		
		/**
		 * 특정 그룹의 드래그앤드롭 속성을 삭제합니다.
		 * @param {cpr.controls.Container} pcContainer
		 */
		function removeDragManager(pcContainer) {
		
			if(pcContainer) {
				var vaRecursiveCtrls = pcContainer.getChildren();
				vaRecursiveCtrls.forEach(function(each){
					each.removeUserAttr("isAlready");
				});
				
				var vsDataType = pcContainer.userAttr(ATTR_DATA_TYPE);
				maDragSource.forEach(function(each,idx){
					if(each.dataType == vsDataType) {
						maDragSource[idx].dispose();
					}
				});
				
				maDropTarget.forEach(function(each, idx){
					var vcCtrl = each.control;
					if(vcCtrl && vcCtrl.userAttr(ATTR_DATA_TYPE) == vsDataType) {
						maDropTarget[idx].dispose();
					}
				});
			}
		
		}
		
		/**
		 * 전체화면의 포틀릿 적용 여부를 저장합니다.
		 * @param {Boolean} pbDrag
		 */
		function setDragManagerStop(pbDrag){
			mbDraggable = pbDrag;
		}
		
		/**
		 * 포틀릿 특성이 적용되어 있을 때, 선택한 컨트롤의 확대/축소 여부를 저장합니다.
		 * @param {Boolean} pbResize
		 */
		function setResizePortlet(pbResize) {
			mbResize = pbResize;
		}
		
		/**
		 * 포틀릿을 드래그 앤 드롭할 위치를 고정합니다.
		 * @param {Boolean} pbFix
		 */
		function setPotletPosFix (pbFix) {
			mbPosFix = pbFix;
			
			if(mbPosFix) {
				// 드래그 가능한 영역 생성
				if(maDragSource.length > 0) {
					maDragSource.forEach(function(each){
						var control = each.control
						if(control) control.style.addClass(msFixCls);
					});
				}
			} else {
				// 드래그 영역 삭제
				if(maDragSource.length > 0) {
					maDragSource.forEach(function(each){
						var control = each.control
						if(control) control.style.removeClass(msFixCls);
					});
				}
			}
		}
		
		
		/************************************************
		 * 내부 함수
		 ************************************************/
		/**
		 * 드래그소스를 만들어주는 함수
		 * @param {cpr.core.AppInstance} app
		 * @param {cpr.controls.UIControl} pcDragCtrl
		 * @param {String} psDataType
		 */
		function _createDragSource(app, pcDragCtrl, psDataType) {
			
			var voRootApp = app.getRootAppInstance();
			var vnIncreateIndex = true;
			
			var dragSource = new cpr.controls.DragSource(pcDragCtrl, {
				options: {
					dataType: psDataType,
					threadhold: 10, // 10px만큼 이동해야 드래그시작으로 인식
				},
				
				onBeforeDragStart: function(context){
					if(mbPosFix && !mbResize) {
						var voActualRect = context.source.control.getActualRect();
						var voStartLoc = context.dragStartLocation;
						// 앱헤더 영역만 드래그 가능하도록 수정 (2021.10.06 추가)
						if(voStartLoc.y >= (voActualRect.top + mnFixArrange)) {
		//				if(voStartLoc.x <= (voActualRect.right - mnFixArrange) || voStartLoc.y >= (voActualRect.top + mnFixArrange)) {
							context.cancel();
						}
					}	
				},
				
				onDragStart: function(context) {
					
					if (mbDraggable) {
						if(context.source.control.type == "container" && context.source.control.getChildrenCount() == 0) {
							context.cancel();
						} else {
							var actualRect = pcDragCtrl.getActualRect();
							pcDragCtrl.style.css("opacity", " 0.5");
			
							if (mbResize == true) {
								// Span
								context.cursor = "se-resize";
								mcFeedback = _createDragSourceFeedback(actualRect, pcDragCtrl.getParent());
								voRootApp.floatControl(mcFeedback, actualRect);
							} else {
								// Drag
								context.cursor = "grabbing";
								mcFeedback = _createDragSourceFeedback(actualRect, pcDragCtrl.getParent());
								var newActualRect = actualRect.getTranslated(context.dragDelta);
								voRootApp.floatControl(mcFeedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(newActualRect));
							}
						}
		
					} else {
						context.cancel();
					}
				},
				onDragMove: function(context) {
					
					var actualRect = context.source.control.getActualRect();
		
					if (mbResize == true) {
						// Span
						context.cursor = "se-resize";
						maDragDelta = context.dragDelta;
		
						var voFloatConstraint = _getDragDirection(actualRect, pcDragCtrl);
						voRootApp.floatControl(mcFeedback, voFloatConstraint);
					} else {
						// Drag
						context.cursor = "grabbing";
						var newRect = actualRect.getTranslated(context.dragDelta);
						voRootApp.floatControl(mcFeedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(newRect));
						
						if(mbIncreaseRow== true) {
							var vcParent = pcDragCtrl.getParent();
							var voLayout = vcParent.getLayout();
							var voRow = voLayout.getRows();
							var voColumn = voLayout.getColumns();
						
							if(context.target == null) {
								var vnChildCount = vcParent.getChildrenCount();
								var voLastChildRect = voLayout.getChildrenByLayoutOrder()[vnChildCount-1].getActualRect();
								var voFeedbackRect= mcFeedback.getActualRect();
								
								/* 아래로 드래그시 새로운 행 추가 */
								if(voFeedbackRect.bottom > voLastChildRect.bottom && context.dragDelta.height > 0) {
									if(vnIncreateIndex == true) {
										voRow.push("1fr");
										voLayout.setRows(voRow);
										vcParent.setLayout(voLayout);
										
										vnIncreateIndex = false;
									}
								}
								createDragManager(app, mbPermitDupl);
							}
						}
					}
				},
				onDragEnd: function(context) {
					
					if (mbResize == true && context.target) { // Span
						_setFormSpan(pcDragCtrl);
					}
					
					// 마지막 row에 아무런 아이템이 없을경우 삭제
					if(mbIncreaseRow) {
						_removeBlankRow(pcDragCtrl);
					}
		
					context.cursor = "";
					mcFeedback.dispose();
					mcFeedback = null;
					pcDragCtrl.style.removeStyle("opacity");
					
					mbResize = false;
					vnIncreateIndex = true;
				}
			});
		
			maDragSource.push(dragSource);
		}
		
		
		/**
		 * 드래그소스의 부모객체를받아와서 부모객체에 드랍타겟을 만들어주는 함수
		 * @param {cpr.controls.Container} pcCtrlDrop
		 * @param {String} psDataType
		 */
		function _createDropTarget(pcCtrlDrop, psDataType) {
		
			var vcContainer = pcCtrlDrop;
			var voParentLayout = vcContainer.getLayout();
			
			var vcDropFeedback = null;
			function getDropFeedback () {
				if(vcDropFeedback == null) {
					vcDropFeedback = new cpr.controls.Output();
					vcDropFeedback.style.css("box-shadow", maTargetStyle["box-shadow"]);
				}
				return vcDropFeedback;
			}
			
			function hideDropFeedback () {
				if (vcDropFeedback) {
					vcDropFeedback.dispose();
					vcDropFeedback = null;
				}
			}
			
			/* 드래그 시 컨트롤의 rowIndex 위치 */
			var vnDragRowIndex = null;
			
			/* 드래그 시 컨트롤의 colIndex 위치 */
			var vnDragColIndex = null;
			
			var dropTarget = new cpr.controls.DropTarget(vcContainer, {
				isImportant: function(source) {
					return source.dataType == psDataType;
				},
				onDragMove: function(context) {
					var reference = voParentLayout.getInsertionReference(context.pointerLocation);
		
					var voSourceCtrlRect = vcContainer.getConstraint(context.source.control);
					reference.rowSpan = voSourceCtrlRect.rowSpan ?  voSourceCtrlRect.rowSpan : 1;
					reference.colSpan = voSourceCtrlRect.colSpan ?  voSourceCtrlRect.colSpan : 1;
					
					if(vnDragRowIndex == null) {
						vnDragRowIndex = reference.rowIndex - voSourceCtrlRect.rowIndex;
					}
					if(vnDragColIndex == null) {
						vnDragColIndex = reference.colIndex - voSourceCtrlRect.colIndex;
					}
					reference.rowIndex -= vnDragRowIndex;
					reference.colIndex -= vnDragColIndex;
					
					if (mbResize == false && reference) {
						vcContainer.addChild(getDropFeedback(), reference);
					} else {
						hideDropFeedback();
					}
				},
				onDragLeave: function(context) {
					hideDropFeedback();
				},
				onDrop: function(context) {
					
					if (mbResize == false) { 
						
						// 타겟 스타일 변경
						hideDropFeedback();
						
						// Drag 일 경우에만 변경되 위치로 드롭
						var voSourceCtrlRect = vcContainer.getConstraint(context.source.control);
						var insertionReference = voParentLayout.getInsertionReference(context.pointerLocation);
						insertionReference.rowSpan = voSourceCtrlRect.rowSpan ?  voSourceCtrlRect.rowSpan : 1;
						insertionReference.colSpan = voSourceCtrlRect.colSpan ?  voSourceCtrlRect.colSpan : 1;
					
						//2020-06-15 추가
						insertionReference.rowIndex -= vnDragRowIndex;
						insertionReference.colIndex -= vnDragColIndex;
					
						var vcTargetCtrl = voParentLayout.findControls(insertionReference).filter(function(each) {
							// 자기자신은 타겟에서 제외
							return each != context.source.control;
						})
						var voTargetCtrlRect = vcTargetCtrl.length > 0 ? vcContainer.getConstraint(vcTargetCtrl[0]) : insertionReference;
						
						voSourceCtrlRect.rowSpan = voSourceCtrlRect.rowSpan? voSourceCtrlRect.rowSpan : 1;
						voSourceCtrlRect.colSpan = voSourceCtrlRect.colSpan? voSourceCtrlRect.colSpan : 1;
						voTargetCtrlRect.rowSpan = voTargetCtrlRect.rowSpan? voTargetCtrlRect.rowSpan : 1;
						voTargetCtrlRect.colSpan = voTargetCtrlRect.colSpan? voTargetCtrlRect.colSpan : 1;
						
						if(mbPermitDupl == true) {
							
							/* 중복허용 - 위치 스위칭 */
							if(mbDropOrginSize == true) {
								// 소스 크기만큼 이동
								
								// TODO 영역이동 시, 겹치는 아이템의 위치를 이동하십시오.
								
								// 소스컨트롤을 이동한 위치가 이동영역 안 일경우에만 constraint 변경
								if( insertionReference.rowIndex + insertionReference.rowSpan  <= voParentLayout.getRows().length && 
									insertionReference.colIndex + insertionReference.colSpan  <= voParentLayout.getColumns().length) {
									
									// 넓힌 영역에 겹치는 아이템 유무 확인(소스컨트롤 제외)
									var targetConst = {
										rowIndex : voTargetCtrlRect.rowIndex,
										colIndex : voTargetCtrlRect.colIndex,
										rowSpan : voSourceCtrlRect.rowSpan,
										colSpan : voSourceCtrlRect.colSpan
									}
									
									var voDuplCtrl = vcTargetCtrl.filter(function(each){
										if(each != context.source.control &&
											 (voSourceCtrlRect.rowSpan != voTargetCtrlRect.rowSpan ||  voSourceCtrlRect.colSpan != voTargetCtrlRect.colSpan)) { // 크기가 다를경우엔 드래그앤드롭방지
											if(each.type == "container" && each.getChildrenCount() == 0) {
												return;
											}
											return each;
										}
									});
									
									if(voDuplCtrl.length == 0) {
										if(vcTargetCtrl.length > 0) {
											// source 위치 이동
											vcContainer.updateConstraint(context.source.control, targetConst);
			
											// target 위치 이동
											vcContainer.updateConstraint(vcTargetCtrl[0],{
												rowIndex : voSourceCtrlRect.rowIndex,
												colIndex : voSourceCtrlRect.colIndex,
												rowSpan : voTargetCtrlRect.rowSpan,
												colSpan : voTargetCtrlRect.colSpan
											});
										} else {
											vcContainer.updateConstraint(context.source.control, targetConst);
										}
										
									} else {	
										alert("컨트롤 간 크기가 다르면 이동이 불가능합니다.")
									}
								}
								
							} else {
								// 타겟 크기만큼 이동
								vcContainer.updateConstraint(context.source.control,_checkConstraint(voTargetCtrlRect));
								vcContainer.updateConstraint(vcTargetCtrl[0],_checkConstraint(voSourceCtrlRect));
							}
						} else {
							
							/* 중복미허용 - 드롭방지 */
							if(vcTargetCtrl.length == 0) {
								var voUpdateConstraint = {
									rowIndex : voTargetCtrlRect.rowIndex,
									colIndex : voTargetCtrlRect.colIndex,
									rowSpan : voSourceCtrlRect.rowSpan? voSourceCtrlRect.rowSpan : 1,
									colSpan : voSourceCtrlRect.colSpan? voSourceCtrlRect.colSpan : 1
								};
								
								// 넓힌 영역에 겹치는 아이템 유무 확인(소스컨트롤 제외)
								var voDuplCtrl = vcContainer.getLayout().findControls(voUpdateConstraint).filter(function(each){
									if(each.type != "container" && each != context.source.control) {
										return each;
									}
								});
								
								if(voDuplCtrl.length == 0 && 
									voUpdateConstraint.rowIndex + voSourceCtrlRect.rowSpan  <= vcContainer.getLayout().getRows().length &&  
									voUpdateConstraint.colIndex + voSourceCtrlRect.colSpan  <= vcContainer.getLayout().getColumns().length) {
										// 드롭간능 영역 중, 중복되는 아이템이 없을 경우에만 드롭
										vcContainer.updateConstraint(context.source.control, voUpdateConstraint); 
										vcContainer.updateConstraint(vcTargetCtrl[0], _checkConstraint(voSourceCtrlRect)); 
								}
							} else {
								alert("컨트롤 간 위치변경이 불가능 합니다.");
							}
						}
					}
					
					vnDragRowIndex = null;
					vnDragColIndex = null;
				}
			});
			
			maDropTarget.push(dropTarget);
		}
		
		
		/**
		 * 이동하고자하는 영역을 잡고 마우스를 드래그할 때 구획에 대한 피드백을 제공하는 함수입니다.
		 * @param {cpr.geometry.Rectangle} voRect
		 * @param {cpr.controls.Container} pcParent
		 * @returns {cpr.controls.UIControl} feedbacks
		 */
		function _createDragSourceFeedback(voRect, pcParent){
			
			var voParentRect = pcParent.getActualRect();
			var voRow = pcParent.getLayout().getRows();
			var vnColLen = pcParent.getLayout().getColumns().length;
			
			var feedback = new cpr.controls.Output("feedback");
			feedback.style.css(maFeedbackStyle);
			
			// TODO 플로팅 되는 스타일을 클래스로 지정하기 위해서 아래의 코드를 사용하십시오.
			feedback.style.addClass(msFeedbackCls);
		
			return feedback;
		}
		
		
		/**
		 * 전달받은 Constraint에서 rowSpan과 colSpan에 기본값을 넣어주기 위한 함수입니다.
		 * @param {cpr.controls.layouts.FormConstraint} poConstraint
		 * @returns {cpr.controls.layouts.FormConstraint} constraint
		 */
		function _checkConstraint(poConstraint){
			
			var constraint = {
				"rowIndex" : poConstraint.rowIndex,
				"colIndex" : poConstraint.colIndex,
				"rowSpan" : poConstraint.rowSpan ? poConstraint.rowSpan : 1,
				"colSpan" : poConstraint.colSpan ? poConstraint.colSpan : 1
			}
		
			return constraint;
		}
		
		
		/**
		 * 이동이 끝났을 때 마지막 행이 모두 비어있을 경우 삭제합니다.
		 * @param {cpr.controls.UIControl} pcDragCtrl
		 */
		function _removeBlankRow (pcDragCtrl) {
			
			/** @type cpr.controls.layouts.FormLayout */
			var voLayout = pcDragCtrl.getParent().getLayout();
			var voRows = voLayout.getRows();
			var voColumns = voLayout.getColumns();
		
			var vaPortletCtrl = pcDragCtrl.getParent().getChildren().filter(function(each) {
			    if (!(each.type == "container" && each.getChildrenCount() == 0)) {
			        return each;
			    }
			});
			
			var voFindCtrls = [];
			for(var i = 0; i < voColumns.length; i++){
				var vcCtrl = voLayout.findControls({
					rowIndex : voRows.length-1,
					colIndex : i
				});
				if(vcCtrl.length == 1) {
					if(vcCtrl[0].type == "container" && vcCtrl[0].getChildrenCount() == 0) {
						voFindCtrls.push(vcCtrl);
					}
				}
			}
		
			if(voFindCtrls.length == voColumns.length) {
				voRows.splice(voRows.length-1, 1);
				voFindCtrls.forEach(function(each){
					pcDragCtrl.getParent().removeChild(each[0], true);
				});
			}
			
			/* 변경된 레이아웃 설정*/
			voLayout.setRows(voRows);
			pcDragCtrl.getParent().setLayout(voLayout);
		}
		
		
		/**
		 * 드래그 플로팅 constraint
		 * @param {cpr.geometry.Rectangle} poSourceRect
		 * @param {cpr.controls.UIControl} pcDragCtrl
		 * @return {cpr.controls.layouts.Constraint} constraint
		 */
		function _getDragDirection (poSourceRect, pcDragCtrl) {
			
			var vcParent = pcDragCtrl.getParent();
			var voConstraint = vcParent.getConstraint(pcDragCtrl);
			
			var vsTop = poSourceRect.top + "px";
			var vsLeft = poSourceRect.left + "px";
			var vsWidth = (poSourceRect.width + maDragDelta.width) + "px";
			var vsHeight = (poSourceRect.height + maDragDelta.height) + "px";
			
			if(voConstraint.rowSpan > 1 || voConstraint.colSpan > 1) {
				// 확장된 영역에서 피드백 크기 감소
				vsTop = poSourceRect.top + "px";			
				vsLeft = poSourceRect.left + "px";			
				vsWidth = (poSourceRect.width + maDragDelta.width) + "px";
				vsHeight = (poSourceRect.height + maDragDelta.height) + "px";
			}
		
			/* 포틀릿 위치 벗어나지 않도록 영역 제한 */
			if(vsTop.split("px")[0] < vcParent.getActualRect().top) { // 위
				vsTop = vcParent.getActualRect().top + "px";
				vsHeight = mcFeedback.getActualRect().height + "px";
			}
			
			if(vsLeft.split("px")[0] < vcParent.getActualRect().left) { // 왼쪽
				vsLeft = vcParent.getActualRect().left + "px";
				vsWidth = mcFeedback.getActualRect().width + "px";
			} 
			
			if((parseInt(vsWidth.split("px")[0])+parseInt(vsLeft.split("px")[0])) > vcParent.getActualRect().right) { // 오른쪽
				vsWidth = (vcParent.getActualRect().right - vsLeft.split("px")[0]) + "px";
			}
			
			if((parseInt(vsHeight.split("px")[0])+parseInt(vsTop.split("px")[0])) > vcParent.getActualRect().bottom) { // 아래
				vsHeight = (vcParent.getActualRect().bottom - vsTop.split("px")[0]) + "px";
			}
		
			return {
				top : vsTop, 
				left : vsLeft,
				width : vsWidth,
				height : vsHeight
			};
		}
		
		
		/**
		 * 폼레이아웃 확대/축소(span)
		 * 타겟 영역의 절반 이상일 때만 확대/축소합니다.
		 * 폼레이아웃의 row와 column은 모두 같은 크기로만 구성되어있어야 합니다.
		 * @param {cpr.controls.Container} pcDragCtrl
		 */
		function _setFormSpan (pcDragCtrl) {
			
			var vcParent = pcDragCtrl.getParent();
			var voConstraint = vcParent.getConstraint(pcDragCtrl);
			var voLayout = vcParent.getLayout();
		
			var vnRowLen = voLayout.getRows().length;
			var vnColLen = voLayout.getColumns().length;
			var vnOneWidth = voLayout.getColumns()[0].indexOf("fr") > 0 ? vcParent.getActualRect().width / vnColLen : voLayout.getColumns()[0].split("px")[0];
			var vnOneHeight = voLayout.getRows()[0].indexOf("fr") > 0 ? vcParent.getActualRect().height / vnRowLen : voLayout.getRows()[0].split("px")[0];
			
			/* span 영역 */
			var voActualRect = pcDragCtrl.getActualRect();
			var voFeedbackRect = mcFeedback.getActualRect();
			
			// 1. rowSpan
			var vnRowSpan = parseInt(Math.round(voFeedbackRect.height / vnOneHeight));
			if(vnRowSpan == 0) vnRowSpan =1 ; 
			
			// 2. colSpan
			var vnColSpan = parseInt(Math.round(voFeedbackRect.width / vnOneWidth));
			if(vnColSpan == 0) vnColSpan =1 ; 
		
			// 3. rowIndex
			var vnRowIndex = voConstraint.rowIndex;
			if(voConstraint.rowSpan != vnRowSpan) {
				var vnRowDiff = voConstraint.rowSpan - vnRowSpan;
				if(maDragDelta.height < 0 && vnRowSpan > voConstraint.rowSpan) {
					vnRowIndex = vnRowIndex + vnRowDiff;
				}
			}
		
			// 4. colIndex
			var vnColIndex = voConstraint.colIndex;
			if(voConstraint.colSpan != vnColSpan) {
				var vnColDiff = voConstraint.colSpan - vnColSpan;
				if(maDragDelta.width < 0 && vnColSpan > voConstraint.colSpan) {
					vnColIndex = vnColIndex + vnColDiff;
				}
			}
			
			var vcDuplCtrl = voLayout.findControls({
				rowIndex: vnRowIndex,
				colIndex: vnColIndex,
				rowSpan: vnRowSpan,
				colSpan: vnColSpan
			}).filter(function(each){
				if(each.type != "container" && each != pcDragCtrl) {
					return each;
				}
			});
			
			if(vcDuplCtrl.length > 0) {
				alert("컨트롤 간 겹칠 수 없습니다.");
				return;
			}
			
			// 차트가 새로 그려질 수 있도록 삭제 후 추가
			vcParent.removeChild(pcDragCtrl);
			vcParent.addChild(pcDragCtrl, {
				rowIndex : vnRowIndex,
				colIndex : vnColIndex,
				rowSpan : vnRowSpan,
				colSpan :  vnColSpan
			});
		}
		
		/************************************************
		 * 쿠키 관련 함수 (개인화)
		 ************************************************/
		/**
		 * 개인화를 위한 쿠키설정
		 */
		var portletIndvdl = function () {}
		
		/**
		 * 개인화를 위한 constraint 쿠키에 저장
		 * @param {cpr.core.AppInstance} app
		 * @param {#container} psFormId 포틀릿 그룹 ID
		 * @param {String} psExpireDate 유효기간
		 */
		portletIndvdl.prototype.setCookie = function(app, psFormId, psExpireDate){
			
			/** @type cpr.controls.Container */
			var vcGrpPortlet = app.lookup(psFormId);
			if(vcGrpPortlet && vcGrpPortlet.type == "container") {
				
				var voLayout = vcGrpPortlet.getLayout();
				
				var today = new Date();
				today.setDate(today.getDate() + parseInt(psExpireDate));
				
				// 1. form config
				var vsFormlayoutConfig = voLayout.getRows().length + "," + voLayout.getColumns().length;
				document.cookie = "formlayout=" + escape(vsFormlayoutConfig) + ";path=/;expires=" + today.toGMTString() + ";";
				
				// 2. constraint
				var vaConstraint = [];
				var vnIndex = 0;
				vcGrpPortlet.getChildren().forEach(function(each){
					var voEachContraint = vcGrpPortlet.getConstraint(each);
					var rowSpan = voEachContraint.rowSpan? voEachContraint.rowSpan : 1;
					var colSpan = voEachContraint.colSpan? voEachContraint.colSpan : 1;
					var vsCtrlConstraint = voEachContraint.rowIndex + "," + voEachContraint.colIndex + "," + rowSpan + "," + colSpan;
					
			
					if(each.type != "container" || (each.type == "container" && each.getChildren().length > 0)) {
						vaConstraint.splice(vnIndex, 1, vsCtrlConstraint);
					} else {
						vaConstraint.push(vsCtrlConstraint);	
					}
					vnIndex++;
				});
				
				var vaContent = "";
				for (var key in vaConstraint) {
					if(vaContent != "") {
						vaContent += ",";	
					}
					vaContent += "::" + vaConstraint[key];
				}
				document.cookie = "constraint=" + escape(vaContent) + ";path=/;expires=" + today.toGMTString() + ";";
				
				alert("포틀릿 정보가 성공적으로 저장되었습니다.");
			} else {
				alert("포틀릿이 적용된 컨트롤이 아닙니다.");
			}
		}
		
		
		/**
		 * 쿠키확인 및 리턴
		 * @param {String} psName
		 * @return {Array} constraint
		 */
		portletIndvdl.prototype.getCookie = function(psName){
		
			var vsCookieArr = _getCookieByNm(psName);
			return vsCookieArr;
		}
		
		
		/**
		 * 쿠키확인
		 * @param {String} psName
		 */
		function _getCookieByNm(psName) {
			var cookie = document.cookie + ";";
		
			var voItems = cookie.split(";");
			var vnItemLen = voItems.length;
			var item = null;
			var voItemInfo = null;
			for (var i = 0; i < vnItemLen; i++) {
				item = voItems[i];
				voItemInfo = item.split("=");
				if (psName == voItemInfo[0].trim()) {
					return unescape(voItemInfo[1]);
				}
			}
		}
		
		
		/**
		 * 쿠키에 저장된 개인화 정보를 폼레이아웃에 세팅합니다.
		 * @param {cpr.core.AppInstance} app
		 * @param {#container} psFormId
		 */
		portletIndvdl.prototype.updateConstraintByCookie = function (app, psFormId) {
			
			var vsFormlayout = this.getCookie("formlayout");
			var vsConstraint = this.getCookie("constraint");
		
			if(vsFormlayout == "" || vsFormlayout == null || vsConstraint == "" || vsConstraint == null) {
				alert("저장된 포틀릿 데이터가 없습니다.");
				return;
			}
			
			function setFormConfig (pnConfig) {
				
				var vaArr = [];
				for(var idx = 0; idx < pnConfig; idx++){
					vaArr.push("1fr");
				}
				return vaArr;
			}
			
			/** @type cpr.controls.Container */
			var vcGrpPortlet = app.lookup(psFormId);
			var vaChildren = vcGrpPortlet.getChildren();
			vcGrpPortlet.removeAllChildren();
			
			// 1. 폼레이아웃 구성
			var voFormLayout = vcGrpPortlet.getLayout();
			voFormLayout.setRows(setFormConfig(vsFormlayout.split(",")[0]));
			voFormLayout.setColumns(setFormConfig(vsFormlayout.split(",")[1]));
			vcGrpPortlet.setLayout(voFormLayout);
			
			// 2. 컨트롤 위치
			var vaConstraint = _getRealConstraint("constraint");
			for(var idx = 0; idx < vaConstraint.length; idx++){
				vcGrpPortlet.addChild(vaChildren[idx], vaConstraint[idx]);		
			}
		
			createDragManager(app, mbPermitDupl, mbIncreaseRow, mbDropOrginSize);
			
			alert("설정이 완료되었습니다.");
		}
		
		function _getRealConstraint (psName) {
			var vsCookieArr = _getCookieByNm(psName);
			var vaData = [];
			
			if(vsCookieArr) {
				var vaNames = vsCookieArr.split("::");
			
				for (var idx in vaNames) {
					if(idx != 0) {
						if(vaNames[idx].indexOf("function") != -1) break;
						vaData.push(vaNames[idx]);
					}
				}
			}
			
			var vaRealData = [];
			for(var idx = 0; idx < vaData.length; idx++){
				var voEachConstraint = vaData[idx].split(",");
				vaRealData.push({
					rowIndex : parseInt(voEachConstraint[0]),
					colIndex : parseInt(voEachConstraint[1]),
					rowSpan : parseInt(voEachConstraint[2]) ? parseInt(voEachConstraint[2]) : 1,
					colSpan : parseInt(voEachConstraint[3]) ? parseInt(voEachConstraint[3]) : 1 
				})		
			}
			
			return vaRealData;
		}
		
		
		/**
		 * 포틀릿 정보와 관련된 쿠키를 삭제합니다.
		 * 특정 쿠키만 삭제 하고싶을 경우, 삭제 할 쿠키이름을 매개변수로 전달하십시오.
		 * @param {String} psName?
		 */
		portletIndvdl.prototype.deleteCookie = function(psName){
			var voExpireDate = new Date();
			voExpireDate.setDate(voExpireDate.getDate() - 1);
			
			if(psName) {
				var cookie = _getCookieByNm(psName);
				if(cookie) {
					document.cookie = psName + "= " + "; expires=" + voExpireDate.toGMTString() + "; path=/";
					alert("삭제되었습니다.");
				} else {
					alert("삭제 할 쿠키정보가 없습니다. (" + psName + ")" );
				}
			} else {
				document.cookie = "formlayout= " + "; expires=" + voExpireDate.toGMTString() + "; path=/";
				document.cookie = "constraint= " + "; expires=" + voExpireDate.toGMTString() + "; path=/";
				alert("포틀릿 정보가 삭제되었습니다.");
			}
		}
		
		
		/************************************************
		 * 글로벌 출판
		 ************************************************/
		/* 포틀릿 */
		globals.createDragManager = createDragManager;
		globals.removeDragManager = removeDragManager;
		globals.setDragManagerStop = setDragManagerStop;
		globals.setResizePortlet = setResizePortlet;
		globals.setPotletPosFix = setPotletPosFix;
		
		/* 개인화 */
		globals.portletIndividual = function() {
			return new portletIndvdl();
		}
	});
})();
/// end - module/portletDragManager
/// start - module/properties
/*
 * Module URI: module/properties
 * SRC: module/properties.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/properties", function(exports, globals, module){
		/************************************************
		 * properties.module.js
		 * Created at 2021. 12. 20. 오후 3:36:06.
		 *
		 * @author 
		 ************************************************/
		
		function AppProperties(){
		};
		
		//Properties.prototype = (function() {
		//	var MAIN_APP_ID = 'app/com/main/main';
		//	var MSG_TOPIC_ID = "app-msg";
		//	return {
		//		MAIN_APP_ID: MAIN_APP_ID,
		//		MSG_TOPIC_ID : MSG_TOPIC_ID
		//	}
		//}());
		
		//메인 app id
		AppProperties.prototype.MAIN_APP_ID = "app/com/main/main";
		
		//NotificationCenter 메시지 구독 ID (메인에서 subscribe)
		AppProperties.prototype.MSG_TOPIC_ID = "app-msg";
		
		//공통 조회 버튼 ID (조회조건 초기화에서 사용)
		AppProperties.prototype.SEARCH_BTN_ID = "btnSearch";
		
		//조회조건 변경시 작업영역 초기화
		AppProperties.prototype.IS_SEARCH_CLEAR = false;
		
		//입력 폼 레이이아웃 class
		AppProperties.prototype.FORM_LAYOUT_CSS = "form-box";
		
		globals.AppProperties = new AppProperties();
	});
})();
/// end - module/properties
/// start - module/responsiveForm
/*
 * Module URI: module/responsiveForm
 * SRC: module/responsiveForm.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/responsiveForm", function(exports, globals, module){
		var ATTR_MOBILE_H_MARGIN = "mobile-horizontal-margin";
		var ATTR_MOBILE_V_MARGIN = "mobile-vertical-margin";
		var ATTR_TABLET_H_MARGIN = "tablet-horizontal-margin";
		var ATTR_TABLET_V_MARGIN = "tablet-vertical-margin";
		
		var ATTR_MOBILE_COLUMN_COUNT = "mobile-column-count";
		var ATTR_TABLET_COLUMN_COUNT = "tablet-column-count";
		
		//폼레이아웃 자식내 모바일일경우 숨김 지정
		var ATTR_HIDE_ON_MOBILE = "hide-on-mobile";
		var ATTR_NEEDS_AUTO_HEIGHT = "needs-auto-height";
		var ATTR_COLLAPSE_DIRECTION = "collapse-direction";
		
		var ATTR_MOBILE_MIN_HEIGHT = "mobile-min-height";
		var ATTR_TABLET_MIN_HEIGHT = "tablet-min-height";
		
		var ATTR_MOBILE_INDEX = "mobile-index";
		var ATTR_TABLET_INDEX = "tablet-index";
		
		//모바일일 경우 그리드 cell 숨기기.
		var ATTR_HIDE_CELL_INDICIES = "hide-cell-indicies";
		
		var ATTR_CUSTOM_CLASS = "custom-class-name";
		
		/**
		 * 
		 * @param {cpr.controls.layouts.FormDivision} div
		 */
		function copyDiv(div) {
			var result = new cpr.controls.layouts.FormDivision(div.lengthExpression);
			result.autoSizing = div.autoSizing;
			result.hidden = div.hidden;
			result.shades = div.shades;
			result.customShadeColor = div.customShadeColor;
			result.minLength = div.minLength;
			return result;
		}
		
		/**
		 * 반응형 폼 레이아웃 유틸리티.
		 * @param {cpr.controls.Container} container 폼 레이아웃을 가진 컨테이너.
		 */
		function RForm(container) {
			this._container = container;
		
			this._columnSettings = {};
		
			this._onScreenChange = this._onScreenChange.bind(this);
			this._started = false;
		}
		
		/**
		 * 화면 크기별 컬럼 설정
		 * @type {{[key:string]:number}}
		 */
		RForm.prototype._columnSettings = {};
		
		/** @type cpr.controls.layouts.FormLayout */
		RForm.prototype._originalLayout = null;
		
		/** @type cpr.utils.ObjectMap */
		RForm.prototype._originalConstraints = null;
		
		/** @type cpr.core.AppInstance */
		RForm.prototype._appInstance = null;
		
		/**
		 * 
		 * @param {String} screenName
		 * @param {String[]} colCount
		 */
		RForm.prototype.setColumnSettings = function(screenName, colCount) {
			this._columnSettings[screenName] = colCount;
		
		};
		
		/**
		 * 초기 상태 백업.
		 */
		RForm.prototype._backup = function() {
			// 원래 컨스트레인트들.
			this._originalConstraints = new cpr.utils.ObjectMap();
		
			var children = this._container.getChildren();
			for (var idx = 0; idx < children.length; idx++) {
				var eachChild = children[idx];
				var constraint = this._container.getConstraint(eachChild);
				this._originalConstraints.put(eachChild, constraint);
			}
		
			this._originalLayout = this._container.getLayout();
		};
		
		RForm.prototype.start = function() {
			if (this._started) {
				return;
			}
			this._backup();
			this._appInstance = this._container.getAppInstance();
			this._appInstance.addEventListener("screen-change", this._onScreenChange);
			this._container.addEventListenerOnce("dispose", this.stop.bind(this));
			this._started = true;
		};
		
		RForm.prototype.stop = function() {
			if (!this._started) {
				return;
			}
			if (this._appInstance) {
				this._appInstance.removeEventListener("screen-change", this._onScreenChange);
				this._appInstance = null;
			}
		
			this._started = false;
		};
		
		RForm.prototype._restore = function() {
			this._container.setLayout(this._originalLayout);
			/** @type cpr.controls.VisibleUIControl[] */
			var children = this._container.getChildren();
			for (var idx = 0; idx < children.length; idx++) {
				var eachChild = children[idx];
				eachChild.visible = true;
				this._container.replaceConstraint(eachChild, this._originalConstraints.get(eachChild));
			}
			this._clearCollapseClasses();
		}
		
		/**
		 * 
		 * @param {cpr.events.CScreenChangeEvent} e
		 */
		RForm.prototype._onScreenChange = function(e) {
			var colSettings = this._columnSettings[e.screen.name];
			if (colSettings == null || colSettings <= 0) {
				this._restore();
			} else {
				this._transform(colSettings);
			}
		};
		
		/**
		 * @return {cpr.controls.VisibleUIControl[]}
		 */
		RForm.prototype._getSortedChildren = function() {
			var children = this._container.getChildren().slice(0);
			var me = this;
			var useVerticalFirstSort = this._container.userAttr(ATTR_COLLAPSE_DIRECTION) == "vertical";
		
			/** @type String */
			var explictIndexAttribute = null;
			switch (this._container.getAppInstance().targetScreen.name) {
				case "mobile":
					{
						explictIndexAttribute = ATTR_MOBILE_INDEX;
						break;
					}
		
				case "tablet":
					{
						explictIndexAttribute = ATTR_TABLET_INDEX;
						break;
					}
			}
		
			return children.sort(function( /* cpr.controls.UIControl*/ a, /* cpr.controls.UIControl*/ b) {
		
				var indexA = parseInt(a.userAttr(explictIndexAttribute || "") || "9999");
				var indexB = parseInt(b.userAttr(explictIndexAttribute || "") || "9999");
				var explictIndexGap = indexA - indexB;
				if (explictIndexGap !== 0) {
					return explictIndexGap;
				}
		
				/** @type cpr.controls.layouts.FormConstraint */
				var constA = me._originalConstraints.get(a);
		
				/** @type cpr.controls.layouts.FormConstraint */
				var constB = me._originalConstraints.get(b);
				var rowDiff = constA.rowIndex - constB.rowIndex;
				var colDiff = constA.colIndex - constB.colIndex;
		
				if (useVerticalFirstSort) {
					return colDiff !== 0 ? colDiff : rowDiff;
				} else {
					return rowDiff !== 0 ? rowDiff : colDiff;
				}
			});
		};
		
		/**
		 * 
		 * @param {Number} colCount
		 */
		RForm.prototype._transform = function(colCount) {
			var layout = new cpr.controls.layouts.FormLayout();
			this._container.setLayout(layout);
		
			layout.horizontalMargin = this._originalLayout.horizontalMargin;
			layout.verticalMargin = this._originalLayout.verticalMargin;
			layout.horizontalSpacing = this._originalLayout.horizontalSpacing;
			layout.verticalSpacing = this._originalLayout.verticalSpacing;
			layout.horizontalSeparatorWidth = this._originalLayout.horizontalSeparatorWidth;
			layout.horizontalSeparatorClass = this._originalLayout.horizontalSeparatorClass;
			layout.verticalSeparatorWidth = this._originalLayout.verticalSeparatorWidth;
			layout.verticalSeparatorClass = this._originalLayout.verticalSeparatorClass;
			
			switch (this._appInstance.targetScreen.name) {
				case "mobile":
					if (this._container.userAttr(ATTR_MOBILE_H_MARGIN)) {
						layout.horizontalMargin = this._container.userAttr(ATTR_MOBILE_H_MARGIN);
					}
					if (this._container.userAttr(ATTR_MOBILE_V_MARGIN)) {
						layout.verticalMargin = this._container.userAttr(ATTR_MOBILE_V_MARGIN);
					}
					break;
		
				case "tablet":
					if (this._container.userAttr(ATTR_TABLET_H_MARGIN)) {
						layout.horizontalMargin = this._container.userAttr(ATTR_TABLET_H_MARGIN);
					}
					if (this._container.userAttr(ATTR_TABLET_V_MARGIN)) {
						layout.verticalMargin = this._container.userAttr(ATTR_TABLET_V_MARGIN);
					}
					break;
		
			}
		
			var columnDivisions = this._originalLayout.getColumnDivisions();
			var colSettings = columnDivisions.slice(0, colCount);
		
			// 모바일이나 태블릿이 컬럼 개수가 더 많은 경우 처리.
			while (colSettings.length < colCount) {
				colSettings.push(copyDiv(colSettings[colSettings.length - 1]));
			}
		
			var rowDiv = new cpr.controls.layouts.FormDivision("1fr");
			var vnRowMinLength = 0;
			
			var rowDivisions = this._originalLayout.getRowDivisions();
			colSettings.forEach(function( /* cpr.controls.layouts.FormDivision */ each, idx) {
				if(rowDivisions[idx]){
					var vsLengthExp  = rowDivisions[idx].lengthExpression;
					vsLengthExp = vsLengthExp.replace("px", "");
					var vnLengthExp = parseInt(vsLengthExp);
					if(vnRowMinLength < vnLengthExp){
							vnRowMinLength = vnLengthExp;
					}	
				}
				
			});
			
			if(vnRowMinLength > 10){
				rowDiv.minLength =  vnRowMinLength;	
			}
		
			// 세로 컬랩스 처리.
			if (this._container.userAttr(ATTR_COLLAPSE_DIRECTION) == "vertical") {
				var rowDivisions = this._originalLayout.getRowDivisions();
				colSettings.forEach(function( /* cpr.controls.layouts.FormDivision */ each, idx) {
					each.shades = rowDivisions[idx].shades;
					each.customShadeColor = rowDivisions[idx].customShadeColor;
				});
				rowDiv.shades = false;
			}
		
			var lastColDiv = colSettings[colSettings.length - 1];
			lastColDiv.lengthExpression = "1fr";
			lastColDiv.shades = false;
			layout.setColumnDivisions(colSettings);
		
			var numberOfColumns = colSettings.length;
			var sortedChildren = this._getSortedChildren();
		
			var visibleChildren = sortedChildren.filter(function( /* cpr.controls.VisibleUIControl */ each) {
				return each.userAttr("hide-on-mobile") != "true";
			});
		
			var hiddenChildren = sortedChildren.filter(function( /* cpr.controls.VisibleUIControl */ each) {
				return each.userAttr("hide-on-mobile") == "true";
			}).forEach(function( /* cpr.controls.VisibleUIControl */ each) {
				each.visible = false;
			});
		
			var rowIndex = 0;
			var columnIndex = 0;
			var rowNeedsAutoHeight = false;
		
			/** @type cpr.controls.layouts.FormDivision[] */
			var rows = [];
		
			for (var idx = 0; idx < visibleChildren.length; idx++) {
				if (rows[rowIndex] == null) {
					rows.push(copyDiv(rowDiv));
				}
				/**
				 * 현재 행에 남은 컬럼 수.
				 */
				var leftColumnsInCurrentLine = numberOfColumns - columnIndex;
				var each = visibleChildren[idx];
				each.visible = true;
		
				/**
				 * 원래 컨스트레인트.
				 * @type cpr.controls.layouts.FormConstraint
				 */
				var originalConstraint = this._originalConstraints.get(each);
				var originalColSpan = originalConstraint.colSpan || 1;
		
				var colSpan = Math.min(originalColSpan, leftColumnsInCurrentLine);
				var ignoreLayoutSpacing = originalConstraint.ignoreLayoutSpacing;
		
				this._container.replaceConstraint(each, {
					rowIndex: rowIndex,
					colIndex: columnIndex,
					colSpan: colSpan,
					ignoreLayoutSpacing: ignoreLayoutSpacing
				});
		
				if (each.userAttr(ATTR_NEEDS_AUTO_HEIGHT) == "true") {
					rows[rows.length - 1].autoSizing = true;
					rows[rows.length - 1].lengthExpression = "25px";
				}
		
				if (each.userAttr(ATTR_MOBILE_MIN_HEIGHT)) {
					var eachMinLength = parseInt(each.userAttr(ATTR_MOBILE_MIN_HEIGHT));
					var knownRow = rows[rows.length - 1];
					if (knownRow.lengthExpression.match(".*fr$")) {
						knownRow.minLength = Math.max(knownRow.minLength, eachMinLength);
					} else {
						knownRow.lengthExpression = Math.max(parseInt(knownRow.lengthExpression), eachMinLength) + "px";
					}
				}
		
				columnIndex = columnIndex + colSpan;
		
				if (columnIndex >= numberOfColumns) {
					rowIndex++;
					columnIndex = 0;
				}
			}
		
			layout.setRowDivisions(rows);
		
			this._clearCollapseClasses();
			this._container.style.addClass("collapsed");
			this._container.style.addClass("collapsed-" + colCount);
			this._container.style.addClass(this._container.userAttr(ATTR_CUSTOM_CLASS));
		};
		
		/**
		 * 
		 * @param {Number} colCount
		 */
		RForm.prototype._clearCollapseClasses = function() {
			var classes = this._container.style.getClasses();
			var collapseClasses = classes.filter(function( /* String */ each) {
				return each.indexOf("collapsed") === 0;
			});
			collapseClasses.forEach((function( /* String */ each) {
				this._container.style.removeClass(each);
				this._container.style.removeClass(this._container.userAttr(ATTR_CUSTOM_CLASS));
			}).bind(this));
		}
		
		
		/**
		 * 
		 * @param {cpr.controls.Grid} grid
		 */
		function RGrid(grid) {
			
			this._grid = grid;
			this._app = grid.getAppInstance();
			this._onScreenChange = this._onScreenChange.bind(this);
			this._app.addEventListener("screen-change", this._onScreenChange);
			grid.addEventListener("dispose", this._handleDispose.bind(this));
		}
		
		RGrid.prototype._handleDispose = function(e) {
			this._app.removeEventListener("screen-change", this._onScreenChange);
		};
		
		/**
		 * @param {cpr.events.CScreenChangeEvent} e
		 */
		RGrid.prototype._onScreenChange = function(e) {
			switch (e.screen.name) {
				case "mobile":
					{
						this.collapse();
						break;
					}
		
				default:
					{
						this.restore();
						break;
					}
			}
		}
		
		RGrid.prototype.collapse = function() {
			var indicies = this._grid.userAttr(ATTR_HIDE_CELL_INDICIES).split(/[\s,]+/g).map(function( /* String */ each) {
				return parseInt(each);
			});
			var grid = this._grid;
			indicies.forEach(function( /* Number */ each) {
				if(grid.header.getColumn(each)){
					grid.header.getColumn(each).visible = false;	
				}
			});
		};
		
		RGrid.prototype.restore = function() {
			var indicies = this._grid.userAttr(ATTR_HIDE_CELL_INDICIES).split(/[\s,]+/g).map(function( /* String */ each) {
				return parseInt(each);
			});
			var grid = this._grid;
			indicies.forEach(function( /* Number */ each) {
				if(grid.header.getColumn(each)){
					grid.header.getColumn(each).visible = true;	
				}
			});
		};
		
		
		/**
		 * 
		 * @param {cpr.controls.Container} container
		 */
		globals.makeResponsive = function(container) {
			return new RForm(container);
		};
		//
		//cpr.events.EventBus.INSTANCE.addFilter("init", function(e) {
		//	if (e.control instanceof cpr.core.AppInstance) {
		//		/** @type cpr.core.AppInstance */
		//		var appInstance = e.control;
		//		var vaCtl = appInstance.getContainer().getAllRecursiveChildren(true);
		//		vaCtl.some(function(each){
		//			if (each instanceof cpr.controls.Container) {
		//				if (each.getLayout() instanceof cpr.controls.layouts.FormLayout && each.userAttr("mobile-column-count") != "") {
		//					each.userAttr("responsive-configured", "true");
		//					var rForm = new RForm(each);
		//					rForm.setColumnSettings("mobile", parseInt(each.userAttr(ATTR_MOBILE_COLUMN_COUNT) || "0"));
		//					rForm.setColumnSettings("tablet", parseInt(each.userAttr(ATTR_TABLET_COLUMN_COUNT) || "0"));
		//					rForm.start();
		//				}
		//			}
		////			 if(each instanceof cpr.controls.Grid && each.userAttr(ATTR_HIDE_CELL_INDICIES) != ""){
		////				new RGrid(each);
		////			}	
		//		});
		//		
		//		
		////		var targetGroups = appInstance.getContainer().getAllRecursiveChildren(true).filter(function( /* cpr.controls.UIControl */ each) {
		////			if (each instanceof cpr.controls.Container) {
		////				if (each.getLayout() instanceof cpr.controls.layouts.FormLayout && each.userAttr("mobile-column-count") != "") {
		////					return true;
		////				}
		////			}
		////			return false;
		////		});
		////
		////		targetGroups.forEach(function( /* cpr.controls.Container */ each) {
		////			each.userAttr("responsive-configured", "true");
		////			var rForm = new RForm(each);
		////			rForm.setColumnSettings("mobile", parseInt(each.userAttr(ATTR_MOBILE_COLUMN_COUNT) || "0"));
		////			rForm.setColumnSettings("tablet", parseInt(each.userAttr(ATTR_TABLET_COLUMN_COUNT) || "0"));
		////			rForm.start();
		////		});
		//		
		////		appInstance.getContainer().getAllRecursiveChildren(true).filter(function( /* cpr.controls.UIControl */ each) {
		////			return each instanceof cpr.controls.Grid && each.userAttr(ATTR_HIDE_CELL_INDICIES) != "";
		////		}).forEach(function(grid) {
		////			new RGrid(grid);
		////		});
		//		
		//	}
		//});
	});
})();
/// end - module/responsiveForm
/// start - module/responsiveGrid
/*
 * Module URI: module/responsiveGrid
 * SRC: module/responsiveGrid.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/responsiveGrid", function(exports, globals, module){
		/************************************************
		 * responsiveGrid.module.js
		 * Created at 2021. 8. 19. 오후 1:04:38.
		 *
		 * @author ryu
		 ************************************************/
		
		module.depends("module/responsiveForm");
		
		/************************************************
		 * 사용자 속성 리스트
		 ************************************************/
		
		var ATTR_TRANSFORM_ON_MOBILE = "transform-on-mobile";
		
		var ATTR_HIDE_COLUMN_INDICES = "hide-column-indicies";
		
		/************************************************
		 * 공통모듈 옵션
		 ************************************************/
		
		/**
		 * 행 높이 자동조절
		 * @type {Boolean}
		 */
		var mbAutoRowHeight = false;
		
		/**
		 * 독점적 아코디언 사용 여부
		 * (다른 행을 클릭하면 이미 열렸던 행을 접는 기능)
		 * @type {Boolean}
		 */
		var mbExclusive = false;
		
		/**
		 * 아코디언 영역 내 여백
		 * @type {Number}
		 */
		var mnInnerMargin = 5;
		
		/**
		 * 디테일 영역을 접거나 펼칠 수 있는 영역을 추가합니다.
		 * (해당 값이 false 면 행을 클릭했을 때 접거나 펼쳐집니다.)
		 * @type {Boolean}
		 */
		var mbAddExpander = false;
		
		/**
		 * 디테일행 익스펜더 버튼 클래스명
		 * @type {String}
		 */
		var msExpanderClassName = "btn-expander";
		
		/**
		 * 그리드 형태 폼 클래스명
		 * @type {String}
		 */
		var msGridClassName = "table";
		
		/**
		 * 그리드 형태 폼 내 헤더 클래스명
		 * @type {String}
		 */
		var msGridHeaderClassName = "table-header";
		
		/**
		 * 그리드 형태 폼 내 헤더 셀 클래스명
		 * @type {String}
		 */
		var msGridHeaderCellClassName = "table-header-cell";
		
		/**
		 * 그리드 형태 폼 내 디테일 클래스명
		 * @type {String}
		 */
		var msGridRowClassName = "table-row";
		
		/**
		 * 그리드 형태 폼 내 디테일 셀 클래스명
		 * @type {String}
		 */
		var msGridRowCellClassName = "table-cell";
		
		/**
		 * 그리드 형태 폼 내 아코디언 디테일 셀 클래스명
		 * @type {String}
		 */
		var msGridAccordionRowClassName = "table-accordion-row";
		
		
		/**
		 * 
		 * @param {cpr.controls.Grid} grid
		 */
		function RGrid(grid) {
			/** @type cpr.controls.Grid */
			this._grid = grid;
			/** @type cpr.core.AppInstance */
			this._app = grid.getAppInstance();
			/** @type cpr.controls.Container */
			this._parentContainer = this._grid.getParent();
			
			this._columnSettings = [];
			
			this._onScreenChange = this._onScreenChange.bind(this);
			this._app.addEventListener("screen-change", this._onScreenChange);
			grid.addEventListener("dispose", this._handleDispose.bind(this));
		}
		
		RGrid.prototype._columnSettings = [];
		
		/**
		 * 그리드를 폼 형태로 그리기 위한 데이터를 정의합니다.
		 */
		RGrid.prototype.setColumnSettings = function() {
			var grid = this._grid;
			
			var header = grid.header;	
			var detail = grid.detail;
			
			var autoFit = grid.autoFit.replace(/\s/g, "");
			var autoFitCols = autoFit == "all" ? [] : autoFit.split(","); 
			
			for(var idx = 0; idx < detail.cellCount; idx++){
				var headerColumn = header.getColumnByColIndex(idx, 1)[0];
				var detailColumn = detail.getColumnByColIndex(idx, 1)[0];
				
				var subText = null;
				if (headerColumn.rowIndex > 0){
					var headerCellIndcs = grid.getHeaderCellIndices(detailColumn.cellIndex);
					var headerTxts = [];
					for(var cell = 0; cell < headerCellIndcs.length - 1; cell++){
						var text = grid.header.getColumn(headerCellIndcs[cell]).text;
						headerTxts.push(text);
					}
					subText = headerTxts.join("-");
				}
				
				// AutoFit이 해제된 컬럼인 경우 고정 값으로 생성
				var width = "1fr";
				if (autoFitCols.indexOf(headerColumn.colIndex.toString()) == -1){
					width = grid.getColumnWidths()[detailColumn.colIndex];
				}
				
				var column = {
					text: headerColumn.text,
					visible: headerColumn.visible,
					columnName: detailColumn.columnName,
					control: detailColumn.control,
					subText: subText,
					width: width
				}
				
				this._columnSettings.push(column);
			}
		}
		
		/**
		 * 그리드가 dispose될 때 발생하는 이벤트
		 * @param {cpr.events.CEvent} e
		 */
		RGrid.prototype._handleDispose = function(e) {
			this._app.removeEventListener("screen-change", this._onScreenChange);
		}
		
		/**
		 * 스크린 사이즈가 변경됐을 때 발생하는 이벤트
		 * @param {cpr.events.CScreenChangeEvent} e
		 */
		RGrid.prototype._onScreenChange = function(e) {
			switch (e.screen.name) {
				case "mobile":
				case "tablet":
					{
						this.start();
						break;
					}
				default:
					{
						this.stop();
						break;
					}
			}
		}
		
		/**
		 * 반응형 그리드 적용
		 */
		RGrid.prototype.start = function() {
			if (this._started){
				return;
			}
			
			this._hide();
			this.setColumnSettings();
			this.collapse();
			this._started = true;
		}
		
		/**
		 * 반응형 그리드 해제
		 */
		RGrid.prototype.stop = function() {
			if (!this._started){
				return;
			}
			
			this._revert();
			this.restore();
			this._started = false;
		}
		
		/**
		 * 그리드 컬럼 상태를 재정의 합니다.
		 */
		RGrid.prototype._hide = function() {
			var indicies = this._grid.userAttr(ATTR_HIDE_COLUMN_INDICES).split(/[\s,]+/g).map(function( /* String */ each) {
				return parseInt(each);
			});
			var grid = this._grid;
			indicies.forEach(function( /* Number */ each) {
				if(grid.header.getColumn(each)){
					grid.header.getColumn(each).visible = false;	
				}
			});
		}
		
		/**
		 * 그리드 컬럼 숨김 상태를 원복합니다.
		 */
		RGrid.prototype._revert = function() {
			var indicies = this._grid.userAttr(ATTR_HIDE_COLUMN_INDICES).split(/[\s,]+/g).map(function( /* String */ each) {
				return parseInt(each);
			});
			var grid = this._grid;
			indicies.forEach(function( /* Number */ each) {
				if(grid.header.getColumn(each)){
					grid.header.getColumn(each).visible = true;	
				}
			});
		}
		
		
		
		/**
		 * 그리드 일부 컬럼을 숨기고 그리드를 폼 형태로 동적 생성합니다.
		 */
		RGrid.prototype.collapse = function() {
			var grid = this._grid;
			grid.visible = false;
			
			this._container = new cpr.controls.Container();
			var layout = new cpr.controls.layouts.FormLayout();
			this._container.setLayout(layout);
			
			var height = grid.header.getRowHeight(0);
			layout.setRows([height + "px", "1fr"]);
			
			/** @type Object[] */
			var visibleColumns = this._columnSettings.filter(function(each) {
				return each.visible == true;
			});
			
			var colCount = visibleColumns.map(function(each) {
				return each.width;
			});
			if (mbAddExpander){
				colCount.splice(0, 0, "30px");
			}
			layout.setColumns(colCount);
			
			if (mbAutoRowHeight){
				layout.setRowAutoSizing(0, true);
			}
			
			layout.horizontalSpacing = "0px";
			layout.verticalSpacing = "0px";
			layout.horizontalSeparatorWidth = 1;
			layout.verticalSeparatorWidth = 1;
			layout.setUseRowShade(0, true);
			layout.columnShadeClass = msGridHeaderClassName;
			this._container.style.addClass(msGridClassName);
			
			// 헤더셀 추가
			for(var idx = 0; idx < visibleColumns.length; idx++){
				var headerColumn = visibleColumns[idx];
				
				var headerCell = new cpr.controls.Output();
				headerCell.value = headerColumn.text;
				headerCell.style.addClass(msGridHeaderCellClassName);
				
				var colIndex = idx;
				if (mbAddExpander){
					colIndex += 1;
				}
				this._container.addChild(headerCell, {
					colIndex: colIndex,
					rowIndex: 0
				});
			}
			
			var colSpan = !mbAddExpander ? visibleColumns.length : visibleColumns.length + 1;
			
			// 디테일 영역 추가
			this._innerContainer = new cpr.controls.Container();
			this._setDetailCells(); // 디테일 내부 동적 생성
			this._container.addChild(this._innerContainer, {
				colIndex: 0,
				rowIndex: 1,
				colSpan: colSpan
			});
			
			var targetIndex = this._parentContainer.getChildren().indexOf(grid) + 1;
			this._parentContainer.insertChild(targetIndex, this._container, {
				autoSize: "height"
			});
		}
		
		
		/**
		 * 그리드 상태를 원복합니다.
		 */
		RGrid.prototype.restore = function() {
			this._columnSettings = [];
			this._grid.visible = true;
			if (this._container){
				this._container.dispose();
			}
		}
		
		/**
		 * 그리드 디테일 영역을 생성합니다.
		 */
		RGrid.prototype._setDetailCells = function() {
			var layout = new cpr.controls.layouts.VerticalLayout();
			this._innerContainer.setLayout(layout);
			
			layout.spacing = 0;
			
			var visibleColumn = this._columnSettings.filter(function(each) {
				return each.visible == true;
			});
			
			// 디테일 행 추가
			var height = this._container.getLayout().getRows()[0];
			var rowCount = this._grid.getRowCount();
			for(var row = 0; row < rowCount; row++){
				var tableRow = new cpr.controls.Container();
				var tableRowLayout = new cpr.controls.layouts.FormLayout();
				tableRow.setLayout(tableRowLayout);
				
				tableRowLayout.setColumns(this._container.getLayout().getColumns());
				tableRowLayout.setRows([height]);
				tableRowLayout.verticalSeparatorWidth = 1;
				tableRowLayout.horizontalSpacing = "0px";
				tableRowLayout.verticalSpacing = "0px";
				
				tableRow.style.addClass(msGridRowClassName);
				tableRow.setBindContext(new cpr.bind.DataRowContext(this._grid.dataSet, row));
				
				var detailCellCnt = tableRowLayout.getColumns().length;
				
				if (!mbAddExpander){
					tableRow.addEventListener("click", this._onClick);
				} else {
					detailCellCnt -= 1;
					
					var expander = new cpr.controls.Button();
					expander.style.setClasses(msExpanderClassName);
					expander.addEventListener("click", this._onClick);
					tableRow.addChild(expander, {
						colIndex: 0,
						rowIndex: 0
					});
				}
				
				if (mbAutoRowHeight){
					tableRowLayout.setRowAutoSizing(row, true);
				}
				
				// 디테일 셀 컨트롤 추가
				for(var col = 0; col < detailCellCnt; col++){
					var colIndex = mbAddExpander ? col + 1 : col;
					var column = visibleColumn[col];
					var child = this._copyControl(column);
					tableRow.addChild(child, {
						colIndex: colIndex,
						rowIndex: 0
					});
				}
				
				this._innerContainer.addChild(tableRow, {
					autoSize: "height"
				});
			}
			
			// 디테일 아코디언 행 추가
			var hideColumns = this._columnSettings.filter(function(each) {
				return each.visible == false;
			});
			var accordionCols = [];
			for(var idx = 0; idx < hideColumns.length; idx++){
				accordionCols.push(height);
			}
			var childCount = this._innerContainer.getChildrenCount();
			for(var aRow = 0; aRow < childCount; aRow++){
				var accordion = new cpr.controls.Container();
				var accordionLayout = new cpr.controls.layouts.FormLayout();
				accordion.setLayout(accordionLayout);
				
				accordionLayout.topMargin = mnInnerMargin;
				accordionLayout.rightMargin = mnInnerMargin;
				accordionLayout.bottomMargin = mnInnerMargin;
				accordionLayout.leftMargin = mnInnerMargin;
				
				accordionLayout.setRows(accordionCols);
				accordionLayout.setColumns(["1px", "1fr"]);
				accordionLayout.setColumnAutoSizing(0, true);
				accordion.style.addClass(msGridAccordionRowClassName);
				accordion.visible = false;
				
				accordion.setBindContext(new cpr.bind.DataRowContext(this._grid.dataSet, aRow));
				
				if (mbAutoRowHeight){
					for(var idx = 0; idx < accordionLayout.getRows().length; idx++){
						accordionLayout.setRowAutoSizing(idx, true);
					}
				}
				
				for(var innrRow = 0; innrRow < hideColumns.length; innrRow++){
					var innrColumn = hideColumns[innrRow];
					
					// 헤더 텍스트 추가
		//			if (innrRow == 0){
		//				var title = new cpr.controls.Output();
		//				title.value = innrColumn.subText;				
		//				title.style.addClass("title");
		//				accordion.addChild(title, {
		//					colIndex: 0,
		//					rowIndex: 0,
		//					colSpan: 2
		//				});
		//			}
					
					var label = new cpr.controls.Output();
					label.value = innrColumn.text;
					label.style.addClass("label");
					accordion.addChild(label, {
						colIndex: 0,
						rowIndex: innrRow
					});
					
					var accordionChild = this._copyControl(innrColumn);
					accordionChild.style.css("text-align", "right !important");
					accordion.addChild(accordionChild, {
						colIndex: 1,
						rowIndex: innrRow
					});
				}
				
				this._innerContainer.insertChild((aRow * 2) + 1, accordion, {
					autoSize: "height"
				});
			}
		}
		
		
		/**
		 * 그리드 내 컨트롤을 복사합니다.
		 * @param {control:cpr.controls.UIControl,columnName:String,visible:Boolean} column
		 */
		RGrid.prototype._copyControl = function(column) {
			var control = column["control"];
			var copyControl = null;
			if (control instanceof cpr.controls.Output) {
				copyControl = new cpr.controls.Output();
				copyControl.dataType = control.dataType;
				copyControl.format = control.format;
				copyControl.displayExp = control.displayExp;
			} else if (control instanceof cpr.controls.CheckBox) {
				copyControl = new cpr.controls.CheckBox();
				copyControl.trueValue = control.trueValue;
				copyControl.falseValue = control.falseValue;
			} else if (control instanceof cpr.controls.ComboBox) {
				copyControl = new cpr.controls.ComboBox();
				copyControl.setItemSet(control.dataSet, control.itemSetConfig);
				copyControl.hideButton = true;
			}
			
			//XXX 추가적인 컨트롤이 있을 시 컨트롤에 대하여 복사할 속성을 작성하십시오.
			
			// 디테일 셀 공통
			copyControl.fieldLabel = control.fieldLabel; 
			copyControl.bind("value").toDataColumn(column["columnName"]);
			copyControl.style.setClasses(control.style.getClasses());
			
			return copyControl;
		}
		
		/**
		 * 디테일행을 접거나 펼칩니다.
		 * @param {cpr.events.CMouseEvent} e
		 */
		RGrid.prototype._onClick = function(e) {
			/** @type cpr.controls.UIControl */
			var control = e.control;
			
			var parent = control.getParent();
			if (mbAddExpander){
				control = parent;
				parent = parent.getParent();
			}
			/** @type cpr.controls.Container */
			var nextControl = parent.getChildren()[parent.getChildren().indexOf(control) + 1];
			nextControl.visible = !nextControl.visible;
		
			if (mbExclusive){
				parent.getChildren().filter(function(each){
					return each.style.hasClass("selected");
				}).forEach(function(each){
					var eachParent = each.getParent();
					var nextCtrl = eachParent.getChildren()[eachParent.getChildren().indexOf(each) + 1];
					nextCtrl.visible = false;
					each.style.removeClass("selected");
				});
			}
			
			if (nextControl.visible){
				control.style.addClass("selected");
			} else {
				control.style.removeClass("selected");
			}
		}
		
		
		globals.makeResponsiveGrid = function(grid) {
			return new RGrid(grid);
		}
		//
		//cpr.events.EventBus.INSTANCE.addFilter("init", function(e){
		//	if (e.control instanceof cpr.core.AppInstance){
		//		/** @type cpr.core.AppInstance */
		//		var appInstance = e.control;
		//		
		//		var vaGrids = appInstance.getContainer().getAllRecursiveChildren(false).filter(function(each){
		//			return each instanceof cpr.controls.Grid;
		//		}).forEach(function(each){
		//			if (each.userAttr(ATTR_TRANSFORM_ON_MOBILE) == "true" && each.userAttr(ATTR_HIDE_COLUMN_INDICES) != ""){
		//				return new RGrid(each);
		//			}
		//		});
		//	}
		//});
	});
})();
/// end - module/responsiveGrid
/// start - module/responsiveVertical
/*
 * Module URI: module/responsiveVertical
 * SRC: module/responsiveVertical.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/responsiveVertical", function(exports, globals, module){
		/************************************************
		 * ResponsiveVertical.module.js
		 * Created at 2019. 3. 27. 오후 2:36:09.
		 *
		 * @author jeeeyul
		 ************************************************/
		
		var ATTR_MOBILE_FIT = "mobile-fit";
		var ATTR_TABLET_FIT = "tablet-fit";
		
		var ATTR_HIDE_ON_MOBILE = "hide-on-mobile";
		var ATTR_HIDE_ON_TABLET = "hide-on-tablet";
		
		var ATTR_MOBILE_T_MARGIN = "mobile-top-margin";
		var ATTR_MOBILE_R_MARGIN = "mobile-right-margin";
		var ATTR_MOBILE_B_MARGIN = "mobile-bottom-margin";
		var ATTR_MOBILE_L_MARGIN = "mobile-left-margin";
		var ATTR_TABLET_T_MARGIN = "tablet-top-margin";
		var ATTR_TABLET_R_MARGIN = "tablet-right-margin";
		var ATTR_TABLET_B_MARGIN = "tablet-bottom-margin";
		var ATTR_TABLET_L_MARGIN = "tablet-left-margin";
		
		var ATTR_MOBILE_SPACING = "mobile-spacing";
		var ATTR_TABLET_SPACING = "tablet-spacing";
		
		/**
		 * 
		 * @param {cpr.controls.Container} container
		 */
		function RVertical(container) {
			this._container = container;
			this._appInstance = container.getAppInstance();
			this._started = false;
			this._onScreenChange = this._onScreenChange.bind(this);
		}
		
		RVertical.prototype._backup = function() {
			this._originalLayout = this._container.getLayout();
		}
		
		/** @type cpr.controls.layouts.VerticalLayout */
		RVertical.prototype._originalLayout = null;
		
		RVertical.prototype._transform = function() {
			var originalLayout = this._originalLayout;
			var layout = new cpr.controls.layouts.VerticalLayout();
			this._container.setLayout(layout);
			
			layout.topMargin = originalLayout.topMargin;
			layout.rightMargin = originalLayout.rightMargin;
			layout.bottomMargin = originalLayout.bottomMargin;
			layout.leftMargin = originalLayout.leftMargin;
			layout.spacing = originalLayout.spacing;
			layout.scrollable = originalLayout.scrollable;
			
			/** @type String */
			var tMargin;
			
			/** @type String */
			var rMargin;
			
			/** @type String */
			var bMargin;
			
			/** @type String */
			var lMargin;
			
			/** @type String */
			var spacing;
			
			switch (this._container.getAppInstance().targetScreen.name) {
				case "mobile": {
					tMargin = parseInt(this._container.userAttr(ATTR_MOBILE_T_MARGIN) || layout.topMargin);
					rMargin = parseInt(this._container.userAttr(ATTR_MOBILE_R_MARGIN) || layout.rightMargin);
					bMargin = parseInt(this._container.userAttr(ATTR_MOBILE_B_MARGIN) || layout.bottomMargin);
					lMargin = parseInt(this._container.userAttr(ATTR_MOBILE_L_MARGIN) || layout.leftMargin);
					spacing = parseInt(this._container.userAttr(ATTR_MOBILE_SPACING) || layout.spacing);
					layout.distribution = "fill";
					
					/* 사용자 속성 "hide-on-mobile"의 값이 true면 visible false 처리 */
					if (this._container.userAttr(ATTR_HIDE_ON_MOBILE) == "true") {
						this._container.visible = false;
					} else {
						this._container.visible = true;
					}
					
					break;
				}
				
				case "tablet": {
					tMargin = parseInt(this._container.userAttr(ATTR_TABLET_T_MARGIN) || layout.topMargin);
					rMargin = parseInt(this._container.userAttr(ATTR_TABLET_R_MARGIN) || layout.rightMargin);
					bMargin = parseInt(this._container.userAttr(ATTR_TABLET_B_MARGIN) || layout.bottomMargin);
					lMargin = parseInt(this._container.userAttr(ATTR_TABLET_L_MARGIN) || layout.leftMargin);
					spacing = parseInt(this._container.userAttr(ATTR_TABLET_SPACING) || layout.spacing);
					layout.distribution = "fill";
					
					/* 사용자 속성 "hide-on-tablet"의 값이 true면 visible false 처리 */
					if (this._container.userAttr(ATTR_HIDE_ON_TABLET) == "true") {
						this._container.visible = false;
					} else {
						this._container.visible = true;
					}
					
					break;
				}
			}
			
			layout.topMargin = tMargin;
			layout.rightMargin = rMargin;
			layout.bottomMargin = bMargin;
			layout.leftMargin = lMargin;
			layout.spacing = spacing;
		};
		
		RVertical.prototype._restore = function() {
			this._container.setLayout(this._originalLayout);
			
			if(!this._container.disposed) {
				this._container.visible = true;
			}
		};
		
		RVertical.prototype.start = function() {
			if (this._started) {
				return;
			}
			this._backup();
			
			this._appInstance.addEventListener("screen-change", this._onScreenChange);
		};
		
		/**
		 * @param {cpr.events.CScreenChangeEvent} e
		 */
		RVertical.prototype._onScreenChange = function(e) {
			var screenName = e.screen.name;
			switch (screenName) {
				case "default": {
		//			this._originalLayout.distribution = "center";
					
					if (this._container.userAttr(ATTR_HIDE_ON_MOBILE) == "false" || this._container.userAttr(ATTR_HIDE_ON_TABLET) == "false") {
						this._container.visible = false;
					} else {
						this._restore();
					}
					
					break;
				}
				
				case "mobile": {
					if (this._container.userAttr(ATTR_MOBILE_FIT) == "true") {
						this._transform();
					} else {
						this._restore();
					}
					
					break;
				}
				
				case "tablet": {
					if (this._container.userAttr(ATTR_TABLET_FIT) == "true") {
						this._transform();
					} else {
						this._restore();
					}
					
					break;
				}
			}
		};
		
		/**
		 * 
		 * @param {cpr.controls.Container} container
		 */
		globals.makeVResponsive = function(container) {
			return new RVertical(container);
		};
		//
		//cpr.events.EventBus.INSTANCE.addFilter("init", function(e) {
		//	if (e.control instanceof cpr.core.AppInstance) {
		//		/** @type cpr.core.AppInstance */
		//		var appInstance = e.control;
		//		var targetGroups = appInstance.getContainer().getAllRecursiveChildren(true).filter(function( /* cpr.controls.UIControl */ each) {
		//			if (each instanceof cpr.controls.Container) {
		//				if (each.getLayout() instanceof cpr.controls.layouts.VerticalLayout && (each.userAttr(ATTR_MOBILE_FIT) || each.userAttr(ATTR_TABLET_FIT))) {
		//					return true;
		//				}
		//			}
		//			return false;
		//		});
		//		
		//		targetGroups.forEach(function( /* cpr.controls.Container */ each) {
		//			var rVertical = new RVertical(each);
		//			rVertical.start();
		//		});
		//	}
		//});
	});
})();
/// end - module/responsiveVertical
/// start - module/submit
/*
 * Module URI: module/submit
 * SRC: module/submit.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/submit", function(exports, globals, module){
		
		
		/**
		 * 통신 전 처리
		 * @param {Event} e
		 */
		cpr.events.EventBus.INSTANCE.addFilter("before-submit", function(e){
			/** @type cpr.protocols.Submission */
		//	var submission = e.control;
		//	if (submission.mediaType == "application/json"){
		//		submission.setRequestEncoder(_requestEncoder);
		//		submission.setResponseDecoder(_responseDecoder);
		//	}
		//	uf_send(e);
		});
		
		//통신 후 처리
		cpr.events.EventBus.INSTANCE.addFilter("submit-done", function(e){
			/** @type cpr.protocols.Submission */
			var submission = e.control;
		});
		
		
		/**
		 * 
		 * @param {cpr.protocols.Submission} submission
		 * @param {Object} reqData
		 */
		function _requestEncoder(submission, reqData) {
			var _app = submission.getAppInstance();
			var reqDataObj = reqData["data"];
			var paramObj = reqData["param"];
			
			var voJsonType = {};
			for (var key in reqDataObj) {
				voJsonType[key] = reqDataObj[key];
			}
			
			return {"content" : voJsonType};
		}
		
		
		/**
		 * @private
		 * @param {cpr.protocols.Submission} submission
		 * @param {Object} reqData
		 */
		function _responseDecoder(submission, resData) {
			var _app = submission.getAppInstance();
			var resDataObj = JSON.parse(resData);
			
			var voProtocolJson = {};
			
			for (var key in resDataObj) {
				for (var subKey in resDataObj[key]) {
					voProtocolJson[subKey] = resDataObj[key][subKey];
				}
			}
			
			return {contentType : "application/json", content : voProtocolJson};
		}
		
		
		/**
		 * 
		 * @private
		 * @param {String} psType
		 * @return {Object}
		 */
		function _getJsonType(psType) {
			var voJsonType = {};
			
			switch(psType){
				case "type2" : {
					voJsonType = {
		   				"data" : { 
		                	"payload" : {}
		              	}   
					};
					
					break;
				}
				
				default : {
					voJsonType = {
						 "header"  : {}
		    			,"payload" : {}
					};
					
					break;
				}
			}
			
			return voJsonType;
		}
		
		function uf_send(e){
			  
			var thisCtl = e.control ; 
			var vsParamListObj = new cpr.utils.ObjectMap();
		/**
		 * @type cpr.protocols.Submission
		 */
			var vSub =  e.targetControl ;
		
			if (vSub == null || vSub.type == null) {
				return;
			}
			
			//apply url petten ( true , false ) 
			//default value  true 
			var vsUAttParm = vSub.userAttr("uri_parameter_gen") ;
		
			if( "true" != vsUAttParm ) return ;
			
			var vsParamList    = vSub.getParameterNames(); // send parameter ( remamber basic config )
			var vnSendParCnt   = vSub.getRequestDataCount(); 
			var vsSendParList  = vSub.getRequestObject(); // send data ( dataSet or dataMap )
			
			vsParamList.forEach( function ( each1 ) {
				vsParamListObj.put(each1, vSub.getParameters(each1));
			});
			 
			 
			var isDataMap = true ;
			var isDataSet = true ;
			var vsUAttParmMap = vSub.userAttr("uri_parameter_gen_dataMap") ;
			var vsUAttParmSet = vSub.userAttr("uri_parameter_gen_dataSet") ;
			if( vsUAttParmMap == "false" ) isDataMap = false ; 
			if( vsUAttParmSet == "false" ) isDataSet = false ; 
			 
			 
			for( var i = 0 ; i < vnSendParCnt ; i++){
				var vds1  = vSub.getRequestData(i); 
			    
				  //dataMap 이 아니면 이를 적용하지 않는다.  
				  if( ! ( vds1 instanceof cpr.data.DataMap )   ){
				  	  if( ! isDataMap )
				  	      continue;
				  }
				  
				  //dataSet 이 아니면 이를 적용하지 않는다. 
				  //TODO : dataSet의 기능이 필요할 경우 이를 활용한다.   
				  if( ! ( vds1 instanceof cpr.data.DataSet )   ){
				  	  if( ! isDataSet )
				  	      continue;
				  }
				  
				  var vdsData = vds1.data ;
				  
				  var vds1ColNm = vdsData.getColumnNames();
				  
				  //column을 param으로 이동 시킨다. 
				  vds1ColNm.forEach( function(eachPaNm){
				  	   var vsParValue = vdsData.getString(eachPaNm);
				  	   vSub.setParameters(eachPaNm, vsParValue); 
				  }); 
			}
		 
		    vSub.addEventListenerOnce("submit-done", function(){
				    /**
				      * 파라미터를 삭제하고 복원한다. 
				      */
				    vSub.removeAllParameters();
				    vsParamListObj.forEach(function(eachMap){  
				       vSub.setParameters(eachMap, vsParamListObj.get(eachMap));  
				    }); 
		    });
		}
	});
})();
/// end - module/submit
/// start - module/util
/*
 * Module URI: module/util
 * SRC: module/util.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/util", function(exports, globals, module){
		
		//exports.id = "util.module.js";
		
		/**
		 * @class AppUtil AppInstance에 대한 유틸
		 */
		AppUtil = {
		    /**
		     * 해당 앱의 속성(Property)값을 할당한다.
		     * @param {cpr.core.AppInstance} app  앱인스턴스 객체
			 * @param {String | Object} propertyName App 속성
			 * @param {String | Object} value App 속성값
			 * @param {boolean} pbEvent value-change 이벤트 발생여부  (default : true)
			 * @return void
		     */
		    setAppProperty : function (app, propertyName, value, pbEvent) {
		    	pbEvent = pbEvent == null ? true : pbEvent;
		    	
		        /** @type cpr.core.AppInstance */
		        var _app = app;
		        var hostApp = _app.getHostAppInstance();
		        var property = _app.getAppProperty(propertyName);
		        if(hostApp && hostApp.lookup(property) && hostApp.lookup(property) instanceof cpr.controls.UIControl){
		        	if(pbEvent){
		        		hostApp.lookup(property).value = value;
		        	}else{
		        		hostApp.lookup(property).putValue(value);
		        	}
		        }else{
		        	_app.setAppProperty(propertyName, value);
		        }
		    },
		    
		    /**
		     * UDC 컨트롤에 대해 value 앱 속성에 바인딩된 컨트롤 객체를 반환한다.
		     * @param {cpr.controls.UIControl} poCtrl
		     */
		    getUDCBindValueControl : function(poCtrl){
		    	var vcBindCtrl = poCtrl;
		    	var embApp = poCtrl.getEmbeddedAppInstance();
				embApp.getContainer().getChildren().some(function(embCtrl){
					if(embCtrl.type == "container"){
						embCtrl.getChildren().some(function(subembCtrl){
							if(subembCtrl.getBindInfo("value") && subembCtrl.getBindInfo("value").property == "value"){
								vcBindCtrl = subembCtrl;
								return true;
							}
						});
					}else{
						if(embCtrl.getBindInfo("value") && embCtrl.getBindInfo("value").property == "value"){
							vcBindCtrl = embCtrl;
							return true;
						}
					}
				});
				
				return vcBindCtrl;
		    }
		 };
		
		/**
		 * @class ValueUtil Value 체크 및 형 변환
		 */
		ValueUtil = {
		    /**
		     * 해당 값이 Null인지 여부를 체크하여 반환한다.
			 * @param {String | Object} puValue		값
			 * @return {Boolean} Null 여부
		     */
		    isNull : function (puValue) {
		        return (this.fixNull(puValue) == "");
		    },
		
		    /**
		     * 해당 값이 숫자(Number) 타입인지 여부를 반환한다.
			 * @param {Number | String} puValue		값
			 * @example ValueUtil.isNumber("1234.56") == true
			 * @return {Boolean} Number인지 여부
		     */
		    isNumber : function (puValue) {
		        var vnNum = Number(puValue);
		        return isNaN(vnNum) == false;
		    },
		
		    /**
		     * 해당 값에 대한 문자열을 반환한다. 
		     *       만약 해당값이 null이거나 정의되지 않은 경우, 공백("") 문자열을 반환한다.
			 * @param {String | Object} puValue		값
			 * @return {String} 문자열 String
		     */
		    fixNull : function (puValue) {
		        var vsType = typeof(puValue);
		        if (vsType == "string" || (vsType == "object" && puValue instanceof String)) {
					puValue = this.trim(puValue);
		        }
				
		        return (puValue == null || puValue == "null" || puValue == "undefined") ? "" : String(puValue);
		    },
		
		     /**
		     * 해당 값을 불리언(Boolean) 타입으로 변환한다.
			 * @param {Boolean | Object} puValue		값
			 * @return {Boolean} 불리언 유형으로 반환
		     */
		    fixBoolean : function (puValue) {
		        if (typeof(puValue) == "boolean" || puValue instanceof Boolean) {
		            return puValue;
		        }
		        if (typeof(puValue) == "number" || puValue instanceof Number) {
		            return puValue != 0;
		        }
		        return (this.fixNull(puValue).toUpperCase() == "TRUE");
		    },
		
		    /**
		     * 해당 값을 숫자(Number) 타입으로 변환한다.
			 * @param {Object} puValue		값
			 * @return {Number} 숫자 타입으로 반환
		     */
		    fixNumber : function (puValue) {
		        if (typeof(puValue) == "number" || puValue instanceof Number) {
		            return puValue;
		        }
		        var vnNum = Number(this.fixNull(puValue));
		        return isNaN(vnNum) ? 0 : vnNum;
		    },
		    
		    /**
		     * 해당 값을 숫자(Float) 타입으로 변환한다.
			 * @param {Object} puValue		값
			 * @return {Float} 소수점이 있는 숫자 타입으로 반환
		     */
		    fixFloat : function (puValue) {
		        if (typeof(puValue) == "number" || puValue instanceof Number) {
		            return puValue;
		        }
		        var vnFloat = parseFloat(this.fixNull(puValue));
		        return isNaN(vnFloat) ? 0 : vnFloat;
		    },
		    
		    /**
		     * 해당 값의 앞/뒤 공백을 제거한 문자열을 반환한다.
			 * @param {String} psValue		값
			 * @return {String} 공백 제거된 문자열
		     */
		    trim : function (psValue) {
		        return psValue == null ? psValue : psValue.replace(/(^\s*)|(\s*$)/g, "");
		    },
		    
		    /**
		     * 문자열을 split한 배열을 반환한다.
			 * @param {String} psValue		split 대상 문자열
			 * @param {String} psDelemeter  구분문자 (ex: 콤마(,))
			 * @return {Array} 문자열 배열
		     */
		    split : function (psValue, psDelemeter) {
		    	psValue = this.fixNull(psValue);
		        var vaValues = new Array();
		        var vaTemp = psValue.split(psDelemeter);
		        var _this = this;
		        vaTemp.forEach(function(/* eachType */ item){
		        	vaValues.push(_this.trim(item));
		        });
		        
		        return vaValues;
		    },
		    
		    /**
		     * 문자열 데이터의 길이(length)를 반환한다.
			 * @param {String} value		값
			 * @param {"char" | "utf8" | "ascii"} unit? 단위<br/>
		     * [char] : 문자의 길이.<br/>
		 	 * [utf8] : utf8 기준의 문자 byte size.<br/>
		 	 * [ascii] : ascii 기준의 문자 byte size.
			 * @return {Number} 문자열 길이
		     */
		    getLength : function(value, unit) {
		    	if(!unit) unit = "char";
		    	
				var length = 0;
				switch(unit) {
					case "utf8":{
		//				for(var i = 0, c; c = value.charAt(i++); length += (c >> 11 ? 3 : c >> 7 ? 2 : 1));
						for(var i=0, len=value.length; i<len; i++) {
						    if(escape(value.charAt(i)).length >= 4)
						        length += 3;
						    else if(escape(value.charAt(i)) == "%A7")
						        length += 3;
						    else if(escape(value.charAt(i)) != "%0D")
						        length++;
						    else length++;
						}
						break;
					}
					case "ascii":{
						for(var i = 0, c; c = value.charAt(i++); length += c >> 7 ? 2 : 1);
						break;
					}
					default : {
						length = value.length;
					}
				}
				
				return length;
		    },
		    getByteLength: function(/*String*/_str){
		    	var stringByteLength = 0;
		    	stringByteLength = (function(s,b,i,c){
				    for(b=i=0;c=s.charCodeAt(i++);b+=c>>11?2:c>>7?2:1);
				    return b
				})(_str);
		
				return stringByteLength;
		    },
		    
		    /************************************************************************************
			 *    : 입력값을 마스킹한다
		     * @exmple  var sMaskValue  = ValueUtil.maskType("JUMIN","9901012000000"))
			 * @param {"POLY"|"JUMIN"| "ACCOUNT"|"LOAN"|"TEL" |"EMAIL"|"ADDRESS"|"HPID"|"PASSPORT" |"DRIVER" |"FOREIGNER"|"CARD" |"NAME"} psType   String			-Data Type<br>
						'POLY' 	    :     <br>
						'JUMIN' 	: 주민등록번호<br>
						'ACCOUNT' 	: 은행계좌번호<br>
						'LOAN' 		: 융자대출번호<br>
						'TEL' 		: 전화번호<br>
						'EMAIL' 	: 이메일<br>
						'ADDRESS' 	: 주소   (,콤마 기준으로 이후값 마스킹)<br>
						'HPID' 		: 홈페이지 id<br>
						'PASSPORT'  : 여권번호<br>
						'DRIVER'    : 운전면허번호<br>
					    'FOREIGNER' : 외국인등록번호<br>
					    'CARD'      : 카드번호<br>
		                'NAME'      : 이름<br>
			 * @param  sourceData String 		- value
			 * @return String    마스킹된 결과값
			 ************************************************************************************/
			maskType: function(psType, sourceData) {
				// "개인정보 암호화(마스킹)" 페이지 기준.
				// 증권번호, 주민등록번호, 은행계좌번호, 융자대출번호, 전화번호, E-Mail, 주소, 홈페이지 id
				// 증권번호 : 앞 2~4자리. 예시 > 1****678
				// 주민등록번호 : 뒤 6자리. 예시 > 760421-1******
				// 은행계좌번호 : 뒤 6자리~2자리. 예시 > 12345****9
				// 융자대출번호 : 제한없음.
				// 전화번호 : 뒤 4자리. 예시 > 010-7890-****
				// E-Mail : 뒤 3자리. 예시> abc***@hanwha.com
				// 주소 : 세부주소. 예시 > 서울시 영등포구 여의도동 63 *****
				// 홈페이지 id : 뒤 3자리. 예시 > abc***
				// 여권번호: 발급 일련번호 뒤 4자리 or 영문 1자리 + 뒷 3자리 예시 > M1234A567 -> M1234****, M12A34567 -> M12*34***
				// 운전면허번호 : 숫자 첫 2번째 자리와 일련번호 뒷2자리, 체크 값 첫 번째 자리 예시 > 12-1*-1234**-*2, 서울-1*-1234**-*2
				// 외국인등록번호 : 뒤 6자리. 예시 > 760421-1******
				// 카드번호 : 14~16 자리에 따라 4~6개 마스킹 예시 > 1234-56**-****-3456, 1234-56****-*2345, 1234-56****-1234
				// 이름  : 한글은 첫자와 마지막자를 제외한 *
		
				var data = this.trim(String(sourceData));
				if( this.isNull(data) ){
					return this.fixNull(data);
				}
		
				var sReturnValue = "";
				var pattern      = "";
		
				switch (psType.toUpperCase()) {
		
					case 'POLY': //증권번호. (앞 2번째 부터 4개 숫자 마스킹)
						pattern = /^([0-9]{1})(.{4})([0-9]+)$/;
						if(pattern.test(data)){
							sReturnValue = data.replace(pattern,"$1****$3");
						}
						break;
		
					case 'JUMIN': //주민등록번호.(마지막 6자리 마스킹)
						pattern = /^([0-9]{6})(-*)([a-zA-Z0-9]{1})(.{6})$/;
						//주민번호로 13자리가 안된 값이 넘어오는 경우, 채우기  (#5786 암호화된 문자열의 주민번호도 포멧팅하도록 수정 )(2021.09.01)
		                if(data.length < 13) {
			                // [#5828] (2021.09.06) minLength -> fixLength로 변경 처리 (fixLength만큼 글자수를 채운다)
		                    data = this.revise(data, "rpad", { fixLength : 13 , lengthUnit :"char" , padStr  :"*" });
		                }
						if(pattern.test(data)){
							sReturnValue = data.replace(pattern,"$1-$3******");
						}
						break;
		
					case 'ACCOUNT': //계좌번호 (뒤 6~2자리. 5개 숫자 마스킹)
						/* 2021-02-22 뒤 2~6, 5개 숫자 마스킹  */
						// 10~15 자리수내에서 마스킹
						var sDataAccount = data.replace(/-/g, "");
						if (sDataAccount.length > 9 && sDataAccount.length < 16) {
							sReturnValue = setNumberMask(data, 1, 5);
						}
						break;
		
					case 'LOAN': //융자대출번호 (마스킹 없음)
						sReturnValue = data;
						break;
		
					case 'TEL': //전화번호 (마지막 4개 숫자 마스킹)
						pattern =/(^02.{0}|^01.{1}|[0-9]{3})([0-9]+)(.{4})/;
						var sDataTel = data.replace(/-/g, "");
						if(pattern.test(sDataTel)){
							sReturnValue = sDataTel.replace(pattern,"$1-$2-****");
						}
						break;
		
					case 'EMAIL': //이메일 (이메일 아이디 뒤 3자리 마스킹)
						pattern =/^([a-zA-Z0-9._-]+)([a-zA-Z0-9._-]{3})@([a-zA-Z0-9._-]+)[.]([a-zA-Z0-9._-]+)$/;
						if(pattern.test(data)){
							sReturnValue = data.replace(pattern,"$1***@$3.$4");
						}
						break;
		
					case 'ADDRESS': //주소
						// 뒷자리 * 5개로 표현  (2020.7.1)
						var aData = data.split(",");
						sReturnValue = aData[0] + " *****";
						break;
		
					case 'HPID': //홈페이지 ID
						pattern =/^(.+)(.{3})$/;
						if(pattern.test(data)){
							sReturnValue = data.replace(pattern,"$1***");
						}
						break;
		
					case 'PASSPORT': //여권번호
						var oNewPattern1 =/^([a-zA-Z]{1})([0-9]+)([a-zA-Z]{1})([0-9]+)([0-9]{3})$/; // 신 여권번호 ex ) M12A34567
						var oNewPattern2 =/^([a-zA-Z]{1})([a-zA-Z]{1})([0-9]+)([0-9]{3})$/; // 신여권번호 ex) MA1234567
						var oOldPattern =/^(.+)(.{4})$/; // 구 여권번호
		
						if (oNewPattern1.test(data)) {
							sReturnValue = data.replace(oNewPattern1 , "$1$2*$4***");
						} else if (oNewPattern2.test(data)) {
							sReturnValue = data.replace(oNewPattern2 , "$1*$3***");
						} else if (oOldPattern.test(data)) {
							sReturnValue = data.replace(oOldPattern,"$1****");
						}
		
						break;
		
					case 'DRIVER': // 운전면허번호
						pattern = /^([0-9|ㄱ-ㅎ|ㅏ-ㅣ|가-힣]{2})(-*)([0-9]{1})([0-9]{1})(-*)([0-9]+)([0-9]{2})(-*)([0-9]{1})([0-9]{1})/;
		
						if(pattern.test(data)){
							sReturnValue = data.replace(pattern,"$1-$3*-$6**-*$10");
						}
		
						break;
		
					case 'FOREGINER': // TODO: 오타로 삭제예정 - 외국인등록번호 ()
						pattern = /^([0-9]{6})(-*)([0-9]{1})(.{6})$/;
						//주민번호로 13자리가 안된 값이 넘어오는 경우, 채우기  (#5786 암호화된 문자열의 주민번호도 포멧팅하도록 수정 )(2021.09.01)
		                if(data.length < 13) {
		                // [#5828] (2021.09.06) minLength -> fixLength로 변경 처리 (fixLength만큼 글자수를 채운다)
		                    data = this.revise(data, "rpad", { fixLength : 13 , lengthUnit :"char" , padStr  :"*" });
		                }
						if(pattern.test(data)){
							sReturnValue = data.replace(pattern,"$1-$3******");
						}
						break;
		
		            case 'FOREIGNER': // 외국인등록번호
		                pattern = /^([0-9]{6})(-*)([0-9]{1})(.{6})$/;
		                //주민번호로 13자리가 안된 값이 넘어오는 경우, 채우기  (#5786 암호화된 문자열의 주민번호도 포멧팅하도록 수정 )(2021.09.01)
		                if(data.length < 13) {
		                // [#5828] (2021.09.06) minLength -> fixLength로 변경 처리 (fixLength만큼 글자수를 채운다)
		                    data = this.revise(data, "rpad", { fixLength : 13 , lengthUnit :"char" , padStr  :"*" });
		                }
		                if(pattern.test(data)){
		                    sReturnValue = data.replace(pattern,"$1-$3******");
		                }
		                break;
		
					case 'CARD': // 카드번호
						var pattern_14 = /^([0-9]{4})(-*)([0-9]{2})([0-9]{4})(-*)([0-9]{4})$/;
						var pattern_15 = /^([0-9]{4})(-*)([0-9]{2})([0-9]{4})(-*)([0-9]{1})([0-9]{4})$/;
						var pattern_16 = /^([0-9]{4})(-*)([0-9]{2})([0-9]{2})(-*)([0-9]{4})(-*)([0-9]{4})$/;
		
						if (pattern_14.test(data)){
							sReturnValue = data.replace(pattern_14,"$1-$3****-$6");
						} else if (pattern_15.test(data)){
							sReturnValue = data.replace(pattern_15,"$1-$3****-*$7");
						} else if (pattern_16.test(data)){
							sReturnValue = data.replace(pattern_16,"$1-$3**-****-$8");
						}
		
						break;
					case 'NAME' :
						if(data.match(/^[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]+$/) ){  //한글인경우
							if(data.length > 2){
								var originName = data.split('');
								originName.forEach(function(name, i){
									if(i == 0 || i === originName.length-1){
										return;
									}
									originName[i] = '*';
								});
		
								var joinName = originName.join();
								return joinName.replace(/,/g, '');
							}
							else{
								var patternKor = /.$/;
								return data.replace(patternKor, '*')
							}
						}
						else{   //영어인경우
							var names = data.split(" ");
							var lastName = "";
							var maskedName = "";
		
		                    if ( names.length > 1 ){
		                        lastName = names.pop(); //성
		                    }
		
							names = names.map(function(name){   //First Name, Middle Name
		
								//#5141 정규식"((?<="로 인한 ie오류로 인하여 수정처리(2021.06.18)
								var stReplaceIdx = name.length - Math.ceil(name.length / 2);  //replace 시작위치
								var sMaskName = name.substr(0, stReplaceIdx);
								var nMaskCnt  = name.length - stReplaceIdx;
		
		                        for (var idx = 0; idx < nMaskCnt; idx++) {
		                            sMaskName = sMaskName + "*";
		                        }
		
								return sMaskName;
							});
		
							names.forEach(function(each, i){
								maskedName += each + " ";
							});
							maskedName +=  lastName
		
							return maskedName;
						}
						break;
					default :
						break;	// sReturnValue가 ""이기 때문
				}
		
				// sReturnValue 가 없을 경우 사용자가 입력한 data 리턴되게 변경.
				// 마스킹 형식과 일치하지 않은 경우, 마스킹 처리되지 않아서 sReturnValue 가 빈값.
				if (sReturnValue == "") {
					sReturnValue = data;
				}
		
				return sReturnValue;
			}
		 };
		
		/**
		 * @class 날짜 유틸 클래스
		 */
		DateUtil = {
		
		    /**
		     * 날짜를 지정한 패턴의 문자열로 반환한다.
			 * @param {Date} poDate			날짜
			 * @param {String} psPattern	포맷 문자열(ex: YYYYMMDD)
			 * @return {String} 날짜 문자열
		     */
		    format : function (poDate, psPattern) { // dateValue As Date, strPattern As String
		        var CAL_INITIAL = {
				    MONTH_IN_YEAR :         ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
				    SHORT_MONTH_IN_YEAR :   ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
				    DAY_IN_WEEK :           ["Sunday", "Monday", "Tuesday", "Wednesday","Thursday", "Friday", "Saturday"],
				    SHORT_DAY_IN_WEEK :     ["Sun", "Mon", "Tue", "Wed","Thu", "Fri", "Sat"]
				};
		        
		        var year      = poDate.getFullYear();
			    var month     = poDate.getMonth() + 1;
			    var day       = poDate.getDate();
			    var dayInWeek = poDate.getDay();
			    var hour24    = poDate.getHours();
			    var ampm      = (hour24 < 12) ? "AM" : "PM";
			    var hour12    = (hour24 > 12) ? (hour24 - 12) : hour24;
			    var min       = poDate.getMinutes();
			    var sec       = poDate.getSeconds();
			
			    var YYYY = "" + year;
			    var YY   = YYYY.substr(2);
			    var MM   = (("" + month).length == 1) ? "0" + month : "" + month;
			    var MON  = CAL_INITIAL.MONTH_IN_YEAR[month-1];
			    var mon  = CAL_INITIAL.SHORT_MONTH_IN_YEAR[month-1];
			    var DD   = (("" + day).length == 1) ? "0" + day : "" + day;
			    var DAY  = CAL_INITIAL.DAY_IN_WEEK[dayInWeek];
			    var day  = CAL_INITIAL.SHORT_DAY_IN_WEEK[dayInWeek];
			    var HH   = (("" + hour24).length == 1) ? "0" + hour24 : "" + hour24;
			    var hh   = (("" + hour12).length == 1) ? "0" + hour12 : "" + hour12;
			    var mm   = (("" + min).length == 1) ? "0" + min : "" + min;
			    var ss   = (("" + sec).length == 1) ? "0" + sec : "" + sec;
			    var SS   = "" + poDate.getMilliseconds();
				
			    var dateStr;
			    var index = -1;
			    if (typeof(psPattern) == "undefined") {
			        dateStr = "YYYYMMDD";
			    } else {
			        dateStr = psPattern;
			    }
			
			    dateStr = dateStr.replace(/YYYY/g, YYYY);
			    dateStr = dateStr.replace(/yyyy/g, YYYY);
			    dateStr = dateStr.replace(/YY/g,   YY);
			    dateStr = dateStr.replace(/MM/g,   MM);
			    dateStr = dateStr.replace(/MON/g,  MON);
			    dateStr = dateStr.replace(/mon/g,  mon);
			    dateStr = dateStr.replace(/DD/g,   DD);
			    dateStr = dateStr.replace(/dd/g,   DD);
			    dateStr = dateStr.replace(/day/g,  day);
			    dateStr = dateStr.replace(/DAY/g,  DAY);
			    dateStr = dateStr.replace(/hh/g,   hh);
			    dateStr = dateStr.replace(/HH/g,   HH);
			    dateStr = dateStr.replace(/mm/g,   mm);
			    dateStr = dateStr.replace(/ss/g,   ss);
			    dateStr = dateStr.replace(/(\s+)a/g, "$1" + ampm);
			
			    return dateStr;
		    },
		
		    /**
		     * 올바른 날짜인지를 체크한다.
			 * @param {Number | String} puYear			년도
			 * @param {Number | String} puMonth			월
			 * @param {Number | String} puDay			일
			 * @return {Boolean} 유효한 날짜인지 여부
		    */
		    isValid : function (puYear, puMonth, puDay) {
		    	var pnYear = Number(puYear);
		    	var pnMonth = Number(puMonth);
		    	var pnDay = Number(puDay);
		        var vdDate = new Date(pnYear, pnMonth-1, pnDay);
		        return vdDate.getFullYear() == pnYear      &&
		               vdDate.getMonth   () == pnMonth - 1 &&
		               vdDate.getDate    () == pnDay;
		    },
		
		    /**
		     * 현재 날짜에 해당 날짜만큼 더한 날짜를 반환한다.
			 * @param {String} psDate			날짜 문자열(ex: 20180101)
			 * @param {Number} pnDayTerm		추가 일수
			 * @return {String} 날짜 문자열
		    */
		    addDate : function (psDate, pnDayTerm) { 
		    	var pnYear 	= Number(psDate.substring(0,4));
		    	var pnMonth = Number(psDate.substring(4,6));
		    	var pnDay 	= Number(psDate.substring(6,8));
		
		    	if (this.isValid(pnYear, pnMonth, pnDay)) {
			    	var vdDate = new Date(pnYear, pnMonth-1, pnDay);
			    	var vnOneDay = 1*24*60*60*1000 ; /* 1day,24hour,60minute,60seconds,1000ms */
			    	
			    	var psTime = vdDate.getTime() + (Number(pnDayTerm)*Number(vnOneDay));
			    	vdDate.setTime(psTime);
			    	
			        return this.format(vdDate,"YYYYMMDD");
		    	}else{
		    		return psDate;
		    	}
		    },
		    
		    /**
		     * 날짜 문자열을 Date형으로 변환하여 반환한다.
		     * <pre><code>
		     * DateUtil.toDate("2007-02-09","YYYY-MM-DD");
		 	 * </code></pre>
			 * @param {Date} psDateTime			날짜
			 * @param {String} psPattern	포맷 문자열(ex: YYYY-MM-DD)
			 * @example DateUtil.toDate("2007-02-09","YYYY-MM-DD")
			 * @return {Date} 날짜(Date) 객체
		     */ 
		    toDate : function (psDateTime, psPattern) {
		        var vdDate = new Date();
		        var vnIdx, vnCnt;
		
		        var vsaFmt = ["Y", "M", "D", "H", "m", "s", "S"];
		        var vnFmtLen = vsaFmt.length;
		        var vnPtnLen = psPattern.length;
		        var vnaNums = [vdDate.getFullYear(), vdDate.getMonth()+1, vdDate.getDate(), vdDate.getHours(), vdDate.getMinutes(), vdDate.getSeconds(), vdDate.getMilliseconds()];
		
		        for (var i = 0; i < vnFmtLen; i++) {
		            vnIdx = psPattern.indexOf(vsaFmt[i]);
		            if (vnIdx != -1) {
		                vnCnt = 1;
		                for (var j=vnIdx+1; j < vnPtnLen; j++) {
		                    if (psPattern.charAt(j) != vsaFmt[i]) { break; }
		                    vnCnt++;
		                }
		                vnaNums[i] = Number(psDateTime.substring(vnIdx, vnIdx+vnCnt));
		            } else {
		                if(i==0) vnaNums[0] = 1900;
		                else if(i==2) vnaNums[2] = 01;
		            }
		        }
		
		        if (vnaNums[0] < 1900) { // 년도는 검증
		            if (vnaNums[0] <= vdDate.getFullYear() % 100) {
		                vnaNums[0] += vdDate.getFullYear() - (vdDate.getFullYear() % 100);
		            } else if (vnaNums[0] < 100) {
		                vnaNums[0] += 1900;
		            } else {
		                vnaNums[0] = 1900;
		            }
		        }
		
		        return new Date(vnaNums[0], vnaNums[1]-1, vnaNums[2], vnaNums[3], vnaNums[4], vnaNums[5], vnaNums[6]);
		    },
		
		    /**
		     * 해당월의 마지막 일자를 반환한다.
		     * <pre><code>
		     * DateUti.getMonthLastDay("20180201");<br>
		     * <p>또는<p>
		     * DateUti.getMonthLastDay("20180301", -1);
		 	 * </code></pre>
			 * @param {String} psDate	년월 문자열(ex: 201802, 20180201)
			 * @param {Number} pnAdd?   +/- 월 수
			 * @return {Number} 일(Day)
		     */ 
		    getMonthLastDay : function (psDate, pnAdd) {
		    	var pnYear 	= Number(psDate.substring(0,4));
		    	var pnMonth = Number(psDate.substring(4,6));
		        var vdDate = new Date(pnYear, pnMonth, 0, 1, 0, 0);
		        if(pnAdd == null){
		        	return vdDate.getDate();
		        }else{
		        	var vdDate2 = new Date(vdDate.getFullYear(), vdDate.getMonth()+1+pnAdd, 0, 1, 0, 0);
		        	return vdDate2.getDate();
		        }
		    },
		
		    /**
		     * 두 날짜간의 일(Day)수를 반환한다.
			 * @param {String} psDate1st	년월 문자열(ex: 20180201)
			 * @param {String} psDate2nd    년월 문자열(ex: 20170201)
			 * @return {Number} 일수(Day)
		     */
		    getDiffDay : function (psDate1st, psDate2nd) {
		    	var date1 = this.toDate(psDate1st, "YYYYMMDD");
		    	var date2 = this.toDate(psDate2nd, "YYYYMMDD");
		        
		        return parseInt((date2 - date1)/(1000*60*60*24));
		    },
		    
		    /**
		     * 해당 날짜의 하루 전 날짜 반환한다.
		     * @param {String} psDate 날짜포맷 문자열
		     */
		    getBeforeDate : function(psDate){
		    	var y = psDate.substring(0, 4);
				var m = psDate.substring(4, 6);
				var d = psDate.substring(6, 8);
				var befDt = new Date(y, m - 1, d - 1);
				var befDtYear = befDt.getFullYear().toString();
				var befDtMonth = new String(befDt.getMonth() + 1);
				var befDtDate = befDt.getDate().toString();
				
				if (befDtMonth.length == 1) befDtMonth = "0" + befDtMonth;
				if (befDtDate.length == 1) befDtDate = "0" + befDtDate;
				
				return befDtYear + befDtMonth + befDtDate + "000000";
		    },
		    
		    /**
		     * 입력받은 날짜에 시분초 문자열 000000을 붙여서 반환한다.
		     * @param {String} psDate 날짜포맷 문자열
		     */
		    addZoreDate : function(psDate){
		    	var dateString = psDate.substring(0, 8);
				dateString += "000000";
				return dateString;
		    },
		    
		    /**
		     * <pre><code>
		     *  DateUtil.addMinutes("0900", 50);
		     * </code></pre>
		     * @param {String} psHHmm 특정분을 더할 시분 값
			 * @param {String} pnAddMinutes 더할 분
			 * @return {String} 시분(HHmm)
		     */
		    addMinutes : function (psHHmm, pnAddMinutes) {
		    	var vdDate = DateUtil.toDate(psHHmm, "HHmm");
				vdDate.setMinutes(vdDate.getMinutes() + pnAddMinutes);
				
				var vnHours = vdDate.getHours();
				var vnMinutes = vdDate.getMinutes();
				
				var vsHours = "";
				var vsMinutes = "";
				
				if(vnHours < 10){
					vsHours = "0" + vnHours;
				}else{
					vsHours = vnHours + "";
				}
				
				if(vnMinutes < 10){
					vsMinutes = "0" + vnMinutes;
				}else{
					vsMinutes = vnMinutes + "";
				}
				
				return vsHours + vsMinutes;
		    },
		    
		    getCurrentTime : function() {
		    	return new Date().getTime();
		    },
		    
		    /**
		     * 입력한 일자에 해당되는 한글 요일을 반환한다.
		     * <pre><code>
		     * DateUti.getDayOfWeek("20191120");
		 	 * </code></pre>
			 * @param {String} psDate 일자 문자열(ex:20191120)
			 * @return {String} 한글 요일
		     */ 
		    getDayOfWeek : function (psDate) {
		    	
		    	var vsYear 	= psDate.substring(0,4);
		    	var vsMonth = psDate.substring(4,6);
		    	var vsDay 	= psDate.substring(6,8);
		    	var vaWeek  = ['일', '월', '화', '수', '목', '금', '토'];
		    	
				return vaWeek[new Date(vsYear + "-" + vsMonth + "-" + vsDay).getDay()];
		    }
		};
		
		/**
		 * @class 파일 유틸 클래스
		 */
		FileUtil = {
			
			getMaxUploadSize : function() {
				return 100;
			},
			
			//업로드 가능한 파일 확장자 목록반환
			getPemitedFileExts : function(){
				var vaFileExt = ['JPG', 'PNG', 'GIF', 'TIF', 'TIFF', 'JFIF', 'BMP', 'TXT', 'HWP', 'DOCX', 'DOC'
								, 'DOCM', 'PPT', 'PPTX', 'PPTM', 'PPS', 'PPSX', 'XLS', 'XLSX', 'XLSM', 'XLAM'
								, 'XLA', 'PSD', 'PDF', 'ODS', 'OGG', 'MP4', 'AVI', 'WMV', 'ZIP', 'RAR', 'TAR'
								, '7Z', 'TBZ', 'TGZ', 'LZH', 'GZ', 'AI'
							   ];
				return vaFileExt;
			},
			
			//업로드 불가한 파일 확장자 목록반환
			getLimitedFileExts : function(){
				// 파일 선택 제한 확장자.
				var vaFileExt = ['A6P','AC','AS','ACR','ACTION','AIR','APP','ASP','ASPX','AWK'
								,'BAT'
								,'CGI','CMD','COM','CSH'
								,'DEK','DLD','DS'
								,'EBM','ESH','EXE','EZS'
								,'FKY','FRS','FXP'
								,'GADGET'
								,'HMS','HTA'
								,'ICD','INX','IPF','ISU'
								,'JAR','JS','JSE','JSP','JSX'
								,'KIX'
								,'LUA'
								,'MCR','MEM','MPX','MS','MST'
								,'OBS'
								,'PAF','PEX','PHP','PIF','PL','PRC','PRG','PVD','PWC','PY','PYC','PYO'
								,'QPX'
								,'RBX','RGS','ROX','RPJ'
								,'SCAR','SCR','SCRIPT','SCT','SH','SHB','SHS','SPR'
								,'TLB','TMS'
								,'U3P','UDF'
								,'VB','VBE','VBS','VBSCRIPT'
								,'WCM','WPK','WS','WSF'
								,'XQT'
							  ];
				
				return vaFileExt;
			},
			
			/**
			 * 파일 확장자 체크
			 * @param {String} psFileNm 파일명
			 * @param {String[]} paFileFilter 가능 파일 확장자 명
			 */
			checkFileExt : function(psFileNm, paFileFilter) {
				if (ValueUtil.isNull(paFileFilter)) paFileFilter = this.getPemitedFileExts();
				
				var vbCheck = false;
				//허용 파일 확장자 체크
				var arrStr = ValueUtil.split(psFileNm, ".");
				var extStr = arrStr [arrStr.length - 1].toUpperCase();
				for (var i=0, len=paFileFilter.length; i<len; i++) {
					if (extStr == paFileFilter[i].toUpperCase()) {
						vbCheck = true;
						break;
					}
				}
				
				if (!vbCheck) {
					alert(this.__getMessage("NLS-ERR-M007", [extStr]));
					return false;
				}
				
				//제한 파일 확장자 체크
				var vaLimitedFileExts = this.getLimitedFileExts();
				for (var i=0, len=vaLimitedFileExts.length; i<len; i++) {
					if (extStr == vaLimitedFileExts[i]) {
						alert(this.__getMessage("NLS-ERR-M007", [extStr]));
						return false;
					}
				}
				
				return true;
			},
			
			/**
			 * 파일 업로드 용량 체크
			 * @param {File} poFile 검사할 파일
			 * @param {Number} pnLimitFileSize 파일 제한 사이즈
			 */
			checkFileSize : function(poFile, pnLimitFileSize) {
				if(!ValueUtil.isNull(poFile)){
					if(poFile.size > (pnLimitFileSize * 1024 * 1024)){
						//파일의 크기가 @mb를 초과하는 경우 첨부할 수 없습니다.
						alert(this.__getMessage("NLS-ERR-M010", ["100"]));
						return false;
					}
				}
				
				return true;
			},
			
			/**
			 * 메시지를 반환한다.
			 * @param {String} psMessageId
			 * @param {String[]} paArgs
			 */
			__getMessage : function(psMessageId, paArgs){
				var message = cpr.I18N.INSTANCE.message(psMessageId);
				var index = 0, count = 0;
		    	while ((index = message.indexOf("@", index)) != -1) {
			        if (paArgs[count] == null) paArgs[count] = "";
			        message = message.substr(0, index) + String(paArgs[count]) + message.substring(index + 1);
			        index = index + String(paArgs[count++]).length;
			    }
			    
			    return message.replace(/\\n/ig, "\n");
			},
			
			/**
			 * File Dialog를 띄우고 선택한 File을 반환한다.
			 * @param {cpr.core.AppInstance} app 앱인스턴스
			 * @param {Any} paFileFilter 확장자를 선택한다. null일 경우 default로 적용되어 있는 확장자만 업로드하도록 한다. (예: ["xls", "xlsx"])
			 * @param {Function} poCallBackFunc 후처리 콜백함수
			 * @param {Boolean} pbMultiple? 단건 선택일지 멀티 선택일지 여부 (default : 멀티) false 일경우 단건
			 * @param {Number} pnLimitFileSize? 파일업로드 제한 용량사이즈(mb 단위)
			 */
			getFileName : function(app, paFileFilter, poCallBackFunc, pbMultiple, pnLimitFileSize){
		   		app.getContainer().getChildren().forEach(function(each){
					if(each instanceof cpr.controls.FileInput && each.id == "com_fileinput") {
						each.dispose();
					}
				});
				
				var fileInput = new cpr.controls.FileInput("com_fileinput");
				fileInput.visible = false;
				//파일 확장자
				if(!ValueUtil.isNull(paFileFilter)) {
					var tempFilter = "";
					if(paFileFilter instanceof Array) {
						for(var i = 0; i < paFileFilter.length; i++) {
							if(i == 0) {
								tempFilter += "." + paFileFilter[i];
							} else {
								tempFilter = tempFilter + ",." + paFileFilter[i];
							}
						}
						console.log(tempFilter);
						fileInput.acceptFile = tempFilter;
					} else {
						fileInput.acceptFile = paFileFilter;
					}
					
				}
				//multi 선택가능여부
				if(!ValueUtil.isNull(pbMultiple)) {
					fileInput.multiple = pbMultiple;
				}
				//파일 업로드 용량
				if(!ValueUtil.isNull(pnLimitFileSize)) {
					fileInput.limitFileSize = pnLimitFileSize;
				}else{
					fileInput.limitFileSize = this.getMaxUploadSize();
				}
				fileInput.limitFileSizeUnit = "mb";
				
				fileInput.addEventListenerOnce("value-change", function(e) {
					if(typeof (poCallBackFunc) == "function"){
						var files = fileInput.files;
						var vsFileNm = "";
						
						//파일 선택 유/무 체크
						if(files.length < 1){
							//파일을 선택해 주세요.
							alert(FileUtil.__getMessage("NLS-CMM-M012"));
							return false;
						}
						for(var i=0, len=files.length; i<len; i++) {
							var voFile = files[i];
							//업로드 확장자 체크
							var fileFilter = new Array();
							
							if(paFileFilter) {
								if(typeof(paFileFilter) == "string") {
									var tempFileFilter = paFileFilter.split(",");
									
									tempFileFilter.forEach(function(each){
										fileFilter.push(each.replace(".", ""));
									});
								}
								
								if(paFileFilter instanceof Array) {
									fileFilter = paFileFilter;
								}
							}
							
				   			if(!FileUtil.checkFileExt(voFile.name, fileFilter)) return false;
							
							//업로드 용량 체크 로직
					   		if(!FileUtil.checkFileSize(voFile, fileInput.limitFileSize)) return false;
						}
						
					   	poCallBackFunc(files);
					}
				});
				
				app.getContainer().addChild(fileInput, {
					"width": "0px",
					"height": "0px"
				});
				
				fileInput.redraw();
				
				setTimeout(function() {
					fileInput.openFileChooser();
				}, 500);
		   	},
			
			/**
			 * 첨부파일을 다운로드 한다.
			 * @param {cpr.core.AppInstance} app 앱인스턴스
			 * @param {{strCommand: String <!-- 다운로드 커맨드 -->, strFileSubPath: String <!-- 해당 화면의 첨부파일 저장 경로(화면ID) -->, strFileNm: String <!-- 원본 파일명(다운로드될 파일의 이름) -->, strOriFileNm: String <!-- 저장된 파일명(서버에 저장되어 있는 파일의 이름) -->, strTmpFilePath: String <!--  -->}} poParam 다운로드 요청파라메터 객체
			 * @param {Function} poCallBackFunc? 콜백함수
			 */
			downloadFile : function(app, poParam, poCallBackFunc) {
				var submit =  app.lookup("XBComFileDownSubmit");
				if(submit == null){
					submit = new cpr.protocols.Submission("XBComFileDownSubmit");
					app.register(submit);
				} else {
					submit.removeAllParameters();
				}
				
				var vsCommand = !ValueUtil.isNull(poParam.strCommand) ? poParam.strCommand : "tmpDownload";
				
				submit.action = "../CmnFile/"+vsCommand+".do";
				submit.responseType = "filedownload";
				submit.addParameter("strFileSubPath", poParam.strFileSubPath);
				submit.addParameter("strFileNm", poParam.strFileNm);
				submit.addParameter("strOriFileNm", poParam.strOriFileNm);
				submit.addParameter("strTmpFilePath", poParam.strTmpFilePath);
				submit.addEventListenerOnce("submit-done", function(e){
					if(typeof (poCallBackFunc) == "function"){
						poCallBackFunc();
					}
				});
				
				submit.send();
			}
		};
		
		
		
		ExcelUtil = {
				_s2ab: function(s) {
					
					var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer
					var view = new Uint8Array(buf); //create uint8array as viewer
					for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet
					return buf;
				},
				_exportJsExcel: function(fileName, sheetName, excelData, headerColumn, gridCtrl) {
					var workbook = new ExcelJS.Workbook();
					
					var worksheet = workbook.addWorksheet(sheetName);
					//		   worksheet.views = [
					//		   {state: 'frozen', xSplit: 0, ySplit: 1}
					//		   ];
					
					//		   worksheet.autoFilter = {
			        //			   from: 'A1',
			        //			   to: 'M1'
			        //		   };
					
					worksheet.columns = headerColumn;
					
					var firstRow = worksheet.getRow(1);
					firstRow.font = {
						bold: true
					};
					firstRow.alignment = {
						vertical: 'middle',
						horizontal: 'center'
					};
					
					firstRow.eachCell({
						includeEmpty: false
					}, function(cell, colNumber) {
						cell.fill = {
							type: 'pattern',
							pattern: 'solid',
							fgColor: {
								argb: 'dddddd'
							}
						};
						
					});
					
					worksheet.addRows(excelData);
					
					var borderStyles = {
						top: {
							style: "thin"
						},
						left: {
							style: "thin"
						},
						bottom: {
							style: "thin"
						},
						right: {
							style: "thin"
						}
					};
					worksheet.eachRow({
						includeEmpty: false
					}, function(row, rowNumber) {
						row.eachCell({
							includeEmpty: false
						}, function(cell, colNumber) {
							cell.border = borderStyles;
						});
					});
					
					var buff = workbook.xlsx.writeBuffer().then(function(data) {
						var blob = new Blob([data], {
							type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
						});
						var a= saveAs(blob, fileName);
						
						var isIE = ["ie", "edge"].indexOf(cpr.utils.Util.detectBrowser().name) !== -1;
						if (!isIE) {
							a.onwriteend = function() {
							}
						} else {
							if (a) {
							}
						}
					});
					
				},
				_exportExcel: function(fileName, sheetName, excelData,type,gridCtrl) {
					
					var wb = XLSX.utils.book_new();
					
					var newWorksheet ;
					if(type == "table") {
						
						// step 2. 시트 만들기 
						newWorksheet = XLSX.utils.table_to_sheet(excelData);
					} else if(type == "json") {
						
						newWorksheet = XLSX.utils.json_to_sheet(excelData);
					}
					
					//프로버젼만 사용 가능 (xlsx.bundle.js, 상용버젼)
		//			newWorksheet["A1"].s = { // set the style for target cell
		//			  font: {
		//			  	name: '',
		//			    sz: 24,
		//			    bold: true,
		//			    color: {
		//			      rgb: "FFFFAA00"
		//			    }
		//			  },
		//			  
		//			  fill : {
		//			  	patternType	: "solid"
		//			  },
		//			  
		//			  border : {
		//			  	bottom : {
		//			  		style: 'solid', color: 'red' 
		//			  	}
		//			  }	
		//			};
					
					// step 3. workbook에 새로만든 워크시트에 이름을 주고 붙인다.  
					XLSX.utils.book_append_sheet(wb, newWorksheet, sheetName);
					
					// step 4. 엑셀 파일 만들기 
					var wbout = XLSX.write(wb, {
						bookType: 'xlsx',
						type: 'binary',
						compression : true
					});
					
					// step 5. 엑셀 파일 내보내기 
					var a = saveAs(new Blob([this._s2ab(wbout)], {
						type: "application/octet-stream"
					}), fileName);
					
					var isIE = ["ie", "edge"].indexOf(cpr.utils.Util.detectBrowser().name) !== -1;
					if(!isIE) {
						a.onwriteend = function(){
						}
					} else {
						if(a) {
						}
					}
				},
				
				exportExcelToTable: function(fileName, sheetName, gridCtrl) {
					var table = document.createElement("table");
					table.id = "tableData";
					
					var vcGrid = gridCtrl;
					var exportData = vcGrid.getExportData({
						exceptStyle: true,
						applyFormat: true
					})
					
					var header = exportData.rowgroups[0];
					var detail = exportData.rowgroups[1];
					/** @type Array */
					var headerData = header.data[0];
					/** @type Array */
					var detailData = detail.data;
					
					var result = [];
					
					var tr = document.createElement("tr");
					headerData.forEach(function(each) {
						var td = document.createElement("td");
						td.innerHTML = each;
						tr.appendChild(td);
						table.appendChild(tr);
					});
					
					detailData.forEach(function(each) {
						var trs = document.createElement("tr");
						each.forEach(function(eachs) {
							var tds = document.createElement("td");
							tds.innerHTML = eachs;
							trs.appendChild(tds);
							table.appendChild(trs);
						});
					});
					
					this._exportExcel(fileName, sheetName, table, "table");
				},
				
				exportExcelToJSON : function(fileName, sheetName, gridCtrl, paExcludeCols) {
					
					var vaExcludeCols = [];
					if(paExcludeCols != null) {
						if (!(paExcludeCols instanceof Array)) {
							paExcludeCols = [paExcludeCols];
						}
						vaExcludeCols = paExcludeCols;
					}
					
					var vcGrid = gridCtrl;
					var exportData = vcGrid.getExportData({
						exceptStyle : true,
						applyFormat : true,
						excludeCols : vaExcludeCols
					});
					
					
					var header = exportData.rowgroups[0];
		//			var detail = exportData.rowgroups[1];
					exportData.rowgroups.shift();
					
					/** @type Array */
					var detail = exportData.rowgroups;
					
					/** @type Array */
					var headerData = header.data[0];
					
		//			/** @type Array */
		//			var detailData = detail.data;
					
					var result = [];
					
		//			detailData.forEach(function(each) {
		//				var a = {};
		//				headerData.forEach(function(headerEach, idx) {
		//					a[headerEach] = each[idx];
		//				});
		//				result.push(a);
		//				
		//			});
					detail = detail.filter(function(each){
						return each.region == "detail";
					});
					detail.forEach(function(each){
						
						/** @type Array */
						var detailData = each.data;
						
						detailData.forEach(function(eachs){
							
							var a = {};
							headerData.forEach(function(headerEach,idx){
								a[headerEach] = eachs[idx];
							});
							result.push(a);
						});
					});
					
					this._exportExcel(fileName, sheetName, result, "json",gridCtrl);
				},
				
				exportExcelJsToJSON : function(fileName, sheetName, gridCtrl, paExcludeCols) {
					
					var vaExcludeCols = [];
					if(paExcludeCols != null) {
						if (!(paExcludeCols instanceof Array)) {
							paExcludeCols = [paExcludeCols];
						}
						vaExcludeCols = paExcludeCols;
					}
					
					var vcGrid = gridCtrl;
					var exportData = vcGrid.getExportData({
						exceptStyle : true,
						applyFormat : true,
						excludeCols : vaExcludeCols
					});
					var header = exportData.rowgroups[0];
		//			var detail = exportData.rowgroups[1];
					exportData.rowgroups.shift();
					
					/** @type Array */
					var detail = exportData.rowgroups;
					
					/** @type Array */
					var headerData = header.data[0];
					
		//			/** @type Array */
		//			var detailData = detail.data;
					
					var result = [];
					
		//			detailData.forEach(function(each) {
		//				var a = {};
		//				headerData.forEach(function(headerEach, idx) {
		//					a[headerEach] = each[idx];
		//				});
		//				result.push(a);
		//				
		//			});
		
					detail = detail.filter(function(each){
						return each.region == "detail";
					});
					
					var arrHeader = new Array();
					headerData.forEach(function(headerEach,idx){
						var headerInfo = { header: headerEach, key: headerEach, width: 20 };
						arrHeader.push(headerInfo);
					});
					   
					detail.forEach(function(each){
						
						/** @type Array */
						var detailData = each.data;
						
						detailData.forEach(function(eachs){
							
							var a = {};
							headerData.forEach(function(headerEach,idx){
								a[headerEach] = eachs[idx];
							});
							result.push(a);
						});
					});
					this._exportJsExcel(fileName, sheetName, result, arrHeader,gridCtrl);
				}
		}
		
		/**
		 * @class
		 * @desc 변수 타입체크 유틸입니다
		 */
		TypeUtil = {
			/**
			 * 이메일 형식에 맞는지 체크합니다.
			 * @param {String} value
			 * @return {String}
			 */
			isEmail : function(value){
				if(!value) return true;
			
				if(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(value)) {
					return true;
				}
				
				return false;
			},
			
			/**
			 * url 형식에 맞는지 체크합니다.
			 * @param {String} value
			 * @return {String}
			 */
			isURL : function(value){
				if(!value) return true;
			
				// w3resource.com
				var regexp = /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
				if(regexp.test(value)) {
					return true;
				}
				
				return false;
			},
			/**
			 * 사업자번호 형식에 맞는지 체크합니다.
			 * @param {String} value
			 * @return {String}
			 */
			isBizCSN: function(value){
				if(!value) return true;
			
				// 넘어온 값의 정수만 추츨하여 문자열의 배열로 만들고 10자리 숫자인지 확인합니다.
				if ((value = (value + '').match(/\d{1}/g)).length != 10) {
					return false;
				}
			
				// 합 / 체크키
				var sum = 0, key = [1, 3, 7, 1, 3, 7, 1, 3, 5];
			
				// 0 ~ 8 까지 9개의 숫자를 체크키와 곱하여 합에 더합니다.
				for (var i = 0 ; i < 9 ; i++) { sum += (key[i] * Number(value[i])); }
			
				// 각 8번배열의 값을 곱한 후 10으로 나누고 내림하여 기존 합에 더합니다.
				// 다시 10의 나머지를 구한후 그 값을 10에서 빼면 이것이 검증번호 이며 기존 검증번호와 비교하면됩니다.
				return (10 - ((sum + Math.floor(key[8] * Number(value[8]) / 10)) % 10)) == Number(value[9]);
			},
			
			/**
			 * 주민번호 형식에 맞는지 체크합니다.
			 * @param {String} value
			 * @return {String}
			 */
			isSSN : function(value){
				if(!value) return true;
				value = value.replace(/[\-]/g, "");
				
				
				var fmt = /^\d{6}[1234]\d{6}$/;
				if(!fmt.test(value)){
					return false;
				}
			
				var birthYear = (value.charAt(7) <= "2") ? "19" : "20";
				birthYear += value.substr(0, 2);
				var birthMonth = value.substr(2, 2) - 1;
				var birthDate = value.substr(4, 2);
				var birth = new Date(birthYear, birthMonth, birthDate);
			
				if( birth.getYear() % 100 != value.substr(0, 2) ||
				    birth.getMonth() != birthMonth ||
				    birth.getDate() != birthDate) {
				    return false;
				}
			
				var arrDivide = [2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5];            	
				var checkdigit = 0;            	
				for(var i = 0; i < value.length - 1; i++) {
					checkdigit += parseInt(value.charAt(i)) * parseInt(arrDivide[i]);
				}
				checkdigit = (11 - (checkdigit % 11)) % 10;
				if(checkdigit != value.charAt(12)){
					return false;
				} else {
					return true;
				}
			},
			/**
			 * 유선전화번호 형식에 맞는지 체크합니다.
			 * @param {String} value
			 * @return {String}
			 */
			isTelNo : function(value){
				if(!value) return true;
				if(/^\d{2,3}[\)\-\. ]?\d{3,4}[\-\. ]?\d{4}$/.test(value)){
					return true;
				}
				
				return false;
			},
			/**
			 * 핸드폰번호 형식에 맞는지 체크합니다.
			 * @param {String} value
			 * @return {String}
			 */
			isTelMobile : function(value){
				if(!value) return true;
				if(/^01([0|1|6|7|8|9]?)[\-\. ]?([0-9]{3,4})[\-\. ]?([0-9]{4})$/.test(value)) {
					return true;
				}
				
				return false;
			}
		}
	});
})();
/// end - module/util
/// start - module/validation
/*
 * Module URI: module/validation
 * SRC: module/validation.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/validation", function(exports, globals, module){
		
		//exports.id = "validation.module.js";
		
		// 의존 모듈 선언.
		module.depends("module/common");
		
		
		
		//member value 
		//kimjj append 2021-09-03 
		//필수일경우 css style 
		/**
		 * 필수일경우 css class명  ",(콤마)로 분리하며 처음과 마지막에 콤마가 꼭있어야 합니다. "
		 */
		var M_REQUIRED_STYLE=",require," ;
		
		/**
		 * 공통 Validator Class
		 */
		Validator = function(appKit) {
			/** @type AppKit */
			this._appKit = appKit;
		};
		
		
		/**
		 * 
		 * @param {cpr.controls.UIControl} ctrl
		 * @param {String} ctrlValue
		 * @param {cpr.controls.UIControl} poParentCtl
		 * @param {Number} pnIdx
		 * @param {Number} pnCellIdx
		 * @param {Boolean} isMsgAlert validation 메시지 출력 여부
		 */
		Validator.prototype.validate = function(ctrl, ctrlValue, poParentCtl, pnIdx, pnCellIdx, poRow, isMsgAlert) {
			if(!ctrl) return true;
			if(ctrl.type == "output" || ctrl.type == "img" || ctrl.type == "button") return true;
			
			isMsgAlert = isMsgAlert == null ? true : isMsgAlert;
			
			//바인딩 및 헤더컬럼으로 수정 필요
			var vsFieldLabel = ctrl.fieldLabel;
			if(ValueUtil.isNull(vsFieldLabel) && ctrl.getHost){
				vsFieldLabel = ctrl.getHost().fieldLabel;
			}
			function getGridFieldLabel(poParentCtl, psFieldLabel){
				if(poParentCtl instanceof cpr.controls.Grid){
					var vcDetailCtl = poParentCtl.detail.getColumn(pnCellIdx);
					var vaHeaderCtl = poParentCtl.header.getColumnByColIndex(vcDetailCtl.colIndex, vcDetailCtl.colSpan);
					if(vaHeaderCtl.length > 0){
						var vcHeaderCtl = vaHeaderCtl[0];
						if(vcHeaderCtl){
							psFieldLabel = vcHeaderCtl.getText();
						}
					}
				}
				return psFieldLabel;
			}
			
			var _appKit = this._appKit;
			function parentValidMsg(psMsg, poParentCtl, pnIdx){
				//그리드 내 컨트롤
				if(poParentCtl instanceof cpr.controls.Grid){
					var vsMsg = _appKit.Msg.getMsg("WRN-M002", [poParentCtl.fieldLabel, Number(pnIdx)+1]);
					psMsg = vsMsg + " " + psMsg;
				}
				if(isMsgAlert){
					_appKit.Msg.alert(psMsg, "WARNING");
				}
			}
			
			// 필수 입력 체크
			{
				var notnull = "";
				if(poParentCtl instanceof cpr.controls.Grid && ctrl instanceof cpr.controls.UDCBase){
					notnull = ctrl.getAppProperty("required") === true || ctrl.getAppProperty("required") === "Y" ? "Y" : "";
				}else{
					notnull = ctrl.userAttr("required");
					
					//kimjj append 2021-09-03
					//해당 controle or label(output)에 requerd class를 통한 필수 체크 
					//<-----------------------------------------------------------
					
					var vsLableId = ctrl.fieldLabel; 
					var voCtrlLabelobj = ctrl.getAppInstance().lookup(vsLableId);
					
					if( !!voCtrlLabelobj ){
							var vsaLabelStyleNm = voCtrlLabelobj.style.getClasses() ;
							vsaLabelStyleNm.forEach(function(vsStyleNm){
								if(  M_REQUIRED_STYLE.indexOf(","+vsStyleNm+",")>-1){
									notnull = "Y" ;
								}
							}); 
					}
					
					var vsaStyleNm = ctrl.style.getClasses() ;
					vsaStyleNm.forEach(function(vsStyleNm){
						if(  M_REQUIRED_STYLE.indexOf(","+vsStyleNm+",")>-1){
							notnull = "Y" ;
						}
					}); 
					
					//-----------------------------------------------------------> 
					
				}
				if(notnull === "Y") {
					if(ctrlValue == null || new String(ctrlValue) == "") {
						vsFieldLabel = getGridFieldLabel(poParentCtl, vsFieldLabel);
						//{0}은(는) 필수 입력 항목입니다.
						var vsMsg = this._appKit.Msg.getMsg("WRN-M001", [vsFieldLabel]);
						parentValidMsg(vsMsg, poParentCtl, pnIdx);
						
						return false;
					}
				}
			}
			
			
			
			// 지정된 컬럼중 하나 이상 필수 입력 체크
			// 그리드일경우 columnname, 그룹 및 일반컨트롤일 경우 id
			{
				var xorNull = ctrl.userAttr("xorRequired");
				if(xorNull) {
					var vaXorNull = ValueUtil.split(xorNull.replace(/\[|\]/g,""), ",");
					var vsName = "";
					//그리드 내 컨트롤
					
					var vbStatus = false;
					if(poParentCtl instanceof cpr.controls.Grid){
						for (var j = 0; j < vaXorNull.length; j++) {
							var vsValue = poRow != null ? poRow.getValue(vaXorNull[j]) : poParentCtl.getCellValue(pnIdx, vaXorNull[j]);
							if(!ValueUtil.isNull(vsValue)){
								vbStatus = true;
								break;
							}
							var vaDetailCell = poParentCtl.detail.getColumnByName(vaXorNull[j]);
							vaDetailCell.some(function(vcCell){
								var vcHeaderCtl = poParentCtl.header.getColumn(vcCell.colIndex).control;
								if(vcHeaderCtl)
									vsName += vcHeaderCtl.getText() + " ,";
								//vsName += vcCell.control.userattr("name") + " ,";
							});
						}
						if(!vbStatus){
							//{0}중 하나는 필수 입력 항목입니다.
							var vsMsg = this._appKit.Msg.getMsg("WRN-M003", [vsName.substring(0, vsName.length -1)]);
							parentValidMsg(vsMsg, poParentCtl, pnIdx);
							return false;
						}
					}else{
						for (var j = 0; j < vaXorNull.length; j++) {
							var vcCtl = ctrl.getAppInstance().lookup(vaXorNull[j]);
							var vsValue = vcCtl.value;
							if(!ValueUtil.isNull(vsValue)){
								vbStatus = true;
								break;
							}
							vsName += vcCtl.fieldLabel + " ,";
						}
						
						if(!vbStatus){
							//{0}중 하나는 필수 입력 항목입니다.
							var vsMsg = this._appKit.Msg.getMsg("WRN-M003", [vsName.substring(0, vsName.length -1)]);
							parentValidMsg(vsMsg, poParentCtl, pnIdx);
							return false;
						}
					}
				}
			}
			
			// 나머지 항목은 값이 있을 때만 체크
			if(ctrlValue == null || ctrlValue == "") return true;
			
			// type check
			{
				var type = ctrl.userAttr("columnType");
				if(type) {
					var isChk = true;
					if(type == "email"){
						isChk = TypeUtil.isEmail(ctrlValue);
					}else if(type == "ssn"){
						isChk = TypeUtil.isSSN(ctrlValue);
					}else if(type == "bizno"){
						isChk = TypeUtil.isBizCSN(ctrlValue);
					}else if(type == "phone"){
						isChk = TypeUtil.isTelMobile(ctrlValue);
					}else if(type == "tel"){
						isChk = TypeUtil.isTelNo(ctrlValue);
					}else if(type == "url"){
						isChk = TypeUtil.isURL(ctrlValue);
					}
					if(isChk == false) {
						vsFieldLabel = getGridFieldLabel(poParentCtl, vsFieldLabel);
						//{0}은(는) 유효하지 않은 형식입니다.
						var vsMsg = this._appKit.Msg.getMsg("WRN-M004", [vsFieldLabel]);
						parentValidMsg(vsMsg, poParentCtl, pnIdx);
						return false;
					}
				}
			}
			
			// minlength
			{
				var minlength = ctrl.userAttr("minlength");
				if(minlength) {
					var minlengthNum = Number(minlength);
					var length = ValueUtil.getLength(ctrlValue, ctrl.lengthUnit);
					if(length < minlength) {
						vsFieldLabel = getGridFieldLabel(poParentCtl, vsFieldLabel);
						//{0}은(는) {1}자 이상으로 입력하십시오.
						var vsMsg = this._appKit.Msg.getMsg("WRN-M005", [vsFieldLabel, minlength]);
						parentValidMsg(vsMsg, poParentCtl, pnIdx);
						return false;
					}
				}
			}
			
			// fixlength
			{
				var fixlength = ctrl.userAttr("fixlength");
				if(fixlength) {
					var fixlength = Number(fixlength);
					var length = ValueUtil.getLength(ctrlValue, ctrl.lengthUnit);
					if(length != fixlength) {
						vsFieldLabel = getGridFieldLabel(poParentCtl, vsFieldLabel);
						//{0}은(는) {1} 자리수만큼 입력하십시오.
						var vsMsg = this._appKit.Msg.getMsg("WRN-M006", [vsFieldLabel, fixlength]);
						parentValidMsg(vsMsg, poParentCtl, pnIdx);
						return false;
					}
				}
			}
			
			{
				//두 값을 비교
				//그리드 일경우 컬럼명, 일반 컨트롤일 경우 컨트롤 id
				var compare = ctrl.userAttr("compare");
				if(!ValueUtil.isNull(compare)) {
					var compareCol = compare.substring(0, compare.indexOf(","));
					var compareType = compare.substr(compare.indexOf(",") + 1).trim();
					//그리드 내 컨트롤
					var vbStatus = false;
					var vsCompareColValue;
		        	var vsCompareColLable;
		        	var value = ctrlValue;
					if(poParentCtl instanceof cpr.controls.Grid){
						vsCompareColValue = poRow != null ? poRow.getValue(compareCol) : poParentCtl.getCellValue(pnIdx, compareCol);
						var vcDetailColumn = poParentCtl.detail.getColumnByName(compareCol)[0];
						var vaHeaderCol = poParentCtl.header.getColumnByColIndex(vcDetailColumn.colIndex, vcDetailColumn.colSpan);
						if(vaHeaderCol.length > 0){
							var vcHeaderCtl = vaHeaderCol[0];
							if(vcHeaderCtl){
								vsCompareColLable = vcHeaderCtl.getText();
							}
						}
					}else{
						vsCompareColValue = ctrl.getAppInstance().lookup(compareCol).value;
						vsCompareColLable = ctrl.getAppInstance().lookup(compareCol).fieldLabel
					}
					
					if(!ValueUtil.isNull(value) && !ValueUtil.isNull(vsCompareColValue)){
						var vbReturn = false;
						var vsCompareVal = "'"+value+"'" + compareType + "'"+vsCompareColValue+"'";
						var vsCompareValNumber = value + compareType + vsCompareColValue;
						if (ValueUtil.isNumber(value) && ValueUtil.isNumber(vsCompareColValue)) {
							vbReturn = Function('"use strict";return (' + vsCompareValNumber + ')')();	
						}else{
							vbReturn = Function('"use strict";return (' + vsCompareVal + ')')();	
						}
				            
			            if (!vbReturn) {
			            	 vsFieldLabel = getGridFieldLabel(poParentCtl, vsFieldLabel);
			            	 var vsMsg = "";
			            	if(compareType == "<=" || compareType == "<" ){
			            		//{0}은(는) {1}보다 클 수 없습니다.
			            		vsMsg = this._appKit.Msg.getMsg("WRN-M009", [vsFieldLabel, vsCompareColLable]);
			            	}else if (compareType == ">=" || compareType == ">" ){
			            		//{0}은(는) {1}보다 작을수 없습니다.
			            		vsMsg = this._appKit.Msg.getMsg("WRN-M010", [vsFieldLabel, vsCompareColLable]);
			            	}else if (compareType == "==" || compareType == "="){
			            		//{0}은(는) {1}와 같아야 합니다.
			            		vsMsg = this._appKit.Msg.getMsg("WRN-M011", [vsFieldLabel, vsCompareColLable]);
			            	}else{
			            		
			            	}
			            	parentValidMsg(vsMsg, poParentCtl, pnIdx);
			                return false;
			            }
					}
				}
			}
			return true;
		}
	});
})();
/// end - module/validation
/// start - module/validation2
/*
 * Module URI: module/validation2
 * SRC: module/validation2.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/validation2", function(exports, globals, module){
		/************************************************
		 * validation2.module.js
		 * Created at 2021. 12. 2 오전 11:09:12.
		 *
		 * @author kjh
		 ************************************************/
		
		var _gAppKit
		/**
		 * 공통 Validator2 Class
		 */
		var Validator2 = function(appKit) {
			/** @type AppKit */
			this._appKit = appKit;
			_gAppKit = appKit
		};
		
		
		/**
		 * 컨트롤에 대해 유효성 검사를 합니다.
		 */
		Validator2.prototype.validate = function(ctrlInterface){
			var msg = ""
			var that = this;
			var valid = true;
			var checkInfo;
			var rowIdx = [];
			
			ctrlInterface.removeInvalidClass()
			ctrlInterface.setToolTip("");
			
			Object.keys(_ValidationTask).forEach(function(each){
				
				checkInfo = _ValidationTask[each].check(ctrlInterface);
				var isValid = checkInfo.valid;
				
				if(!checkInfo.valid){
					valid = false;
				}
				if(!isValid){
					var res = _ValidationTask[each].getMsg();
			
					if(checkInfo.rowIndex){
						rowIdx.push(checkInfo.rowIndex.toString().replace(/,$/, '').split(","));
					}
					
					msg += res + "\n"
				} 
				_ValidationTask[each].errMsgParam = [];
			});
			rowIdx = _.uniq(rowIdx)
		
			if(!valid){
				
				ctrlInterface.addInvalidClass(rowIdx.toString());
				ctrlInterface.setToolTip(msg);
				
				
				if(ctrlInterface.grid){
					ctrlInterface.grid.dataSet.addEventListenerOnce("insert", function(e){
						ctrlInterface.removeInvalidClass();
						ctrlInterface.setToolTip("");
					})
					ctrlInterface.grid.dataSet.addEventListenerOnce("delete", function(e){
						ctrlInterface.removeInvalidClass()
						ctrlInterface.setToolTip("");
					})
					
					ctrlInterface.grid.dataSet.addEventListenerOnce("load", function(e){
						ctrlInterface.removeInvalidClass()
						ctrlInterface.setToolTip("");
					})
					ctrlInterface.grid.dataSet.addEventListenerOnce("clear", function(e){
						ctrlInterface.removeInvalidClass()
						ctrlInterface.setToolTip("");
					})
				}
				
			}
			
			return msg;
		}
		
		var _ValidationTask = {
		
			required : {
				errMsgParam : [],
				check : function(ctrl){
					if(ctrl.getAttr("required") !== "Y"){
						return {
							valid : true
						}
					}
		
					var valid = true;
					var rowIndex = ""
					if(!(ctrl.ctrl instanceof cpr.controls.gridpart.GridColumn)){
						if(_.isEmpty(ctrl.getValue())){
							this.errMsgParam.push(ctrl.getFieldLabel());
							valid = false;
						}
					}
					else{
						/** @type {cpr.data.DataSet} **/
						var ds = ctrl.grid.dataSet;
						
						for(var i = 0; i < ds.getRowCount(); i++){
							var row = ds.getRow(i);
							if(_.isEmpty(ctrl.getValue(i))){
								valid = false;
								rowIndex += i + ",";
							}
						}
		
						if(!valid){
							this.errMsgParam.push(ctrl.getFieldLabel());
						}
					}
					
					return {
						valid : valid,
						rowIndex : rowIndex
					}
				
				},
				getMsg : function(vsFieldLabel){
					return _gAppKit.Msg.getMsg("WRN-M001", this.errMsgParam);
				}
			},
			xorRequired : {
				check : function(/* cpr.controls.UIControl */ ctrl){
					if(!ctrl.getAttr("xorRequired")){
						return {
							valid : true
						}
					}
		
					var vaXorNull = ValueUtil.split(ctrl.userAttr("xorRequired").replace(/\[|\]/g,""), ",");
				},
				getMsg : function(){
					
				}
			},
			columnType : {
				errMsgParam : [],
				check : function(ctrl){
					if(_.isEmpty(ctrl.getAttr("columnType"))){
						return {
							valid : true
						}
					}
					var inValid = false;
					var validInfo = [];
					var rowIndex = "";
					var type = ctrl.getAttr("columnType");
					var errorType = "";
					var checkValueList = [];
					if(!(ctrl.ctrl instanceof cpr.controls.gridpart.GridColumn)){
						checkValueList.push(ctrl.getValue());
					}
					else{
						/** @type {cpr.data.DataSet} **/
						var ds = ctrl.grid.dataSet;
						
						for(var i = 0; i < ds.getRowCount(); i++){
							var row = ds.getRow(i);
							checkValueList.push(ctrl.getValue(i));
						}
					}
		
					for(var i = 0; i < checkValueList.length; i++){
						var validEach = true;
						
						if(type === "email" && !_.isEmpty(checkValueList[i])){
		
							validEach = TypeUtil.isEmail(checkValueList[i]);
							validInfo.push(validEach);
							if(!validEach){
								errorType = "이메일";
								rowIndex += i + ",";
							}
						}else if(type === "ssn" && !_.isEmpty(checkValueList[i])){
							validEach = TypeUtil.isSSN(checkValueList[i]);
							validInfo.push(validEach);
							if(!validEach){
								errorType = "주민등록번호";
								rowIndex += i + ",";
							}
						}else if(type === "bizno" && !_.isEmpty(checkValueList[i])){
							validEach = TypeUtil.isBizCSN(checkValueList[i]);
							validInfo.push(validEach);
							if(!validEach){
								errorType = "사업자번호";
								rowIndex += i + ",";
							}
						}else if(type === "phone" && !_.isEmpty(checkValueList[i])){
							validEach = TypeUtil.isTelMobile(checkValueList[i]);
							validInfo.push(validEach);
							if(!validEach){
								errorType = "핸드폰번호";
								rowIndex += i + ",";
							}
						}else if(type === "tel" && !_.isEmpty(checkValueList[i])){
							validEach = TypeUtil.isTelNo(checkValueList[i]);
							validInfo.push(validEach);
							if(!validEach){
								errorType = "유선전화번호";
								rowIndex += i + ",";
							}
						}else if(type === "url" && !_.isEmpty(checkValueList[i])){
							validEach = TypeUtil.isURL(checkValueList[i]);
							validInfo.push(validEach);
							if(!validEach){
								errorType = "url";
								rowIndex += i + ",";
							}
						}
					}
					
					inValid = validInfo.some(function(each){
						return !each;
					});
					
					if(inValid){
						this.errMsgParam.push(ctrl.getFieldLabel());
						this.errMsgParam.push(errorType);
					}
					
					return {
						valid : !inValid,
						rowIndex : rowIndex
					}
				},
				getMsg : function(args){
					if(!(args instanceof Array)){
				      args = [args];
				    }
		
					return _gAppKit.Msg.getMsg("WRN-M012", this.errMsgParam);
				}
			},
			minLength : {
				errMsgParam : [],
				check : function(ctrl){
					if(_.isEmpty(ctrl.getAttr("minlength"))){
						return {
							valid : true
						}
					}
					var minLength = ctrl.getAttr("minlength");
					var minlengthNum = Number(minLength);
					var length = ValueUtil.getLength(ctrl.getValue(), ctrl.getLengthUnit());
					
					var isValid = !(length < minLength);
					if(!isValid){
						this.errMsgParam.push(ctrl.getFieldLabel());
						this.errMsgParam.push(minLength);
					}
					
					return {
						valid : isValid
					};
				},
				getMsg : function(args){
					if(!(args instanceof Array)){
				      args = [args];
				    }
				    
					return _gAppKit.Msg.getMsg("WRN-M005", this.errMsgParam);
				}
			},
			fixLength : {
				errMsgParam : [],
				check : function(ctrl){
					if(_.isEmpty(ctrl.getAttr("fixlength"))){
						return {
							valid : true
						}
					}
					var fixlength = Number(ctrl.getAttr("fixlength"));
					var length = ValueUtil.getLength(ctrl.getValue(), ctrl.getLengthUnit());
					
					var isValid = length === fixlength;
					if(!isValid){
						this.errMsgParam.push(ctrl.fieldLabel);
						this.errMsgParam.push(fixlength);
					}
					
					return {
						valid : isValid
					}
				},
				getMsg : function(args){
					if(!(args instanceof Array)){
				      args = [args];
				    }
				    
					return _gAppKit.Msg.getMsg("WRN-M006", this.errMsgParam);
				}
			}
		}
		
		globals.Validator2 = Validator2;
	});
})();
/// end - module/validation2
/// start - module/verticalXy
/*
 * Module URI: module/verticalXy
 * SRC: module/verticalXy.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("module/verticalXy", function(exports, globals, module){
		/************************************************
		 * verticalXy.module.js
		 * Created at 2021. 4. 27. 오후 5:11:58.
		 * Main Contaner가 
		 * @author pearl70
		 ************************************************/
		
		var mAppPropNm = "vXy" ;
		
		/**
		 * 화면이 load할때 형태분석 
		 */
		cpr.events.EventBus.INSTANCE.addFilter("load", function(e){
			/** @type cpr.core.AppInstance */
			var voApp = e.control; 
		
			if( !(  voApp instanceof cpr.core.AppInstance ) )  return;
			
			//main contaner가 vertical 이 아니면 return ;
			var voLayout = voApp.getContainer().getLayout();
			if(  ( voLayout instanceof cpr.controls.layouts.VerticalLayout ) == false  ) return ;
			
			var vsPro = voApp.getAppProperty(mAppPropNm); 
			if( vsPro == "Y") 
			    initVerticalXy ( voApp ) ; 
		});
		
		
		var vjVerticalConst = []; 
		   
		var vjLect = { 
			 heightTop     : 100 ,  //마지막 컨텐츠의 top
			 heightBottom  : 100 ,  //마지막 컨텐츠의 높이 + top  
			 curruntAppHeight : 100 ,   //윈도우의 현재 사이즈   
		   	 curruntAppSpacing : 0  
		}  
		//resize대상 
		var vaRsizeContaner = [] ;	 
		var vaRsizeContanerHeight = [];
		var mApp = null ;
		
		window.addEventListener("resize", resizeThrottler, false);
		
		  var resizeTimeout;
		  function resizeThrottler() { 
		    if ( !resizeTimeout ) {
		      resizeTimeout = setTimeout(function() {
		        resizeTimeout = null;
		        verticalHightReSize(); 
		       }, 66);
		    }
		  } 
		
		
		
		/**
		 * init 
		 * @param {any} app
		 */
		function initVerticalXy(app){
			mApp = app ;
			verticalContain();
			verticalHightReSize();
		} 
		   
		function verticalContain(){
		   	
		   if( mApp == null || mApp == undefined ) return ;
		   
		   var voAppContaner = mApp.getContainer();	 
		   
		   var voRect = voAppContaner.getActualRect();
		   vjLect.curruntAppHeight  = voRect.height; //보이는 높이 
		   
		   
		   var voAppLayout = voAppContaner.getLayout();
		   vjLect.curruntAppSpacing = voAppLayout.spacing ; 
		   //vertical layout만을 지원한다. 
		   if( ! voAppLayout instanceof cpr.controls.layouts.VerticalLayout ) return ;
		   
		   var voContaners = voAppContaner.getChildren(); 
		   var voLastChid  = null ;
		   voContaners.forEach(function(/* cpr.controls.Container  */voChild, vnIndex ){
		   	
		//       var voConstaint = voAppContaner.getConstraint(voChild); 
		//       var vnHeight  = vnX + voConstaint.height ;
		//       if( vjLect.heightTop < vnX  ) vjLect.heightTop =  vnX ;
		//       if( vjLect.heightBottom < vnHeight  ) vjLect.heightBottom = vnHeight ;
		//       vnX   = vnX + vnHeight ;
		       
		       var voConstaint = voChild.getActualRect(); 
		       var vnHeight  = voConstaint.height ;
		       var vnTop     = voConstaint.top ;
		       
		       var vsRsYn = voChild.userAttr("verticalResize");
		       if( vsRsYn == "Y" ) { 
		          	vaRsizeContaner.push(voChild);  
		       }
		       
		       if( vjLect.heightTop < vnTop  ) vjLect.heightTop =  vnTop ;
		       if( vjLect.heightBottom < ( vnTop +  vnHeight ) ) vjLect.heightBottom = ( vnTop +  vnHeight ) ;
		       
		       voLastChid = voChild ;
		   	   
		   }); 
		   
		   if( vaRsizeContaner.length < 1 && voLastChid != null ){  
		   	    var voConstaint = voLastChid.getActualRect(); 
		        var vnHeight  = voConstaint.height ;
		   		vaRsizeContaner.push(voLastChid); 
		   }
		   
		   vaRsizeContaner.forEach(function(resizeCtr){
		      	var voConstaint = voAppContaner.getConstraint(resizeCtr);  
		      	if( voConstaint == undefined ) return ;
		   	    vaRsizeContanerHeight.push(voConstaint.height); 
		   }); 
		   
		}
		
		/**
		 * vertical resize 
		 * vertical에 그룹으로 생성 한다. 
		 */
		function verticalHightReSize(){ 
			
		   if( mApp == null || mApp == undefined ) return ;
			
		   var voAppContaner = mApp.getContainer();	  
		   var voRect = voAppContaner.getActualRect();
		   vjLect.curruntAppHeight  = voRect.height; //보이는 높이 
		   
		   var voAppLayout = voAppContaner.getLayout();
		   vjLect.curruntAppSpacing = voAppLayout.spacing ; 
		   //vertical layout만을 지원한다. 
		   if( ! voAppLayout instanceof cpr.controls.layouts.VerticalLayout ) return ;
		   
		   var vnHMargin = vjLect.curruntAppHeight - ( vjLect.heightBottom + vjLect.curruntAppSpacing ); 
		   var vnDvAddHight = 0 ;
		   if( vnHMargin > 0 ) {
		   	   vnDvAddHight = Math.floor( vnHMargin / vaRsizeContaner.length ); 
		   }else{
		   	   vnDvAddHight = 0 ;
		   }	   
			   //size를 변경한다.  
			   vaRsizeContaner.forEach(function(/* cpr.controls.Container  */ reSizecnt, ix ){
			   	    var voConstaint = voAppContaner.getConstraint(reSizecnt); 
			   	    if( voConstaint != null && voConstaint != undefined ){ 
			   	    voConstaint.height = addPx( vaRsizeContanerHeight[ix] , vnDvAddHight ) ; 
			   	    voAppContaner.updateConstraint(reSizecnt, voConstaint); 
		//	   	    var tempHeight  = addPx( voConstaint.height , vnDvAddHight ) ; 
		//            reSizecnt.style.css("height",tempHeight );
		            }
			   });  
		}
		
		/**
		 * px의 합산을 한다. 
		 * @param {any} pParam1
		 * @param {any} pParam2
		 */
		function addPx(pParam1, pParam2 ){
			var vnPram1 = 0 ;
			var vnPram2 = 0 ;
			if( pParam1 != null && pParam1 != "" && pParam1 != undefined  )
			   vnPram1 = Number( (pParam1 + "").replace("px","") ) ;
			   
			if( pParam2 != null && pParam2 != "" && pParam2 != undefined  )
			   vnPram2 = Number( (pParam2 + "").replace("px","") ) ;
			   
			return (vnPram1 + vnPram2) + "px"; 
			   
		}
		
		
		
		
		function EXvertivalXy() {
				this.voAppContaner = null ;
				this.vjVerticalConst = [] ;
				this.vaRsizeContaner = [] ;
				this.vaRsizeContanerHeight = [] ;
				this.mApp = null ;
				this.vjLect =  { 
							 heightTop     : 100 ,  //마지막 컨텐츠의 top
							 heightBottom  : 100 ,  //마지막 컨텐츠의 높이 + top  
							 curruntAppHeight : 100 ,   //윈도우의 현재 사이즈   
						   	 curruntAppSpacing : 0  
						   } ;  
		     };
		     
		EXvertivalXy.prototype.initVerticalXy = function (app){  
			   var voAppContaner = mApp.getContainer();	  
			   var voAppLayout = voAppContaner.getLayout(); 
			   //vertical layout만을 지원한다. 
			   if( ! voAppLayout instanceof cpr.controls.layouts.VerticalLayout ) return false ;
		
		        this.voAppContaner = app.getContainer() ;
				this.mApp = app ;
				this.verticalContain();
				this.verticalHightReSize();
				return true ;
		} ;
		
		EXvertivalXy.prototype.verticalContain = function(){
			
			   if( this.mApp == null || this.mApp == undefined ) return ;
			    
			   
			   var voRect = this.voAppContaner.getActualRect();
			   this.vjLect.curruntAppHeight  = voRect.height; //보이는 높이 
			   
			   
			   var voAppLayout = this.voAppContaner.getLayout();
			   this.vjLect.curruntAppSpacing = voAppLayout.spacing ; 
			   //vertical layout만을 지원한다. 
			   if( ! voAppLayout instanceof cpr.controls.layouts.VerticalLayout ) return ;
			   
			   var voContaners = this.voAppContaner.getChildren(); 
			   var voLastChid  = null ;
			   var pthis = this ;
			   voContaners.forEach(function(/* cpr.controls.Container  */voChild ){ 
			       
			       var voConstaint = voChild.getActualRect(); 
			       var vnHeight  = voConstaint.height ;
			       var vnTop     = voConstaint.top ;
			       
			       var vsRsYn = voChild.userAttr("verticalResize");
			       if( vsRsYn == "Y" ) { 
			          	vaRsizeContaner.push(voChild);  
			       }
			       
			       if( pthis.vjLect.heightTop < vnTop  ) vjLect.heightTop =  vnTop ;
			       if( pthis.vjLect.heightBottom < ( vnTop +  vnHeight ) ) pthis.vjLect.heightBottom = ( vnTop +  vnHeight ) ;
			       
			       voLastChid = voChild ;
			   	   
			   }, pthis); 
			   
			   if( vaRsizeContaner.length < 1 && voLastChid != null ){   
			   		vaRsizeContaner.push(voLastChid); 
			   }
			   
			   vaRsizeContaner.forEach(function(resizeCtr){
			      	var voConstaint = this.voAppContaner.getConstraint(resizeCtr);  
			   	    vaRsizeContanerHeight.push(voConstaint.height); 
			   } , pthis); 
		  };
		                  
		 EXvertivalXy.prototype.verticalHightReSize = function(){
		 	 
			   if( this.mApp == null || this.mApp == undefined ) return ; 
			   var pthis = this ;
			   var voRect = this.voAppContaner.getActualRect();
			   this.vjLect.curruntAppHeight  = voRect.height; //보이는 높이 
			   
			   var voAppLayout = this.voAppContaner.getLayout();
			   this.vjLect.curruntAppSpacing = voAppLayout.spacing ; 
			   //vertical layout만을 지원한다. 
			   if( ! voAppLayout instanceof cpr.controls.layouts.VerticalLayout ) return ;
			   
			   var vnHMargin = this.vjLect.curruntAppHeight - ( this.vjLect.heightBottom + this.vjLect.curruntAppSpacing ); 
			   var vnDvAddHight = 0 ;
			   if( vnHMargin > 0 ) {
			   	   vnDvAddHight = Math.floor( vnHMargin / this.vaRsizeContaner.length ); 
			   }else{
			   	   vnDvAddHight = 0 ;
			   }	   
			   //size를 변경한다.  
			   vaRsizeContaner.forEach(function(/* cpr.controls.Container  */ reSizecnt, ix ){
			   	    var voConstaint = this.voAppContaner.getConstraint(reSizecnt); 
			   	    voConstaint.height = addPx( pthis.vaRsizeContanerHeight[ix] , vnDvAddHight ) ; 
			   	    pthis.voAppContaner.updateConstraint(reSizecnt, voConstaint);  
			   }, pthis);   
			} 
		 
	});
})();
/// end - module/verticalXy
