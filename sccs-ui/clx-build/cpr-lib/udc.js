/// start - udc.cmn.Breadcrumb
/*
 * UDC Qualified Name: udc.cmn.Breadcrumb
 * App URI: udc/cmn/Breadcrumb
 * Source Location: udc/cmn/Breadcrumb.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/Breadcrumb", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Breadcrumb.js
			 * Created at 2020. 4. 24. 오전 9:24:24.
			 *
			 * @author ryu
			 ************************************************/
			
			/************************************************
			 * 공통 모듈 선언
			 ************************************************/
			var util = createCommonUtil();
			
			/************************************************
			 * 전역 변수 선언
			 ************************************************/
			
			/************************************************
			 * 사용자 정의 함수
			 ************************************************/
			
			
			/**
			 * 
			 */
			function initalize() {
				var vcGrpCont = app.getContainer();
				var voGrpContLayout = vcGrpCont.getLayout();
				
				voGrpContLayout.horizontalAlign = app.getAppProperty("align");
			}
			
			
			/**
			 * 
			 */
			function makeBreadcrumbs() {
				var vcGrpCont = app.getContainer();
				
				var vsBreadcrumbs = app.getAppProperty("values");
				var vsDelimiter = app.getAppProperty("delimiter");
				var vsClass = app.getAppProperty("class");
				
				if (ValueUtil.isNull(vsBreadcrumbs)){
					return;
				}
				
				/* 아이템 초기화 */
				vcGrpCont.removeAllChildren(true);
				
				/* 아이템 생성 */
				var vaBreadcrumbs = vsBreadcrumbs.split(vsDelimiter);
				vaBreadcrumbs.forEach(function(/* String */ each, index){
					var vcCrumb = new cpr.controls.Output("crumb" + (index + 1));
					
					vcCrumb.value = each;
					
					vcCrumb.style.setClasses("breadcrumb-item");
					
					if (vsClass != "default"){
						vcCrumb.style.addClass(vsClass);
					}
					
					vcGrpCont.addChild(vcCrumb, {
						height : "100%",
						autoSize : "width"
					});
				});
			}
			
			/************************************************
			 * 컨트롤 이벤트
			 ************************************************/
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				initalize();
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				makeBreadcrumbs();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("class", "default");
			app.declareBindableAppProperty("values", null);
			app.declareBindableAppProperty("delimiter", ",");
			app.declareAppProperty("align", "right");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["breadcrumbs"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.scrollable = false;
			flowLayout_1.horizontalSpacing = 0;
			flowLayout_1.verticalSpacing = 0;
			flowLayout_1.horizontalAlign = "right";
			flowLayout_1.lineWrap = false;
			container.setLayout(flowLayout_1);
			
			// UI Configuration
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "Breadcrumb";
	
	// Type declaration for Breadcrumb
	cpr.utils.Util.ensurePackage("udc.cmn").Breadcrumb = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.Breadcrumb", internalApp, id);
	};
	
	udc.cmn.Breadcrumb.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.Breadcrumb.prototype, "type", {
		get : function(){
			return "udc.cmn.Breadcrumb";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.Breadcrumb.prototype, "class", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("class");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("class", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.Breadcrumb.prototype, "values", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("values");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("values", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.Breadcrumb.prototype, "delimiter", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("delimiter");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("delimiter", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.Breadcrumb.prototype, "align", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("align");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("align", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.Breadcrumb
/// start - udc.cmn.udcCmnPFileUpload
/*
 * UDC Qualified Name: udc.cmn.udcCmnPFileUpload
 * App URI: udc/cmn/udcCmnPFileUpload
 * Source Location: udc/cmn/udcCmnPFileUpload.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/udcCmnPFileUpload", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * udcCmnPFileUpload.js
			 * 첨부파일 업로드 및 파일 다운로드에 대한 요건은 프로젝트별 상이하므로 
			 * 해당 샘플 파일의 업로드 및 다운로드 기능만 참고하시길 바랍니다.
			 ************************************************/
			
			var util = createCommonUtil();
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				return "";
			};
			
			exports.doClickUpload = doUpload;
			
			/*
			 * "업로드" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnUploadClick(e){
				doUpload();
			}
			
			function doUpload(){
				//파일업로드 전에 체크할 로직이 있는지 체크
				var vbSuccess = app.dispatchEvent(new cpr.events.CUIEvent("beforeUpload"));
				if(vbSuccess === false) return;
				//공통 업로드를 호출하는 경우
				if(app.getAppProperty("uploadUrl") == "/CmnFile/upload.do"){
					if(app.getAppProperty("multi")){
						var strAttcFileNo = ValueUtil.fixNull(app.getAppProperty("attcFileNo"));
						
						//메뉴권한에 관계없이... 파일업로드 가능하게 할지 여부(true/false)
						var forceAvailableUpload = app.getAppProperty("forceAvailableUpload");
						
						//초기 파라메터 셋팅
						var initValue = {
							strAttcFileNo: strAttcFileNo, //첨부파일번호
							maxUploadSize: app.getAppProperty("maxUploadSize"),	//최대업로드 사이즈
							fileSizeUnit: app.getAppProperty("fileSizeUnit"),	//파일 사이즈 단위
							allowFileExt: app.getAppProperty("allowFileExt"),	//허용 파일 확장자
							onlyDownload: app.getAppProperty("onlyDownload"),	//다운로드만 가능여부(true/false)
							userDefineStorePgmId: app.getAppProperty("userDefineStorePgmId"), //사용자 정의 첨부파일 업로드 경로 프로그램ID
							infoMsgShowYn: app.getAppProperty("infoMsgShowYn"), //최초업로드시저장안내메세지표시여부(N:표시안함)
							forceUpload : forceAvailableUpload,
							strCloseMsg : app.getAppProperty("closeMsg")      // 팝업 닫기시 다른 메시지 처리 
						};
						
						util.Dialog.open(app, "app/cmn/cmnPFileUpload", 700, 360, function(/**@type cpr.events.CUIEvent */e){
							/**@type cpr.controls.Dialog*/
							var dialog = e.control;
							var returnValue = dialog.returnValue;
							if(returnValue != null){
								//초기 첨부번호와 업로드 후의 첨부번호가 다르면...
								AppUtil.setAppProperty(app, "attcFileNo", returnValue.attcFileNo);
								//업로드 완료 콜백 이벤트 Dispatch시킴
								var event = new cpr.events.CUIEvent("uploadComplete");
								event.attcFileNo = returnValue.attcFileNo;
								event.fileNm = returnValue.fileNm;
								event.fileCnt = returnValue.fileCnt;
								app.lookup("dmTemp").setValue("tempAccFileNo", returnValue.attcFileNo);
								
								app.dispatchEvent(event);
							}
						}, initValue);
					}else{
						app.lookup("fileinput1").openFileChooser();
					}
				}else{
					app.lookup("fileinput1").openFileChooser();
				}
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(e){
				//다중 파일선택 여부
				if(e.property == "multi"){
					app.lookup("fileinput1").multiple = e.newValue;
				//업로드 가능 파일확장자
				}else if(e.property == "allowFileExt"){
					app.lookup("fileinput1").acceptFile = e.newValue;
				//업로드 URL경로
				}else if(e.property == "uploadUrl"){
					app.lookup("subUpload").action = e.newValue;
				}
			}
			
			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFileinput1ValueChange(e){
				var fileinput1 = e.control;
				var vaFiles = fileinput1.files;
				
				if(vaFiles != null && vaFiles.length > 0){
					var submit = app.lookup("subUpload");
					
					/************************************************************
					 * 업로드 서브미션에 부모페이지 데이터맵을 추가
					 * (2019-07-01 정정호 추가)
					 ************************************************************/
					var vsAddDataMapId = app.getAppProperty("addDataMapId");
					
					if(!ValueUtil.isNull(vsAddDataMapId)){
						var vsHostApp = app.getHostAppInstance();
						var voAddParam = vsHostApp.lookup(vsAddDataMapId);
						
						submit.addRequestData(voAddParam, vsAddDataMapId);	
					}
					/************************************************************/
					
					var voFile;
					for(var i = 0, len = vaFiles.length; i < len; i++){
						voFile = vaFiles[i];
						//허용 가능 파일 유형 체크
						if(!FileUtil.checkFileExt(voFile.name, app.getAppProperty("allowFileExt"))) return false;
						
						submit.addFileParameter(voFile.name, voFile);
					}
					
					util.Submit.send(app, submit.id, null, function(pbSuccess, e){
						if(pbSuccess){
							var dmResult = app.lookup("dmUpload");
							
							AppUtil.setAppProperty(app, "attcFileNo", dmResult.getValue("attcFileNo"));
							
							//성공시 upload-complete 이벤트 발생
							var event = new cpr.events.CUIEvent("uploadComplete");
							event.attcFileNo = dmResult.getValue("attcFileNo");
							event.fileNm = dmResult.getValue("fileNm");
							event.fileCnt = dmResult.getValue("fileCnt");
							
							// 엑셀업로드 후 처리건수 리턴. (2019-06-11 정정호 추가)
							event.procCnt = e.getMetadata("strProcCnt");
							
							app.dispatchEvent(event);
						}
			
						/**
						 * 부모페이지의 데이터맵을 추가한 경우 해당 서브미션의 데이터맵 값을 모두 초기화 한다.
						 * 초기화를 하지 않은 경우 서브미션에 데이터맵이 중복 추가되어 기존 값이 계속 서버단에 전달되어 문제가 발생함.
						 */			
						if(!ValueUtil.isNull(vsAddDataMapId)){
							e.removeAllRequestData();
						}
					});
				}
			}
			
			/*
			 * 파일 인풋에서 maxsize-exceed 이벤트 발생 시 호출.
			 * 파일을 추가 시 파일의 크기가 최대 일 경우 발생하는 이벤트. 추가할 파일이 최대 크기보다 큰 경우 발생합니다. 추가된 파일들의 합계가 최대 크기보다 큰 경우 발생합니다.
			 */
			function onFileinput1MaxsizeExceed(e){
				var fileinput1 = e.control;
				var maxUploadSize = fileinput1.limitFileSize;
				//파일사이즈는 {0}를 초과 할 수 없습니다.
				util.Msg.alert("WRN-M016", [maxUploadSize]);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("attcFileNo", "");
			app.declareBindableAppProperty("buttonLabel", "업로드");
			app.declareBindableAppProperty("multi", true);
			app.declareBindableAppProperty("allowFileExt", "");
			app.declareBindableAppProperty("maxUploadSize", 50);
			app.declareBindableAppProperty("fileSizeUnit", "mb");
			app.declareBindableAppProperty("uploadUrl", "/CmnFile/upload.do");
			app.declareBindableAppProperty("onlyDownload", false);
			app.declareBindableAppProperty("userDefineStorePgmId", "");
			app.declareBindableAppProperty("addDataMapId", null);
			app.declareBindableAppProperty("infoMsgShowYn", "Y");
			app.declareBindableAppProperty("targetCtrlId", null);
			app.declareBindableAppProperty("forceAvailableUpload", false);
			app.declareBindableAppProperty("closeMsg", null);
			var dataMap_1 = new cpr.data.DataMap("dmUpload");
			dataMap_1.parseData({
				"columns" : [
					{"name": "attcFileNo"},
					{"name": "fileNm"},
					{"name": "fileSize"},
					{"name": "fileCnt"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmTemp");
			dataMap_2.parseData({
				"columns" : [{
					"name": "tempAccFileNo",
					"info": "임시저장 첨부파일번호"
				}]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("subUpload");
			submission_1.action = "/CmnFile/upload.do";
			submission_1.mediaType = "multipart/form-data";
			submission_1.responseType = "text";
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var fileInput_1 = new cpr.controls.FileInput("fileinput1");
			fileInput_1.visible = false;
			fileInput_1.placeholder = "";
			fileInput_1.bind("limitFileSize").toAppProperty("maxUploadSize");
			fileInput_1.bind("limitFileSizeUnit").toAppProperty("fileSizeUnit");
			if(typeof onFileinput1ValueChange == "function") {
				fileInput_1.addEventListener("value-change", onFileinput1ValueChange);
			}
			if(typeof onFileinput1MaxsizeExceed == "function") {
				fileInput_1.addEventListener("maxsize-exceed", onFileinput1MaxsizeExceed);
			}
			container.addChild(fileInput_1, {
				"top": "0px",
				"left": "0px",
				"width": "70px",
				"height": "20px"
			});
			
			var button_1 = new cpr.controls.Button("btnUpload");
			button_1.style.setClasses(["btn-pop"]);
			button_1.style.css({
				"box-shadow" : "none",
				"text-shadow" : "none"
			});
			button_1.bind("value").toAppProperty("buttonLabel");
			if(typeof onBtnUploadClick == "function") {
				button_1.addEventListener("click", onBtnUploadClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "udcCmnPFileUpload";
	
	// Type declaration for udcCmnPFileUpload
	cpr.utils.Util.ensurePackage("udc.cmn").udcCmnPFileUpload = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.udcCmnPFileUpload", internalApp, id);
	};
	
	udc.cmn.udcCmnPFileUpload.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "type", {
		get : function(){
			return "udc.cmn.udcCmnPFileUpload";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "attcFileNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("attcFileNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("attcFileNo", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "buttonLabel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("buttonLabel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("buttonLabel", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "multi", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("multi");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("multi", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "allowFileExt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("allowFileExt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("allowFileExt", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "maxUploadSize", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("maxUploadSize");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("maxUploadSize", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "fileSizeUnit", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("fileSizeUnit");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("fileSizeUnit", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "uploadUrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("uploadUrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("uploadUrl", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "onlyDownload", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("onlyDownload");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("onlyDownload", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "userDefineStorePgmId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("userDefineStorePgmId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("userDefineStorePgmId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "addDataMapId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("addDataMapId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("addDataMapId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "infoMsgShowYn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("infoMsgShowYn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("infoMsgShowYn", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "targetCtrlId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("targetCtrlId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("targetCtrlId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "forceAvailableUpload", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("forceAvailableUpload");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("forceAvailableUpload", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPFileUpload.prototype, "closeMsg", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("closeMsg");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("closeMsg", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.udcCmnPFileUpload
/// start - udc.cmn.udcCmnPParty
/*
 * UDC Qualified Name: udc.cmn.udcCmnPParty
 * App URI: udc/cmn/udcCmnPParty
 * Source Location: udc/cmn/udcCmnPParty.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/udcCmnPParty", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * udcCmnPParty.js
			 * Created at 
			 *
			 * @author 
			 ************************************************/
			var util = createCommonUtil();
			
			var openedByChange = false;
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				return app.lookup("ipbPartyId").value;
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "required"){
					var vcIpbCode = app.lookup("ipbPartyId");
					//필수 입력 체크 조건 설정
					if(app.getAppProperty("required") === "Y"){
						vcIpbCode.fieldLabel = app.getHostProperty("fieldLabel");
						vcIpbCode.userAttr("required","Y");
					} else {
						vcIpbCode.userAttr("required","");
					}
				}
			}
			
			
			
			/*
			 * 구성원ID 조회 [btnPopParty] 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPopPartyClick(/* cpr.events.CMouseEvent */ e){
				// 검색어를 입력하고 팝업버튼을 누른경우, 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
				if(openedByChange == true) {
					return false;
				}
				
				//팝업 호출
				doOpenPartyPopup(app.lookup("ipbPartyId").value);
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbPartyIdValueChange(/* cpr.events.CValueChangeEvent */ e){
				// 팝업호출 중인 경우에는 이벤트 Skip...
				if(openedByChange == true){
					return false;
				}
				
				// 변경된 값
				var vsPartyId = e.newValue;
				// 입력내용 삭제시 팝업없이 관련내용 삭제 -> 삭제인데도, 아래의 체크처리가 이루워짐에 따라 불필요한 메시지 호출됨으로 막아준다.
				if(vsPartyId == ""){
					// 데이터 Clear
					clearCallback();
					// 사용자 이벤트 Dispatch
					app.dispatchEvent(new cpr.events.CUIEvent("select"));
					return false;
				}
				
				// 검색 파라메터 셋팅
				var voDmParam = app.lookup("dmParam");
				voDmParam.setValue("strPartyId", vsPartyId);
				voDmParam.setValue("strPartyDiv", app.getAppProperty("iPartyDiv"));
				voDmParam.setValue("strNm", app.getAppProperty("iName"));
				
				//조회 서브미션 호출
				//조회결과가 단건일 경우 서브미션 로직 추가해야함.
			//	var voParams = [{"mapper": "cmn-user01"
			//					 ,"qry": ["selectPartyList:dsParty"]
			//	                 ,"outds": "dsParty"
			//	                 ,"param": "dmParam"}];
			//
			//	util.Submit.send(app, "subCheckParty_tran",  function(pbSuccess){
			//		if(pbSuccess) {
			//			var dsParty = app.lookup("dsParty");
			//			// 검색결과가 1건이면 팝업없이 바로 값세팅
			//			if(dsParty.getRowCount() == 1){
			//				AppUtil.setAppProperty(app, "oPartyId", dsParty.getValue(0, "PARTY_ID"));
			//				AppUtil.setAppProperty(app, "oNmKor", dsParty.getValue(0, "NM_KOR"));
			//				AppUtil.setAppProperty(app, "oNmEng", dsParty.getValue(0, "NM_ENG"));
			//				AppUtil.setAppProperty(app, "oNmCha", dsParty.getValue(0, "NM_CHA"));
			//				AppUtil.setAppProperty(app, "oGenderRcd", dsParty.getValue(0, "GENDER_RCD"));
			//				AppUtil.setAppProperty(app, "oBrtdy", dsParty.getValue(0, "BRTDY"));
			//				AppUtil.setAppProperty(app, "oLnrSlrDivRcd", dsParty.getValue(0, "LNR_SLR_DIV_RCD"));
			//				AppUtil.setAppProperty(app, "oNatRcd", dsParty.getValue(0, "NAT_RCD"));
			//				AppUtil.setAppProperty(app, "oDeptCd", dsParty.getValue(0, "DEPT_CD"));
			//				AppUtil.setAppProperty(app, "oDeptNm", dsParty.getValue(0, "DEPT_NM"));
			//				AppUtil.setAppProperty(app, "oUserDivCd", dsParty.getValue(0, "USER_DIV_CD"));
			//				AppUtil.setAppProperty(app, "oUserDivNm", dsParty.getValue(0, "USER_DIV_NM"));
			//				
			//				app.lookup("ipbPartyId").putValue(dsParty.getValue(0, "PARTY_ID"));
			//				
			//				app.dispatchEvent(new cpr.events.CUIEvent("search"));
			//			}else{
			//				// 검색결과가 여러건이면... 팝업 호출
			//				clearCallback();
			//				doOpenPartyPopup(vsPartyId);
			//			}
			//		}
			//	}, voParams);
					clearCallback();
					doOpenPartyPopup(vsPartyId);
			}
			
			/**
			 * 팝업을 호출한다.
			 */
			function doOpenPartyPopup(psPartyId){
				openedByChange = true;
				
				//초기 파라메터 셋팅
				var initValue = {
					strHostDiv: app.getAppProperty("iHostDiv"),
					strPartyId: psPartyId,
					strPartyDiv: app.getAppProperty("iPartyDiv"),
					strNm: app.getAppProperty("iName")
				};
				util.Dialog.open(app, "app/exam/dev/cmnPParty", 650, 450, function(/**@type cpr.events.CUIEvent */e){
					/**@type cpr.controls.Dialog*/
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue != null){
						AppUtil.setAppProperty(app, "oPartyId", returnValue.PARTY_ID);
						AppUtil.setAppProperty(app, "oNmKor", returnValue.NM_KOR);
						AppUtil.setAppProperty(app, "oNmEng", returnValue.NM_ENG);
						AppUtil.setAppProperty(app, "oNmCha", returnValue.NM_CHA);
						AppUtil.setAppProperty(app, "oGenderRcd", returnValue.GENDER_RCD);
						AppUtil.setAppProperty(app, "oBrtdy", returnValue.BRTDY);
						AppUtil.setAppProperty(app, "oLnrSlrDivRcd", returnValue.LNR_SLR_DIV_RCD);
						AppUtil.setAppProperty(app, "oNatRcd", returnValue.NAT_RCD);
						AppUtil.setAppProperty(app, "oBrtdy", returnValue.BRTDY);
						AppUtil.setAppProperty(app, "oDeptCd", returnValue.DEPT_CD);
						AppUtil.setAppProperty(app, "oDeptNm", returnValue.DEPT_NM);
						AppUtil.setAppProperty(app, "oUserDivCd", returnValue.USER_DIV_CD);
						AppUtil.setAppProperty(app, "oUserDivNm", returnValue.USER_DIV_NM);
						
						app.lookup("ipbPartyId").value = returnValue.PARTY_ID;
						
						app.dispatchEvent(new cpr.events.CUIEvent("search"));
					}
					
					openedByChange = false;
					
				}, initValue);
			}
			
			//App 속성값 Clear
			function clearCallback(){
				app.lookup("ipbPartyId").putValue("");
				
				AppUtil.setAppProperty(app, "oPartyId", "");
				AppUtil.setAppProperty(app, "oNmKor", "");
				AppUtil.setAppProperty(app, "oNmEng", "");
				AppUtil.setAppProperty(app, "oNmCha", "");
				AppUtil.setAppProperty(app, "oGenderRcd", "");
				AppUtil.setAppProperty(app, "oBrtdy", "");
				AppUtil.setAppProperty(app, "oDeptCd", "");
				AppUtil.setAppProperty(app, "oDeptNm", "");
				AppUtil.setAppProperty(app, "oUserDivCd", "");
				AppUtil.setAppProperty(app, "oUserDivNm", "");
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbPartyIdKeydown(/* cpr.events.CKeyboardEvent */ e){
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					e.preventDefault();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareBindableAppProperty("required", null);
			app.declareBindableAppProperty("iPartyId", null);
			app.declareBindableAppProperty("iPartyDiv", null);
			app.declareBindableAppProperty("iHostDiv", null);
			app.declareBindableAppProperty("oPartyId", null);
			app.declareBindableAppProperty("oNmKor", null);
			app.declareBindableAppProperty("oNmEng", null);
			app.declareBindableAppProperty("oNmCha", null);
			app.declareBindableAppProperty("oGenderRcd", null);
			app.declareBindableAppProperty("oBrtdy", null);
			app.declareBindableAppProperty("oDeptCd", null);
			app.declareBindableAppProperty("oDeptNm", null);
			app.declareBindableAppProperty("oUserDivCd", null);
			app.declareBindableAppProperty("oUserDivNm", null);
			app.declareBindableAppProperty("oNatRcd", null);
			app.declareBindableAppProperty("oLnrSlrDivRcd", null);
			app.declareBindableAppProperty("iName", null);
			var dataSet_1 = new cpr.data.DataSet("dsParty");
			dataSet_1.parseData({
				"columns" : [
					{
						"name": "PARTY_ID",
						"dataType": "string"
					},
					{
						"name": "NM_KOR",
						"dataType": "string"
					},
					{
						"name": "NM_ENG",
						"dataType": "string"
					},
					{
						"name": "NM_CHA",
						"dataType": "string"
					},
					{
						"name": "GENDER_RCD",
						"dataType": "string"
					},
					{
						"name": "BRTDY",
						"dataType": "string"
					},
					{"name": "LNR_SLR_DIV_RCD"},
					{"name": "NAT_RCD"},
					{
						"name": "DEPT_CD",
						"dataType": "string"
					},
					{
						"name": "DEPT_NM",
						"dataType": "string"
					},
					{
						"name": "USER_DIV_CD",
						"dataType": "string"
					},
					{
						"name": "USER_DIV_NM",
						"dataType": "string"
					}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dmParam");
			dataMap_1.parseData({
				"columns" : [
					{"name": "strPartyDiv"},
					{"name": "strPartyId"},
					{"name": "strNm"}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnPopParty");
			button_1.style.setClasses(["btn-pop-search"]);
			if(typeof onBtnPopPartyClick == "function") {
				button_1.addEventListener("click", onBtnPopPartyClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"width": "20px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipbPartyId");
			inputBox_1.lengthUnit = "utf8";
			inputBox_1.maxLength = 15;
			inputBox_1.style.css({
				"text-align" : "center"
			});
			inputBox_1.bind("value").toAppProperty("value");
			if(typeof onIpbPartyIdValueChange == "function") {
				inputBox_1.addEventListener("value-change", onIpbPartyIdValueChange);
			}
			if(typeof onIpbPartyIdKeydown == "function") {
				inputBox_1.addEventListener("keydown", onIpbPartyIdKeydown);
			}
			container.addChild(inputBox_1, {
				"top": "0px",
				"right": "20px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "구성원";
	
	// Type declaration for udcCmnPParty
	cpr.utils.Util.ensurePackage("udc.cmn").udcCmnPParty = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.udcCmnPParty", internalApp, id);
	};
	
	udc.cmn.udcCmnPParty.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "type", {
		get : function(){
			return "udc.cmn.udcCmnPParty";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "required", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("required");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("required", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "iPartyId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iPartyId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iPartyId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "iPartyDiv", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iPartyDiv");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iPartyDiv", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "iHostDiv", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iHostDiv");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iHostDiv", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oPartyId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oPartyId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oPartyId", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oNmKor", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNmKor");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNmKor", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oNmEng", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNmEng");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNmEng", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oNmCha", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNmCha");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNmCha", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oGenderRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oGenderRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oGenderRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oBrtdy", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oBrtdy");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oBrtdy", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oDeptCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oDeptCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oDeptCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oDeptNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oDeptNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oDeptNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oUserDivCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oUserDivCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oUserDivCd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oUserDivNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oUserDivNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oUserDivNm", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oNatRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNatRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNatRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "oLnrSlrDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oLnrSlrDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oLnrSlrDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.udcCmnPParty.prototype, "iName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iName", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.udcCmnPParty
/// start - udc.com.appHeader
/*
 * UDC Qualified Name: udc.com.appHeader
 * App URI: udc/com/appHeader
 * Source Location: udc/com/appHeader.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/appHeader", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var util = createCommonUtil();
			
			var mbCollapsed = false;
			var mnOriginCtrlHeight = "0px";
			var maResizeCtrlsConstraint = [];
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 * app 초기화 내역
			 * - 1. 그리드 초기화 (util.Grid.init)
			 *      관련 앱 속성 : gridIds
			 * - 2. 그리드와 연결된 입력 폼레이아웃 초기화 (util.FreeForm.init)
			 *      관련 앱 속성 : freeformIds
			 * - 3. 조회조건 그룹 초기화 (util.Group.initSearchBox)
			 *     관련 앱 속성 : searchBoxId
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				//	var vsInitializeYn  = app.getAppProperty("initializeYn");
				//	if("N" == vsInitializeYn) return;
				//어플리케이션 메뉴 정보
				var voMenuInfo = util.Auth.getMenuInfo(app);
				//어플리케이션 타이틀 셋팅
				var vcPgmTitle = app.lookup("ipbPgmId");
				var hostApp = app.getHostAppInstance();
				
				if (!util.Dialog.isPopup(hostApp)) {
					
					if (app.getRootAppInstance().hasAppMethod("getMenuPath")) {
						var vsCallPage = voMenuInfo.get("CALL_PAGE");
						var vsMenuId = voMenuInfo.get("MENU_ID");
						if (!vsCallPage) return;
						
						if(vsCallPage.indexOf("layout/pattern") > -1){
							util.Control.setVisible(app, true, "btnLayout");
						}
						
						vsCallPage = vsCallPage.replace(".clx", "");
						vsCallPage = vsCallPage.substring(vsCallPage.lastIndexOf("/") + 1, vsCallPage.length);
						vcPgmTitle.value = vsCallPage;
						if (hostApp.targetScreen.name == "mobile" || hostApp.targetScreen.name == "tablet") {
							util.Control.setVisible(app, false, "ipbPgmId");
						}
						
						//		if(!(hostApp.getContainer().getLayout() instanceof cpr.controls.layouts.FormLayout)){
						//			hostApp.getContainer().style.css("min-width", "1320px");
						//			hostApp.getContainer().style.css("min-height", "680px");
						//		}
						var vcGrpMenuPath = app.lookup("grpMenuPath");
						var voDmMenuNaviPath = app.getRootAppInstance().callAppMethod("getMenuPath", vsMenuId);
						if (voDmMenuNaviPath) {
							var vaMenuNaviPathId = voDmMenuNaviPath.get("MENU_PATH_ID");
							var vaMenuNaviPathNm = voDmMenuNaviPath.get("MENU_PATH_NM");
							
							var vcGrpMenuPathLayout = vcGrpMenuPath.getLayout();
							
							var vaCols = vaMenuNaviPathId.map(function(each) {
								return "10px";
							});
							
							vcGrpMenuPathLayout.setColumns(vaCols);
							
							vaMenuNaviPathId.some(function(cos, idx) {
								var vcBtnMenuPath = new cpr.controls.Button(cos);
								var vsPathNm = vaMenuNaviPathNm[idx];
								
								vcBtnMenuPath.value = vsPathNm + (idx < (vaMenuNaviPathId.length - 1) ? ">" : "");
								
								if (idx == vaMenuNaviPathId.length - 1) {
									vcBtnMenuPath.tooltip = vsCallPage;
								}
								
								vcBtnMenuPath.style.addClass("btn-menu-path");
								vcBtnMenuPath.addEventListener("click", function(e) {
									app.getRootAppInstance().callAppMethod("doMenuPath", cos);
									app.getRootAppInstance().lookup("cbxToggle").value = "true";
								});
								
								vcGrpMenuPathLayout.setColumnAutoSizing(idx, true);
								
								vcGrpMenuPath.addChild(vcBtnMenuPath, {
									"colIndex": idx,
									"rowIndex": 0
								});
							});
						}
					} else {
						util.Control.setVisible(app, false, ["grpMenuPath", "optUnitTestPopup"]);
					}
				} else {
					
					var vsTitleNm = hostApp.app.title;
					
					if (!ValueUtil.isNull(vsTitleNm)) {
						var vcGrpMenuPath = app.lookup("grpMenuPath");
						var vcGrpMenuPathLayout = vcGrpMenuPath.getLayout();
						vcGrpMenuPathLayout.setColumns(["10px"]);
						var vcBtnTitle = new cpr.controls.Button(hostApp.app.id + "_pop");
						
						vcBtnTitle.value = vsTitleNm;
						vcBtnTitle.style.addClass("btn-menu-path");
						vcGrpMenuPathLayout.setColumnAutoSizing(0, true);
						vcGrpMenuPath.addChild(vcBtnTitle, {
							"colIndex": 0,
							"rowIndex": 0
						});
					} else {
						util.Control.setVisible(app, false, ["grpMenuPath", "optUnitTestPopup"]);
					}
				}
				
				//그리드 초기화
				//그리드ID가 지정된 경우가 아니면... 화면 내의 모든 그리드를 대상으로 초기화 작업을 수행한다.
				var vaGridIds = [];
				if (!ValueUtil.isNull(app.getAppProperty("gridIds"))) {
					vaGridIds = ValueUtil.split(app.getAppProperty("gridIds"), ",");
				} else {
					vaGridIds = util.Group.getAllChildrenByType(hostApp, "grid");
				}
				
				util.Grid.init(hostApp, vaGridIds);
				
				//프리폼 초기화
				var vaFreeformIds = [];
				if (!ValueUtil.isNull(app.getAppProperty("freeformIds"))) {
					vaFreeformIds = ValueUtil.split(app.getAppProperty("freeformIds"), ",");
				} else {
					var tempForms = util.Group.getAllChildrenByType(hostApp, "container", null, true);
					var vsSearchBoxId = app.getAppProperty("searchBoxId") != null ? app.getAppProperty("searchBoxId") : "grpSearch";
					var vaSearchBoxIds = ValueUtil.split(vsSearchBoxId, ",");
					tempForms.forEach(function(each) {
						/**@type cpr.controls.Container*/
						var form = each;
						if (vaSearchBoxIds.indexOf(form.id) == -1 && form.getLayout() instanceof cpr.controls.layouts.FormLayout &&
							form.style.getClasses().indexOf(AppProperties.FORM_LAYOUT_CSS) != -1) {
							if (util.Group.getBindDataSet(app, form) != null) {
								vaFreeformIds.push(form.id);
							}
						}
					});
				}
				util.FreeForm.init(hostApp, vaFreeformIds);
				
				//조회조건 그룹 
				var vsSearchBoxId = app.getAppProperty("searchBoxId");
				
				vsSearchBoxId = vsSearchBoxId != null ? vsSearchBoxId : "grpSearch";
				var vsDisableBoxId = app.getAppProperty("groupBoxIds");
				var vaDisableBoxIds = vsDisableBoxId != null ? ValueUtil.split(vsDisableBoxId, ",") : ["grpData"];
				if (!ValueUtil.isNull(vsSearchBoxId)) {
					var pbExist = false;
					for (var i = 0, len = vaDisableBoxIds.length; i < len; i++) {
						if (hostApp.lookup(vaDisableBoxIds[i]) != null) {
							pbExist = true;
							break;
						}
					}
					if (pbExist) {
						// 화면 조회시 grpData 그룹 비활 예외 처리
						var vsInitializeYn = app.getAppProperty("initializeYn");
						if ("N" != vsInitializeYn)
							util.Group.initSearchBox(hostApp, vsSearchBoxId, vaDisableBoxIds);
					}
				}
				
				//		//앱컨테이너가 버티컬 레이아웃이고 작업영역그룹이 하나이거나 해당 컨테이너의 자식컨트롤 중 fillLayout 사용자정의속성이 Y인 그룹의
				//		// 높이를 재지정함(화면에 꽉차이게..)
				//		   
				//		var vcFillLayout;
				//		var flExclusionHeight = 0;
				//		var vaChildren = hostApp.getContainer().getChildren();
				//		var vaFillLayout = vaChildren.filter(function(each){
				//			return "Y" == each.userAttr("fillLayout");
				//		});
				//
				//		if(vaFillLayout.length == 1){
				//			vcFillLayout = vaFillLayout[0];
				//		}else if (vaDisableBoxIds.length == 1){
				//			vcFillLayout = hostApp.lookup(vaDisableBoxIds[0]);
				//		}else{
				//			vcFillLayout = null;
				//		}
				//		
				//		var mainRootApp = util.getMainApp(app);
				//		var mainRootCon = mainRootApp.getContainer();
				//		var mainRootLayout = mainRootCon.getLayout();
				//			
				//		if( vcFillLayout && hostApp.getContainer().getLayout() instanceof cpr.controls.layouts.VerticalLayout 
				//						&& !(mainRootLayout instanceof cpr.controls.layouts.VerticalLayout) ){
				////			hostApp.setPreferredSize(hostApp.getPreferredSize().width, 680);
				//			vaChildren.forEach(function(each){
				//				if(each.id != vcFillLayout.id){
				//					var voChildConst = hostApp.getContainer().getConstraint(each);
				//					var vsHeight = voChildConst.height;
				//	  				var vnHeight = vsHeight.replace("px", "");
				//	  				flExclusionHeight += ValueUtil.fixNumber(vnHeight);	
				//				}
				//			});
				//			
				//			if(flExclusionHeight > 0){
				//				//최소 사이즈
				//				var vsHeight = "680px";
				//				var mainHeight = mainRootApp.getActualRect().height;
				//				if(mainHeight >= 900) {
				//					vsHeight  =  "calc(100% - " + (flExclusionHeight + 10) +"px)"
				//				} 
				//				var poConstraint = {
				//							height : vsHeight
				//					};
				//				hostApp.getContainer().updateConstraint(vcFillLayout, poConstraint);	
				//			}
				//		}
				
				//조회조건 확대/축소 초기 영역 Height
				var vcSearchBox = hostApp.lookup(ValueUtil.split(vsSearchBoxId, ",")[0]);
				if (vcSearchBox == null) {
					util.Control.setVisible(app, false, ["btnCollapse"]);
				} else {
					var hostContainer = hostApp.getContainer();
					var hostLayout = hostContainer.getLayout();
					var targetCtrl = app.getHost().getParent();
					if (targetCtrl && targetCtrl != hostApp.getContainer() && targetCtrl.style.getClasses().indexOf("header-box") != -1) {
						//초기 헤더 그룹 높이(Height)
						if (targetCtrl) {
							var voOriginConstraint = hostContainer.getConstraint(targetCtrl);
							if (hostLayout instanceof cpr.controls.layouts.FormLayout) {
								mnOriginCtrlHeight = hostLayout.getRows()[voOriginConstraint["rowIndex"]];
							} else {
								mnOriginCtrlHeight = voOriginConstraint["height"];
							}
						}
						
						//접기시 Resize 대상 컨트롤ID가 지정되어 있는 경우...
						if (!ValueUtil.isNull(app.getAppProperty("expandCtrlIds"))) {
							if (!(hostLayout instanceof cpr.controls.layouts.FormLayout)) {
								var vaGroupCtrls = ValueUtil.split(app.getAppProperty("expandCtrlIds"), ",");
								vaGroupCtrls.forEach(function(each) {
									var ctrl = hostApp.lookup(each);
									if (ctrl) {
										var constraint = hostContainer.getConstraint(ctrl);
										maResizeCtrlsConstraint.push({
											"ctrl": ctrl,
											"top": constraint["top"],
											"bottom": ValueUtil.fixNull(constraint["top"]),
											"height": ValueUtil.fixNull(constraint["height"])
										});
									}
								});
							}
							//Resize 대상이 지정되어 있지 않은경우에는 화면에서 자동으로 그룹 컨테이너의 top 포지션을 보고 찾음
						} else {
							if (!(hostLayout instanceof cpr.controls.layouts.FormLayout)) {
								var baseTopPosition = ValueUtil.fixNumber(mnOriginCtrlHeight.replace("px", "")) + 15; //헤더 그룹 높이 + 15가 기준임
								hostContainer.getChildren().filter(function( /* cpr.controls.UIControl */ each) {
									return each instanceof cpr.controls.Container;
								}).forEach(function(ctrl) {
									if (ctrl != targetCtrl) {
										var constraint = hostContainer.getConstraint(ctrl);
										if (!ValueUtil.isNull(constraint["top"])) {
											if (ValueUtil.fixNumber(constraint["top"].replace("px", "")) <= baseTopPosition) {
												maResizeCtrlsConstraint.push({
													"ctrl": ctrl,
													"top": constraint["top"],
													"bottom": ValueUtil.fixNull(constraint["top"]),
													"height": ValueUtil.fixNull(constraint["height"])
												});
											}
										}
									}
								});
							}
						}
					}
				}
			}
			
			/*
			 * "+" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCollapseClick( /* cpr.events.CMouseEvent */ e) {
				var hostApp = app.getHostAppInstance();
				var vsSearchBoxId = app.getAppProperty("searchBoxId");
				vsSearchBoxId = vsSearchBoxId != null ? vsSearchBoxId : "grpSearch";
				
				/** @type cpr.controls.Container */
				var vcSearchBox = hostApp.lookup(ValueUtil.split(vsSearchBoxId, ",")[0]);
				if (vcSearchBox == null) return;
				
				/** @type cpr.controls.Container */
				var targetCtrl = app.getHost().getParent();
				if (targetCtrl == null || targetCtrl == hostApp.getContainer() || targetCtrl.style.getClasses().indexOf("header-box") == -1) return;
				
				var hostContainer = hostApp.getContainer();
				var hostLayout = hostContainer.getLayout();
				var btnCollapse = e.control;
				btnCollapse.style.addClass("btn-search-box-expand");
				if (mbCollapsed === false) {
					//조회조건 영역 접기
					targetCtrl.getChildren().filter(function( /* cpr.controls.UIControl */ each) {
						return !(each instanceof udc.com.appHeader || each.id == "btnSearch");
					}).forEach(function(ctrl) {
						ctrl.visible = false;
					});
					try {
						if (hostLayout instanceof cpr.controls.layouts.FormLayout) {
							var rowIndex = hostContainer.getConstraint(targetCtrl)["rowIndex"];
							var rowHeights = hostLayout.getRows();
							for (var i = 0, len = rowHeights.length; i < len; i++) {
								if (i == rowIndex) {
									rowHeights[i] = "30px";
									break;
								}
							}
							hostLayout.setRows(rowHeights);
						} else {
							hostContainer.updateConstraint(targetCtrl, {
								"height": "30px"
							});
							
							//하단 데이터 영역 top 조정
							var resizeHeight = ValueUtil.fixNumber(mnOriginCtrlHeight.replace("px", "")) - 30;
							maResizeCtrlsConstraint.forEach(function(each) {
								var changedConstraint = {
									"top": (ValueUtil.fixNumber(each.top.replace("px", "")) - resizeHeight) + "px"
								};
								if (each.height != "") {
									changedConstraint["height"] = (ValueUtil.fixNumber(each.height.replace("px", "")) + resizeHeight) + "px";
								}
								
								hostContainer.updateConstraint(each.ctrl, changedConstraint);
							});
						}
					} catch (ex) {
						console.log(ex);
					}
					
					mbCollapsed = true;
				} else {
					//조회조건 영역 펼치기
					targetCtrl.getChildren().filter(function( /* cpr.controls.UIControl */ each) {
						return !(each instanceof udc.com.appHeader);
					}).forEach(function(ctrl) {
						ctrl.visible = true;
					});
					
					try {
						if (hostLayout instanceof cpr.controls.layouts.FormLayout) {
							var rowIndex = hostContainer.getConstraint(targetCtrl)["rowIndex"];
							var rowHeights = hostLayout.getRows();
							for (var i = 0, len = rowHeights.length; i < len; i++) {
								if (i == rowIndex) {
									rowHeights[i] = mnOriginCtrlHeight;
									break;
								}
							}
							hostLayout.setRows(rowHeights);
							hostLayout.setRowAutoSizing(rowIndex, true);
						} else {
							hostContainer.updateConstraint(targetCtrl, {
								"height": mnOriginCtrlHeight
							});
							
							//하단 데이터 영역 top 조정
							maResizeCtrlsConstraint.forEach(function(each) {
								var revokeConstraint = {
									"top": each.top
								};
								if (each.height != "") {
									revokeConstraint["height"] = each.height;
								}
								hostContainer.updateConstraint(each.ctrl, revokeConstraint);
							});
						}
					} catch (ex) {
						console.log(ex);
					}
					
					mbCollapsed = false;
				}
			}
			
			/*
			 * "" 버튼에서 animationend 이벤트 발생 시 호출.
			 * 애니메이션 종료 후 발생하는 이벤트.
			 */
			function onBtnCollapseAnimationend( /* cpr.events.CAnimationEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCollapse = e.control;
				btnCollapse.style.removeClass("btn-search-box-expand");
				
				if (mbCollapsed == false) {
					btnCollapse.style.removeClass("btn-header-plus");
					btnCollapse.style.addClass("btn-header-minus");
				} else {
					btnCollapse.style.removeClass("btn-header-minus");
					btnCollapse.style.addClass("btn-header-plus");
				}
			}
			
			/*
			 * "아이콘" 버튼(btnLayout)에서 mouseenter 이벤트 발생 시 호출.
			 * 마우스 포인터가 컨트롤 위에 진입할 때 발생하는 이벤트.
			 */
			function onBtnLayoutMouseenter(e) {
				var buttonRect = e.control.getActualRect();
				var top = buttonRect.top + buttonRect.size.height;
				var left = buttonRect.left + buttonRect.size.width;
				var dialogManager = app.getRootAppInstance().dialogManager;
				
				if (dialogManager.getActiveDialogName() == undefined) {
					dialogManager.openDialog("app/exam/layout/imgViewer",
						'layout', {
							width: 800,
							height: 500,
							top: top,
							left: left - 800,
							modal: false
						},
						function(dialog) {
							dialog.ready(function(dialogApp) {
								dialogApp.setAppProperty('src', 'app/exam/layout/img/' + 
														 util.Auth.getMenuInfo(app).get('CALL_PAGE').split('/')[4].split('.')[0] + 
														 '.png');
								dialog.headerVisible = false;
								
								//MDI폴더 selection-change 시, 다이얼로그 제거
								app.getRootAppInstance().getContainer().getChild("mdiCn").addEventListener("selection-change", function(e){
									dialogApp.dispose();
								});
							});
						});
				}
				
			}
			
			///*
			// * "아이콘" 버튼(btnLayout)에서 mouseleave 이벤트 발생 시 호출.
			// * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			// */
			//function onBtnLayoutMouseleave2(e) {
			//	var dialogManager = app.getRootAppInstance().dialogManager;
			//	dialogManager.getDialogByName(dialogManager.getActiveDialogName()).close();
			//}
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("searchBoxId", "grpSearch");
			app.declareBindableAppProperty("gridIds", null);
			app.declareBindableAppProperty("groupBoxIds", "grpData");
			app.declareBindableAppProperty("freeformIds", null);
			app.declareBindableAppProperty("expandCtrlIds", null);
			app.declareBindableAppProperty("initializeYn", "Y");
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var notifier_1 = new cpr.controls.Notifier("notiInfo");
			notifier_1.maxNotifyCount = 1;
			notifier_1.infoDelay = 3000;
			notifier_1.style.css({
				"text-align" : "right"
			});
			container.addChild(notifier_1, {
				"right": "35px",
				"width": "252px",
				"height": "20px",
				"top": "calc(50% - 10px)"
			});
			
			var output_1 = new cpr.controls.Output("optAppMsg");
			output_1.style.css({
				"color" : "#0000FF",
				"text-align" : "right"
			});
			container.addChild(output_1, {
				"right": "35px",
				"width": "115px",
				"height": "28px",
				"top": "calc(50% - 14px)"
			});
			
			var button_1 = new cpr.controls.Button("btnCollapse");
			button_1.style.setClasses(["btn-header-minus"]);
			if(typeof onBtnCollapseClick == "function") {
				button_1.addEventListener("click", onBtnCollapseClick);
			}
			if(typeof onBtnCollapseAnimationend == "function") {
				button_1.addEventListener("animationend", onBtnCollapseAnimationend);
			}
			container.addChild(button_1, {
				"right": "5px",
				"width": "30px",
				"height": "28px",
				"top": "calc(50% - 14px)"
			});
			
			var output_2 = new cpr.controls.Output("optUnitTestPopup");
			output_2.style.css({
				"background-repeat" : "no-repeat",
				"background-image" : "url('theme/common/images/button/icon_home.png')",
				"background-position" : "center",
				"text-align" : "center"
			});
			container.addChild(output_2, {
				"top": "2px",
				"left": "5px",
				"width": "20px",
				"height": "29px"
			});
			
			var group_1 = new cpr.controls.Container("grpMenuPath");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"top": "3px",
				"right": "35px",
				"left": "25px",
				"height": "25px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipbPgmId");
			inputBox_1.readOnly = true;
			inputBox_1.style.css({
				"border-right-style" : "none",
				"background-color" : "transparent",
				"color" : "transparent",
				"border-left-style" : "none",
				"border-bottom-style" : "none",
				"border-top-style" : "none"
			});
			container.addChild(inputBox_1, {
				"top": "0px",
				"bottom": "0px",
				"width": "150px",
				"left": "calc(50% - 75px)"
			});
			
			var button_2 = new cpr.controls.Button("btnLayout");
			button_2.visible = false;
			button_2.icon = "theme/common/images/button/btn_preview.png";
			if(typeof onBtnLayoutMouseenter == "function") {
				button_2.addEventListener("mouseenter", onBtnLayoutMouseenter);
			}
			if(typeof onBtnLayoutMouseleave2 == "function") {
				button_2.addEventListener("mouseleave", onBtnLayoutMouseleave2);
			}
			container.addChild(button_2, {
				"right": "40px",
				"width": "25px",
				"height": "20px",
				"top": "calc(50% - 10px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "appHeader";
	
	// Type declaration for appHeader
	cpr.utils.Util.ensurePackage("udc.com").appHeader = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.appHeader", internalApp, id);
	};
	
	udc.com.appHeader.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.appHeader.prototype, "type", {
		get : function(){
			return "udc.com.appHeader";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.appHeader.prototype, "searchBoxId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("searchBoxId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("searchBoxId", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "gridIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridIds", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "groupBoxIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("groupBoxIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("groupBoxIds", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "freeformIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("freeformIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("freeformIds", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "expandCtrlIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("expandCtrlIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("expandCtrlIds", newValue, true);
		}
	});
	Object.defineProperty(udc.com.appHeader.prototype, "initializeYn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("initializeYn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("initializeYn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.appHeader
/// start - udc.com.comBtnSearch
/*
 * UDC Qualified Name: udc.com.comBtnSearch
 * App URI: udc/com/comBtnSearch
 * Source Location: udc/com/comBtnSearch.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comBtnSearch", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * comBtnSearch.js
			 * Created at 2020. 2. 19. 오전 11:16:25.
			 *
			 * @author 
			 ************************************************/
			
			var util = createCommonUtil();
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "visibleSearchButton"){
					if(e.newValue === false){
						util.Control.setVisible(app, false, "btnSearch");
					}
				}
			}
			
			
			/*
			 * "조회" 버튼(btnSearch)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var result = app.dispatchEvent(new cpr.events.CUIEvent("search"));
				return result;
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("visibleSearchButton", true);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnSearch");
			button_1.value = "조회";
			button_1.style.setClasses(["btn-search"]);
			button_1.bind("visible").toAppProperty("visibleSearchButton");
			if(typeof onBtnSearchClick == "function") {
				button_1.addEventListener("click", onBtnSearchClick);
			}
			container.addChild(button_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "comBtnSearch";
	
	// Type declaration for comBtnSearch
	cpr.utils.Util.ensurePackage("udc.com").comBtnSearch = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comBtnSearch", internalApp, id);
	};
	
	udc.com.comBtnSearch.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comBtnSearch.prototype, "type", {
		get : function(){
			return "udc.com.comBtnSearch";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comBtnSearch.prototype, "visibleSearchButton", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("visibleSearchButton");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("visibleSearchButton", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comBtnSearch
/// start - udc.com.comButton
/*
 * UDC Qualified Name: udc.com.comButton
 * App URI: udc/com/comButton
 * Source Location: udc/com/comButton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comButton", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//공통 유틸(Util) 클래스
			var util = createCommonUtil();
			
			
			/**
			 * 신규/삭제/취소/저장 버튼 활성/비활성화
			 * @param {Boolean} pbEnable
			 * @param {Array} paStatus [I:신규, D:삭제, R:취소,  D:저장]
			 */
			exports.setEnableCtrls = function(pbEnable, paStatus){
				var vaBtnIds = null;
				if(ValueUtil.isNull(paStatus)){
					vaBtnIds = ["btnNew", "btnDelete", "btnRestore", "btnSave"];
				}else{
					vaBtnIds = new Array();
					for(var i = 0; i < paStatus.length; i++){
						if("I" == paStatus[i]){
							vaBtnIds.push("btnNew");
						}else if("D" == paStatus[i]){
							vaBtnIds.push("btnDelete");
						}else if("S" == paStatus[i]){
							vaBtnIds.push("btnSave");
						}else if("R" == paStatus[i]){
							vaBtnIds.push("btnRestore");
						}
					}
				}
				util.Control.setEnable(app, pbEnable, vaBtnIds);
			}
			
			/*
			 * "신규" 버튼에서 click 이벤트 발생 시 호출. 
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInsertClick(/* cpr.events.CMouseEvent */e) {
				var hostApp = app.getHostAppInstance();
				var vcCtrl = app.getAppProperty("grid"); //타겟 컨트롤
				var vsFocusColumn = app.getAppProperty("focusColumnName"); //포커스 컬럼
				
				var event = new cpr.events.CUIEvent("insert");
			
				var vbStatus = false;
				if(vcCtrl == null || app.getAppProperty("ignoreDefaultNewAction") === true){
					//디폴트 행추가 Action 무시하는 경우는 이벤트만 발생시킴
					vbStatus = app.dispatchEvent(event);
				}else{
					var voRow = null;
					//신규 행추가 전에 체크할 로직이 있는지 체크
					var vbSuccess = app.dispatchEvent(new cpr.events.CUIEvent("beforeInsert"));
					if(!vbSuccess) return;
					
					//그리드인 경우
					if(vcCtrl instanceof cpr.controls.Grid){
						//1-1.신규 행 추가
						voRow = util.Grid.insertRow(hostApp, vcCtrl.id, vsFocusColumn);
					//프리폼인 경우
					}else{
						if(app.getAppProperty("enableMultiForm") === true){
							//신규 행 추가
							voRow = util.FreeForm.insertRow(hostApp, vcCtrl.id, vsFocusColumn);
						}else{
							//2-1.변경사항 체크
			//				var mainApp = cpr.core.Platform.INSTANCE.getAllLoadedApps().find(function(each){
			//					return each.id === "app/com/main/main"
			//				}).getInstances()[0];
							var mainApp = util.getMainApp(app);
							var appProperty = hostApp.getAppProperty("useLayerdPop")
							/** @type cpr.data.DataMap **/
							var dmGlobalConfig = mainApp.lookup("dmGlobalConfig");
							var useLayeredPop = appProperty || (dmGlobalConfig.getValue("useLayerdPop") || "N");
							
							if(useLayeredPop === "Y"){
								var grid = vcCtrl.getBindContext().grid
								util.DataSet.isModifyForInsertRow(grid.getAppInstance(), grid.id, grid.dataSet.id, function(){
									freeFormInsertTask(hostApp, vcCtrl, voRow, vsFocusColumn)
								})
							}
							else{
								if(util.FreeForm.isModified(hostApp, vcCtrl.id, "CRM")) return false;
								freeFormInsertTask(hostApp, vcCtrl, voRow, vsFocusColumn)
							}
							
						}
					}
					event.row = voRow ? voRow : null;
					event.rowIndex = voRow ? voRow.getIndex() : -1;
					
					vbStatus = app.dispatchEvent(event);
				}
				if(vbStatus){
					var commonEvent = new cpr.events.CUIEvent("commonEvent");
					commonEvent.status = "insert";
					app.dispatchEvent(commonEvent);	
				}
			}
			
			function freeFormInsertTask(hostApp, vcCtrl, voRow, vsFocusColumn){
				var voBindContext = util.Group.getBindContext(hostApp, vcCtrl);
				var vcGrid = voBindContext.grid;
				/**@type cpr.data.DataSet */
				var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
				var vnRowIndex = 0;
				if(vcGrid) vnRowIndex = util.Grid.getIndex(hostApp, vcGrid.id);
				else vnRowIndex = voBindContext.rowIndex;
								
				//데이터 Revert
				if(voDs.getRowState(vnRowIndex) == cpr.data.tabledata.RowState.INSERTED){
									
					util.FreeForm.revertRow(hostApp, vcCtrl.id, vnRowIndex, vsFocusColumn);
									
					if(vnRowIndex > -1){
						vcGrid.clearSelection(false);
						vcGrid.selectRows(vnRowIndex);
					}
									
					voRow = vcGrid.getRow(vnRowIndex);
									
					}else{
						//2-2.프리폼 Reset처리
						util.FreeForm.revertAllData(hostApp, vcCtrl.id);
						//2-3.신규 행 추가
						voRow = util.FreeForm.insertRow(hostApp, vcCtrl.id, vsFocusColumn);
					}
			}
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출. 
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDelClick(/* cpr.events.CMouseEvent */e) {
				var vaCtrlArr = [];
				var vcCtrl = app.getAppProperty("grid"); //타겟 컨트롤
				
				var hostApp = app.getHostAppInstance();
				var event = new cpr.events.CUIEvent("delete");
				
				var vbStatus = false; 
				
				if(vcCtrl == null || app.getAppProperty("ignoreDefaultDeleteAction") === true){
					//디폴트 행삭제 Action 무시하는 경우는 이벤트만 발생시킴
					vbStatus = app.dispatchEvent(event);
				}else{
					//행삭제 전에 체크할 로직이 있는지 체크
					var vbSuccess = app.dispatchEvent(new cpr.events.CUIEvent("beforeDelete"));
					if(!vbSuccess) return;
					
					// 그리드인 경우
					if(vcCtrl instanceof cpr.controls.Grid){
						//선택행 삭제
						util.Grid.deleteRow(hostApp, vcCtrl.id);
						
						vbStatus = app.dispatchEvent(event);
					// 프리폼인 경우
					}else{
						if(app.getAppProperty("enableMultiForm") === true){
							vbStatus = app.dispatchEvent(event);
						}else{
							if(util.FreeForm.deleteRow(hostApp, vcCtrl.id, "CRM")){
								vbStatus = app.dispatchEvent(event);
							}
						}
					}
				}
				if(vbStatus){
					var commonEvent = new cpr.events.CUIEvent("commonEvent");
					commonEvent.status = "delete";
					app.dispatchEvent(commonEvent);	
				}
			}
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출. 
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */e) {
				var event = new cpr.events.CUIEvent("save");
				app.dispatchEvent(event);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출. 
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */e) {
				if(e.property == "visibleNewButton"){
					if(e.newValue === false){
						app.getContainer().getLayout().setColumnVisible(0, false);
					} else if(e.newValue === true){
			            app.getContainer().getLayout().setColumnVisible(0, true);
			        }
				}else if(e.property == "visibleDeleteButton"){
					if(e.newValue === false){
						app.getContainer().getLayout().setColumnVisible(1, false);
					} else if(e.newValue === true){
			            app.getContainer().getLayout().setColumnVisible(1, true);
			        }
				}else if(e.property == "visibleRestoreButton"){
					if(e.newValue === false){
						app.getContainer().getLayout().setColumnVisible(2, false);
					} else if(e.newValue === true){
						app.getContainer().getLayout().setColumnVisible(2, true);
					}
				}else if(e.property == "visibleSaveButton"){
					if(e.newValue === false){
						app.getContainer().getLayout().setColumnVisible(3, false);
					} else if(e.newValue === true){
						app.getContainer().getLayout().setColumnVisible(3, true);
					}	
				}else if (e.property == "forceDelete") {
					if(e.newValue === true){
						var vcBtnDel = app.lookup("btnDelete");
						vcBtnDel.style.setClasses("btn-delete-save");
						vcBtnDel.redraw();
					}
				}
			}
			
			
			/*
			 * 버튼(btnRestore)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRestoreClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRestore = e.control;
				
				var vaCtrlArr = [];
				var vcCtrl = app.getAppProperty("grid"); //타겟 컨트롤
				
				var hostApp = app.getHostAppInstance();
				var event = new cpr.events.CUIEvent("restore");
				var vbStatus = false;
				if(vcCtrl == null || app.getAppProperty("ignoreDefaultRestoreAction") === true){
					//디폴트 행삭제 Action 무시하는 경우는 이벤트만 발생시킴
					vbStatus = app.dispatchEvent(event);
				}else{
					//행삭제 전에 체크할 로직이 있는지 체크
					var vbSuccess = app.dispatchEvent(new cpr.events.CUIEvent("beforeRestore"));
					if(!vbSuccess) return;
					// 그리드인 경우
					if(vcCtrl instanceof cpr.controls.Grid){
						//선택행 삭제
						util.Grid.revertRowData(hostApp, vcCtrl.id);
						
						var vsDataBindCtxId = vcCtrl.userAttr("bindDataFormId");
						
						if(vsDataBindCtxId){
							hostApp.lookup(vsDataBindCtxId).redraw();	
						}
						
						vbStatus = app.dispatchEvent(event);
					// 프리폼인 경우
					}else{
						if(app.getAppProperty("enableMultiForm") === true){
							vbStatus = app.dispatchEvent(event);
						}else{
							
							var vcForm = hostApp.lookup(vcCtrl.id);
							/** @type cpr.bind.BindContext */
							var voBindContext = util.Group.getBindContext(hostApp, vcForm);
							var voDs = voBindContext.grid ? voBindContext.grid.dataSet : voBindContext.dataSet;
							var rowIndex = voBindContext.grid ? util.Grid.getIndex(hostApp, voBindContext.grid.id) : voBindContext.rowIndex;
				
							if(voDs.getRowState(rowIndex) == cpr.data.tabledata.RowState.INSERTED){
								voDs.revertRow(rowIndex);
							}else{
								util.FreeForm.revertRow(hostApp, vcCtrl.id);
							}
								
							vbStatus = app.dispatchEvent(event);
						}
					}
					util.Control.removeInvalidClassAll(hostApp, vcCtrl.id);
				}
				 if(vbStatus){
					var commonEvent = new cpr.events.CUIEvent("commonEvent");
					commonEvent.status = "restore";
					app.dispatchEvent(commonEvent);	
				}
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("grid", null);
			app.declareBindableAppProperty("enableMultiForm", false);
			app.declareAppProperty("focusColumnName", null);
			app.declareAppProperty("forceDelete", false);
			app.declareAppProperty("ignoreDefaultNewAction", false);
			app.declareAppProperty("ignoreDefaultDeleteAction", false);
			app.declareAppProperty("ignoreDefaultRestoreAction", false);
			app.declareBindableAppProperty("buttonNewLabel", "신규");
			app.declareBindableAppProperty("buttonDelLabel", "삭제");
			app.declareBindableAppProperty("buttonSaveLabel", "저장");
			app.declareBindableAppProperty("buttonRestoreLable", "취소");
			app.declareBindableAppProperty("visibleNewButton", true);
			app.declareBindableAppProperty("visibleDeleteButton", true);
			app.declareBindableAppProperty("visibleRestoreButton", true);
			app.declareBindableAppProperty("visibleSaveButton", true);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["60px", "60px", "60px", "60px"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnSave");
			button_1.style.setClasses(["btn-save"]);
			button_1.bind("value").toAppProperty("buttonSaveLabel");
			button_1.bind("visible").toAppProperty("visibleSaveButton");
			if(typeof onBtnSaveClick == "function") {
				button_1.addEventListener("click", onBtnSaveClick);
			}
			container.addChild(button_1, {
				"colIndex": 3,
				"rowIndex": 0,
				"verticalAlign": "fill",
				"height": 23
			});
			
			var button_2 = new cpr.controls.Button("btnDelete");
			button_2.style.setClasses(["btn-delete"]);
			button_2.bind("value").toAppProperty("buttonDelLabel");
			button_2.bind("visible").toAppProperty("visibleDeleteButton");
			if(typeof onBtnDelClick == "function") {
				button_2.addEventListener("click", onBtnDelClick);
			}
			container.addChild(button_2, {
				"colIndex": 1,
				"rowIndex": 0,
				"verticalAlign": "fill",
				"height": 23
			});
			
			var button_3 = new cpr.controls.Button("btnNew");
			button_3.style.setClasses(["btn-new"]);
			button_3.bind("value").toAppProperty("buttonNewLabel");
			button_3.bind("visible").toAppProperty("visibleNewButton");
			if(typeof onBtnInsertClick == "function") {
				button_3.addEventListener("click", onBtnInsertClick);
			}
			container.addChild(button_3, {
				"colIndex": 0,
				"rowIndex": 0,
				"verticalAlign": "fill",
				"height": 23
			});
			
			var button_4 = new cpr.controls.Button("btnRestore");
			button_4.style.setClasses(["btn-restore"]);
			button_4.bind("value").toAppProperty("buttonRestoreLable");
			button_4.bind("visible").toAppProperty("visibleRestoreButton");
			if(typeof onBtnRestoreClick == "function") {
				button_4.addEventListener("click", onBtnRestoreClick);
			}
			container.addChild(button_4, {
				"colIndex": 2,
				"rowIndex": 0,
				"verticalAlign": "fill",
				"height": 23
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "comButton";
	
	// Type declaration for comButton
	cpr.utils.Util.ensurePackage("udc.com").comButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comButton", internalApp, id);
	};
	
	udc.com.comButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comButton.prototype, "type", {
		get : function(){
			return "udc.com.comButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comButton.prototype, "grid", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grid");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grid", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "enableMultiForm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("enableMultiForm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("enableMultiForm", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "focusColumnName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("focusColumnName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("focusColumnName", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "forceDelete", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("forceDelete");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("forceDelete", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "ignoreDefaultNewAction", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ignoreDefaultNewAction");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ignoreDefaultNewAction", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "ignoreDefaultDeleteAction", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ignoreDefaultDeleteAction");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ignoreDefaultDeleteAction", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "ignoreDefaultRestoreAction", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ignoreDefaultRestoreAction");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ignoreDefaultRestoreAction", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "buttonNewLabel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("buttonNewLabel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("buttonNewLabel", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "buttonDelLabel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("buttonDelLabel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("buttonDelLabel", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "buttonSaveLabel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("buttonSaveLabel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("buttonSaveLabel", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "buttonRestoreLable", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("buttonRestoreLable");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("buttonRestoreLable", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "visibleNewButton", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("visibleNewButton");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("visibleNewButton", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "visibleDeleteButton", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("visibleDeleteButton");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("visibleDeleteButton", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "visibleRestoreButton", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("visibleRestoreButton");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("visibleRestoreButton", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButton.prototype, "visibleSaveButton", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("visibleSaveButton");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("visibleSaveButton", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comButton
/// start - udc.com.comButtonExcel
/*
 * UDC Qualified Name: udc.com.comButtonExcel
 * App URI: udc/com/comButtonExcel
 * Source Location: udc/com/comButtonExcel.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comButtonExcel", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//공통 유틸(Util) 클래스
			var util = createCommonUtil();
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var vsFieldLabel = app.getHostProperty("fieldLabel");
				if(!ValueUtil.isNull(vsFieldLabel)){
					app.lookup("btnExlUpload").text = vsFieldLabel;
				}
			}
			
			/*
			 * "엑셀업로드" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnExlUploadClick(/* cpr.events.CMouseEvent */ e){
				//엑셀업로드 팝업 호출전 사용자 함수가 존재하는 경우에 반환값에 따라... 진행처리함
				if(!ValueUtil.isNull(app.getAppProperty("befCheckFunc"))){
					var hostApp = app.getHostAppInstance();
					var vbProgress = hostApp.callAppMethod(app.getAppProperty("befCheckFunc"));
					if(!vbProgress){
						e.preventDefault();
						return;
					}
				}
				
				/** @type cpr.controls.Grid */
				var targetGrid = app.getAppProperty("grid");
				if(targetGrid && targetGrid.dataSet.getRowStatedIndices(cpr.data.tabledata.RowState.INSERTED).length > 0){
					util.Msg.alert("신규 추가행 행이 존재합니다. 엑셀업로드 전에 데이터 저장을 먼저 하시기 바랍니다.");
					return false;
				}
				
				var hostApp = app.getHostAppInstance();
				
				//팝업 호출 파라메터
				var initValue = {"targetGrid":app.getAppProperty("grid"),
								 "startRowIndex":app.getAppProperty("startRowIndex"),
								 "startCellIndex":app.getAppProperty("startCellIndex"),
								 "ignoreDuplicate":app.getAppProperty("ignoreDuplicate"),
								 "showHiddenColumns":app.getAppProperty("showHiddenColumns")
								};
				util.Dialog.open(app, "app/cmn/cmnPExcelUpload", 800, 550, function(e){
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue != null){
						//팝업 반환값에 대한 콜백처리
						if(returnValue.complete === "Y"){
							var event = new cpr.events.CUIEvent("complete");
							app.dispatchEvent(event);
						}
					}
				}, initValue);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("grid", null);
			app.declareBindableAppProperty("startRowIndex", null);
			app.declareBindableAppProperty("startCellIndex", 0);
			app.declareBindableAppProperty("showHiddenColumns", false);
			app.declareBindableAppProperty("ignoreDuplicate", false);
			app.declareAppProperty("befCheckFunc", null);
			
			app.supportMedia("all and (min-width: 1320px)", "smuis");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnExlUpload");
			button_1.value = "엑셀업로드";
			button_1.style.setClasses(["btn-pop"]);
			if(typeof onBtnExlUploadClick == "function") {
				button_1.addEventListener("click", onBtnExlUploadClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "comButtonExcel";
	
	// Type declaration for comButtonExcel
	cpr.utils.Util.ensurePackage("udc.com").comButtonExcel = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comButtonExcel", internalApp, id);
	};
	
	udc.com.comButtonExcel.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comButtonExcel.prototype, "type", {
		get : function(){
			return "udc.com.comButtonExcel";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comButtonExcel.prototype, "grid", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grid");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grid", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButtonExcel.prototype, "startRowIndex", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("startRowIndex");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("startRowIndex", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButtonExcel.prototype, "startCellIndex", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("startCellIndex");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("startCellIndex", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButtonExcel.prototype, "showHiddenColumns", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("showHiddenColumns");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("showHiddenColumns", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButtonExcel.prototype, "ignoreDuplicate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ignoreDuplicate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ignoreDuplicate", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comButtonExcel.prototype, "befCheckFunc", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("befCheckFunc");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("befCheckFunc", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comButtonExcel
/// start - udc.com.comFormTitle
/*
 * UDC Qualified Name: udc.com.comFormTitle
 * App URI: udc/com/comFormTitle
 * Source Location: udc/com/comFormTitle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comFormTitle", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//공통 유틸(Util) 클래스
			var util = createCommonUtil();
			
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var vcCtrl = app.getAppProperty("ctrl");
				if(vcCtrl){
					app.lookup("optTilte").value = vcCtrl.fieldLabel;
				}else{
					if(app.lookup("optTilte").value == ""){
						app.lookup("optTilte").value = "제목없음";
					}
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("ctrl", null);
			app.declareBindableAppProperty("title", null);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-title"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("optTilte");
			output_1.style.setClasses(["data-title"]);
			output_1.bind("value").toAppProperty("title");
			container.addChild(output_1, {
				"top": "0px",
				"right": "1px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "comFormTitle";
	
	// Type declaration for comFormTitle
	cpr.utils.Util.ensurePackage("udc.com").comFormTitle = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comFormTitle", internalApp, id);
	};
	
	udc.com.comFormTitle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comFormTitle.prototype, "type", {
		get : function(){
			return "udc.com.comFormTitle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comFormTitle.prototype, "ctrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ctrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ctrl", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comFormTitle.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comFormTitle
/// start - udc.com.comMsgDlg
/*
 * UDC Qualified Name: udc.com.comMsgDlg
 * App URI: udc/com/comMsgDlg
 * Source Location: udc/com/comMsgDlg.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comMsgDlg", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			 /**
			* UDC 내의 컨트롤의 접근을 위해 앱인스턴스를 반환한다. 
			* @return app;
			*/
			exports.getUDCApp = function(){
				return app;
			}
			 
			/*
			 * "확인" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnConfirmClick(/* cpr.events.CMouseEvent */ e){
				app.dispatchEvent(new cpr.events.CUIEvent("close"));
				app.dispose();
			}
			
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCancleClick(/* cpr.events.CMouseEvent */ e){	
				app.dispatchEvent(new cpr.events.CUIEvent("cancel"));
				app.dispose();
			}
			
			
			/**
			 * 
			 * @param pText 실제 텍스트 값을 입력  ('\n'이후는  다음 행에 표시됨. )
			 */
			exports.setMsgText = function(pText){
				app.lookup("optMsg").value = pText;
			}
			
			
			/**
			 * 퍼블팀 요청으로 클래스를 추가해주는 함수 추가 (2019.4.11)
			 * @param pClassName 특정시에는 클래스명을 파라미터로 
			 */
			exports.addClassMsgText = function(pClassName){
				app.lookup("optMsg").style.addClass(pClassName);
			}
			
			
			
			/**
			 * 
			 * @param pMsgId String language.json파일에서 사용한 id를 파람으로 적용 ( ex."ALT-CM0005")
			 */
			exports.setMsgTextById = function(pMsgId){
				app.lookup("optMsg").value = cpr.I18N.INSTANCE.message(pMsgId);
			}
			
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				app.lookup("btnConfirm").focus();
			}
			
			
			
			/**
			 * 
			 * @param pText 실제 텍스트 값을 입력  ('\n'이후는  다음 행에 표시됨. )
			 */
			exports.setMsgTitle = function(psTitle){
				if(psTitle) {
					app.lookup("optTitle").value = psTitle;	
				}
			}
			
			
			/*
			 * 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 2019. 11. 21.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				e.stopPropagation();	// 클릭이벤트 추가 전파방지를 위해 추가 
				app.dispatchEvent(new cpr.events.CUIEvent("cancel"));
				app.dispose();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("msgContent", null);
			app.declareBindableAppProperty("required", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"background-color" : "rgba(0, 0, 0, 0.3)",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "480px", "1fr"]);
			formLayout_1.setRows(["1fr", "170px", "1fr"]);
			formLayout_1.setRowAutoSizing(1, true);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			group_1.style.css({
				"background-color" : "#ffffff"
			});
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.spacing = 5;
			verticalLayout_1.bottomMargin = 20;
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grp2");
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.rightMargin = "20px";
				formLayout_2.leftMargin = "20px";
				formLayout_2.horizontalSpacing = "0px";
				formLayout_2.verticalSpacing = "0px";
				formLayout_2.horizontalSeparatorWidth = 1;
				formLayout_2.horizontalSeparatorColor = "#DFDFDF";
				formLayout_2.setColumns(["1fr"]);
				formLayout_2.setRows(["40px", "1fr"]);
				formLayout_2.setRowMinHeight(1, 80);
				group_2.setLayout(formLayout_2);
				(function(container){
					var group_3 = new cpr.controls.Container("grp4");
					// Layout
					var xYLayout_1 = new cpr.controls.layouts.XYLayout();
					group_3.setLayout(xYLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output("optTitle");
						output_1.value = "알림";
						output_1.style.setClasses(["msgText-title"]);
						output_1.style.css({
							"font-weight" : "bold"
						});
						container.addChild(output_1, {
							"top": "0px",
							"bottom": "0px",
							"left": "0px",
							"width": "200px"
						});
						var button_1 = new cpr.controls.Button("btn1");
						button_1.style.css({
							"border-right-style" : "none",
							"background-color" : "transparent",
							"background-repeat" : "no-repeat",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-position" : "center",
							"background-image" : "url('theme/common/images/com/main/icon-close-circle-fill.svg')",
							"border-top-style" : "none"
						});
						if(typeof onBtn1Click == "function") {
							button_1.addEventListener("click", onBtn1Click);
						}
						container.addChild(button_1, {
							"top": "10px",
							"right": "0px",
							"bottom": "10px",
							"width": "20px"
						});
					})(group_3);
					container.addChild(group_3, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var group_4 = new cpr.controls.Container("grp6");
					group_4.style.setClasses(["msgText-content"]);
					// Layout
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.horizontalSpacing = "0px";
					formLayout_3.verticalSpacing = "0px";
					formLayout_3.setColumns(["1fr"]);
					formLayout_3.setRows(["80px"]);
					formLayout_3.setRowAutoSizing(0, true);
					group_4.setLayout(formLayout_3);
					(function(container){
						var output_2 = new cpr.controls.Output("optMsg");
						container.addChild(output_2, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_4);
					container.addChild(group_4, {
						"colIndex": 0,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1
					});
				})(group_2);
				container.addChild(group_2, {
					"autoSize": "height",
					"width": "480px",
					"height": "120px"
				});
				var group_5 = new cpr.controls.Container("grp3");
				group_5.style.setClasses(["button-area"]);
				// Layout
				var formLayout_4 = new cpr.controls.layouts.FormLayout();
				formLayout_4.scrollable = false;
				formLayout_4.horizontalSpacing = "0px";
				formLayout_4.verticalSpacing = "0px";
				formLayout_4.setColumns(["1fr", "400px", "1fr"]);
				formLayout_4.setColumnAutoSizing(1, true);
				formLayout_4.setRows(["30px"]);
				formLayout_4.setRowAutoSizing(0, true);
				group_5.setLayout(formLayout_4);
				(function(container){
					var group_6 = new cpr.controls.Container("grp5");
					// Layout
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					flowLayout_1.horizontalSpacing = 5;
					flowLayout_1.verticalSpacing = 5;
					flowLayout_1.horizontalAlign = "center";
					flowLayout_1.lineWrap = false;
					group_6.setLayout(flowLayout_1);
					(function(container){
						var button_2 = new cpr.controls.Button("btnCancle");
						button_2.value = "취소";
						button_2.userAttr({"btnAuth": "S"});
						if(typeof onBtnCancleClick == "function") {
							button_2.addEventListener("click", onBtnCancleClick);
						}
						container.addChild(button_2, {
							"width": "60px",
							"height": "30px"
						});
						var button_3 = new cpr.controls.Button("btnConfirm");
						button_3.value = "확인";
						button_3.userAttr({"btnAuth": "S"});
						button_3.style.setClasses(["btn-primary"]);
						if(typeof onBtnConfirmClick == "function") {
							button_3.addEventListener("click", onBtnConfirmClick);
						}
						container.addChild(button_3, {
							"width": "60px",
							"height": "30px"
						});
					})(group_6);
					container.addChild(group_6, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1220px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 1,
				"rowIndex": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "메시지창";
	
	// Type declaration for comMsgDlg
	cpr.utils.Util.ensurePackage("udc.com").comMsgDlg = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comMsgDlg", internalApp, id);
	};
	
	udc.com.comMsgDlg.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comMsgDlg.prototype, "type", {
		get : function(){
			return "udc.com.comMsgDlg";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comMsgDlg.prototype, "msgContent", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("msgContent");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("msgContent", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comMsgDlg.prototype, "required", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("required");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("required", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comMsgDlg
/// start - udc.com.comTitle
/*
 * UDC Qualified Name: udc.com.comTitle
 * App URI: udc/com/comTitle
 * Source Location: udc/com/comTitle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/comTitle", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//공통 유틸(Util) 클래스
			var util = createCommonUtil();
			
			/**
			 * 그리드가 팝 아웃 되어있는지 여부.
			 */
			var mbPopOuted = false;
			/**
			 * 원래 부모에 속해 있었을 때의 레이아웃 컨스트레인트.
			 */
			var moOriginalConstraint = null;
			/** 
			 * 그리드의 원래 부모.
			 * @type cpr.controls.Container 
			 */
			var moOriginalParent = null;
			/** 
			 * 그리드가 팝아웃 되었을 때 부모역할을 할 래퍼.
			 * @type cpr.controls.Container 
			 */
			var moWrapper = null;
			
			var moHostApp = null;
			
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var vcCtrl = app.getAppProperty("ctrl");
				if(vcCtrl){
					app.lookup("optTilte").value = vcCtrl.fieldLabel;
					if(vcCtrl.type == "grid"){
						if(vcCtrl.dataSet){
							app.setAppProperty("rowCount", vcCtrl.dataSet.getRowCount());
						}else{
							app.setAppProperty("rowCount", "0");
						}
					}
				}
				
				//다운로드 권한이 없으면... 엑셀버튼 숨김
				if(util.Auth.getMenuInfo(app, "DOWNLD_YN") !== "Y"){
					//app.setAppProperty("showExportExcel", false);
				}
				
				//모바일 화면이면... 엑셀버튼 숨김
				var mainApp = util.getMainApp(app);
				if(mainApp){
					if(mainApp.getContainer().userAttr("adaptive-screen") === "true"){
						app.setAppProperty("showExportExcel", false);
						
						var layout = app.lookup("grp1").getLayout();
						layout.setColumnVisible(1, false);
						layout.setColumnVisible(2, false);
						layout.setColumnVisible(3, false);
						layout.setColumnVisible(4, false);
					}
				}
				
				//View-Port에 대한 확대보기 사용여부에 따른 이벤트 추가
				var vbUseViewPartPopout = true;//어플리케이션 설정에서 사용 유/무 설정 가능
				try{
					var dmAppConfig = app.getRootAppInstance().callAppMethod("getAppConfig");
					vbUseViewPartPopout = dmAppConfig.getValue("userViewPartPopOut") === "N" ? false : true;
				}catch(ex){vbUseViewPartPopout = false;}
				
				if(vbUseViewPartPopout){
					app.lookup("optTilte").addEventListener("dblclick", function(e){
						if(mbPopOuted === true){
							doClosePopView();
						}else{
							doPopoutView();
						}
					});
				}
				
				var vcBtnYn = app.getAppProperty("showExpandBtn");
			
				if(vcBtnYn){
					app.lookup("grp1").getLayout().setColumnVisible(4, vcBtnYn);
				}
			}
			
			/*
			 * "엑셀출력" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnExcelExportClick(/* cpr.events.CMouseEvent */ e){
				var vcCtrl = app.getAppProperty("ctrl");
				var exportTitle = !ValueUtil.isNull(app.getAppProperty("exportTitle")) ? app.getAppProperty("exportTitle") : app.lookup("optTilte").value;
				var _app = vcCtrl.getAppInstance();
				util.Grid.exportData(_app, vcCtrl.id, exportTitle, null, "xlsx", null, !app.getAppProperty("exportHiddenColumns"), app.getAppProperty("exportExcludePart"));
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				if(e.property == "rowCount"){
					app.lookup("optRowCount").redraw();
					
			//		if ( app.getAppProperty("optRowCount") == "0"){
			//			app.lookup("grp1").getLayout().setColumnVisible(5, false);
			//		} else{
			//			app.lookup("grp1").getLayout().setColumnVisible(5, true);
			//		}
					
				}else if(e.property == "showExportExcel"){
					if(app.getAppProperty("showExportExcel") === false){
						app.lookup("grp1").getLayout().setColumnVisible(6, false);
					}
				}else if(e.property == "title"){
					app.lookup("optTilte").value = e.newValue;
				}else if(e.property == "showExpandBtn"){
					app.lookup("grp1").getLayout().setColumnVisible(4, app.getAppProperty("showExpandBtn"));
				}
			}
			
			/**
			 * 선택된 View-Port를 화면 최상위로 올려, 확대보기 처리한다.
			 */
			function doPopoutView(){
				/** @type cpr.controls.Grid */
				var vcGrid = app.getAppProperty("ctrl");
				if(vcGrid == null) return;
				
				if (mbPopOuted === true) return;
				
				var vcViewCtrl = vcGrid.getParent();
				
				moHostApp = vcGrid.getAppInstance();
				
				// 팝 아웃 시키기전 필요한 상태들을 백업 함.
				moOriginalParent = vcViewCtrl.getParent();
				moOriginalConstraint = moOriginalParent.getConstraint(vcViewCtrl);
			
				// 원래 부모로 부터 그리드 제거.
				moOriginalParent.removeChild(vcViewCtrl);
			
				// 플로팅 시킬 그룹
				moWrapper = new cpr.controls.Container();
				moWrapper.style.css({
					position: "fixed",
					top: "50px",
					right: "50px",
					bottom: "50px",
					left: "50px",
					background: "white", // 배경을 가려 줘야 함.
				});
				
				// 닫기 버튼 생성 및 추가.
				var closeButton = new cpr.controls.Button();
				closeButton.value = "닫기";
				closeButton.addEventListenerOnce("click", (function() {
					doClosePopView();
				}));
			
				moWrapper.addChild(closeButton, {
					bottom: "10px",
					width: "80px",
					height: "25px",
					left: "calc(50% - 40px)"
				});
			
				// 플로팅 될 그룹에 그리드 추가.
				moWrapper.addChild(vcViewCtrl, {
					top: "5px",
					right: "5px",
					bottom: "45px",
					left: "5px"
				});
			
				// 그룹을 플로팅 시킴.
				moHostApp.getRootAppInstance().floatControl(moWrapper);
			
				// 플로팅 된 그룹에 애니메이션 재생.
				moWrapper.style.animateFrom({
					"transform": "translateZ(-300px)"
				}, 0.3, cpr.animation.TimingFunction.EASE_OUT_BACK);
				
				mbPopOuted = true;
			}
			
			/**
			 * View-Port 확대보기 되돌리기
			 * 확대보기 처리된 컨트롤을 다시 원래상태로 되돌린다.
			 */
			function doClosePopView(){
				/** @type cpr.controls.Grid */
				var vcGrid = app.getAppProperty("ctrl");
				if(vcGrid == null) return;
				
				if (mbPopOuted === false) return;
				
				var vcViewCtrl = vcGrid.getParent();
				
				// 래퍼로 부터 그리드 제거.
				moWrapper.removeChild(vcViewCtrl);
				
				// 원래 부모에 그리드를 다시 추가.
				moOriginalParent.addChild(vcViewCtrl, moOriginalConstraint);
			
				// 플롯된 래퍼를 제거.
				moWrapper.getParent().removeChild(moWrapper);
				moWrapper = null;
				
				// 그리드에 애니메이션 추가.
				vcViewCtrl.style.animateFrom({
					"transform" : "translateZ(100px)",
					"opacity" : "0"
				}, 0.1);
				
				mbPopOuted = false;
			}
			
			
			
			/*
			 * 버튼(btnTools)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnToolsClick(/* cpr.events.CMouseEvent */ e){
				/**@type cpr.controls.Grid */
				var grid = app.getAppProperty("ctrl");
				if(grid == null || grid.type !== "grid"){
					alert("Can not find Target Grid Control!");
					return false;
				}
				
				var vsGridKey = grid.getAppInstance().id + grid.id;
				
				var ctxMenu = new cpr.controls.Menu("ctx_menu");
				//ctxMenu.addItem(new cpr.controls.TreeItem("찾기", "1", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("정렬취소", "2", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("필터", "3", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("필터취소", "4", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("개인화저장", "7", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("초기화", "8", "root"));
			//	ctxMenu.addItem(new cpr.controls.TreeItem("컬럼숨김", "5", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("인쇄", "6", "root"));
				ctxMenu.addItem(new cpr.controls.TreeItem("컬럼 설정", "9", "root"));
				
				// 인쇄시 그리드에 선택된 행이 존재할 경우 컨트롤 영역이 보여져 그리드 선택 clear 후 재 선택되도록 수정 (2021.07.29 추가)
				var vaGrdSelectIdx = grid.getSelectedIndices();
				ctxMenu.addEventListener("before-selection-change", function(e){
					vaGrdSelectIdx = grid.getSelectedIndices();
					grid.clearSelection();
				});
				
				// 인쇄시 그리드에 선택된 행이 존재할 경우 컨트롤 영역이 보여져 그리드 선택 clear 후 재 선택되도록 수정 (2021.07.29 추가)
				ctxMenu.addEventListener("dispose", function(e){
					grid.selectRows(vaGrdSelectIdx);
				});
				
				ctxMenu.addEventListener("item-click", function(/**@type cpr.events.CItemEvent */ e){
					var itemValue = e.item.value;
					
					//찾기
					if(itemValue == "1"){
						//팝업 호출 파라메터
						var initValue = {"grid": grid, "headerRowIndex":app.getAppProperty("headerRowIndex")};
						util.Dialog.open(app, "app/cmn/cmnPFind", 500, 150, function(e){
						
						}, initValue);
					//정렬취소
					}else if(itemValue == "2"){
						if(grid) grid.header.clearSort();
					//필터 보여주기
					}else if(itemValue == "3"){
						var isHFiltered = false;
						var column, filterStr;
						for(var i=0, len=grid.header.cellCount; i<len; i++){
							column = grid.header.getColumn(i);
							filterStr = column.getFilter();
							if(filterStr != null && filterStr[0] != "__all__"){
								isHFiltered = true;
								break;
							}
						}
						if(!isHFiltered){
							var hTRowIndex = app.getAppProperty("headerRowIndex");
							for(var i=0, len=grid.header.cellCount; i<len; i++){
								column = grid.header.getColumn(i);
								if(hTRowIndex > -1){
									if((column.rowIndex + column.rowSpan) == (hTRowIndex+1) && column.targetColumnName != ""){
										column.filterable = true;
									}
								}else{
									if(column.targetColumnName != ""){
										column.filterable = true;
									}
								}
							}
						}
					//필터 해제 및 필터 숨김
					}else if(itemValue == "4"){
						if(grid){
							grid.header.clearFilter();
							var column;
							for(var i=0, len=grid.header.cellCount; i<len; i++){
								column = grid.header.getColumn(i);
								column.filterable = false;
							}
						}
					//컬럼 숨김/보이기
					}else if(itemValue == "5"){
						//팝업 호출 파라메터
						var initValue = {"grid": grid, "headerRowIndex":app.getAppProperty("headerRowIndex")};
						util.Dialog.open(app, "app/cmn/cmnPColumns", 400, 330, function(e){
						
						}, initValue);
					
					//인쇄
					}else if(itemValue == "6"){
						/*
						var targetEle = document.getElementById("uuid-"+grid.uuid);
						// 3.DOM의 text를 얻습니다.
						var content = targetEle.innerHTML;
						// 오픈되는 윈도우에 프린트하려는 데이터를 공유합니다.
					    sessionStorage.setItem("print-content", content);
					    var windowWidth = (window.innerWidth | document.body.clientWidth)-500;
						var windowHeight = (window.innerHeight | document.body.clientHeight)-300;
						var width = windowWidth > 600 ? windowWidth : 600;
						var height = windowHeight > 400 ? windowHeight : 400;
						
						//print하는 페이지를 엽니다.
						var popWindow = window.open('app/com/inc/print.html',"print",'left=100,top=100, resizable=yes, height='+height+',width='+width);
						* */
						
						sessionStorage.setItem("print-content", getHTMLToGrid([grid], {
								title : grid.fieldLabel,
							})); 
						
						var windowWidth = (window.innerWidth | document.body.clientWidth)-500;
						var windowHeight = (window.innerHeight | document.body.clientHeight)-300;
						var width = windowWidth > 600 ? windowWidth : 600;
						var height = windowHeight > 400 ? windowHeight : 400;
						var popWindow = window.open('app/com/inc/print.html',"print",'left=100,top=100, resizable=yes, height='+height+',width='+width);
					}else if(itemValue == "7"){
						var voGridLayout = grid.getColumnLayout();
						var vsGridLayout = JSON.stringify(voGridLayout);
						localStorage.setItem( vsGridKey , vsGridLayout);
						util.Msg.notify(app, "그리드 상태가 저장되었습니다.");
					}else if(itemValue == "8"){
						localStorage.setItem( vsGridKey , null);
						grid.resetGrid();
						util.Msg.notify(app, "그리드가 초기화 되었습니다.");
					
					// 그리드 컬럼 필터팝업 (2021.10.05 추가)
					} else if(itemValue == "9") {
						if(rootContainer == null || showConstraint == null) return;
						
						var grdFilter = new udc.com.gridFilter();
						grdFilter.userAttr("grid-filter", "true");
						grdFilter.grid = grid;
						grdFilter.addEventListenerOnce("cnclClick", function(e) {
							rootContainer.removeChild(grdFilter);
						})
						grdFilter.addEventListenerOnce("okClick", function(e) {
							rootContainer.removeChild(grdFilter);
						})
						
						var vnWidth = 320;
						showConstraint.width = vnWidth + "px";
						showConstraint.left = parseInt(_.clone(showConstraint.left)) - (vnWidth/2) + "px";
						
						rootContainer.addEventListenerOnce("click", function(){
							rootContainer.removeChild(grdFilter);
						})
						
						rootContainer.floatControl(grdFilter, showConstraint);
					}
					ctxMenu.dispose();
				});
				
				ctxMenu.addEventListenerOnce("blur", function(/**@type cpr.events.CFocusEvent*/ e){
					// 인쇄시 그리드에 선택된 행이 존재할 경우, 컨트롤 영역이 보여져 그리드 선택 clear 후 재 선택되도록 수정 (2021.07.29 추가)
					grid.selectRows(vaGrdSelectIdx);
					e.control.dispose();
				});
					
				/**@type cpr.controls.Container */
				var rootContainer = null;
				var showConstraint = {
					"position" : "absolute",
					"width" : "auto",
					"height" : "auto"
				};
				if(util.Dialog.isPopup(grid.getAppInstance())){
					rootContainer = grid.getAppInstance().getContainer();
					
					if((e.clientY - rootContainer.getActualRect().top + 130) > rootContainer.getActualRect().height )
						showConstraint.top = (e.clientY - rootContainer.getActualRect().top - 130) +"px";
					else
						showConstraint.top = (e.clientY - rootContainer.getActualRect().top) +"px";
					
					showConstraint.left = (e.clientX - (rootContainer.getActualRect().left + 130)) + "px";
				}else{
					rootContainer = grid.getAppInstance().getRootAppInstance().getContainer();
					
					showConstraint.top = e.clientY + "px";
					if(e.clientX < 130){
						showConstraint.left = "0px";
					}else{
						showConstraint.left = (e.clientX - 130) + "px";
					}
				}
				var layout = rootContainer.getLayout();
				if(layout instanceof cpr.controls.layouts.FormLayout
					|| layout instanceof cpr.controls.layouts.VerticalLayout){
					rootContainer.floatControl(ctxMenu, showConstraint);
				}else{
					rootContainer.addChild(ctxMenu, showConstraint);
				}
				ctxMenu.focus();
			}
			
			
			
			/**
			 * 프린트할 html 반환
			 */
			function getHTMLToGrid(gridArr, pageInfo){
				var htmlTagArr= [];
				htmlTagArr[htmlTagArr.length] = "<div class='page'>";
			
				if (pageInfo != null) {
					// 제목
					if (pageInfo.hasOwnProperty("title")) {
						htmlTagArr[htmlTagArr.length] = "<h1>"+pageInfo["title"]+"</h1>";
					}
					// 결재선 테이블
					if (pageInfo.hasOwnProperty("approvalLine")) {
						var approvalLineTagArr = [];
						approvalLineTagArr[approvalLineTagArr.length] = "<table class='approval_table' >";
						approvalLineTagArr[approvalLineTagArr.length] = "<tr>";
						for (var i = 0; i < pageInfo["approvalLine"].length; i++) {
							approvalLineTagArr[approvalLineTagArr.length] = "<td>"+pageInfo["approvalLine"][i]+"</td>";
						}
						approvalLineTagArr[approvalLineTagArr.length] = "</tr><tr>";
						for (var i = 0; i < pageInfo["approvalLine"].length; i++) {
							approvalLineTagArr[approvalLineTagArr.length] = "<td></td>";
						}
						approvalLineTagArr[approvalLineTagArr.length] = "</tr>";
						approvalLineTagArr[approvalLineTagArr.length] = "</table>";
						htmlTagArr[htmlTagArr.length] = approvalLineTagArr.join("");
					}
				}
				
				
				// 그리드
				for (var i = 0; i < gridArr.length; i++) {
					htmlTagArr[htmlTagArr.length] = getGridTable(gridArr[i]).join("");
					
					if (i != (gridArr.length-1)) {
						htmlTagArr[htmlTagArr.length] = "<div style='page-break-before: always; '> </div>";
					}
				}
				htmlTagArr[htmlTagArr.length] = "</div>";
				
				return htmlTagArr.join("");
			}
			
			/**
			 * 그리드 데이터를 통한 table 반환
			 * @param {cpr.controls.Grid} grid
			 */
			function getGridTable(grid) {
				var exportData = grid.getExportData({
					exceptStyle : false,
					applyFormat: true,
					applySuppress: true
				});
				
				var tableTagArr = [];
				tableTagArr[tableTagArr.length] = "<table class='cl-control cl-grid'>";
				var cols = exportData.cols;
				tableTagArr[tableTagArr.length] = "<colgroup>";
				var colWidths = [];
				var totalColumnWidth = 0;
				for (var ci = 0; ci < cols.length; ci++) {
					var colWidth = cpr.utils.ParamUtil.parseSize(cols[ci]["width"]).size;
					totalColumnWidth += colWidth;
					colWidths[colWidths.length] = colWidth;
				}
				for (var ci = 0; ci < colWidths.length; ci++) {
					tableTagArr[tableTagArr.length] = "<col style='width : " + (colWidths[ci] / totalColumnWidth) + "%'>";
				}
				tableTagArr[tableTagArr.length] = "</colgroup>";
				
				var layouts = exportData.rowgroups;
				for (var li = 0; li < layouts.length; li++) {
					var layout = layouts[li];
					var datas = layout.data;
					var styles = layout.style;
					var trTagArr = [];
					
					// 셀별 데이터를 trTagArr에 배열로 추가
					for (var ri = 0; ri < datas.length; ri++) {
						var tdTagArr = [];
						for (var ci = 0; ci < datas[ri].length; ci++) {
							var rowIndex = styles[ci]["rowindex"];
							if (tdTagArr[rowIndex] == null) {
								tdTagArr[rowIndex] = [];
							}
							if (Object.keys(datas[ri][ci]).length != 0) {
								tdTagArr[rowIndex][tdTagArr[rowIndex].length] = getTd(datas[ri][ci], styles[ci]).join("");
							}
						}
						trTagArr = trTagArr.concat(tdTagArr);
					}
					
					if (layout["region"] == "header") {
						tableTagArr[tableTagArr.length] = "<thead class='cl-grid-header'>";
					}
					for (var tri=0; tri < trTagArr.length; tri++) {
						tableTagArr[tableTagArr.length] = "<tr class='cl-grid-row'>";
						tableTagArr[tableTagArr.length] = trTagArr[tri].join("");
						tableTagArr[tableTagArr.length] = "</tr>";
					}
					if (layout["region"] == "header") {
						tableTagArr[tableTagArr.length] = "</thead>";
					}
				}
				
				tableTagArr[tableTagArr.length] = "</table>";
				return tableTagArr;
				
			}
			
			/**
			 * 셀 데이터를 통한 td 반환
			 * @param {any} cell
			 * @param {any} columnInfo
			 * @returns {string[]}
			 */
			function getTd(cell, columnInfo) {
				var value = cell["value"];
				var cellStyle = cell["style"];
				var columnStyle = columnInfo["style"];
				var style = _.extend({}, columnStyle, cellStyle);
				var styleKeys = Object.keys(style);
				
				var tdTagArr = [];
				tdTagArr[tdTagArr.length] = "<td class='cl-grid-cell'"; 
				if (cell.hasOwnProperty("rowspan")) {
					if (cell["rowspan"] > 1) {
						tdTagArr[tdTagArr.length] = " rowspan='"+cell["rowspan"]+"'";
					}
				} else if (columnInfo["rowspan"] > 1) {
					tdTagArr[tdTagArr.length] = " rowspan='"+columnInfo["rowspan"]+"'";
				}
				if (cell.hasOwnProperty("colspan")) {
					if (cell["colspan"] > 1) {
						tdTagArr[tdTagArr.length] = " colspan='"+cell["colspan"]+"'";
					}
				} else if (columnInfo["colspan"] > 1) {
					tdTagArr[tdTagArr.length] = " colspan='"+columnInfo["colspan"]+"'";
				}
				
				if (styleKeys.length > 0) {
					tdTagArr[tdTagArr.length] = " style='";
					for (var si = 0; si < styleKeys.length; si++) {
						tdTagArr[tdTagArr.length] = styleKeys[si] + " : " + style[styleKeys[si]] +"; ";
					}
					tdTagArr[tdTagArr.length] = "'"
				}
				tdTagArr[tdTagArr.length] = ">" + value + "</td>";
				
				return tdTagArr;
			}
			
			
			/*
			 * 버튼(btnTools2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnTools2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnTools2 = e.control;
				doPopoutView();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("ctrl", null);
			app.declareBindableAppProperty("rowCount", "0");
			app.declareBindableAppProperty("title", "제목없음");
			app.declareBindableAppProperty("showExportExcel", true);
			app.declareBindableAppProperty("exportExcelTitle", null);
			app.declareBindableAppProperty("exportHiddenColumns", false);
			app.declareBindableAppProperty("exportExcludePart", null);
			app.declareAppProperty("showExpandBtn", true);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-title"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "5px", "40px", "5px", "20px", "20px", "20px"]);
			formLayout_1.setColumnAutoSizing(2, true);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("optCountText2");
				output_1.value = "]";
				output_1.style.css({
					"color" : "#37474f"
				});
				container.addChild(output_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output("optTilte");
				output_2.style.setClasses(["data-title"]);
				output_2.bind("value").toAppProperty("title");
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output("optCountText");
				output_3.value = "[";
				output_3.style.css({
					"color" : "#37474f"
				});
				container.addChild(output_3, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_4 = new cpr.controls.Output("optRowCount");
				output_4.style.css({
					"color" : "#37474f",
					"font-size" : "9pt",
					"text-align" : "center"
				});
				output_4.bind("value").toAppProperty("rowCount");
				container.addChild(output_4, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btnExcelExport");
				button_1.tooltip = "엑셀 내려받기";
				button_1.value = "";
				button_1.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"background-size" : "auto",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "center center",
					"background-image" : "url('theme/common/images/icon/icon_file_xls.gif')",
					"border-top-style" : "none"
				});
				button_1.bind("visible").toAppProperty("showExportExcel");
				if(typeof onBtnExcelExportClick == "function") {
					button_1.addEventListener("click", onBtnExcelExportClick);
				}
				container.addChild(button_1, {
					"colIndex": 6,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button("btnTools");
				button_2.tooltip = "필터/찾기 등";
				button_2.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "center center",
					"background-image" : "url('theme/common/images/icon/ico-grid-action.png')",
					"border-top-style" : "none"
				});
				if(typeof onBtnToolsClick == "function") {
					button_2.addEventListener("click", onBtnToolsClick);
				}
				container.addChild(button_2, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button("btnTools2");
				button_3.tooltip = "필터/찾기 등";
				button_3.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "center center",
					"background-image" : "url('theme/common/images/icon/ico-expand.png')",
					"border-top-style" : "none"
				});
				button_3.bind("visible").toAppProperty("showExpandBtn");
				if(typeof onBtnTools2Click == "function") {
					button_3.addEventListener("click", onBtnTools2Click);
				}
				container.addChild(button_3, {
					"colIndex": 4,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "comTitle";
	
	// Type declaration for comTitle
	cpr.utils.Util.ensurePackage("udc.com").comTitle = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.comTitle", internalApp, id);
	};
	
	udc.com.comTitle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.comTitle.prototype, "type", {
		get : function(){
			return "udc.com.comTitle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.comTitle.prototype, "ctrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ctrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ctrl", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "rowCount", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("rowCount");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("rowCount", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "showExportExcel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("showExportExcel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("showExportExcel", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "exportExcelTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("exportExcelTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("exportExcelTitle", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "exportHiddenColumns", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("exportHiddenColumns");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("exportHiddenColumns", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "exportExcludePart", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("exportExcludePart");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("exportExcludePart", newValue, true);
		}
	});
	Object.defineProperty(udc.com.comTitle.prototype, "showExpandBtn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("showExpandBtn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("showExpandBtn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.comTitle
/// start - udc.com.gridFilter
/*
 * UDC Qualified Name: udc.com.gridFilter
 * App URI: udc/com/gridFilter
 * Source Location: udc/com/gridFilter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/gridFilter", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gridFilter.js
			 * Created at 2020. 9. 24. 오후 4:18:41.
			 *
			 * @author csj
			 ************************************************/
			
			var msUserAttrNm = "cellIndex";
			var msRowClassNm = "row-bottom";
			/*********************************************
			 * 사용자 함수 
			 *********************************************/
			String.prototype.replaceAll = function(org,dest) {
				return this.split(org).join(dest);
			}
			
			function createDragSourceFeedback() {
				var feedback = new cpr.controls.Output();
				feedback.ellipsis = true;
				feedback.style.css({
					"opacity": "0.8",
					"width": "50px",
					"height": "25px",
					"border": "solid 1px red",
					"text-align": "center",
					"color": "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move"
				});
				return feedback;
			}
			
			
			/**
			 * 파라미터의 컨트롤을 드래그 가능하도록 드래그 소스를 지정하는 함수.
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control) {
				var feedback = null;
				var actualRect = null;
				new cpr.controls.DragSource(control, {
					options: {
						dataType: "text",
						threadhold: 10
					},
					onDragStart: function(context) {//dragStart에서 사용중인 context.source.detail이라는 대상은 이후 릴리즈에서 depreacted될 대상으로,context.sourceTargetObject로 대체됩니다.
						
						if (context.sourceTargetObject != null && context.sourceTargetObject.relativeTargetName != "header") {
							context.cursor = "grabbing";
							feedback = createDragSourceFeedback();
							context.data = context.sourceTargetObject;
							feedback.value = JSON.stringify(control.getRow(context.sourceTargetObject.rowIndex).getRowData());
			
							var voDragStartLoca = context.dragStartLocation;
							actualRect = new cpr.geometry.Rectangle(voDragStartLoca.x, voDragStartLoca.y, control.getActualRect().width, 25);
							app.getRootAppInstance().floatControl(feedback, actualRect);
							context.source = null;
						} else {
							context.cancel();
						}
					},
					onDragMove: function(context) {
						context.cursor = "grabbing";
						var newRect = actualRect.getTranslated(context.dragDelta);
						app.getRootAppInstance().floatControl(feedback, newRect);
					},
					onDragEnd: function(context) {
						context.cursor = "";
						feedback.dispose();
						feedback = null;
					}
				});
			}
			var voPrevRowElement = null;
			
			/**
			 * 파라미터로 받은 컨트롤을 드랍가능한 타겟으로 지정하는 함수.
			 * @param {cpr.controls.Grid} control2
			 */
			function setDropTarget(control2) {
			
				var dropTarget = new cpr.controls.DropTarget(control2, {
					isImportant: function(source) {
						return source.dataType == "text";
					},
					onDragEnter: function(context) {
			
					},
					onDragLeave: function(context) {
						
					},
					onDragMove: function(context) {
						var vaElementsOnMouse = elementsFromPoint(context.pointerLocation.x, context.pointerLocation.y);
						//현재 마우스 포인터가 위치하는 곳의 뒤에 있는 모든 요소를 가져오는 함수로, 그리드 행의 요소를 가져옵니다.
						var vaClGridRowEle = vaElementsOnMouse.filter(function( /*HTMLElement*/ each) {
							if (each.classList.contains("cl-grid-row")) {
								return each;
							}
							//마우스 뒤의 요소중 cl-grid-row클래스를 포함한 요소들만 필터링합니다.
						});
						var voGridRowElement = vaClGridRowEle[0];//가장 첫번째 요소에 대해서 하단 보더에 스타일을 주어서 드래그드랍을 통해 대강 어디에 행이 위치할지 정보를 표시할 수 있습니다.
						if (voGridRowElement && !voGridRowElement.classList.contains(msRowClassNm)) {
							if (voGridRowElement != voPrevRowElement && voPrevRowElement) {
			
								voPrevRowElement.classList.remove(msRowClassNm);
							}
							voPrevRowElement = voGridRowElement;
							voGridRowElement.classList.add(msRowClassNm);
							//그리드에 draggrid클래스가 적용되어있는 행에 row-bottom이 적용되어야만 하단에 빨간색 보더가 보여지게됩니다.
							//해당 클래스들에 대한 설정은 UDC내에 html 스니펫을통해 변경할 수 있습니다.
						}
					},
					onDrop: function(context) {
						var voDragRowData = context.source.control.getRow(context.data.rowIndex).getRowData();
						var vnDragIndex = context.data.rowIndex;
						if (context.target.detail != null) { //그리드 디테일 행 내에서 드랍 하였을 경우 
							var vnDropIndex = context.target.detail.rowIndex;
							if (vnDropIndex > vnDragIndex) {//드래그 한 행의 인덱스와, 드랍하는 행의 인덱스의 비교에 따라서 스크립트 순서가 변경됨.
								
								control2.insertRowData(vnDropIndex, true, voDragRowData).setAttr(msUserAttrNm, control2.getRow(vnDragIndex).getAttr(msUserAttrNm));
								control2.setCheckRowIndex(vnDropIndex+1, control2.getRow(vnDragIndex).checked);
								control2.deleteRow(vnDragIndex);
							} else if ((vnDragIndex+1) <= control2.getRowCount()) { 
								if((vnDropIndex+1) < control2.getRowCount()) {
									var isChecked = control2.getRow(vnDragIndex).checked;
									var celIdx = control2.getRow(vnDragIndex).getAttr(msUserAttrNm);
									control2.deleteRow(vnDragIndex);
									control2.insertRowData(vnDropIndex, true, voDragRowData).setAttr(msUserAttrNm,celIdx);
									control2.setCheckRowIndex(vnDropIndex+1, isChecked);
								}
							}
						} 
						else {
							var vnInsertIdx = Number(voPrevRowElement.getAttribute("aria-rowindex")) - 1;//그리드 헤더행이나, 디테일 행이 아닌 구획에 드랍했을 경우
							var isChecked = control2.getRow(vnDragIndex).checked;
							var celIdx = control2.getRow(vnDragIndex).getAttr(msUserAttrNm);
							control2.deleteRow(vnDragIndex);
							control2.insertRowData(vnInsertIdx, false, voDragRowData).setAttr(msUserAttrNm,celIdx);
							vnInsertIdx = vnInsertIdx ==0 ? 0 : control2.getRowCount()-1;
							control2.setCheckRowIndex(vnInsertIdx, isChecked);
						}
						voPrevRowElement.classList.remove(msRowClassNm);
					}
				});
			}
			
			/**
			 * 마우스 포인터가 위치한 곳 밑에 있는 모든 요소를 가져오는 함수입니다.
			 * @param {Number} x
			 * @param {Number} y
			 * @return {HTMLElement}
			 */
			function elementsFromPoint(x, y) {
				if (document["msElementsFromPoint"]) {
					var nodeList = document["msElementsFromPoint"](x, y);
					if (!nodeList) {
						return [];
					} else {
						return Array.prototype.slice.call(nodeList);
					}
				} else {
					return (document["elementsFromPoint"](x, y) || []);
				}
			}
			
			
			
			/*********************************************
			 * 이벤트 핸들러 함수 
			 *********************************************/
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			
				var ds1 = app.lookup("ds1");
				
				/** @type cpr.controls.Grid */
				var grid = app.getAppProperty("grid");
				var vcGrid = app.lookup("grd1");
				var voColumnLayout = grid.getColumnLayout();
			
				var vaAutoFit = [];
				
				if(grid.autoFit  == "all") {
					var vnColCnt = grid.columnCount;
					for(var i = 0 ; i < vnColCnt; i++) {
						vaAutoFit.push(i);
					}
				}
				else if(grid.autoFit == 'none') {
					vaAutoFit = [];
				} else {
					vaAutoFit = grid.autoFit.replaceAll(" ","").split(",");
					vaAutoFit = vaAutoFit.map(function(each){
						return Number(each);
					});
				}
				//컬럼 실제 width값
				var columnWidth = voColumnLayout.columnLayout
			
				for(var i = 0; i < grid.header.cellCount; i++){
					
					var voHeader = voColumnLayout.header[i];
					
					ds1.addRowData({
						headerNm : grid.header.getColumn(voHeader.cellIndex).text,
						columnWidth : columnWidth[i].width,
						autoFitBool : vaAutoFit.indexOf(i) != -1 ? "O" : "X"
					}).setAttr(msUserAttrNm,voHeader.cellIndex);
					
					vcGrid.setCheckRowIndex(i, voHeader.visible);
				}
				
				setDragSource(vcGrid);
				setDropTarget(vcGrid);
			}
			
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				
				app.dispatchEvent(new cpr.events.CUIEvent("cnclClick"));
				
			}
			
			
			/*
			 * "확인" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** @type cpr.controls.Grid */
				var grid = app.getAppProperty("grid");
				
				var vnRowCount = app.lookup("ds1").getRowCount();
				var vcGrid = app.lookup("grd1");
				var voColumnLayout = grid.getColumnLayout();
				var vaTobeColumnArr = [];
				var vsAutoFit = grid.autoFit;
				
				for(var i = 0 ; i < vnRowCount; i++) {
					
					var voRow = vcGrid.getRow(i);
					vaTobeColumnArr.push(voRow.getAttr(msUserAttrNm));
					var isVisible = voRow.checked;
					var a = voColumnLayout.header.map(function(each){
						return each.cellIndex;
					});
					voColumnLayout.columnLayout[a.indexOf(voRow.getAttr(msUserAttrNm))].width = parseInt(voRow.getValue("columnWidth"));
					voColumnLayout.header[a.indexOf(voRow.getAttr(msUserAttrNm))].visible = isVisible;
				}
				grid.setColumnLayout(voColumnLayout);
				grid.redraw();
				
				//그리드의 변경되기 이전의 최초 autoFit속성이 사용된 컬럼인덱스를 colIndex로 찾이서 변수에 저장하기 위한 스크립트입니다.
				var vsOriginAutoFit = "";
				if(vsAutoFit != "none" && vsAutoFit != "all") {
					var vaHead1 = grid.getColumnLayout().header;
					var vsTempAutoFit=  vsAutoFit.replaceAll(" ","");
					var strList = vsTempAutoFit.split(",");
					strList.forEach(function(each){
						var vnIdx = Number(each);
						vaHead1.forEach(function(eachs){
							if(vnIdx == eachs.colIndex) {
								vsOriginAutoFit += eachs.cellIndex+",";
							}
						});
					});
					vsOriginAutoFit = vsOriginAutoFit.substring(0,vsOriginAutoFit.length-1);
				}
				
				for(var i = 0 ; i < vaTobeColumnArr.length; i++){
					var layouts= grid.getColumnLayout();
					var vaAsisColumnArr = layouts.header.map(function(each){
						return each.cellIndex;
					});
					var vnIndex = vaTobeColumnArr[i];
					if(vaAsisColumnArr[i] != vaTobeColumnArr[i]){
						
						grid.moveColumn(vaAsisColumnArr[vaAsisColumnArr.indexOf(vnIndex)], vaAsisColumnArr[i],true);
					}
							
				}
			
				var vsResultAutoFit = "";
				var vaHead = grid.getColumnLayout().header;
				if(vsAutoFit != "all" && vsAutoFit!= "none") {
					vsOriginAutoFit = vsOriginAutoFit.replaceAll(" ", "");
					var vaAuto = vsOriginAutoFit.split(",");
					
					vaAuto.forEach(function(each){
						
						var vnAuto = Number(each);
						vaHead.forEach(function(eachHead){
							if(vnAuto == eachHead.cellIndex) {
								vsResultAutoFit = vsResultAutoFit + eachHead.colIndex+", ";
							}
						});
					});
				}
				
				vsResultAutoFit = vsResultAutoFit.substring(0,vsResultAutoFit.length-2);
				grid.autoFit = vsResultAutoFit=="" ? vsAutoFit : vsResultAutoFit; // autoFit 빈값 수정
				
				grid.redraw();
				
				var event = new cpr.events.CUIEvent("okClick");
				app.dispatchEvent(event);
			}
			
			
			/*
			 * 루트 컨테이너에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBodyClick(/* cpr.events.CMouseEvent */ e){
				e.stopPropagation();
			}
			
			
			/*
			 * 넘버 에디터에서 mousedown 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 누를 때 발생하는 이벤트.
			 */
			function onNbe1Mousedown(/* cpr.events.CMouseEvent */ e){
				
				// 너비 수정 시 드래그 방지
				e.stopPropagation();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("grid", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "headerNm"},
					{"name": "columnWidth"},
					{
						"name": "autoFitBool",
						"dataType": "string"
					}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["bg-white", "border"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "5px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.setColumns(["1fr", "70px", "70px", "1fr"]);
			formLayout_1.setRows(["28px", "1fr", "30px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "컬럼 설정";
			output_1.style.setClasses(["data-title"]);
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 4,
				"rowSpan": 1
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"autoFit": "2, 3",
				"showDeletedRow": false,
				"columns": [
					{"width": "25px"},
					{"width": "69px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "30px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "autoFitBool";
								cell.text = "자동크기";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "headerNm";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "컬럼명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "columnWidth";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "너비(px)";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "30px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "autoFitBool";
								cell.style.setClasses(["text-center"]);
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "headerNm";
								cell.style.css({
									"cursor" : "pointer",
									"text-align" : "left"
								});
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "columnWidth";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
									numberEditor_1.min = 0.0;
									numberEditor_1.spinButton = false;
									if(typeof onNbe1Mousedown == "function") {
										numberEditor_1.addEventListener("mousedown", onNbe1Mousedown);
									}
									numberEditor_1.bind("value").toDataColumn("columnWidth");
									return numberEditor_1;
								})();
							}
						}
					]
				}
			});
			grid_1.style.setClasses(["draggrid"]);
			container.addChild(grid_1, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 4,
				"rowSpan": 1
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "확인";
			button_1.style.setClasses(["btn-primary"]);
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"colIndex": 1,
				"rowIndex": 2
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "취소";
			button_2.style.setClasses(["btn-dark"]);
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				"colIndex": 2,
				"rowIndex": 2
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "<style>\r\n.draggrid\r\n.row-bottom {\r\n\tborder-bottom : solid 2px red;\r\n}\r\n<\/style>";
			container.addChild(hTMLSnippet_1, {
				"colIndex": 3,
				"rowIndex": 2,
				"colSpan": 1,
				"rowSpan": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyClick == "function"){
				app.getContainer().addEventListener("click", onBodyClick);
			}
		}
	});
	internalApp.title = "gridFilter";
	
	// Type declaration for gridFilter
	cpr.utils.Util.ensurePackage("udc.com").gridFilter = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.gridFilter", internalApp, id);
	};
	
	udc.com.gridFilter.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.gridFilter.prototype, "type", {
		get : function(){
			return "udc.com.gridFilter";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.gridFilter.prototype, "grid", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grid");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grid", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.gridFilter
/// start - udc.com.gridTextArea
/*
 * UDC Qualified Name: udc.com.gridTextArea
 * App URI: udc/com/gridTextArea
 * Source Location: udc/com/gridTextArea.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/gridTextArea", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gridTextArea.js
			 * Created at 2021. 11. 25 오후 4:17:17.
			 *
			 * @author hp
			 ************************************************/
			
			var txa
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				var displayValue = app.getAppProperty("columnName").toString().replace(/\r/g,'').replace(/\n/g,'')
				displayValue = ValueUtil.getLength(displayValue, "char") > 15 ?displayValue.slice(0, 16) + "..." : displayValue
				
				return displayValue
			};
			
			/*
			 * 루트 컨테이너에서 dblclick 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 더블 클릭할 때 발생하는 이벤트.
			 */
			function onBodyDblclick(/* cpr.events.CMouseEvent */ e){
			
				txa.value = app.lookup("opt1").value
				
				/** @type {cpr.controls.Grid} **/
				var grid = app.getBindContext()["grid"]
				var column = app.getAppPropertyBindInfo("columnName").columnName
				if(!grid || !column) return false;
				
				var udcObject;
				for(var i = 0; i < grid.detail.cellCount; i++){
					var detailCell = grid.detail.getColumn(i);
					if(!detailCell.control) continue;
					if(detailCell.control.type === "udc.com.gridTextArea" && detailCell.columnName === column){
						udcObject = detailCell.control;
						break;
					}
				}
				
				var ctrlRect = udcObject.getActualRect();
				txa.addEventListenerOnce("blur", function(){
					
					txa.style.animateTo({
						"transform":"scaleY(0)"
					}, 0.2, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
					txa.visible = false;
					app.lookup("opt1").value = txa.value
				})
				
				
				txa.style.animateTo({
					"transform":"scaleY(1)"
				}, 0.2, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
				txa.visible = true;
				
				app.getRootAppInstance().floatControl(txa, {
					top : (ctrlRect.top - 30)  + "px",
					left : ctrlRect.left + "px",
					width : ctrlRect.width + "px",
					height : (ctrlRect.height + 60) + "px"
				});
				
				txa.focus();
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				txa = app.lookup("txa1");
			
				txa.style.animateTo({
					"transform":"scaleY(0)"
				}, 0.2, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("columnName", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var textArea_1 = new cpr.controls.TextArea("txa1");
			textArea_1.visible = false;
			textArea_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "black",
				"border-right-width" : "1px",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-left-color" : "black",
				"border-top-color" : "black",
				"border-bottom-style" : "solid",
				"border-right-color" : "black",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			container.addChild(textArea_1, {
				"right": "0px",
				"width": "20px",
				"height": "20px",
				"top": "calc(50% - 10px)"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("opt1");
			inputBox_1.readOnly = true;
			inputBox_1.bind("value").toAppProperty("columnName");
			container.addChild(inputBox_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyDblclick == "function"){
				app.getContainer().addEventListener("dblclick", onBodyDblclick);
			}
		}
	});
	internalApp.title = "그리드 텍스트 에어리어";
	
	// Type declaration for gridTextArea
	cpr.utils.Util.ensurePackage("udc.com").gridTextArea = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.gridTextArea", internalApp, id);
	};
	
	udc.com.gridTextArea.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.gridTextArea.prototype, "type", {
		get : function(){
			return "udc.com.gridTextArea";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.gridTextArea.prototype, "columnName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("columnName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("columnName", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.gridTextArea
/// start - udc.com.loadmask
/*
 * UDC Qualified Name: udc.com.loadmask
 * App URI: udc/com/loadmask
 * Source Location: udc/com/loadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/loadmask", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			exports.show = function(){
				app.lookup("optRowCount").visible = true;
			};
			
			exports.showProgress = function(){
				app.lookup("progressbar").visible = true;
			};
			
			exports.hide = function(){
				app.lookup("optRowCount").visible = false;
			};
			
			exports.hideProgress = function(){
				app.lookup("progressbar").visible = false;
			};
			
			exports.count = function(pnCount){
				app.lookup("optRowCount").value = "건수: "+pnCount;
			};
			
			exports.isVisibleProgress = function(){
				return app.lookup("progressbar").visible;
			};
			
			exports.progress = function(pnTotal, pnLoaded){
				var progress = app.lookup("progressbar");
			//	console.log(pnTotal +  "  :  " + pnLoaded);
			//	console.log(Math.floor((parseInt(pnLoaded) / parseInt(pnTotal)) * 100));
				progress.max = 100;
				progress.value = Math.floor((parseInt(pnLoaded) / parseInt(pnTotal)) * 100);
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output("optRowCount");
				output_1.visible = false;
				output_1.value = "건수: 0";
				output_1.style.css({
					"background-color" : "#ffffff",
					"padding-top" : "0px",
					"color" : "#3235A4",
					"padding-left" : "0px",
					"padding-bottom" : "0px",
					"text-align" : "right",
					"padding-right" : "5px"
				});
				container.addChild(output_1, {
					"top": "134px",
					"left": "75px",
					"width": "250px",
					"height": "20px"
				});
				var output_2 = new cpr.controls.Output("opt1");
				output_2.value = "Loading...";
				output_2.style.css({
					"padding-top" : "7px",
					"background-repeat" : "no-repeat",
					"font-weight" : "bold",
					"padding-left" : "40px",
					"padding-bottom" : "0px",
					"background-image" : "url('theme/common/images/etc/loader.gif')",
					"padding-right" : "0px"
				});
				container.addChild(output_2, {
					"width": "138px",
					"height": "32px",
					"left": "calc(50% - 69px)",
					"top": "calc(50% - 16px)"
				});
				var progress_1 = new cpr.controls.Progress("progressbar");
				progress_1.visible = false;
				progress_1.value = "0";
				progress_1.max = 100.0;
				container.addChild(progress_1, {
					"top": "164px",
					"right": "31px",
					"left": "9px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	internalApp.title = "loadmask";
	
	// Type declaration for loadmask
	cpr.utils.Util.ensurePackage("udc.com").loadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.loadmask", internalApp, id);
	};
	
	udc.com.loadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.loadmask.prototype, "type", {
		get : function(){
			return "udc.com.loadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.loadmask
/// start - udc.com.loadmaskprogress
/*
 * UDC Qualified Name: udc.com.loadmaskprogress
 * App URI: udc/com/loadmaskprogress
 * Source Location: udc/com/loadmaskprogress.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/loadmaskprogress", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var intervalID = null;
			
			exports.start = function() {
				var progressbar = app.lookup("progressbar");
				
				if(intervalID) {
					window.clearInterval(intervalID);
					intervalID = null;
				}
				
				intervalID = window.setInterval(function() {
					var pValue = progressbar.numberValue;
					pValue += 4;
					if(pValue > progressbar.max) {
						progressbar.numberValue = 0;
					} else {
						progressbar.numberValue = pValue;
					}
				}, 100);
			}
			
			exports.end = function() {
				if(intervalID) {
					window.clearInterval(intervalID);
					var progressbar = app.lookup("progressbar");
					progressbar.numberValue = 0;
					intervalID = null;
				}
			}
			// End - User Script
			
			// Header
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var progress_1 = new cpr.controls.Progress("progressbar");
				progress_1.value = "0";
				progress_1.max = 100.0;
				container.addChild(progress_1, {
					"top": "50px",
					"right": "20px",
					"left": "20px",
					"height": "20px"
				});
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				output_1.style.css({
					"font-weight" : "bold",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "98px",
					"right": "130px",
					"left": "130px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	internalApp.title = "loadmaskprogress";
	
	// Type declaration for loadmaskprogress
	cpr.utils.Util.ensurePackage("udc.com").loadmaskprogress = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.loadmaskprogress", internalApp, id);
	};
	
	udc.com.loadmaskprogress.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.loadmaskprogress.prototype, "type", {
		get : function(){
			return "udc.com.loadmaskprogress";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.loadmaskprogress
/// start - udc.com.menuSearchButton
/*
 * UDC Qualified Name: udc.com.menuSearchButton
 * App URI: udc/com/menuSearchButton
 * Source Location: udc/com/menuSearchButton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/menuSearchButton", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "ipbValue"){
					app.lookup("ipb1").redraw();
				} else if (e.property == "ipbLabel") {
					app.lookup("ipb2").redraw();
				}
			}
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				//해당 이름의 이벤트 생성 후 이벤트 전달
				var event = new cpr.events.CUIEvent("search");
				app.dispatchEvent(event);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("ipbValue", null);
			app.declareAppProperty("ipbEnabled", true);
			app.declareBindableAppProperty("ipbLabel", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "3fr", "67px"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.readOnly = true;
			inputBox_1.bind("value").toAppProperty("ipbValue");
			inputBox_1.bind("enabled").toAppProperty("ipbEnabled");
			container.addChild(inputBox_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var inputBox_2 = new cpr.controls.InputBox("ipb2");
			inputBox_2.readOnly = true;
			inputBox_2.bind("value").toAppProperty("ipbLabel");
			inputBox_2.bind("enabled").toAppProperty("ipbEnabled");
			container.addChild(inputBox_2, {
				"colIndex": 1,
				"rowIndex": 0,
				"colSpan": 1,
				"rowSpan": 1,
				"horizontalAlign": "fill"
			});
			
			var button_1 = new cpr.controls.Button("btnSearch");
			button_1.value = "찾기";
			button_1.style.setClasses(["btn-search"]);
			if(typeof onBtnSearchClick == "function") {
				button_1.addEventListener("click", onBtnSearchClick);
			}
			container.addChild(button_1, {
				"colIndex": 2,
				"rowIndex": 0,
				"colSpan": 1,
				"rowSpan": 1,
				"width": 140
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "menuSearchButton";
	
	// Type declaration for menuSearchButton
	cpr.utils.Util.ensurePackage("udc.com").menuSearchButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.menuSearchButton", internalApp, id);
	};
	
	udc.com.menuSearchButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.menuSearchButton.prototype, "type", {
		get : function(){
			return "udc.com.menuSearchButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.menuSearchButton.prototype, "ipbValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ipbValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ipbValue", newValue, true);
		}
	});
	Object.defineProperty(udc.com.menuSearchButton.prototype, "ipbEnabled", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ipbEnabled");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ipbEnabled", newValue, true);
		}
	});
	Object.defineProperty(udc.com.menuSearchButton.prototype, "ipbLabel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ipbLabel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ipbLabel", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.menuSearchButton
/// start - udc.com.oneGridMultiControl_UDC
/*
 * UDC Qualified Name: udc.com.oneGridMultiControl_UDC
 * App URI: udc/com/oneGridMultiControl_UDC
 * Source Location: udc/com/oneGridMultiControl_UDC.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/oneGridMultiControl_UDC", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * udc_gridCustomControl.js
			 * Created at 2022. 2. 24. 오후 9:35:34.
			 *
			 * @author LHS_0212
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return app.getAppProperty("cellValue");
			};;
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("cellValue", "셀 값");
			app.declareBindableAppProperty("inputboxVisible", null);
			app.declareBindableAppProperty("buttonVisible", null);
			app.declareBindableAppProperty("outputVisible", null);
			
			app.supportMedia("all and (min-width: 1200px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1199px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.spacing = 0;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.bind("visible").toAppProperty("inputboxVisible");
			inputBox_1.bind("value").toAppProperty("cellValue");
			container.addChild(inputBox_1, {
				"width": "100px",
				"height": "29px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.bind("value").toAppProperty("cellValue");
			button_1.bind("visible").toAppProperty("buttonVisible");
			container.addChild(button_1, {
				"width": "100px",
				"height": "29px"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.bind("value").toAppProperty("cellValue");
			output_1.bind("visible").toAppProperty("outputVisible");
			container.addChild(output_1, {
				"width": "100px",
				"height": "29px"
			});
		}
	});
	internalApp.title = "oneGridMultiControl_UDC";
	
	// Type declaration for oneGridMultiControl_UDC
	cpr.utils.Util.ensurePackage("udc.com").oneGridMultiControl_UDC = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.oneGridMultiControl_UDC", internalApp, id);
	};
	
	udc.com.oneGridMultiControl_UDC.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.oneGridMultiControl_UDC.prototype, "type", {
		get : function(){
			return "udc.com.oneGridMultiControl_UDC";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.oneGridMultiControl_UDC.prototype, "cellValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("cellValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("cellValue", newValue, true);
		}
	});
	Object.defineProperty(udc.com.oneGridMultiControl_UDC.prototype, "inputboxVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("inputboxVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("inputboxVisible", newValue, true);
		}
	});
	Object.defineProperty(udc.com.oneGridMultiControl_UDC.prototype, "buttonVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("buttonVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("buttonVisible", newValue, true);
		}
	});
	Object.defineProperty(udc.com.oneGridMultiControl_UDC.prototype, "outputVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("outputVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("outputVisible", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.oneGridMultiControl_UDC
/// start - udc.com.pageindex
/*
 * UDC Qualified Name: udc.com.pageindex
 * App URI: udc/com/pageindex
 * Source Location: udc/com/pageindex.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/pageindex", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			var util = createCommonUtil();
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				/**
				 * @type cpr.data.DataMap
				 */
				var voPageInfo = app.getAppProperty("pageInfo");
				voPageInfo.addEventListener("load", function(e){
					var totCnt = voPageInfo.getValue("recordsTotal");
					var rowSize = voPageInfo.getValue("recordCountPerPage");
					var pageIdx = voPageInfo.getValue("pageNo");
					var pageSize = voPageInfo.getValue("pageIndexerCount");
					
					app.lookup("optTot").value = totCnt;
					app.lookup("optRecordCountPerPage").value = rowSize;
					var pageCnt = 0;
					if(totCnt > 0 && rowSize > 0) {
						pageCnt = Math.ceil(totCnt / rowSize);
					}
					app.lookup("optPageCnt").value = pageCnt;
				
					var pageIndex = app.lookup("pageIndex");
				
					var vnFirstPageNoOn = parseInt((pageIdx - 1) / pageSize) * pageSize + 1;
				
					pageIndex.init(totCnt, vnFirstPageNoOn, pageIdx);
					
					pageIndex.currentPageIndex =Number(pageIdx);
					pageIndex.totalRowCount = Number(totCnt);
					pageIndex.pageRowCount = Number(rowSize);
					pageIndex.viewPageCount = Number(pageSize);
					
					var vbGrpPaging = app.lookup("grpPaging");
					
					if(totCnt == 0) {
						vbGrpPaging.visible = false;
					} else {
						vbGrpPaging.visible = true;
					}
					vbGrpPaging.redraw();
				});	
				
				/**
				 * @type cpr.controls.Grid
				 */
				var vcGrid = app.getAppProperty("ctrl");
				var vcDataSet =  vcGrid.dataSet;
				
					//그리드에 바인딩된 데이터셋(Dataset)이 로드될 때 처리
					vcDataSet.addEventListener("load", function(/* cpr.events.CDataEvent */e){
						/** @type cpr.data.DataSet */
						var dataset = e.control;
						if(dataset.getRowCount() <= 0) {
							util.Control.setVisible(app, false, "grpPaging");			
						}else{
							util.Control.setVisible(app, true, "grpPaging");
						}
					});
					
			//	if(util.isMobile(app)){
			//		app.lookup("pageIndex").style.css("font-size", "17px");
			//		app.lookup("grpPaging").addEventListener("touchstart", onGrpPagingTouchstart);
			//	}
				
				var vbShowExport = app.getAppProperty("showExportExcel");
				
				if(!vbShowExport){
					var vcExcelExport = app.lookup("btnExcelExport");
					vcExcelExport.visible = false;
				}
			}
			
			/**
			 * PageIndexing을 위한 기초 데이터 설정
			 * @param totCnt    : 총건수
			 * @param pageSize	: 보여지는 페이지 수
			 * @param rowSize	: 한 페이지에 보여질 행 수
			 * @param pageIdx   : 현재페이지
			 */
			//exports.setPaging = function(totCnt, pageSize, rowSize, pageIdx, psPagingDataMapId) {
			////	app.lookup("ipbCurrentIdx").value = pageIdx;
			//	app.lookup("optTot").value = totCnt;
			//	app.lookup("optRecordCountPerPage").value = rowSize;
			//	var pageCnt = 0;
			//	if(totCnt > 0 && rowSize > 0) {
			//		pageCnt = Math.ceil(totCnt / rowSize);
			//	}
			//	app.lookup("optPageCnt").value = pageCnt;
			//
			//	var pageIndex = app.lookup("pageIndex");
			//
			//	var vnFirstPageNoOn = parseInt((pageIdx - 1) / pageSize) * pageSize + 1;
			//	
			//	pageIndex.init(totCnt, vnFirstPageNoOn, pageIdx);
			//	
			//	pageIndex.currentPageIndex = Number(pageIdx);
			//	pageIndex.totalRowCount = Number(totCnt);
			//	pageIndex.pageRowCount = Number(rowSize);
			//	pageIndex.viewPageCount = Number(pageSize);
			//	
			////	app.lookup("ipbRecordCountPerPage").value = rowSize;
			////	app.lookup("ipbCurrentIdx").value = pageIdx;
			//
			//	var vcExcelExport = app.lookup("btnExcelExport");
			//
			//	var vbGrpPaging = app.lookup("grpPaging");
			//
			//	if(totCnt == 0) {
			////		pageIndex.visible = false;
			//		vbGrpPaging.visible = false;
			////		vcExcelExport.visible = false;
			//	} else {
			////		pageIndex.visible = true;
			//		vbGrpPaging.visible = true;
			////		vcExcelExport.visible = true;
			//	}
			//	app.setAppProperty("pagingDataMapId", psPagingDataMapId);
			//	app.getContainer().redraw();
			//}
			
			
			exports.setMiniSize = function(){
				app.lookup("grpPaging").getLayout().setColumnVisible(1, false);
				app.lookup("grpPaging").getLayout().setColumnVisible(3, false);
			}
			
			exports.setTabSize = function(){
				app.lookup("grpPaging").getLayout().setColumnVisible(3, false);
			}
			
			
			/**
			 * 모바일 스크롤 페이징
			 * @param {cpr.core.AppInstance} app 앱 인스턴스
			 * @param {String} psRootCtrlID 최상위 그룹 ID
			 * @param {String} psContentCtrlID 표시되는 영역 ID
			 */
			exports.setMPaging = function(app, psRootCtrlID){
				/**
				 * @type cpr.controls.Container
				 */
				var vcRootCtrl = app.lookup(psRootCtrlID);
				vcRootCtrl.addEventListener("scroll", function(e){
					var vnScrollTop = vcRootCtrl.getViewPortRect().top;
					doFloatArea(app, vnScrollTop);
				});
			}
			
			
			function doFloatArea(/*cpr.core.AppInstance*/poApp ,pnY){
				/**
				 * @type cpr.controls.Grid
				 */
				var vcCtrl = app.getAppProperty("ctrl");
				var vnStart = vcCtrl.getOffsetRect().top;
			
				if(vnStart < pnY){
					var floattarget = poApp.lookup("grpSearchArea");
					floattarget.style.css("background-color", "#ffffff");
					floattarget.style.css({
						top: "0px"
					});
					poApp.floatControl(floattarget);
			//		poApp.floatControl(floattarget, {
			//			top: "0px"
			//		});
				}
			}
			
			
			
			
			function doCheckLastPage(){
				var pageIndex = app.lookup("pageIndex");
				if(app.getAppProperty("ctrl").getRowCount() == pageIndex.totalRowCount){
					return true;
				}
				return false;
			}
			
			
			/*
			 * 페이지 인덱서에서 before-selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change를 발생합니다.
			 */
			function onPageIndexBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/**
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
			
				var selectionEvent = new cpr.events.CSelectionEvent("before-pagechange", {
					oldSelection: e.oldSelection,
					newSelection: e.newSelection
				});
			
				app.dispatchEvent(selectionEvent);
			
				// 기본처리가 중단되었을 때 변경을 취소함.
				if(selectionEvent.defaultPrevented == true) {
					e.preventDefault();
				}
			}
			
			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageIndexSelectionChange(/* cpr.events.CSelectionEvent */ e, mPageIndex){
				/**
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
			
				app.lookup("ipbCurrentIdx").putValue("");
				var selectionEvent = new cpr.events.CSelectionEvent("pagechange", {
					oldSelection: e.oldSelection?e.oldSelection:(mPageIndex-1),
					newSelection: e.newSelection?e.newSelection:mPageIndex
				});
				
				
				/**
				 * @type cpr.data.DataMap
				 */
				var voPageInfo = app.getAppProperty("pageInfo");
				voPageInfo.setValue("pageNo", e.newSelection);
				
				app.dispatchEvent(selectionEvent);
			
			//	app.lookup("ipbCurrentIdx").value = e.newSelection;
			}
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var vcCtrl = app.getAppProperty("ctrl");
			
				if(vcCtrl.getRowCount() < 1){
					util.Msg.notify(app, "출력할 데이터가 없습니다.");
					return false;
				}
				var exportTitle = !ValueUtil.isNull(app.getAppProperty("exportTitle")) ? app.getAppProperty("exportTitle") : vcCtrl.fieldLabel;
				var _app = vcCtrl.getAppInstance();
				util.Grid.exportData(_app, vcCtrl.id, exportTitle, null, "xlsx");
			}
			
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbCurrentIdxValueChange(/* cpr.events.CValueChangeEvent */ e){
				/**
				 * @type cpr.controls.InputBox
				 */
				var ipbCurrentIdx = e.control;
				if(ValueUtil.isNull(ipbCurrentIdx.value) || ipbCurrentIdx.value == "0"){
					return false;
				}
				var tot = app.lookup("optPageCnt").value;
				if(tot < ipbCurrentIdx.value){
					return;
				}
				
				
				var vsOldSelection = app.lookup("pageIndex").currentPageIndex;
				
				
				/**
				 * @type cpr.data.DataMap
				 */
				var voPageInfo = app.getAppProperty("pageInfo");
				voPageInfo.setValue("pageNo", ipbCurrentIdx.value);
				
				var selectionEvent = new cpr.events.CSelectionEvent("pagechange", {
					oldSelection: vsOldSelection,
					newSelection: ipbCurrentIdx.value
				});
				
				app.dispatchEvent(selectionEvent);
			}
			
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbRecordCountPerPageValueChange(/* cpr.events.CValueChangeEvent */ e){
				/**
				 * @type cpr.controls.InputBox
				 */
				var ipbRecordCountPerPage = e.control;
			
				var vsOldSelection = app.lookup("pageIndex").currentPageIndex;
			
				app.lookup("pageIndex").pageRowCount = ipbRecordCountPerPage.value;
				
				/**
				 * @type cpr.data.DataMap
				 */
				var voPageInfo = app.getAppProperty("pageInfo");
				voPageInfo.setValue("pageNo", 1);
				voPageInfo.setValue("recordCountPerPage", ipbRecordCountPerPage.value);
			
				var selectionEvent = new cpr.events.CSelectionEvent("pagechange", {
					oldSelection: vsOldSelection,
					newSelection: 1
				});
			
			//	var voHostApp = app.getHostAppInstance();
			//	var vcHostDataMap = voHostApp.lookup(app.getAppProperty("pagingDataMapId"));
			//	vcHostDataMap.setValue("recordCountPerPage",ipbRecordCountPerPage.value);
				
				
				app.dispatchEvent(selectionEvent);
			
			}
			
			
			
			
			
			
			
			
			
			
			var mnOldX = null;
			var mnOldY = null;
			
			/*
			 * 그룹에서 touchstart 이벤트 발생 시 호출.
			 * 하나 이상의 터치 포인트가 터치 표면상에 배치될 때 발생하는 이벤트.
			 */
			function onGrpPagingTouchstart(/* cpr.events.CTouchEvent */ e){
				/**
				 * @type cpr.controls.Container
				 */
				var grpPaging = e.control;
				mnOldX = e.changedTouches.item(0).clientX;
				mnOldY = e.changedTouches.item(0).clientY;
				grpPaging.addEventListenerOnce("touchmove", onGrpPagingTouchmove);
			}
			
			var msDir = null;
			/*
			 * 그룹에서 touchstart 이벤트 발생 시 호출.
			 * 하나 이상의 터치 포인트가 터치 표면상에 배치될 때 발생하는 이벤트.
			 */
			function onGrpPagingTouchmove(/* cpr.events.CTouchEvent */ e){
				/**
				 * @type cpr.controls.Container
				 */
				var grpPaging = e.control;
				var vnMoveX = e.changedTouches.item(0).clientX;
				var vnMoveY = e.changedTouches.item(0).clientY;
				if(Math.abs(mnOldX-vnMoveX) < 12 && Math.abs(mnOldY-vnMoveY)<50){
					return;
				}
				if(mnOldX > vnMoveX){ // right to left
					grpPaging.style.css({
						"transition" : "transform 0.3s ease-out 0s",
						"transform" : "translate3d(-50px, 0px, 0px)"
					});
					msDir = "l";
				}else{//left to right
					grpPaging.style.css({
						"transition" : "transform 0.3s ease-out 0s",
						"transform" : "translate3d(50px, 0px, 0px)"
					});
					msDir = "r";
				}
				if(msDir == "l"){
					if(doCheckLastIndex()){
						grpPaging.style.css({
							"transition" : "transform 0.3s ease-out 0s",
							"transform" : "translate3d(0px, 0px, 0px)"
						});
						return;
					}
				}
				grpPaging.addEventListenerOnce("touchend", onGrpPagingTouchend);
			}
			
			
			/*
			 * 그룹에서 touchstart 이벤트 발생 시 호출.
			 * 하나 이상의 터치 포인트가 터치 표면상에 배치될 때 발생하는 이벤트.
			 */
			function onGrpPagingTouchend(/* cpr.events.CTouchEvent */ e){
				/**
				 * @type cpr.controls.Container
				 */
				var grpPaging = e.control;
				grpPaging.style.css({
					"transition" : "transform 0.3s ease-out 0s",
					"transform" : "translate3d(0px, 0px, 0px)"
				});
				var vnCurrent = app.lookup("pageIndex").currentPageIndex;
				vnCurrent = msDir=="r"?(vnCurrent-1==0?1:vnCurrent-1):vnCurrent+1;
				onPageIndexSelectionChange(e, vnCurrent);
				mnOldX, mnOldY = null;
				msDir = null;
			}
			
			
			function doCheckLastIndex(){
				var vnLastIndex = Math.ceil(app.lookup("pageIndex").totalRowCount/app.lookup("pageIndex").pageRowCount);
				if(vnLastIndex == app.lookup("pageIndex").currentPageIndex){
					return true;
				}
				return false;
			}
			
			
			
			
			
			
			/*
			 * 루트 컨테이너에서 screen-change 이벤트 발생 시 호출.
			 * 스크린 크기 변경 시 호출되는 이벤트.
			 */
			function onBodyScreenChange(/* cpr.events.CScreenChangeEvent */ e){
				var vbMbScrn = e.screen.name != "default";
				
					/**
				 * @type cpr.controls.Grid
				 */
				var vcGrid = app.getAppProperty("ctrl");
				
				if (vbMbScrn || (vcGrid && vcGrid.getRowCount() == 0)){
				   app.lookup("grpPaging").getLayout().setColumnVisible(1, false);
				   app.lookup("grpPaging").getLayout().setColumnVisible(3, false);
				   app.lookup("pageIndex").viewPageCount = 3;
				} else {
					 app.lookup("grpPaging").getLayout().setColumnVisible(1, true);
				   app.lookup("grpPaging").getLayout().setColumnVisible(3, true);
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("ctrl", null);
			app.declareBindableAppProperty("exportTitle", null);
			app.declareBindableAppProperty("showExportExcel", true);
			app.declareAppProperty("pageInfo", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpPaging");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.setColumns(["5px", "170px", "1fr", "150px"]);
			formLayout_1.setColumnAutoSizing(1, true);
			formLayout_1.setColumnAutoSizing(3, true);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grpTotal");
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.horizontalSpacing = "0px";
				formLayout_2.verticalSpacing = "0px";
				formLayout_2.setColumns(["30px", "50px", "5px", "35px", "50px"]);
				formLayout_2.setColumnAutoSizing(0, true);
				formLayout_2.setColumnAutoSizing(2, true);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "Total";
					output_1.style.css({
						"text-align" : "right"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_2 = new cpr.controls.Output("optTot");
					output_2.dataType = "number";
					output_2.format = "999,999,999";
					output_2.style.css({
						"font-weight" : "bold",
						"text-align" : "center"
					});
					container.addChild(output_2, {
						"colIndex": 1,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "/";
					output_3.style.css({
						"text-align" : "center"
					});
					container.addChild(output_3, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var output_4 = new cpr.controls.Output("optRecordCountPerPage");
					output_4.value = "";
					output_4.dataType = "number";
					output_4.format = "999,999,999";
					output_4.style.css({
						"font-weight" : "bold",
						"text-align" : "center"
					});
					container.addChild(output_4, {
						"colIndex": 3,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipbRecordCountPerPage");
					inputBox_1.tooltip = "보여질 로우 수";
					inputBox_1.inputFilter = "^[0-9]*$";
					inputBox_1.style.css({
						"padding-top" : "1px",
						"padding-left" : "1px",
						"padding-bottom" : "1px",
						"text-align" : "center",
						"padding-right" : "1px"
					});
					if(typeof onIpbRecordCountPerPageValueChange == "function") {
						inputBox_1.addEventListener("value-change", onIpbRecordCountPerPageValueChange);
					}
					container.addChild(inputBox_1, {
						"colIndex": 4,
						"rowIndex": 0,
						"verticalAlign": "center",
						"height": 24
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 1,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
				var pageIndexer_1 = new cpr.controls.PageIndexer("pageIndex");
				pageIndexer_1.viewPageCount = 3;
				pageIndexer_1.pageIndexWidth = "1fr";
				pageIndexer_1.style.css({
					"text-align" : "center"
				});
				pageIndexer_1.init(1, 1, 1);
				if(typeof onPageIndexSelectionChange == "function") {
					pageIndexer_1.addEventListener("selection-change", onPageIndexSelectionChange);
				}
				if(typeof onPageIndexBeforeSelectionChange == "function") {
					pageIndexer_1.addEventListener("before-selection-change", onPageIndexBeforeSelectionChange);
				}
				container.addChild(pageIndexer_1, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "fill",
					"height": 32
				});
				var group_3 = new cpr.controls.Container("grpPageCnt");
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.horizontalSpacing = "0px";
				formLayout_3.verticalSpacing = "0px";
				formLayout_3.setColumns(["36px", "5px", "36px", "36px", "16px", "20px"]);
				formLayout_3.setRows(["1fr"]);
				group_3.setLayout(formLayout_3);
				(function(container){
					var inputBox_2 = new cpr.controls.InputBox("ipbCurrentIdx");
					inputBox_2.tooltip = "이동 할 페이지";
					inputBox_2.inputFilter = "^[0-9]*$";
					inputBox_2.style.css({
						"text-align" : "center"
					});
					if(typeof onIpbCurrentIdxValueChange == "function") {
						inputBox_2.addEventListener("value-change", onIpbCurrentIdxValueChange);
					}
					container.addChild(inputBox_2, {
						"colIndex": 0,
						"rowIndex": 0,
						"verticalAlign": "center",
						"height": 24
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "/";
					output_5.style.css({
						"text-align" : "center"
					});
					container.addChild(output_5, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var output_6 = new cpr.controls.Output("optPageCnt");
					output_6.value = "0";
					output_6.dataType = "number";
					output_6.format = "999,999,999";
					output_6.style.css({
						"font-weight" : "bold",
						"text-align" : "center"
					});
					container.addChild(output_6, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var output_7 = new cpr.controls.Output();
					output_7.value = "Page";
					output_7.style.css({
						"text-align" : "left"
					});
					container.addChild(output_7, {
						"colIndex": 3,
						"rowIndex": 0
					});
					var button_1 = new cpr.controls.Button("btnExcelExport");
					button_1.value = "";
					button_1.style.css({
						"background-color" : "transparent",
						"border-right-style" : "none",
						"background-repeat" : "no-repeat",
						"background-size" : "auto",
						"border-left-style" : "none",
						"border-bottom-style" : "none",
						"background-position" : "center center",
						"background-image" : "url('theme/common/images/icon/icon_file_xls.gif')",
						"border-top-style" : "none"
					});
					button_1.bind("visible").toAppProperty("showExportExcel");
					if(typeof onButtonClick == "function") {
						button_1.addEventListener("click", onButtonClick);
					}
					container.addChild(button_1, {
						"colIndex": 5,
						"rowIndex": 0
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 3,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
		}
	});
	internalApp.title = "pageindex";
	
	// Type declaration for pageindex
	cpr.utils.Util.ensurePackage("udc.com").pageindex = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.pageindex", internalApp, id);
	};
	
	udc.com.pageindex.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.pageindex.prototype, "type", {
		get : function(){
			return "udc.com.pageindex";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.pageindex.prototype, "ctrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ctrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ctrl", newValue, true);
		}
	});
	Object.defineProperty(udc.com.pageindex.prototype, "exportTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("exportTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("exportTitle", newValue, true);
		}
	});
	Object.defineProperty(udc.com.pageindex.prototype, "showExportExcel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("showExportExcel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("showExportExcel", newValue, true);
		}
	});
	Object.defineProperty(udc.com.pageindex.prototype, "pageInfo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("pageInfo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("pageInfo", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.pageindex
/// start - udc.com.udcComDatepicker
/*
 * UDC Qualified Name: udc.com.udcComDatepicker
 * App URI: udc/com/udcComDatepicker
 * Source Location: udc/com/udcComDatepicker.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/udcComDatepicker", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Datepicker.js
			 * Created at 2020. 5. 21. 오후 1:42:47.
			 *
			 * @author ryu
			 * 
			 * ------------------------------------------------------------------------------------
			 * 작성자	|버전	|내용
			 * ------------------------------------------------------------------------------------
			 * 류다은	|1.0	|최초 작성
			 * ------------------------------------------------------------------------------------ 
			 ************************************************/
			
			var util = createCommonUtil();
			var dateValChange = false;
			
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				
				var value = app.getAppProperty("value");
				var delimiter = app.getAppProperty("delimiter");
				
				if (value != null && value != ""){
					var splitedValue = value.split(delimiter);
					return splitedValue;
				}
				
				return null;
			};
			
			
			/**
			 * UDC의 AppInstance를 반환합니다.
			 */
			exports.getUDCApp = function() {
				return app;
			};
			
			
			/**
			 * 데이트 피커의 값을 가져옵니다.
			 * @return {String}
			 */
			function getValue() {
				return app.getAppProperty("value");
			}
			exports.getValue = getValue;
			
			/**
			 * 데이트 피커의 값을 배열로 가져옵니다.
			 * @return {Array}
			 */
			function getValues() {
				var vaVal = [];
				
				var vsVal = app.getAppProperty("value");
				if (vsVal != null && vsVal != ""){
					vaVal = vsVal.split(app.getAppProperty("delimiter"));
				}
				
				return vaVal;
			}
			exports.getValues = getValues;
			
			/**
			 * 데이트 피커의 시작 날짜 값을 가져옵니다.
			 * @return {String}
			 */
			function getBeginValue() {
				var vaVal = getValues();
				
				if (vaVal.length > 0){
					return vaVal[0];
				}
				
				return null;
			}
			exports.getBeginValue = getBeginValue;
			
			
			/**
			 * 데이트 피커의 종료 날짜 값을 가져옵니다.
			 * @return {String}
			 */
			function getEndValue() {
				var vaVal = getValues();
				
				if (vaVal.length > 0){
					return vaVal[1];
				}
				
				return null;
			}
			exports.getEndValue = getEndValue;
			
			
			/**
			 * 데이트 피커에 시작과 종료 날짜 값을 설정합니다.
			 * @param {String | String[]} psValue
			 */
			function setValue(psValue) {
				var vsValue = psValue;
				
				/* 값에 대한 타입 체크 후 String으로 변환 */
				if (_.isArray(vsValue)){
					vsValue = vsValue.join(app.getAppProperty("delimiter"));
				}
				
				if (!isDateFormat(vsValue, true)){
					return;
				}
				
				if (!isValid(vsValue)){
					return;
				}
				
				app.setAppProperty("value", vsValue.trim());
			}
			exports.setValue = setValue;
			
			
			/**
			 * 데이트 피커에 시작 날짜 값을 설정합니다.
			 * @param {String} psValue
			 */
			function setBeginValue(psValue) {
				var vsOrgVal = app.getAppProperty("value");
				
				if (vsOrgVal == null || vsOrgVal == ""){
					return;
				}
				
				if (!isDateFormat(psValue)){
					return;
				}
				
				var vsNewVal = psValue 
					+ vsOrgVal.substring(vsOrgVal.indexOf(app.getAppProperty("delimiter")), vsOrgVal.length);
			
				var vsVal = setValue(vsNewVal);
			}
			exports.setBeginValue = setBeginValue;
			
			
			/**
			 * 데이트 피커에 종료 날짜 값을 설정합니다.
			 * @param {String} psValue
			 */
			function setEndValue(psValue) {
				var vsOrgVal = app.getAppProperty("value");
				
				if (vsOrgVal == null || vsOrgVal == ""){
					return;
				}
				
				if (!isDateFormat(psValue)){
					return;
				}
				
				var vsNewVal = 
					vsOrgVal.substring(0, vsOrgVal.indexOf(app.getAppProperty("delimiter")) + 1) + psValue;
			
				var vsVal = setValue(vsNewVal);
			}
			exports.setEndValue = setEndValue;
			
			/************************************************
			 * 사용자 정의 함수
			 ************************************************/
			
			/**
			 * 다이얼로그에서 선택된 값을 설정합니다.
			 * @param {String} psValue
			 */
			function setChoseValue(psValue) {
				var vcDtiBgn = app.lookup("dtiBgn");
				var vcDtiEnd = app.lookup("dtiEnd");
				
				if (psValue == null || psValue == ""){
					vcDtiBgn.value = null;
					vcDtiEnd.value = null;
					return;
				}
				
				var vsSplitedVal = psValue.split(app.getAppProperty("delimiter"));
				
				if (vsSplitedVal.length == 0){
					return;
				}
				
				vcDtiBgn.value = vsSplitedVal[0];
				vcDtiEnd.value = vsSplitedVal[1];
			}
			
			
			/**
			 * 선택된 날짜값이 유효한 날짜 형식인지 검사합니다. (true=유효)
			 * @param {String} psValue
			 * @param {Boolean} 시작과 종료 날짜 모두 검사 여부
			 * @return {Boolean}
			 */
			function isDateFormat(psValue, pbBoth) {
				if (psValue == null || psValue == ""){
					return;
				}
				
				var vsFm = app.getAppProperty("format");
			
				/* 시작과 종료 날짜 검사하는 경우 */
				if (pbBoth == true){
					var vaVal = psValue.split(app.getAppProperty("delimiter"));
				
					var vsBgnDt = vaVal[0];
					var vsEndDt = vaVal[1];
					
					var vbBgnValid = moment(vsBgnDt, vsFm).isValid();
					var vbEndValid = moment(vsEndDt, vsFm).isValid();
					
					return vbBgnValid == true && vbEndValid == true;
				}
				
				/* 시작 또는 종료 날짜 검사하는 경우 */
				var vbValid = moment(psValue, vsFm).isValid();
					
				return vbValid;
			}
			
			
			/**
			 * 선택된 날짜값이 유효한지 검사합니다. (true=유효)
			 * @param {String} psValue
			 */
			function isValid(psValue) {
				var vaVal = psValue.split(app.getAppProperty("delimiter"));
				
				/* 두 값 모두 확인해야 하므로 */
				if (vaVal.length <= 1){
					return false;
				}
				
				var vsBgnDt = vaVal[0];
				var vsEndDt = vaVal[1];
				
				var vnDiff = getDiff(vsBgnDt, vsEndDt);
				
				if (vnDiff > 0){
					return false;
				}
				
				return true;
			}
			
			
			/**
			 * 두 날짜 간의 차이를 계산합니다.
			 * @param {String} psBgnDate
			 * @param {String} psEndDate
			 */
			function getDiff(psBgnDate, psEndDate) {
				var vsDtFm = app.getAppProperty("format");
				
				var voBgnDt = moment(psBgnDate, vsDtFm);
				var voEndDt = moment(psEndDate, vsDtFm);
				
				var vnDiff = voBgnDt.diff(voEndDt);
				
				return vnDiff;
			}
			
			
			/************************************************
			 * 기본 이벤트
			 ************************************************/
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				//TODO 데이트 피커 초기 설정에 대한 로직을 작성하십시오.
			}
			
			
			/*
			 * Body에서 before-draw 이벤트 발생 시 호출.
			 * 그룹 컨텐츠가 그려지기 직전에 호출되는 이벤트 입니다. 내부 컨텐츠를 동적으로 구성하기위한 용도로만 사용됩니다.
			 */
			function onBodyBeforeDraw(/* cpr.events.CUIEvent */ e){
				/* 그리드 내에서 편집행으로 들어갔을 때 값 표시 위한 처리 */
				setChoseValue(app.getAppProperty("value"));
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if (e.property == "value"){
					setChoseValue(e.newValue);
				}
				
				/* 변경된 속성 값 반영을 위하여 다시 그리기 요청 */
				app.getContainer().redraw();
				
				//required	
				//시작일자
				if(e.property == "requiredBgn") {
					//true인경우
					if(app.getAppProperty("requiredBgn")){
						var vcCode = app.lookup("dtiBgn");
						//vcCode.fieldLabel = app.getHostProperty("fieldLabel");
						vcCode.userAttr("required", "Y");
					}
				}	
				//종료일자
				if(e.property == "requiredEnd") {
					//true인경우
					if(app.getAppProperty("requiredEnd")){
						var vcCode = app.lookup("dtiEnd");
						//vcCode.fieldLabel = app.getHostProperty("fieldLabel");
						vcCode.userAttr("required", "Y");
					}
				}	
			
			}
			
			
			/*
			 * 버튼(btnOpen)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnOpenClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnOpen = e.control;
				
				var vsHdTitle = app.getAppProperty("title");
				
				var voHostAppIns = app.getHostAppInstance();
				
				if (voHostAppIns){
					/** @type cpr.controls.UIControl */
					var vcTgCtrl = voHostAppIns.lookup(vsHdTitle);
					if (vcTgCtrl != null){
						vsHdTitle = vcTgCtrl.fieldLabel || vcTgCtrl.value;
					}
				}
				
				/* 날짜 선택을 위한 선택 팝업을 엶 */
				var vsConPath = "";
				if(getContextPath() == "/rts-ui" || getContextPath() == "/rt") {
					vsConPath = "app-rt/com/cal/DatepickerContent";
				} else {
					vsConPath = "app-rp/com/cal/DatepickerContent";
				}
				
				util.getRootApp(app).openDialog(vsConPath, {width : 500, height : 350, resizable : false, headerMovable: false}, function(dialog){
					dialog.headerTitle = vsHdTitle;
					
					dialog.style.setClasses("datepicker-modal");
					
					dialog.ready(function(dialogApp){
						dialog.initValue = {
							"value" : app.lookup("dtiBgn").value+app.getAppProperty("delimiter")+app.lookup("dtiEnd").value,
							"format" : app.getAppProperty("format"),
							"mask" : app.getAppProperty("mask"),
							"delimiter" : app.getAppProperty("delimiter")
						}
						
						/* 다이얼로그가 준비된 이후 처리할 이벤트 디스패치 */
						var voOpenEv = new cpr.events.CUIEvent("open");
						app.dispatchEvent(voOpenEv);
					});
					
					/* 다이얼로그에서 ESC 키가 눌렸을 때 다이얼로그를 닫음 */
					dialog.addEventListener("keydown", function(e) {
						if (e.keyCode == cpr.events.KeyCode.ESC){
							e.control.close();
						}
					});
					
					/* 다이얼로그가 닫혔을 때 발생하는 이벤트 정의 */
					dialog.addEventListener("close", function(e) {
						var control = e.control;
						
						var vsOldVal = app.getAppProperty("value");
						var vsRtrnVal = control.returnValue; // 반환 값
						
						var vsCurVal = app.lookup("dtiBgn").value + app.getAppProperty("delimiter") + app.lookup("dtiEnd").value
						
						if(vsCurVal != vsRtrnVal) {
							dateValChange = true;
						}
						
						
						
						/* 이전 값과 새로운 값이 동일하지 않은 경우에만 이벤트 디스패치 */
						if (vsRtrnVal != null && (vsOldVal != vsRtrnVal)){
							/* 공백의 초기화 값을 null로 설정 */
							vsRtrnVal = vsRtrnVal == "" ? null : vsRtrnVal;
							
							var voBfValueChangeEv = new cpr.events.CValueChangeEvent("before-value-change", {
								oldValue : vsOldVal,
								newValue : vsRtrnVal
							});
							app.dispatchEvent(voBfValueChangeEv);
							
							/* before-value-change에서 e.preventDefault 호출 시 값 설정 하지 않음 */
							if (!voBfValueChangeEv.defaultPrevented){
								// setChoseValue(vsRtrnVal);
								app.setAppProperty("value", vsRtrnVal);
								
								var voValueChangeEv = new cpr.events.CValueChangeEvent("value-change", {
									oldValue : vsOldVal,
									newValue : vsRtrnVal
								});
								app.dispatchEvent(voValueChangeEv);
							}
						}
						
						dateValChange = false;
						/* 다이얼로그가 닫힌 이후 처리할 이벤트 디스패치 */
						var voCloseEv = new cpr.events.CUIEvent("close");
						app.dispatchEvent(voCloseEv);
					});
				});
			}
			
			
			/*
			 * 데이트 인풋에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onDatepickerClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var dtiBgn = e.control;
				
				/* 데이트 피커 컨텐츠 다이얼로그 열기 */
				app.lookup("btnOpen").click();
			}
			
			function getContextPath() {
				var hostIndex = location.href.indexOf(location.host) + location.host.length;
				
				return location.href.substring(hostIndex, location.href.indexOf("/", hostIndex+1));
			}
			
			
			/*
			 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
			 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onDtiBgnValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var dtiBgn = e.control;
				
				if(dateValChange) return false;
				
				var vsDpEndVal = app.lookup("dtiEnd").value;
				if (vsDpEndVal != null && vsDpEndVal != ""){
					var vnDiff = getDiff(e.newValue, vsDpEndVal);
					if (vnDiff > 0){
						//시작일은 종료일 이전으로 선택해야 합니다.
						util.Msg.alert( "INF-M027");
						dtiBgn.putValue("");
						e.preventDefault();
						return;
					}
				}
				
				setAppValue();
			}
			
			function setAppValue() {
			//	if ( (!ValueUtil.isNull(app.lookup("dtiBgn").value)) && (!ValueUtil.isNull(app.lookup("dtiEnd").value)) ) {
			//		var vsSetVal = app.lookup("dtiBgn").value + app.getAppProperty("delimiter") + app.lookup("dtiEnd").value  ;
			//		app.setAppProperty("value", vsSetVal);
			//	} 
			
				var vsBgn = ""; 
				if(!ValueUtil.isNull(app.lookup("dtiBgn").value)) 
					vsBgn = app.lookup("dtiBgn").value;
				var vsEnd = ""; 
				if(!ValueUtil.isNull(app.lookup("dtiEnd").value))
				    vsEnd = app.lookup("dtiEnd").value;
				
			
				if ( (ValueUtil.isNull(app.lookup("dtiBgn").value)) && (ValueUtil.isNull(app.lookup("dtiEnd").value)) ) {
					app.setAppProperty("value", "");
				} else {
					var vsSetVal = vsBgn + app.getAppProperty("delimiter") + vsEnd  ;
					app.setAppProperty("value", vsSetVal);
				}
				
			}
			
			
			/*
			 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
			 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onDtiEndValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var dtiEnd = e.control;
				
				if(dateValChange) return false;
				
				var vsDpBgnVal = app.lookup("dtiBgn").value;
				if (vsDpBgnVal != null && vsDpBgnVal != ""){
					var vnDiff = getDiff(e.newValue, vsDpBgnVal);
					if (vnDiff < 0){
						//종료일은 시작일 이후로 선택해야 합니다.
						util.Msg.alert( "INF-M011");
						dtiEnd.putValue("");
						e.preventDefault();
						return;
					}
				}
				
				setAppValue();
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("delimiter", ",");
			app.declareBindableAppProperty("format", "YYYYMMDD");
			app.declareBindableAppProperty("mask", "YYYY-MM-DD");
			app.declareBindableAppProperty("value", null);
			app.declareBindableAppProperty("title", null);
			app.declareAppProperty("requiredBgn", false);
			app.declareAppProperty("requiredEnd", false);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["datepickers"]);
			container.style.css({
				"background-image" : "none",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.verticalSeparatorClass = "datepicker";
			formLayout_1.setColumns(["1fr", "16px", "1fr", "5px", "20px"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var dateInput_1 = new cpr.controls.DateInput("dtiBgn");
			dateInput_1.fieldLabel = "시작일자";
			dateInput_1.readOnly = false;
			dateInput_1.hideButton = true;
			dateInput_1.placeholder = "시작일자";
			dateInput_1.style.setClasses(["datepicker", "left"]);
			dateInput_1.bind("format").toAppProperty("format");
			dateInput_1.bind("mask").toAppProperty("mask");
			if(typeof onDatepickerClick == "function") {
				dateInput_1.addEventListener("dblclick", onDatepickerClick);
			}
			if(typeof onDtiBgnValueChange == "function") {
				dateInput_1.addEventListener("value-change", onDtiBgnValueChange);
			}
			container.addChild(dateInput_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"horizontalAlign": "fill",
				"verticalAlign": "fill",
				"width": 50,
				"height": 20
			});
			
			var dateInput_2 = new cpr.controls.DateInput("dtiEnd");
			dateInput_2.fieldLabel = "종료일자";
			dateInput_2.readOnly = false;
			dateInput_2.hideButton = true;
			dateInput_2.placeholder = "종료일자";
			dateInput_2.style.setClasses(["datepicker", "right"]);
			dateInput_2.bind("format").toAppProperty("format");
			dateInput_2.bind("mask").toAppProperty("mask");
			if(typeof onDatepickerClick == "function") {
				dateInput_2.addEventListener("dblclick", onDatepickerClick);
			}
			if(typeof onDtiEndValueChange == "function") {
				dateInput_2.addEventListener("value-change", onDtiEndValueChange);
			}
			container.addChild(dateInput_2, {
				"colIndex": 2,
				"rowIndex": 0,
				"horizontalAlign": "fill",
				"verticalAlign": "fill",
				"width": 50,
				"height": 20
			});
			
			var button_1 = new cpr.controls.Button("btnOpen");
			button_1.value = "";
			button_1.userAttr({"btnAuth": "S"});
			button_1.style.setClasses(["datepicker-button"]);
			if(typeof onBtnOpenClick == "function") {
				button_1.addEventListener("click", onBtnOpenClick);
			}
			container.addChild(button_1, {
				"colIndex": 4,
				"rowIndex": 0,
				"horizontalAlign": "fill",
				"verticalAlign": "fill",
				"width": 20,
				"height": 20
			});
			
			var output_1 = new cpr.controls.Output("otp1");
			output_1.value = "~";
			output_1.style.setClasses(["datepicker", "center"]);
			output_1.style.css({
				"border-right-style" : "none",
				"border-left-style" : "none",
				"border-bottom-style" : "none",
				"border-top-style" : "none",
				"text-align" : "center"
			});
			container.addChild(output_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var image_1 = new cpr.controls.Image("img1");
			image_1.style.css({
				"background-color" : "#CCCCCC"
			});
			(function(image_1){
			})(image_1);
			container.addChild(image_1, {
				"colIndex": 3,
				"rowIndex": 0,
				"horizontalAlign": "left",
				"verticalAlign": "center",
				"width": 1,
				"height": 12
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyBeforeDraw == "function"){
				app.getContainer().addEventListener("before-draw", onBodyBeforeDraw);
			}
		}
	});
	internalApp.title = "공통_시작일자종료일자선택UdcComDatepicker";
	
	// Type declaration for udcComDatepicker
	cpr.utils.Util.ensurePackage("udc.com").udcComDatepicker = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.udcComDatepicker", internalApp, id);
	};
	
	udc.com.udcComDatepicker.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "type", {
		get : function(){
			return "udc.com.udcComDatepicker";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "delimiter", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("delimiter");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("delimiter", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "format", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("format");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("format", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "mask", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("mask");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("mask", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "requiredBgn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("requiredBgn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("requiredBgn", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcComDatepicker.prototype, "requiredEnd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("requiredEnd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("requiredEnd", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.udcComDatepicker
/// start - udc.com.udcSplit
/*
 * UDC Qualified Name: udc.com.udcSplit
 * App URI: udc/com/udcSplit
 * Source Location: udc/com/udcSplit.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/udcSplit", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * udc_split.js
			 * Created at 2019. 5. 23. 오전 11:36:34.
			 *
			 * @author kim su hyun
			 ************************************************/
			
			var vnRightWitdh = "0px";
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			exports.clickSplitBtn = function() {
				app.lookup("btn").click();
			};
			
			var btn_next = null; // next 버튼 udc
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnClick( /* cpr.events.CMouseEvent */ e) {
				/**
				 * @type cpr.controls.Button
				 */
				var btn = e.control;
				var voHostApp = app.getHostAppInstance();
				//우측 그룹 ID
				var vsRightGrpId = app.getAppProperty("rightGrpId");
				//좌측 그룹 ID
				var vsLeftGrpId = app.getAppProperty("leftGrpId");
			
				//우측 그룹 컨트롤
				var vcRightGrp = voHostApp.lookup(vsRightGrpId);
			
				if(ValueUtil.isNull(vsRightGrpId) || ValueUtil.isNull(vsLeftGrpId)){
					return false;
				}
			
			//	vcRightGrp.style.css("opacity", "1");
			//		vcRightGrp.style.animateFrom({
			//				"transform": "translateX(100%)",
			//				"opacity": "0"
			//			}, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
			
			
				var vcParentCtl = vcRightGrp.getParent();
			
				var voParentLayOut = vcParentCtl.getLayout();
				var vnRIdx = indexFnc(vcParentCtl, vsRightGrpId);
				var vnLIdx = indexFnc(vcParentCtl, vsLeftGrpId);
				
				var voConst = vcParentCtl.getConstraint(vcRightGrp);
				var layOut = [];
					//상세보임
					if (voParentLayOut.isColumnVisible(voConst.colIndex)) {
						
						vnRIdx.forEach(function(each){
							voParentLayOut.setColumnVisible(each, false);
						});
						
			//			vnLIdx.forEach(function(each){
			//				voParentLayOut.setColumnVisible(each, true);
			//			});
						
					} else {
						vnRIdx.forEach(function(each){
							voParentLayOut.setColumnVisible(each, true);
						});
				}
				app.dispatchEvent(new cpr.events.CUIEvent("clickCallFunc"));
			}
			
			/**
			 * 스플릿 영역을 기준으로 좌측, 우측 컨트롤의 인덱스를 알아오는 함수
			 * @param {String} parent 부모 컨테이너
			 * @param {String} appID 좌측 또는 우측 컨트롤의 아이디
			 * */
			function indexFnc(parent, appID) {
				var index = null;
				var range = [];
				parent.getChildren().filter(function(each) {
					if (each.id == appID) {
						var voConst = parent.getConstraint(each);
						
						// colSpan 없는 경우
						if (voConst.colSpan == null) {
							for (var idx = voConst.colIndex; idx <= voConst.colIndex; idx++) {
					        	range.push(idx);
					      }
						} else {
							for (var idx = voConst.colIndex; idx < voConst.colIndex + voConst.colSpan; idx++) {
					        	range.push(idx);
					      }
						}
					      
						//index = voConst.colIndex;
						
						
					}
				});
				return range;
			}
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit( /* cpr.events.CEvent */ e) {
				/** @type cpr.controls.UDCBase */
			//	btn_next = new udc.com.udcFloat("btn_next");
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
			
				var vsProperty = e.property;
			
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			
				var vbScrChg = app.getAppProperty("screenChange");
				return false;
				if(vbScrChg){
					var voHostApp = app.getHostAppInstance();
			
					if(ValueUtil.isNull(voHostApp)) return;
			
					//우측 그룹 ID
					var vsRightGrpId = app.getAppProperty("rightGrpId");
					//좌측 그룹 ID
					var vsLeftGrpId = app.getAppProperty("leftGrpId");
			
					//그리드 ID
					var vsGridId = app.getAppProperty("leftGridId");
			
					//우측 그룹 컨트롤
					var vcRightGrp = voHostApp.lookup(vsRightGrpId);
			
					//우측 그리드 컨트롤
					var vcGrid = voHostApp.lookup(vsGridId);
			
					if(ValueUtil.isNull(vsRightGrpId) || ValueUtil.isNull(vsLeftGrpId)){
						return false;
					}
			
					var vcParentCtl = vcRightGrp.getParent();
			
					var voParentLayOut = vcParentCtl.getLayout();
					var vnRIdx = indexFnc(vcParentCtl, vsRightGrpId);
					var vnLIdx = indexFnc(vcParentCtl, vsLeftGrpId);
			
			
					voHostApp.addEventListener("screen-change", function( /* cpr.events.CScreenChangeEvent */ sc) {
			//
			//			btn_next.style.css({
			//				"bottom": "20px",
			//				"left": "20px",
			//				"width": "80px",
			//				"height": "30px"
			//				});
			//			vcParentCtl.floatControl(btn_next);
			////			vcParentCtl.floatControl(btn_next, {
			////				"bottom": "20px",
			////				"left": "20px",
			////				"width": "80px",
			////				"height": "30px"
			////			});
			//			btn_next.visible = false;
			//
			//			// 웹
			//			if (app.targetMediaName == "default") {
			//				voParentLayOut.setColumnVisible(vnLIdx, true);
			//				voParentLayOut.setColumnVisible(vnRIdx, true);
			//				btn_next.visible = false;
			//			}
			//			// 모바일
			//			else {
			//				// 모바일 사이즈일 경우 master 부분만 보인다.
			//				voParentLayOut.setColumnVisible(vnLIdx, true);
			//				voParentLayOut.setColumnVisible(vnRIdx, false);
			//			}
			
					});
			
						// master 그룹안에 그리드를 선택했을 때 detail 보이고 안보이도록
			//		vcGrid.addEventListener("selection-change", function(e) {
			//			if (app.targetMediaName != "default") {
			//
			//				vcRightGrp.style.css("opacity", "1");
			//				vcRightGrp.style.animateFrom({
			//						"transform": "translateX(100%)",
			//						"opacity": "0"
			//					}, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
			//
			//				if (voParentLayOut.isColumnVisible(vnRIdx)) {
			//					voParentLayOut.setColumnVisible(vnRIdx, false);
			//					voParentLayOut.setColumnVisible(vnLIdx, true);
			//					btn_next.visible = false; // Next 버튼이 보여야 한다.
			//				} else {
			//					voParentLayOut.setColumnVisible(vnRIdx, true);
			//					voParentLayOut.setColumnVisible(vnLIdx, false);
			//					btn_next.visible = true;
			//				}
			//
			//				btn_next.addEventListener("nextClick", function(e) {
			//					voParentLayOut.setColumnVisible(vnRIdx, false);
			//					voParentLayOut.setColumnVisible(vnLIdx, true);
			//					btn_next.visible = false;
			//				});
			//			}
			//		});
			
				}
			
			}
			
			
			/*
			 * 루트 컨테이너에서 screen-change 이벤트 발생 시 호출.
			 * 스크린 크기 변경 시 호출되는 이벤트.
			 */
			function onBodyScreenChange(/* cpr.events.CScreenChangeEvent */ e){
				if( e.screen.name != "default" ){
					app.getContainer().visible = false;
				}else{
					app.getContainer().visible = true;
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("leftGrpId", null);
			app.declareBindableAppProperty("rightGrpId", null);
			app.declareBindableAppProperty("leftGridId", null);
			app.declareBindableAppProperty("screenChange", false);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnSplit");
			button_1.value = "";
			button_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-bottom-style" : "solid",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			if(typeof onBtnClick == "function") {
				button_1.addEventListener("click", onBtnClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var button_2 = new cpr.controls.Button("btn");
			button_2.value = "";
			if(typeof onBtnClick == "function") {
				button_2.addEventListener("click", onBtnClick);
			}
			container.addChild(button_2, {
				"width": "6px",
				"height": "40px",
				"left": "calc(50% - 3px)",
				"top": "calc(50% - 20px)"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
		}
	});
	internalApp.title = "udcSplit";
	
	// Type declaration for udcSplit
	cpr.utils.Util.ensurePackage("udc.com").udcSplit = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.udcSplit", internalApp, id);
	};
	
	udc.com.udcSplit.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.udcSplit.prototype, "type", {
		get : function(){
			return "udc.com.udcSplit";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.udcSplit.prototype, "leftGrpId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("leftGrpId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("leftGrpId", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcSplit.prototype, "rightGrpId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("rightGrpId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("rightGrpId", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcSplit.prototype, "leftGridId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("leftGridId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("leftGridId", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcSplit.prototype, "screenChange", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("screenChange");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("screenChange", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.udcSplit
/// start - udc.etc.udcImageViewer
/*
 * UDC Qualified Name: udc.etc.udcImageViewer
 * App URI: udc/etc/udcImageViewer
 * Source Location: udc/etc/udcImageViewer.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/etc/udcImageViewer", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * imageViewer.js
			 * Created at 2022. 1. 18. 오후 9:45:18.
			 *
			 * @author jysh0
			 ************************************************/
			
			/**
			 * @type {Array} 
			 * 이미지 컨트롤 객체 배열
			 */
			var vaImage = [];
			
			// 현재 보여지는 이미지 컨트롤 id
			var viewingImageId;
			// 현재 보여지는 이미지 컨트롤 index
			var viewingImageIndex;
			
			
			/**
			 * 이미지 뷰어 기능을 실행합니다.
			 */
			function goImageViewer() {
				vaImage = app.getAppProperty("imagesArr");
				viewingImageId = app.getAppProperty("clickImageId");
				
				var imageBox = app.lookup("imageBox");
				var imageViewer = app.lookup("imageViewer");
				
				vaImage.forEach(function(/* cpr.controls.Image */image, index){
					if (image.id == viewingImageId){
						var imgSrc = image.src;
						var imgWidth = image.naturalWidth;
						var imgHeight = image.naturalHeight;
						
						app.getContainer().updateConstraint(imageBox, {
							width : imgWidth + "px",
							height : imgHeight + "px",
							left : "calc(50% - " + imgWidth/2 + "px" + ")",
							top : "calc(50% - " + imgHeight/2 + "px" + ")"
						});
						
						imageViewer.src = imgSrc;
						
						viewingImageIndex = index;
						
						imageViewer.focus();
					}
				});
				
				cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){
					setDragSource(imageBox);
				});
			}
			
			
			/**
			 * 드래그 소스 설정
			 * @param {cpr.controls.Container} grp
			 */
			function setDragSource(grp){
				var control = grp;
			
				var actualRect = control.getActualRect();
			//	console.log(control);
			//	console.log(actualRect);
				
				new cpr.controls.DragSource(control, {
					options:{
						dataType : "text",
						threadhold: 10 // 10px만큼 이동해야 드래그시작으로 인식
						},
					onDragStart : function(context){
						context.cursor = "default";
				  		app.getContainer().floatControl(control, cpr.controls.layouts.XYLayout.createConstraintWithRect(actualRect));			
					},
					onDragMove : function(context){
					  	context.cursor = "default";
					  	var newRect = actualRect.getTranslated(context.dragDelta);
				  		app.getContainer().floatControl(control, cpr.controls.layouts.XYLayout.createConstraintWithRect(newRect));
					},
					onDragEnd : function(context){
					  	context.cursor = "";
					  	actualRect = control.getActualRect();
					}
				});
			}
			
			
			/**
			 * 현재 띄워진 이미지 정보를 통해 다음 또는 이전 이미지로 이동
			 * @param {String} direction
			 */
			function imageSrcChange(direction){
				
				var imageBox = app.lookup("imageBox");
				var imageViewer = app.lookup("imageViewer");
				var toolbar = app.lookup("toolbar");
				
				var imgWidth;
				var imgHeight;
				
				imageBox.style.removeStyle("transform");
				imageBox.style.removeStyle("transition-duration");
				imageBox.style.removeStyle("zoom");
				
				var tempImage;
				if(direction == "left") {
					for(var i = vaImage.length - 1; i >= 0; i--){
						if (i == viewingImageIndex){
							
							tempImage = vaImage[i - 1];
							if (tempImage != undefined){
								
								imgWidth = tempImage.naturalWidth;
								imgHeight = tempImage.naturalHeight;
								
								app.getContainer().floatControl(imageBox, {
									width : imgWidth + "px",
									height : imgHeight + "px",
									left : "calc(50% - " + imgWidth/2 + "px" + ")",
									top : "calc(50% - " + imgHeight/2 + "px" + ")"
								});
								
								imageViewer.src = tempImage.src;
								viewingImageId = tempImage.id;
								viewingImageIndex = i - 1;
								break
							}
						}
					}
				}
				else if (direction == "right"){
					for(var i = 0; i < vaImage.length; i++){
						if (i == viewingImageIndex){
							
							var tempImage = vaImage[i + 1];
							if (tempImage != undefined){
								
								imgWidth = tempImage.naturalWidth;
								imgHeight = tempImage.naturalHeight;
								
								app.getContainer().floatControl(imageBox, {
									width : imgWidth + "px",
									height : imgHeight + "px",
									left : "calc(50% - " + imgWidth/2 + "px" + ")",
									top : "calc(50% - " + imgHeight/2 + "px" + ")"
								});
								
								imageViewer.src = tempImage.src;
								viewingImageId = tempImage.id;
								viewingImageIndex = i + 1;
								break
							}
						}
					}
				}
				
				cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){
					toolbar.style.css("z-index", "10");
					
					nowZoom = 100;
					
					setDragSource(app.lookup("imageBox"));
				});
			}
			
			
			var rotateVal = 0;
			/**
			 * 
			 * @param {cpr.controls.Container} imageBox
			 * @param {String} direction left 또는 right
			 */
			function rotate(imageBox, direction){
				var imgTranfrom = (imageBox.style.css("transform"));
				
				if (rotateVal != 0){
					imgTranfrom = imgTranfrom.replace("rotate", "");
					imgTranfrom = imgTranfrom.replace("(", "");
					imgTranfrom = imgTranfrom.replace(")", "");
					imgTranfrom = imgTranfrom.replace("deg", "");
					rotateVal = Number(imgTranfrom);
				}
				
				if (rotateVal == 0){
					if (direction == "right"){
						rotateVal += 90;
						imageBox.style.css({
							"transform" : "rotate(" + rotateVal + "deg)",
						 	"transition-duration" : "0.5s"
						});
					}
					else if(direction == "left") {
						rotateVal -= 90;
						imageBox.style.css({
							"transform" : "rotate(" + rotateVal + "deg)",
						 	"transition-duration" : "0.5s"
						});
					}
				}
				else {
					if (direction == "right"){
						rotateVal += 90;
						imageBox.style.css({
							"transform" : "rotate(" + rotateVal + "deg)",
						 	"transition-duration" : "0.5s"
						});
					}
					else if(direction == "left") {
						rotateVal -= 90;
						imageBox.style.css({
							"transform" : "rotate(" + rotateVal + "deg)",
						 	"transition-duration" : "0.5s"
						});
					}
				}
			}
			
			
			var nowZoom = 100;
			/**
			 * 
			 * @param {cpr.controls.Container} imageBox
			 * @param {String} option in 또는 out
			 */
			function zoom(imageBox, option){
				if (option == "in"){
					nowZoom += 10;
					imageBox.style.css("zoom", nowZoom + "%");
					if (nowZoom >= 130){
						nowZoom = 130;
						imageBox.style.css("zoom", 130 + "%");
					}
				}
				else if(option == "out") {
					nowZoom -= 10;
					imageBox.style.css("zoom", nowZoom + "%");
					if (nowZoom <= 70){
						nowZoom = 70;
						imageBox.style.css("zoom", 70 + "%");
					}
				}
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				goImageViewer();
			}
			
			
			/*
			 * 루트 컨테이너에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBodyClick(/* cpr.events.CMouseEvent */ e){
				/**
				 * @type {cpr.controls.Container}
				 */
				var targetControl = e.targetControl;
				
				if (targetControl.type == "container" && targetControl.style.hasClass("grp-overlay")){
					app.getRootAppInstance().lookup("udcImageViewer").dispose();
				}
			}
			
			
			/*
			 * "이전" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				imageSrcChange("left");
			}
			
			
			/*
			 * "다음" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				imageSrcChange("right");
			}
			
			
			/*
			 * 축소 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var imageBox = app.lookup("imageBox");
				zoom(imageBox, "out");
			}
			
			
			/*
			 * 확대 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var imageBox = app.lookup("imageBox");
				zoom(imageBox, "in");
			}
			
			
			/*
			 * 왼쪽 회전 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var imageBox = app.lookup("imageBox");
				rotate(imageBox, "left");
			}
			
			
			/*
			 * 오른쪽 회전 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var imageBox = app.lookup("imageBox");
				rotate(imageBox, "right");
			}
			
			
			/*
			 * 이미지에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onImageViewerClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Image
				 */
				var imageViewer = e.control;
			}
			
			/*
			 * 루트 컨테이너에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onBodyKeydown(e){
				if (e.key == 'Escape') {
					app.getRootAppInstance().lookup("udcImageViewer").dispose();
				}
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.tooltip = "이전";
			button_1.value = "";
			button_1.style.setClasses(["img-btn", "arrow-prev"]);
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"bottom": "0px",
				"left": "0px",
				"width": "80px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.tooltip = "다음";
			button_2.value = "";
			button_2.style.setClasses(["img-btn", "arrow-next"]);
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"width": "80px"
			});
			
			var group_1 = new cpr.controls.Container("imageBox");
			group_1.style.setClasses(["img-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			xYLayout_2.scrollable = false;
			group_1.setLayout(xYLayout_2);
			(function(container){
				var image_1 = new cpr.controls.Image("imageViewer");
				(function(image_1){
				})(image_1);
				if(typeof onImageViewerClick == "function") {
					image_1.addEventListener("click", onImageViewerClick);
				}
				container.addChild(image_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
			
			var group_2 = new cpr.controls.Container("toolbar");
			group_2.style.setClasses(["grp-toolbar"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_2.setLayout(formLayout_1);
			(function(container){
				var button_3 = new cpr.controls.Button();
				button_3.style.setClasses(["img-btn", "minus"]);
				if(typeof onButtonClick3 == "function") {
					button_3.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_3, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_4 = new cpr.controls.Button();
				button_4.style.setClasses(["img-btn", "plus"]);
				if(typeof onButtonClick4 == "function") {
					button_4.addEventListener("click", onButtonClick4);
				}
				container.addChild(button_4, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_5 = new cpr.controls.Button();
				button_5.style.setClasses(["img-btn", "rotate-ccw"]);
				if(typeof onButtonClick5 == "function") {
					button_5.addEventListener("click", onButtonClick5);
				}
				container.addChild(button_5, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_6 = new cpr.controls.Button();
				button_6.style.setClasses(["img-btn", "rotate-cw"]);
				if(typeof onButtonClick6 == "function") {
					button_6.addEventListener("click", onButtonClick6);
				}
				container.addChild(button_6, {
					"colIndex": 3,
					"rowIndex": 0
				});
			})(group_2);
			container.addChild(group_2, {
				"bottom": "50px",
				"width": "250px",
				"height": "40px",
				"left": "calc(50% - 125px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyClick == "function"){
				app.getContainer().addEventListener("click", onBodyClick);
			}
			if(typeof onBodyKeydown == "function"){
				app.getContainer().addEventListener("keydown", onBodyKeydown);
			}
		}
	});
	internalApp.title = "udcImageViewer";
	
	// Type declaration for udcImageViewer
	cpr.utils.Util.ensurePackage("udc.etc").udcImageViewer = function(id){
		cpr.controls.UDCBase.call(this, "udc.etc.udcImageViewer", internalApp, id);
	};
	
	udc.etc.udcImageViewer.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.etc.udcImageViewer.prototype, "type", {
		get : function(){
			return "udc.etc.udcImageViewer";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.etc.udcImageViewer
/// start - udc.main.NotificationItem
/*
 * UDC Qualified Name: udc.main.NotificationItem
 * App URI: udc/main/NotificationItem
 * Source Location: udc/main/NotificationItem.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/main/NotificationItem", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * NotificationItem.js
			 * Created at 2020. 4. 20. 오후 5:27:50.
			 *
			 * @author ryu
			 ************************************************/
			
			/************************************************
			 * 사용자 정의 함수
			 ************************************************/
			
			/**
			 * 
			 * @param {"DEFAULT" | "INFO" | "SUCCESS" | "WARNING" | "DANGER"} psStatus
			 */
			function setNotificationStatus(psStatus) {
				var vcOptNotiSt = app.lookup("optNotiSt");
				
				/* 스타일 초기화 */
				vcOptNotiSt.style.setClasses("rounded-circle");
				
				var vsStateNm = "";
				if (psStatus == "DEFAULT"){
					vsStateNm = "bg-primary-dim";
				} else {
					vsStateNm = "bg-" + psStatus.toLowerCase();
				}
				
				vcOptNotiSt.style.addClass(vsStateNm);
			}
			
			/************************************************
			 * 컨트롤 이벤트
			 ************************************************/
			/*
			 * Body에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBodyClick(/* cpr.events.CMouseEvent */ e){
				/* 클릭 이벤트 전파 방지 */
				e.stopPropagation();
				
				var voClickE = new cpr.events.CMouseEvent("bd-click");
				app.dispatchEvent(voClickE);
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var vsNotiSt = app.getAppProperty("status");
				if (!ValueUtil.isNull(vsNotiSt)){
					setNotificationStatus(vsNotiSt);
				}
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if (e.property == "status"){
					setNotificationStatus(e.newValue);
				}
			}
			
			
			/*
			 * 버튼(btnClose)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnClose = e.control;
				
				/* 클릭 이벤트 전파 방지 */
				e.stopPropagation();
				
				var voCloseE = new cpr.events.CMouseEvent("close");
				app.dispatchEvent(voCloseE);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("status", "default");
			app.declareBindableAppProperty("text", null);
			app.declareBindableAppProperty("time", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["border-bottom"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "10px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "10px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["10px", "1fr", "20px"]);
			formLayout_1.setRows(["20px", "20px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("optNotiCn");
			output_1.fieldLabel = "텍스트";
			output_1.value = "you have requested to complete a task";
			output_1.ellipsis = true;
			output_1.unselectable = false;
			output_1.bind("value").toAppProperty("text");
			container.addChild(output_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var output_2 = new cpr.controls.Output("optNotiTime");
			output_2.fieldLabel = "시간";
			output_2.value = "2 hrs ago";
			output_2.style.setClasses(["text-gray", "small"]);
			output_2.bind("value").toAppProperty("time");
			container.addChild(output_2, {
				"colIndex": 1,
				"rowIndex": 1
			});
			
			var output_3 = new cpr.controls.Output("optNotiSt");
			output_3.value = "";
			output_3.style.setClasses(["rounded-circle"]);
			output_3.bind("fieldLabel").toAppProperty("status");
			container.addChild(output_3, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 1,
				"rowSpan": 2,
				"verticalAlign": "center",
				"height": 10
			});
			
			var button_1 = new cpr.controls.Button("btnClose");
			button_1.value = "";
			button_1.style.setClasses(["bg-transparent", "border-0", "btn-icon", "btn-icon-close"]);
			if(typeof onBtnCloseClick == "function") {
				button_1.addEventListener("click", onBtnCloseClick);
			}
			container.addChild(button_1, {
				"colIndex": 2,
				"rowIndex": 0,
				"colSpan": 1,
				"rowSpan": 2,
				"verticalAlign": "center",
				"height": 20
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyClick == "function"){
				app.getContainer().addEventListener("click", onBodyClick);
			}
		}
	});
	internalApp.title = "NotificationItem";
	
	// Type declaration for NotificationItem
	cpr.utils.Util.ensurePackage("udc.main").NotificationItem = function(id){
		cpr.controls.UDCBase.call(this, "udc.main.NotificationItem", internalApp, id);
	};
	
	udc.main.NotificationItem.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.main.NotificationItem.prototype, "type", {
		get : function(){
			return "udc.main.NotificationItem";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.main.NotificationItem.prototype, "status", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("status");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("status", newValue, true);
		}
	});
	Object.defineProperty(udc.main.NotificationItem.prototype, "text", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("text");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("text", newValue, true);
		}
	});
	Object.defineProperty(udc.main.NotificationItem.prototype, "time", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("time");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("time", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.main.NotificationItem
/// start - udc.SearchButton
/*
 * UDC Qualified Name: udc.SearchButton
 * App URI: udc/SearchButton
 * Source Location: udc/SearchButton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/SearchButton", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "ipbValue"){
					app.lookup("ipb1").redraw();
				} else if (e.property == "ipbLabel") {
					app.lookup("ipb2").redraw();
				}
			}
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				//해당 이름의 이벤트 생성 후 이벤트 전달
				var event = new cpr.events.CUIEvent("search");
				app.dispatchEvent(event);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("ipbValue", null);
			app.declareAppProperty("ipbEnabled", true);
			app.declareBindableAppProperty("ipbLabel", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "3fr", "39px"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.bind("value").toAppProperty("ipbValue");
			inputBox_1.bind("enabled").toAppProperty("ipbEnabled");
			container.addChild(inputBox_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var inputBox_2 = new cpr.controls.InputBox("ipb2");
			inputBox_2.bind("value").toAppProperty("ipbLabel");
			inputBox_2.bind("enabled").toAppProperty("ipbEnabled");
			container.addChild(inputBox_2, {
				"colIndex": 1,
				"rowIndex": 0,
				"colSpan": 1,
				"rowSpan": 1,
				"horizontalAlign": "fill"
			});
			
			var button_1 = new cpr.controls.Button("btnSearch");
			button_1.value = "찾기";
			if(typeof onBtnSearchClick == "function") {
				button_1.addEventListener("click", onBtnSearchClick);
			}
			container.addChild(button_1, {
				"colIndex": 2,
				"rowIndex": 0,
				"colSpan": 1,
				"rowSpan": 1,
				"width": 140
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "SearchButton";
	
	// Type declaration for SearchButton
	cpr.utils.Util.ensurePackage("udc").SearchButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.SearchButton", internalApp, id);
	};
	
	udc.SearchButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.SearchButton.prototype, "type", {
		get : function(){
			return "udc.SearchButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.SearchButton.prototype, "ipbValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ipbValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ipbValue", newValue, true);
		}
	});
	Object.defineProperty(udc.SearchButton.prototype, "ipbEnabled", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ipbEnabled");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ipbEnabled", newValue, true);
		}
	});
	Object.defineProperty(udc.SearchButton.prototype, "ipbLabel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ipbLabel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ipbLabel", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.SearchButton
/// start - udc.template.Breadcrumb
/*
 * UDC Qualified Name: udc.template.Breadcrumb
 * App URI: udc/template/Breadcrumb
 * Source Location: udc/template/Breadcrumb.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/Breadcrumb", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Breadcrumb.js
			 * Created at 2020. 4. 24. 오전 9:24:24.
			 *
			 * @author ryu
			 ************************************************/
			
			/************************************************
			 * 공통 모듈 선언
			 ************************************************/
			var util = createCommonUtil();
			
			/************************************************
			 * 전역 변수 선언
			 ************************************************/
			
			/************************************************
			 * 사용자 정의 함수
			 ************************************************/
			
			
			/**
			 * 
			 */
			function initalize() {
				var vcGrpCont = app.getContainer();
				var voGrpContLayout = vcGrpCont.getLayout();
				
				voGrpContLayout.horizontalAlign = app.getAppProperty("align");
			}
			
			
			/**
			 * 
			 */
			function makeBreadcrumbs() {
				var vcGrpCont = app.getContainer();
				
				var vsBreadcrumbs = app.getAppProperty("values");
				var vsDelimiter = app.getAppProperty("delimiter");
				var vsClass = app.getAppProperty("class");
				
				if (ValueUtil.isNull(vsBreadcrumbs)){
					return;
				}
				
				/* 아이템 초기화 */
				vcGrpCont.removeAllChildren(true);
				
				/* 아이템 생성 */
				var vaBreadcrumbs = vsBreadcrumbs.split(vsDelimiter);
				vaBreadcrumbs.forEach(function(/* String */ each, index){
					var vcCrumb = new cpr.controls.Output("crumb" + (index + 1));
					
					vcCrumb.value = each;
					
					vcCrumb.style.setClasses("breadcrumb-item");
					
					if (vsClass != "default"){
						vcCrumb.style.addClass(vsClass);
					}
					
					vcGrpCont.addChild(vcCrumb, {
						height : "100%",
						autoSize : "width"
					});
				});
			}
			
			/************************************************
			 * 컨트롤 이벤트
			 ************************************************/
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				initalize();
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				makeBreadcrumbs();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("class", "default");
			app.declareBindableAppProperty("values", null);
			app.declareBindableAppProperty("delimiter", ",");
			app.declareAppProperty("align", "right");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["breadcrumbs"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.scrollable = false;
			flowLayout_1.horizontalSpacing = 0;
			flowLayout_1.verticalSpacing = 0;
			flowLayout_1.horizontalAlign = "right";
			flowLayout_1.lineWrap = false;
			container.setLayout(flowLayout_1);
			
			// UI Configuration
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "Breadcrumb";
	
	// Type declaration for Breadcrumb
	cpr.utils.Util.ensurePackage("udc.template").Breadcrumb = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.Breadcrumb", internalApp, id);
	};
	
	udc.template.Breadcrumb.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.Breadcrumb.prototype, "type", {
		get : function(){
			return "udc.template.Breadcrumb";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.Breadcrumb.prototype, "class", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("class");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("class", newValue, true);
		}
	});
	Object.defineProperty(udc.template.Breadcrumb.prototype, "values", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("values");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("values", newValue, true);
		}
	});
	Object.defineProperty(udc.template.Breadcrumb.prototype, "delimiter", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("delimiter");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("delimiter", newValue, true);
		}
	});
	Object.defineProperty(udc.template.Breadcrumb.prototype, "align", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("align");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("align", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.Breadcrumb
/// start - udc.template.chart.chart_Area
/*
 * UDC Qualified Name: udc.template.chart.chart_Area
 * App URI: udc/template/chart/chart_Area
 * Source Location: udc/template/chart/chart_Area.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_Area", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			exports.drawChart = drawChart;
			
			var voChart = null;
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if (e.content) {
					e.preventDefault();
				}
				
				window.addEventListener("resize", function(e) {
					if (!app.disposed) {
						app.lookup("shl1").getComponent("area").resize();
					}
				});
				
			}
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				shl1.registerComponent("voContent", voContent);
				
				if (!voContent) {
					return;
				}
				
				drawChart();
				
			}
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart() {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				if (vcDataset) {
					
					var voOption = {
						xAxis: {
							type: 'category',
							boundaryGap: true,
							data: vcDataset.getColumnData("COLUMN1")
						},
						yAxis: {
							type: 'value'
						},
						series: [{
								data: vcDataset.getColumnData("COLUMN2"),
								type: 'line',
								areaStyle: {}
							},
							{
								data: vcDataset.getColumnData("COLUMN3"),
								type: 'line',
								areaStyle: {}
							}
						]
						
					};
					
					voChart.setOption(voOption);
				}
				
				app.lookup("shl1").registerComponent("area", voChart);
			}
			
			/**
			 * 
			 * @param {cpr.data.DataSet} vcDataset
			 */
			function PushData(vcDataset) {
				
				voChart.setOption({
					series: [{
						data: vcDataset.getColumnData("COLUMN2")
					}, {
						data: vcDataset.getColumnData("COLUMN3")
					}]
				});
				
			}
			
			exports.PushData = PushData;
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "Area 차트";
	
	// Type declaration for chart_Area
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_Area = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_Area", internalApp, id);
	};
	
	udc.template.chart.chart_Area.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_Area.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_Area";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_Area.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_Area
/// start - udc.template.chart.chart_Bar
/*
 * UDC Qualified Name: udc.template.chart.chart_Bar
 * App URI: udc/template/chart/chart_Bar
 * Source Location: udc/template/chart/chart_Bar.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_Bar", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_Bar.js
			 * Created at 2020. 7. 8. 오후 6:47:59.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				
				
				if(e.content) {
					e.preventDefault();
				}
				
			  	
			   window.addEventListener("resize", function(e){     
			 	  if(!app.disposed){
					app.lookup("shl1").getComponent("bar").resize();
			 	  }
			   });
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
				
				drawChart();
					
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * bar 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				if(vcDataset){
					
					var voOption = {
						xAxis: {
							type: 'category',
							data:  vcDataset.getColumnData("COLUMN1")
						},
						yAxis: {
							type: 'value',
						},
						series: [{
							data:  vcDataset.getColumnData("COLUMN2"),
							type: 'bar'
						}]
					};
					voChart.setOption(voOption);
				}
			
				
				app.lookup("shl1").registerComponent("bar", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} vcDataset
			 */
			function PushData(vcDataset){
				
				data = [];
			
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.COLUMN2,
							name : each.COLUMN1
						};
						data.push(_data);
					});
				  
				voChart.setOption({
				   series: [{
				         data: data
				      }]
				  });
				
			}
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "1px",
				"left": "0px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	internalApp.title = "바 차트";
	
	// Type declaration for chart_Bar
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_Bar = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_Bar", internalApp, id);
	};
	
	udc.template.chart.chart_Bar.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_Bar.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_Bar";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_Bar.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_Bar
/// start - udc.template.chart.chart_barline
/*
 * UDC Qualified Name: udc.template.chart.chart_barline
 * App URI: udc/template/chart/chart_barline
 * Source Location: udc/template/chart/chart_barline.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_barline", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("barLine").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				if(vcDataset){
					
					var voOption = {
						 tooltip: {
			        trigger: 'axis',
			        axisPointer: {
			            type: 'cross',
			            crossStyle: {
			                color: '#999'
			            }
				        }
				    },
				    legend: {
				        data : vcDataset.getColumnNames().filter(function(each){
				        	return each != "MONTH"})
				    },
				    xAxis: [
				        {
				            type: 'category',
				            data: vcDataset.getColumnData("MONTH"),
				            axisPointer: {
				                type: 'shadow'
				            }
				        }
				    ],
				    yAxis: [
				        {
				            type: 'value',
				            name: 'rainwater',
				            min: 0,
				            max: 250,
				            interval: 50,
				            axisLabel: {
				                formatter: '{value} ml'
				            }
				        },
				        {
				            type: 'value',
				            name: 'degree Celsius',
				            min: 0,
				            max: 25,
				            interval: 5,
				            axisLabel: {
				                formatter: '{value} °C'
				            }
				        }
				    ],
				    series: [
				        {
				            name: 'Evaporation',
				            type: 'bar',
				            data: vcDataset.getColumnData("EVAPORATION")
				        },
				        {
				            name: 'Precipitation',
				            type: 'bar',
				            data:  vcDataset.getColumnData("PRECIPITATION")
				        },
				        {
				            name: 'Temperature',
				            type: 'line',
				            yAxisIndex: 1,
				            data:  vcDataset.getColumnData("TEMPERATURE")
				        }
				    ]
						
						
						
					};
				
					voChart.setOption(voOption);
				}	
				
				
				
				app.lookup("shl1").registerComponent("barLine", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} addData
			 */
			function PushData(vcDataset){
				
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				
				voChart.setOption({
					xAxis: [
				        {
				            data: vcDataset.getColumnData("MONTH"),
				        }
				    ],
				   series: [{
				   		name: 'Evaporation',
				   		data: vcDataset.getColumnData("EVAPORATION")
				   	},
				   	{
				   		name: 'Precipitation',
				   		data: vcDataset.getColumnData("PRECIPITATION")
				   	},
				   	{
				   		name: 'Temperature',
				   		data: vcDataset.getColumnData("TEMPERATURE")
				   	}
				   ]
				  });
			}
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "바라인믹스 차트";
	
	// Type declaration for chart_barline
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_barline = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_barline", internalApp, id);
	};
	
	udc.template.chart.chart_barline.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_barline.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_barline";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_barline.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_barline
/// start - udc.template.chart.chart_Circle
/*
 * UDC Qualified Name: udc.template.chart.chart_Circle
 * App URI: udc/template/chart/chart_Circle
 * Source Location: udc/template/chart/chart_Circle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_Circle", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("circle").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart();
				
			}
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
			
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				if(vcDataset){
					
					if(data.length == 0){
					
						vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.VALUE ,
							name : each.NAME
						};
						data.push(_data);
						});
					}
					
					
					
					var option = {
						animation: true,
					    title: [{
					        
					    }, {
					        subtext: 'Pie_circle',
					        left: '50%',
					        top: '90%',
					        textAlign: 'center'
					    }],
					    series: [{
					        type: 'pie',
					        radius: '70%',
					        center: ['50%', '50%'],
					        data: data,
					        animation: false,
					        label: {
					            position: 'outer',
					            alignTo: 'none',
					            bleedMargin: 5
					        },
					       
					    }]
					};
			
				
					voChart.setOption(option);
					
				}	
				app.lookup("shl1").registerComponent("circle", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} vcDataset
			 */
			function PushData(vcDataset){
				
				data = [];
			
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.VALUE ,
							name : each.NAME
						};
						data.push(_data);
					});
				  
				voChart.setOption({
				   series: [{
				         data: data
				      }]
				  });
				
			}
			
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "원 차트";
	
	// Type declaration for chart_Circle
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_Circle = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_Circle", internalApp, id);
	};
	
	udc.template.chart.chart_Circle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_Circle.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_Circle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_Circle.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_Circle
/// start - udc.template.chart.chart_CustomLine
/*
 * UDC Qualified Name: udc.template.chart.chart_CustomLine
 * App URI: udc/template/chart/chart_CustomLine
 * Source Location: udc/template/chart/chart_CustomLine.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_CustomLine", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("customLine").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
			
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				if(vcDataset){
					
					vcDataset.getRowDataRanged().forEach(function(each){
						var _data = [];
						_data.push(each.X);
						_data.push(each.Y);		
						data.push(_data);
					});
					
					var option = {
					     animation: true,
			    grid: {
			        top: 40,
			        left: 50,
			        right: 40,
			        bottom: 50
			    },
			    xAxis: {
			        name: 'x',
			        minorTick: {
			            show: true
			        },
			        splitLine: {
			            lineStyle: {
			                color: '#999'
			            }
			        },
			        minorSplitLine: {
			            show: true,
			            lineStyle: {
			                color: '#ddd'
			            }
			        }
			    },
			    yAxis: {
			        name: 'y',
			        min: -100,
			        max: 100,
			        minorTick: {
			            show: true
			        },
			        splitLine: {
			            lineStyle: {
			                color: '#999'
			            }
			        },
			        minorSplitLine: {
			            show: true,
			            lineStyle: {
			                color: '#ddd'
			            }
			        }
			    },
			    dataZoom: [{
			        show: true,
			        type: 'inside',
			        filterMode: 'none',
			        xAxisIndex: [0],
			        startValue: -20,
			        endValue: 20
			    }, {
			        show: true,
			        type: 'inside',
			        filterMode: 'none',
			        yAxisIndex: [0],
			        startValue: -20,
			        endValue: 20
			    }],
			    series: [
			        {
			            type: 'line',
			            showSymbol: false,
			            clip: true,
			            data: data
			        }
			    ]
					};
			
				
					voChart.setOption(option);
					
				}	
				app.lookup("shl1").registerComponent("customLine", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} addData
			 */
			function PushData(vcDataset){
				
				data = [];
			
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				
				vcDataset.getRowDataRanged().forEach(function(each){
						var _data = [];
						_data.push(each.X);
						_data.push(each.Y);		
						data.push(_data);
						
					});
				  
				voChart.setOption({
					series: [{
						data: data
					}]
				});
				
			}
			
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "커스텀 라인";
	
	// Type declaration for chart_CustomLine
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_CustomLine = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_CustomLine", internalApp, id);
	};
	
	udc.template.chart.chart_CustomLine.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_CustomLine.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_CustomLine";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_CustomLine.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_CustomLine
/// start - udc.template.chart.chart_CustomPie
/*
 * UDC Qualified Name: udc.template.chart.chart_CustomPie
 * App URI: udc/template/chart/chart_CustomPie
 * Source Location: udc/template/chart/chart_CustomPie.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_CustomPie", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("customPie").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
			
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				
				
				if(vcDataset){
					
					if(data.length == 0){
					
					vcDataset.getRowDataRanged().forEach(function(each){
					var _data = {
						value : each.VALUE ,
						name : each.NAME
					};
					data.push(_data);
					});
				}
					
					
					var option = {
					      backgroundColor: '#fff',
			
			    title: {
			        text: 'Customized Pie',
			        left: 'center',
			        top: 20,
			        textStyle: {
			            color: 'black'
			        }
			    },
			
			    tooltip: {
			        trigger: 'item',
			        formatter: '{a} <br/>{b} : {c} ({d}%)'
			    },
			
			    visualMap: {
			        show: false,
			        min: 80,
			        max: 600,
			        inRange: {
			            colorLightness: [0, 1]
			        }
			    },
			    series: [
			        {
			            name: '과일',
			            type: 'pie',
			            radius: '55%',
			            center: ['50%', '50%'],
			            data: data.sort(function (a, b) { return a.value - b.value; }),
			            roseType: 'radius',
			            label: {
			                color: 'rgba(45,52,60,1)'
			            },
			            labelLine: {
			                lineStyle: {
			                    color: 'rgba(45,52,60,1)'
			                },
			                smooth: 0.2,
			                length: 10,
			                length2: 20
			            },
			            itemStyle: {
			                color: '#c23531',
			                shadowBlur: 200,
			                shadowColor: 'rgba(0, 0, 0, 0.1)'
			            },
			
			            animationType: 'scale',
			            animationEasing: 'elasticOut',
			            animationDelay: function (idx) {
			                return Math.random() * 200;
			            }
			        }
			    ]
					};
			
				
					voChart.setOption(option);
					
				}	
				app.lookup("shl1").registerComponent("customPie", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} vcDataset
			 */
			function PushData(vcDataset){
				
				data = [];
			
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				
				vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.VALUE ,
							name : each.NAME
						};
						data.push(_data);
					});
				  
				voChart.setOption({
				   series: [{
				         data: data
				      }]
				  });
				
			}
			
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "커스텀 파이";
	
	// Type declaration for chart_CustomPie
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_CustomPie = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_CustomPie", internalApp, id);
	};
	
	udc.template.chart.chart_CustomPie.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_CustomPie.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_CustomPie";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_CustomPie.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_CustomPie
/// start - udc.template.chart.chart_Editor
/*
 * UDC Qualified Name: udc.template.chart.chart_Editor
 * App URI: udc/template/chart/chart_Editor
 * Source Location: udc/template/chart/chart_Editor.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_Editor", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("editor").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
			
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				
				
				if(vcDataset){
					
					if(data.length == 0){
					
					vcDataset.getRowDataRanged().forEach(function(each){
					var _data = {
						value : each.VALUE ,
						name : each.NAME
					};
					data.push(_data);
					});
				}
					
					var option = {
					       tooltip: {
			        formatter: '{a} <br/>{b} : {c}%'
			    },
			    series: [
			        {
			            name: '사용량',
			            type: 'gauge',
			            detail: {formatter: '{value}%'},
			            data: data
			        }
			   			 ]
					};
			
				
					voChart.setOption(option);
					
				}	
				app.lookup("shl1").registerComponent("editor", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} addData
			 */
			function PushData(vcDataset){
				
				data = [];
			
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				
				vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.VALUE ,
							name : each.NAME
						};
						data.push(_data);
					});
				  
				voChart.setOption({
				   series: [{
				         data: data
				      }]
				  });
				
			}
			
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "커스텀 에디터";
	
	// Type declaration for chart_Editor
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_Editor = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_Editor", internalApp, id);
	};
	
	udc.template.chart.chart_Editor.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_Editor.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_Editor";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_Editor.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_Editor
/// start - udc.template.chart.chart_line
/*
 * UDC Qualified Name: udc.template.chart.chart_line
 * App URI: udc/template/chart/chart_line
 * Source Location: udc/template/chart/chart_line.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_line", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  app.lookup("shl1").getComponent("line").resize();  		
				 	  	}
				 	  
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
				
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				if(vcDataset){
					
					vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.COLUMN2 ,
							name : each.COLUMN1
						};
						data.push(_data);
					});
						
					var voOption = {
					 xAxis: {
				        type: 'category',
				        data: vcDataset.getColumnData("COLUMN1")
				    },
				    yAxis: {
				        type: 'value'
				    },
				    series: [{
				        data: data,
				        type: 'line'
				    }]
					};
				
					voChart.setOption(voOption);
				}
				
				app.lookup("shl1").registerComponent("line", voChart);
			}
			
			/**
			 * 
			 * @param {cpr.data.DataSet}} addData
			 */
			function PushData(vcDataset){
				
				voChart.setOption({
				   series: [{
				         data: vcDataset.getColumnData("COLUMN2")
				      }]
				  });
				
			}
			
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "라인 차트";
	
	// Type declaration for chart_line
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_line = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_line", internalApp, id);
	};
	
	udc.template.chart.chart_line.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_line.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_line";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_line.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_line
/// start - udc.template.chart.chart_pie
/*
 * UDC Qualified Name: udc.template.chart.chart_pie
 * App URI: udc/template/chart/chart_pie
 * Source Location: udc/template/chart/chart_pie.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_pie", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("pie").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart () {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				
				if(vcDataset){
					if(data.length == 0){
					
						vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.VALUE ,
							name : each.NAME
						};
						data.push(_data);
					});
					}
						
				
					var voOption = {
				 tooltip: {
			    trigger: 'item',
			    formatter: '{a} <br/>{b}: {c} ({d}%)'
			    },
			    legend: {
			        orient: 'vertical',
			        left: 10,
			        data: vcDataset.getColumnData("name")
			    },
			    series: [
			        {
			            name: '파이차트',
			            type: 'pie',
			            radius: ['50%', '70%'],
			            avoidLabelOverlap: false,
			            label: {
			                show: false,
			                position: 'center'
			            },
			            emphasis: {
			                label: {
			                    show: true,
			                    fontSize: '30',
			                    fontWeight: 'bold'
			                }
			            },
			            labelLine: {
			                show: false
			            },
			            data: data
			        }
			   		 ]
					};
				
					voChart.setOption(voOption);
				}	
				
				
				
				app.lookup("shl1").registerComponent("pie", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} vcDataset
			 */
			function PushData(vcDataset){
				
				data = [];
			
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				
				vcDataset.getRowDataRanged().forEach(function(each){
						var _data = {
							value : each.VALUE ,
							name : each.NAME
						};
						data.push(_data);
					});
				  
				voChart.setOption({
				   series: [{
				         data: data
				      }]
				  });
				
			}
			
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "도넛 차트";
	
	// Type declaration for chart_pie
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_pie = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_pie", internalApp, id);
	};
	
	udc.template.chart.chart_pie.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_pie.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_pie";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_pie.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_pie
/// start - udc.template.chart.chart_Pyramid
/*
 * UDC Qualified Name: udc.template.chart.chart_Pyramid
 * App URI: udc/template/chart/chart_Pyramid
 * Source Location: udc/template/chart/chart_Pyramid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_Pyramid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("pyramid").resize();	
				 	  	}
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart(voContent);
				
			}
			
			exports.drawChart = drawChart;
			
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart (poContent) {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				if(vcDataset){
					
					var data = [];
				
					vcDataset.getRowDataRanged().forEach(function(each){
					var _data = {
						value : each.VALUE ,
						name : each.NAME
						};
					data.push(_data);
					});
					
					var voOption = {
			    tooltip: {
			        trigger: 'item',
			        formatter: "{a} <br/>{b} : {c}%"
			    },
			    legend: {
			        data: vcDataset.getColumnData("NAME")
			    },
			
			    series: [
			        {
			            name:'계급',
			            type:'funnel',
			            left: '20%',
			            top: 60,
			            //x2: 80,
			            bottom: 60,
			            width: '40%',
			            // height: {totalHeight} - y - y2,
			            min: 0,
			            max: 100,
			            minSize: '0%',
			            maxSize: '100%',
			            sort: 'ascending',
			            gap: 2,
			            label: {
			                show: true,
			                position: 'inside'
			            },
			            labelLine: {
			                length: 10,
			                lineStyle: {
			                    width: 1,
			                    type: 'solid'
			                }
			            },
			            itemStyle: {
			                borderColor: '#fff',
			                borderWidth: 1
			            },
			            emphasis: {
			                label: {
			                    fontSize: 20
			                }
			            }, 
			            data: data
			        }
			    ]
					};
				
					voChart.setOption(voOption);
					
				}
					
				
				
				app.lookup("shl1").registerComponent("pyramid", voChart);
			}
			
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "피라미드 차트";
	
	// Type declaration for chart_Pyramid
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_Pyramid = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_Pyramid", internalApp, id);
	};
	
	udc.template.chart.chart_Pyramid.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_Pyramid.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_Pyramid";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_Pyramid.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_Pyramid
/// start - udc.template.chart.chart_Scatter
/*
 * UDC Qualified Name: udc.template.chart.chart_Scatter
 * App URI: udc/template/chart/chart_Scatter
 * Source Location: udc/template/chart/chart_Scatter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_Scatter", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			
			var data = [];
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  app.lookup("shl1").getComponent("scatter").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart (poContent) {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				
				
				
				
				if(vcDataset){
					
					if(data.length == 0){
					
						vcDataset.getRowDataRanged().forEach(function(each){
							var d = [];
							d.push(each.X);
							d.push(each.Y);
							data.push(d);
						});
					}
					
					
					
					
					
					var voOption = {
					 xAxis: {},
					    yAxis: {},
					    series: [{
				        symbolSize: 20,
				        data: data,
			        type: 'scatter'
			        }]
					};
				
					voChart.setOption(voOption);
				}
				
				app.lookup("shl1").registerComponent("scatter", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} vcDataset
			 */
			function PushData(vcDataset){
				
				data = [];
			
				//데이터의 가장 왼쪽 값을 제거
			    data.shift();
				
				vcDataset.getRowDataRanged().forEach(function(each){
							var d = [];
							d.push(each.X);
							d.push(each.Y);
							data.push(d);
						});
				  
				voChart.setOption({
				   series: [{
				         data: data
				      }]
				  });
				
			}
			
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "분산 차트";
	
	// Type declaration for chart_Scatter
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_Scatter = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_Scatter", internalApp, id);
	};
	
	udc.template.chart.chart_Scatter.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_Scatter.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_Scatter";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_Scatter.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_Scatter
/// start - udc.template.chart.chart_YbarCatogry
/*
 * UDC Qualified Name: udc.template.chart.chart_YbarCatogry
 * App URI: udc/template/chart/chart_YbarCatogry
 * Source Location: udc/template/chart/chart_YbarCatogry.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/chart/chart_YbarCatogry", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * chart_line.js
			 * Created at 2020. 7. 8. 오후 6:48:14.
			 *
			 * @author csj
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var voChart = null;
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				if(e.content) {
					e.preventDefault();
				}
				
				
			    window.addEventListener("resize", function(e){    
				 	if(!app.disposed){
				 	  	app.lookup("shl1").getComponent("Ybar").resize();
				 	  }
			    });
				
				
			}
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var voContent = e.content;
				
				if(!voContent) {
					return;
				}
				
				shl1.registerComponent("voContent", voContent);
			
				drawChart();
				
			}
			
			exports.drawChart = drawChart;
			
			/**
			 * 라인차트를 차트를 그립니다.
			 * @param {any} poContent
			 */
			function drawChart (poContent) {
				
				var poContent = app.lookup("shl1").getComponent("voContent");
				
				voChart = echarts.init(poContent);
				/** @type cpr.data.DataSet */
				var vcDataset = app.getAppProperty("dataSet");
				
				if(vcDataset){
					
					
					var voOption = {
						 tooltip: {
			        trigger: 'axis',
			        axisPointer: {            // 坐标轴指示器，坐标轴触发有效
			            type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
			        }
			    },
			    legend: {
			        data: vcDataset.getColumnNames().filter(function(each){
				        	return each != "DAY"})
			    },
			    grid: {
			        left: '3%',
			        right: '4%',
			        bottom: '3%',
			        containLabel: true
			    },
			    xAxis: {
			        type: 'value'
			    },
			    yAxis: {
			        type: 'category',
			        data: vcDataset.getColumnData("DAY")
			    },
			    series: [
			        {
			            name: "tomato",
			            type: 'bar',
			            stack: '합계',
			            label: {
			                show: true,
			                position: 'insideRight'
			            },
			            data: vcDataset.getColumnData("TOMATO")
			        },
			        {
			            name: 'watermelon',
			            type: 'bar',
			            stack: '합계',
			            label: {
			                show: true,
			                position: 'insideRight'
			            },
			            data: vcDataset.getColumnData("WATERMELON")
			        },
			        {
			            name: 'strawberry',
			            type: 'bar',
			            stack: '합계',
			            label: {
			                show: true,
			                position: 'insideRight'
			            },
			            data: vcDataset.getColumnData("STRAWBERRY")
			        },
			        {
			            name: 'orange',
			            type: 'bar',
			            stack: '합계',
			            label: {
			                show: true,
			                position: 'insideRight'
			            },
			            data: vcDataset.getColumnData("ORANGE")
			        }
			    ]
						
						
					};
				
					voChart.setOption(voOption);
				}	
				
				
				
				app.lookup("shl1").registerComponent("Ybar", voChart);
			}
			
			
			/**
			 * 
			 * @param {cpr.data.DataSet} addData
			 */
			function PushData(vcDataset){
			
				voChart.setOption({
					 	series: [{
					 			name: "tomato",
					 			data: vcDataset.getColumnData("TOMATO")
					 		},
					 		{
					 			name: 'watermelon',
					 			data: vcDataset.getColumnData("WATERMELON")
					 		},
					 		{
					 			name: 'strawberry',
					 			data: vcDataset.getColumnData("STRAWBERRY")
					 		},
					 		{
					 			name: 'orange',
					 			data: vcDataset.getColumnData("ORANGE")
					 		}
					 	]
				  });
			}
			
			exports.PushData = PushData;
			
			
			window.addEventListener("resize", function() {
				cpr.core.NotificationCenter.INSTANCE.post("chart-resize", {
					chart : voChart
				});
			});;
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.removeOnBuild = false;
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "Y축바카테고리 차트";
	
	// Type declaration for chart_YbarCatogry
	cpr.utils.Util.ensurePackage("udc.template.chart").chart_YbarCatogry = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.chart.chart_YbarCatogry", internalApp, id);
	};
	
	udc.template.chart.chart_YbarCatogry.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.chart.chart_YbarCatogry.prototype, "type", {
		get : function(){
			return "udc.template.chart.chart_YbarCatogry";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.chart.chart_YbarCatogry.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.chart.chart_YbarCatogry
/// start - udc.template.CustomCombo
/*
 * UDC Qualified Name: udc.template.CustomCombo
 * App URI: udc/template/CustomCombo
 * Source Location: udc/template/CustomCombo.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/CustomCombo", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * customcombo1.js
			 * Created at 2018. 12. 27. 오후 2:47:57.
			 *
			 * @author tomato
			 ************************************************/
			
			
			
			var popupManager = cpr.core.Module.require("module/PopupManager");
			var beforeSelItem = null;
			
			/*
			 * 콤보 박스에서 close 이벤트 발생 시 호출.
			 * 리스트박스를 닫을때 발생하는 이벤트.
			 */
			function onCmb1Close(/* cpr.events.CUIEvent */ e){
				if(beforeSelItem){
					e.preventDefault();
				}
			}
			
			
			
			var _popup = null;
			
			/*
			 * 콤보 박스에서 before-selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change가 발생합니다.
			 */
			function onCmb1BeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				var item = e.newSelection[0];
				if(item.value == "add" && (_popup == null ||_popup.disposed)){
					beforeSelItem = item;
					e.preventDefault();
					_popup = new udc.template.CustomComboPop();
					_popup.title = item.label;
					var dv = app.lookup("dv1");
					dv.refresh();
					
					_popup.initValue = {"app":app,ds:dv};
					popupManager.tooltipPopup(app.getContainer(), _popup, {position:app.getAppProperty("popupPos"),width:app.getAppProperty("popupWidth"),height:app.getAppProperty("popupHeight")});
					
				}else if(_popup && !_popup.disposed){
					e.preventDefault();
				}
				else{
					beforeSelItem = null;
					_popup = null;
				}
			}
			
			exports.reset = function(){
				beforeSelItem = null;
				app.lookup("cmb1").focus();
			}
			
			exports.transferData = function(/*cpr.data.DataSet*/dataset){
				var ds = app.lookup("combodata");
				ds.clear();
				dataset.copyToDataSet(ds);
				updateAddLabel();
			
			}
			
			/*
			 * 콤보 박스에서 open 이벤트 발생 시 호출.
			 * 리스트박스를 열때 발생하는 이벤트.
			 */
			function onCmb1Open(/* cpr.events.CUIEvent */ e){
				updateAddLabel();
				
			}
			
			function updateAddLabel(){
				var ds = app.lookup("combodata");
				var row = ds.findFirstRow("value == 'add'");
				var label = app.getAppProperty("addLabel");
				if(!row){
					ds.addRowData({"label":label,"value":"add"});
				}else{
					if(row.getValue("label") != label){
						ds.realDeleteRow(row.getIndex());
						ds.addRowData({"label":label,"value":"add"});
					}
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("popupPos", "left");
			app.declareBindableAppProperty("popupWidth", "300");
			app.declareBindableAppProperty("popupHeight", "500");
			app.declareBindableAppProperty("addLabel", "직급관리");
			var dataSet_1 = new cpr.data.DataSet("combodata");
			dataSet_1.parseData({
				"filterCondition": "",
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "대표이사", "value": "value1"},
					{"label": "부장", "value": "value2"},
					{"label": "차장", "value": "value3"},
					{"label": "과장", "value": "value4"},
					{"label": "대리", "value": "value5"},
					{"label": "사원", "value": "value6"}
				]
			});
			(function(dataSet){
				var dataView_1 = new cpr.data.DataView("dv1", dataSet);
				dataView_1.parseData({"filterCondition": "value != 'add'"});
				app.register(dataView_1);
			})(dataSet_1);
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			comboBox_1.preventInput = true;
			comboBox_1.style.setClasses(["customcombo1"]);
			comboBox_1.style.list.setClasses(["customcombo-list1"]);
			comboBox_1.style.item.bindClass().toExpression("value == 'add'?\"cl-add-rank\":\"\"");
			(function(comboBox_1){
				comboBox_1.setItemSet(app.lookup("combodata"), {
					"label": "label",
					"value": "value"
				});
			})(comboBox_1);
			if(typeof onCmb1Close == "function") {
				comboBox_1.addEventListener("close", onCmb1Close);
			}
			if(typeof onCmb1BeforeSelectionChange == "function") {
				comboBox_1.addEventListener("before-selection-change", onCmb1BeforeSelectionChange);
			}
			if(typeof onCmb1Open == "function") {
				comboBox_1.addEventListener("open", onCmb1Open);
			}
			container.addChild(comboBox_1, {
				"width": "265px",
				"height": "30px"
			});
		}
	});
	internalApp.title = "CustomCombo";
	
	// Type declaration for CustomCombo
	cpr.utils.Util.ensurePackage("udc.template").CustomCombo = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.CustomCombo", internalApp, id);
	};
	
	udc.template.CustomCombo.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.CustomCombo.prototype, "type", {
		get : function(){
			return "udc.template.CustomCombo";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.CustomCombo.prototype, "popupPos", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("popupPos");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("popupPos", newValue, true);
		}
	});
	Object.defineProperty(udc.template.CustomCombo.prototype, "popupWidth", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("popupWidth");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("popupWidth", newValue, true);
		}
	});
	Object.defineProperty(udc.template.CustomCombo.prototype, "popupHeight", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("popupHeight");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("popupHeight", newValue, true);
		}
	});
	Object.defineProperty(udc.template.CustomCombo.prototype, "addLabel", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("addLabel");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("addLabel", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.CustomCombo
/// start - udc.template.CustomComboPop
/*
 * UDC Qualified Name: udc.template.CustomComboPop
 * App URI: udc/template/CustomComboPop
 * Source Location: udc/template/CustomComboPop.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/CustomComboPop", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * customcombo_pop1.js
			 * Created at 2018. 12. 27. 오후 3:11:17.
			 *
			 * @author tomato
			 ************************************************/
			
			var parentApp = null;
			
			/*
			 * "X" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				parentApp.callAppMethod("reset");
				app.getHost().dispose();
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				parentApp.callAppMethod("reset");
				app.getHost().dispose();
			}
			
			
			
			
			
			/*
			 * Body에서 dispose 이벤트 발생 시 호출.
			 * 컨트롤이 dispose될 때 호출되는 이벤트.
			 */
			function onBodyDispose(/* cpr.events.CEvent */ e){
				parentApp = null;
			}
			
			
			
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var initValue = app.getHost().initValue;
				if(initValue){
					parentApp = initValue.app;
					/**
					 * @type cpr.data.DataView
					 */
					var ds = initValue.ds;
					var listdata = app.lookup("listdata");
					listdata.clear();
					ds.copyToDataSet(listdata);
					app.lookup("lbx1").redraw();
				}
			}
			
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var lbx1 = app.lookup("lbx1");
				var item = lbx1.getSelectionFirst();
				if(item){
					lbx1.deleteItemByValue(item.value);
				}
			}
			
			
			/*
			 * "추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var ipb = app.lookup("ipb1");
				var label = ipb.value;
				addItem(label);
				ipb.value = "";
			}
			
			function addItem(label){
				if(label == ""|| label == null){
					//TODO 메시지
					return;
				}
				var value = generateUUID();
				var ds = app.lookup("listdata");
				ds.addRowData({"label":label,"value":value});
				app.lookup("lbx1").redraw();
			}
			
			function generateUUID(){
				var d = new Date().getTime();
				var uuid = 'xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxx'.replace(/[xy]/g,function(c){
					var r = (d + Math.random()* 16) % 16 |0;
					d = Math.floor(d/16);
					return (c=='x' ? r:(r&0x7|0x8)).toString(16);
				});
				return uuid;
			}
			
			/*
			 * "확인" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				parentApp.callAppMethod("transferData",app.lookup("listdata"));
				parentApp.callAppMethod("reset");
				app.getHost().dispose();
			}
			
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpb1Keydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				if(e.keyCode == 13){
					addItem(ipb1.displayText);
					ipb1.value ="";
				}
			}
			
			
			/*
			 * 리스트 박스에서 dragstart 이벤트 발생 시 호출.
			 * 마우스로 소스 컨트롤을 드래그 시작할 때 발생하는 이벤트.
			 */
			function onLbx1Dragstart(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.ListBox
				 */
				var lbx1 = e.control;
				/**
				 * @type HTMLElement
				 */
				var target = e.target;
			
				if(target.classList.contains("cl-listbox-item")){
					target.classList.add("cl-dragstart");
					//클래스 적용 했을때 반응이 느리다면 인라인 스타일로 적용
			//		target.style.backgroundColor = "#45A0CE";
					
					
				}
				requestAnimationFrame(function(){
					target.classList.remove("cl-dragstart");
					//클래스 적용 했을때 반응이 느리다면 인라인 스타일로 적용
					//		target.style.backgroundColor = null;
				});
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", "");
			var dataSet_1 = new cpr.data.DataSet("listdata");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cust-listpop"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cust-listpop-title"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.rightMargin = "20ㅔㅌ";
			formLayout_1.leftMargin = "20ㅔㅌ";
			formLayout_1.setColumns(["1fr", "50px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.bind("value").toAppProperty("title");
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "fill"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "X";
				button_1.style.setClasses(["cust-listpop-close"]);
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1,
					"horizontalAlign": "right",
					"verticalAlign": "center",
					"width": 40,
					"height": 30
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "55px"
			});
			
			var group_2 = new cpr.controls.Container();
			group_2.style.css({
				"padding-top" : "20px",
				"padding-left" : "20px",
				"padding-bottom" : "20px",
				"padding-right" : "20px"
			});
			// Layout
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.verticalSpacing = "20px";
			formLayout_2.setColumns(["1fr", "1fr"]);
			formLayout_2.setRows(["1fr", "50px"]);
			group_2.setLayout(formLayout_2);
			(function(container){
				var button_2 = new cpr.controls.Button();
				button_2.value = "취소";
				button_2.style.setClasses(["cust-listpop-cancel"]);
				if(typeof onButtonClick2 == "function") {
					button_2.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_2, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var button_3 = new cpr.controls.Button();
				button_3.value = "확인";
				button_3.style.setClasses(["cust-listpop-ok"]);
				if(typeof onButtonClick5 == "function") {
					button_3.addEventListener("click", onButtonClick5);
				}
				container.addChild(button_3, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var group_3 = new cpr.controls.Container();
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.setColumns(["1fr"]);
				formLayout_3.setRows(["30px", "1fr"]);
				formLayout_3.setRowAutoSizing(0, true);
				group_3.setLayout(formLayout_3);
				(function(container){
					var group_4 = new cpr.controls.Container();
					// Layout
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					group_4.setLayout(flowLayout_1);
					(function(container){
						var button_4 = new cpr.controls.Button();
						button_4.value = "삭제";
						button_4.style.setClasses(["cust-listpop-del"]);
						if(typeof onButtonClick3 == "function") {
							button_4.addEventListener("click", onButtonClick3);
						}
						container.addChild(button_4, {
							"width": "70px",
							"height": "30px"
						});
						var button_5 = new cpr.controls.Button();
						button_5.value = "추가";
						button_5.style.setClasses(["cust-listpop-add"]);
						if(typeof onButtonClick4 == "function") {
							button_5.addEventListener("click", onButtonClick4);
						}
						container.addChild(button_5, {
							"width": "70px",
							"height": "30px"
						});
					})(group_4);
					container.addChild(group_4, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var group_5 = new cpr.controls.Container();
					group_5.style.setClasses(["cust-listpop-content"]);
					// Layout
					var formLayout_4 = new cpr.controls.layouts.FormLayout();
					formLayout_4.setColumns(["1fr"]);
					formLayout_4.setRows(["1fr", "30px"]);
					group_5.setLayout(formLayout_4);
					(function(container){
						var listBox_1 = new cpr.controls.ListBox("lbx1");
						listBox_1.draggableItem = true;
						listBox_1.allowDrop = true;
						(function(listBox_1){
							listBox_1.setItemSet(app.lookup("listdata"), {
								"label": "label",
								"value": "value"
							})
						})(listBox_1);
						if(typeof onLbx1Dragstart == "function") {
							listBox_1.addEventListener("dragstart", onLbx1Dragstart);
						}
						container.addChild(listBox_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var inputBox_1 = new cpr.controls.InputBox("ipb1");
						if(typeof onIpb1Keydown == "function") {
							inputBox_1.addEventListener("keydown", onIpb1Keydown);
						}
						container.addChild(inputBox_1, {
							"colIndex": 0,
							"rowIndex": 1
						});
					})(group_5);
					container.addChild(group_5, {
						"colIndex": 0,
						"rowIndex": 1
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "400px",
				"height": "381px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyDispose == "function"){
				app.getContainer().addEventListener("dispose", onBodyDispose);
			}
		}
	});
	internalApp.title = "CustomComboPop";
	
	// Type declaration for CustomComboPop
	cpr.utils.Util.ensurePackage("udc.template").CustomComboPop = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.CustomComboPop", internalApp, id);
	};
	
	udc.template.CustomComboPop.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.CustomComboPop.prototype, "type", {
		get : function(){
			return "udc.template.CustomComboPop";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.CustomComboPop.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.CustomComboPop
/// start - udc.template.DuoDatePicker
/*
 * UDC Qualified Name: udc.template.DuoDatePicker
 * App URI: udc/template/DuoDatePicker
 * Source Location: udc/template/DuoDatePicker.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/DuoDatePicker", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * calendar.js
			 * Created at 2021. 12. 10. 오전 8:51:15.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * 날짜 선택 다이얼로그 너비 크기
			 * @type {Number}
			 */
			var mnDpWidth = 600;
			
			/**
			 * 날짜 선택 다이얼로그 높이 크기
			 * @type {Number}
			 */
			var mnDpHeight = 360;
			
			/**
			 * 
			 * @param {String} psAppProp
			 */
			function getClassValid(psAppProp) {
				var result = "";
				if(psAppProp != "" && psAppProp != null) {
					psAppProp = psAppProp.trim();
					result = psAppProp;
				}
				return result;
			}
			
			exports.getClassValid = getClassValid;
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			exports.getValues = function() {
				var vsFromValue = app.getAppProperty("fromValue");
				var vsToValue = app.getAppProperty("toValue");
				var vsFormat = app.getAppProperty("format");
				var vsMask = app.getAppProperty("mask");
				var vsFromDate = "";
				var vsEndDate = "";
				if(vsFromValue != null && vsFromValue != "") {
					
					var voTempFrom = moment(vsFromValue,vsFormat);
					if(voTempFrom.isValid()) {
						vsFromDate = voTempFrom.format(vsMask);
					}
				}
				if(vsToValue != null && vsToValue != "") {
					
					var voTempEnd = moment(vsToValue,vsFormat);
					if(voTempEnd.isValid()){
						vsEndDate = voTempEnd.format(vsMask);
					}
				}
				
				return [vsFromDate,vsEndDate];
			}
			
			/**
			 * 현재 최상위 앱과 겹치는 영역이 있는지 확인하고,
			 * 다이얼로그가 열릴 위치를 반환합니다.
			 * @param {{width:Number,height:Number,top:Number,left:Number}} poDpConstraint
			 * @param {cpr.geometry.Rectangle} poHostRect
			 * @return {cpr.controls.layouts.Constraint}
			 */
			function getBoundingClientRect(poDpConstraint, poHostRect) {
				var voRootAppIns = app.getRootAppInstance();
				var vcRootCont = voRootAppIns.getContainer();
				var voRootActlRect = vcRootCont.getActualRect();
				
				var voDpHostRect = poHostRect;
				var voDpConstraint = poDpConstraint;
			
				var voNewConstraint = {
					width : voDpConstraint.width,
					height : voDpConstraint.height
				};
				
				var vnIntrsctH = voDpConstraint.top + voDpConstraint.height;
				var vnIntrsctW = voDpConstraint.left + voDpConstraint.width;
				
				if (voRootActlRect.height < vnIntrsctH){ // 높이가 벗어나는 경우
					voNewConstraint["top"] = voDpConstraint.top - voDpConstraint.height - voDpHostRect.height;
				} else {
					voNewConstraint["top"] = voDpConstraint.top;
				}
				
				if (voRootActlRect.width < vnIntrsctW){
					voNewConstraint["right"] = voRootActlRect.width - voDpHostRect.right;
				} else {
					voNewConstraint["left"] = voDpConstraint.left;
				}
				
				return voNewConstraint;
			}
			
			
			/*
			 * 데이트 인풋에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onDtiClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var dtiFrom = e.control;
				
				var vnReadOnly = app.getHost().readOnly;
				if(vnReadOnly || e.target.getAttribute("class") == 'cl-dateinput-clear') {
					return;
				}
				var voHostRect = app.getHost().getActualRect(); // 현 UDC의 Rect
				var voDpProp = { // 다이얼로그 프롭
					width : mnDpWidth, height : mnDpHeight,
					top : voHostRect.bottom, left : voHostRect.left
				}
			
				/* 다이얼로그가 열릴 위치를 계산하여 적절한 다이얼로그를 엽니다. */
				var voReplaceConstraint = getBoundingClientRect(voDpProp, voHostRect);
				
				app.getRootAppInstance().dialogManager.openDialog("app/exam/udcTmp/popup/DuoCalendar", "DuoCalendar", voReplaceConstraint, function(dialog){
					dialog.headerVisible = false; // 다이얼로그 헤더 visible
					dialog.resizable = false; // 다이얼로그 resize
					dialog.style.overlay.css("background-color", "transparent");
					dialog.style.setClasses("datepicker-modal");
					dialog.initValue = {
							selectOption : app.getAppProperty("selectOption")	
					}
					dialog.ready(function(dialogApp){
						//TODO 앱의 초기값을 설정하십시오.
						dialogApp.initValue = {
							fromDate : app.getAppProperty("fromValue"),
							toDate : app.getAppProperty("toValue"),
							format : app.getAppProperty("format"),
							enableDateExp : app.getAppProperty("enabledDateExp"),
							className : getClassValid(app.getAppProperty("calendarClass")),
							useTimeFormat: app.getAppProperty("useTimeFormat"),
							useAutoSelect: app.getAppProperty("useAutoSelect")
						}
						var voOpenEv = new cpr.events.CUIEvent("open");
						app.dispatchEvent(voOpenEv);
					});
					
					/* 오버레이 클릭 시 다이얼로그가 닫히며 값이 설정되도록 함 */
					dialog.addEventListener("overlay-click", function(e){
						dialog.close();
					});
					
					/* ESC키를 누를 때 데이트피커 다이얼로그가 닫히도록 함 */
					dialog.addEventListener("keydown", function(e) {
						if (e.keyCode == cpr.events.KeyCode.ESC){
							e.control.close();
						}
					});
					
					/* 다이얼로그가 닫혔을 때 발생하는 이벤트 정의 */
					dialog.addEventListener("close", function(e) {
						var dialog = e.control;
						
						var voCloseEv = new cpr.events.CUIEvent("close");
						app.dispatchEvent(voCloseEv);
						
						var vsRtrnVal = dialog.returnValue; // 반환 값
						if(vsRtrnVal){
							
							var vsFromValue = app.getAppProperty("fromValue");
							var vsToValue = app.getAppProperty("toValue");
							
							var vaOldValue = [vsFromValue,vsToValue];
							var vsOldValue = vaOldValue.join(",");
							vsOldValue == "," ? null : vsOldValue;
							/** @type String[] */
							var vaNewValue = vsRtrnVal;
							var voBVCEvt = new cpr.events.CValueChangeEvent("before-value-change",{
								oldValue : vsOldValue,
								newValue : vaNewValue.join(",")
							});
							var vbIsPrevented = app.dispatchEvent(voBVCEvt);
							
							if(!voBVCEvt.defaultPrevented){
								
								app.setAppProperty("fromValue", vsRtrnVal[0]);
								app.setAppProperty("toValue", vsRtrnVal[1]);
								
								var voVCEvt = new cpr.events.CValueChangeEvent("value-change",{
									oldValue : vsOldValue,
									newValue : vaNewValue.join(",")
								});
								app.dispatchEvent(voVCEvt);
							}
							
							app.lookup("dtiFrom").redraw();
							app.lookup("dtiTo").redraw();
						}
					});
				});
			}
			
			
			
			/*
			 * "X" 버튼(btnClear)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnClearClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnClear = e.control;
				app.lookup("dtiFrom").clear();
				app.lookup("dtiTo").clear();
				
				var voClearEvt = new cpr.events.CUIEvent("clear");
				app.dispatchEvent(voClearEvt);
			}
			
			function changeType(){
				
				var vsSelectType = app.getAppProperty("selectOption");
			
				switch(vsSelectType){
					case "date" ://과년도 동일일
						break;
					case "day" :
						break;
					case "dayofweek" :
						break;
					case "month" :
						break;	
					default :
						break;
				}
			}
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				
			}
			
			
			/*
			 * 데이트 인풋에서 clear 이벤트 발생 시 호출.
			 * 인풋박스에서 esc키 또는 클리어버튼을 클릭하여 인풋의 값이 Clear될때 발생하는 이벤트
			 */
			function onDtiToClear(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var dtiTo = e.control;
				
				app.lookup("dtiFrom").clear();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("format", "YYYYMMDD");
			app.declareAppProperty("mask", "YYYY-MM-DD");
			app.declareAppProperty("enabledDateExp", null);
			app.declareBindableAppProperty("fromValue", null);
			app.declareBindableAppProperty("toValue", null);
			app.declareAppProperty("dateInputClass", null);
			app.declareAppProperty("calendarClass", null);
			app.declareAppProperty("useTimeFormat", false);
			app.declareAppProperty("selectOption", "date");
			app.declareAppProperty("useAutoSelect", false);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["datepickers"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "10px", "1fr", "30px"]);
			formLayout_1.setColumnVisible(3, false);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var dateInput_1 = new cpr.controls.DateInput("dtiFrom");
			dateInput_1.hideButton = true;
			dateInput_1.placeholder = "시작일";
			dateInput_1.bind("value").toAppProperty("fromValue");
			dateInput_1.bind("format").toAppProperty("format");
			dateInput_1.bind("mask").toAppProperty("mask");
			dateInput_1.style.bindClass().toExpression("@getClassValid(@dateInputClass) != \"\" ? @dateInputClass : \"datepicker\"");
			if(typeof onDtiClick == "function") {
				dateInput_1.addEventListener("click", onDtiClick);
			}
			container.addChild(dateInput_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var dateInput_2 = new cpr.controls.DateInput("dtiTo");
			dateInput_2.hideButton = true;
			dateInput_2.placeholder = "종료일";
			dateInput_2.showClearButton = true;
			dateInput_2.bind("value").toAppProperty("toValue");
			dateInput_2.bind("format").toAppProperty("format");
			dateInput_2.bind("mask").toAppProperty("mask");
			dateInput_2.style.bindClass().toExpression("@getClassValid(@dateInputClass) != \"\" ? @dateInputClass : \"datepicker\"");
			if(typeof onDtiClick == "function") {
				dateInput_2.addEventListener("click", onDtiClick);
			}
			if(typeof onDtiToClear == "function") {
				dateInput_2.addEventListener("clear", onDtiToClear);
			}
			container.addChild(dateInput_2, {
				"colIndex": 2,
				"rowIndex": 0
			});
			
			var button_1 = new cpr.controls.Button("btnClear");
			button_1.value = "X";
			button_1.style.setClasses(["datepicker-button"]);
			if(typeof onBtnClearClick == "function") {
				button_1.addEventListener("click", onBtnClearClick);
			}
			container.addChild(button_1, {
				"colIndex": 3,
				"rowIndex": 0
			});
			
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "~";
			output_1.style.css({
				"background-color" : "white",
				"border-right-style" : "none",
				"border-left-style" : "none",
				"border-bottom-style" : "none",
				"border-top-style" : "none"
			});
			container.addChild(output_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "FromTo피커";
	
	// Type declaration for DuoDatePicker
	cpr.utils.Util.ensurePackage("udc.template").DuoDatePicker = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.DuoDatePicker", internalApp, id);
	};
	
	udc.template.DuoDatePicker.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "type", {
		get : function(){
			return "udc.template.DuoDatePicker";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "format", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("format");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("format", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "mask", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("mask");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("mask", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "enabledDateExp", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("enabledDateExp");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("enabledDateExp", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "fromValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("fromValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("fromValue", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "toValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("toValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("toValue", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "dateInputClass", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dateInputClass");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dateInputClass", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "calendarClass", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("calendarClass");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("calendarClass", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "useTimeFormat", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("useTimeFormat");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("useTimeFormat", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "selectOption", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("selectOption");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("selectOption", newValue, true);
		}
	});
	Object.defineProperty(udc.template.DuoDatePicker.prototype, "useAutoSelect", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("useAutoSelect");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("useAutoSelect", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.DuoDatePicker
/// start - udc.template.UdcCombo
/*
 * UDC Qualified Name: udc.template.UdcCombo
 * App URI: udc/template/UdcCombo
 * Source Location: udc/template/UdcCombo.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/template/UdcCombo", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * UdcCombo.js
			 * Created at 2022. 1. 13. 오후 7:15:56.
			 *
			 * @author suhyun
			 ************************************************/
			var vaCmbValue = [];
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/*
			 * 콤보 박스에서 open 이벤트 발생 시 호출.
			 * 리스트박스를 열때 발생하는 이벤트.
			 */
			function onCmb1Open( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
				e.preventDefault();
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				var vcDs = app.lookup("ds1");
				
				/** @type cpr.data.DataSet */
				var vcDsList = app.getAppProperty("dsComboList");
				if (!vcDsList) return;
				vcDsList.copyToDataSet(vcDs);
				vcDs.setUnfilteredRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
			}
			
			/*
			 * 콤보 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onCmb1Click( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
				
				var voRect = cmb1.getActualRect();
				
				var voDpProp = { // 다이얼로그 프롭
					width: voRect.width,
					height: "auto",
					top: voRect.top + 30,
					left: voRect.left,
					headerVisible: false,
					resizable: false
				}
				app.getRootAppInstance().openDialog("app/exam/udcTmp/popup/comboList", voDpProp, function(dialog) {
					dialog.style.overlay.css("background-color", "transparent");
					dialog.ready(function(dialogApp) {
						if (!dialogApp) return;
						// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
						dialogApp.setAppProperty("combobox", app.lookup("cmb1"));
						dialogApp.setAppProperty("dataset", app.lookup("ds1"));
					});
					dialog.addEventListener("overlay-click", function(e){
						dialog.close();
					});
				}).then(function(returnValue) {
					;
				});
				
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("dsComboList", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{"name": "label"},
					{"name": "value"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			comboBox_1.multiple = true;
			comboBox_1.preventInput = true;
			(function(comboBox_1){
				comboBox_1.setItemSet(app.lookup("ds1"), {
					"label": "label",
					"value": "value"
				});
			})(comboBox_1);
			if(typeof onCmb1Open == "function") {
				comboBox_1.addEventListener("open", onCmb1Open);
			}
			if(typeof onCmb1Click == "function") {
				comboBox_1.addEventListener("click", onCmb1Click);
			}
			container.addChild(comboBox_1, {
				"width": "300px",
				"height": "30px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "필터 콤보박스";
	
	// Type declaration for UdcCombo
	cpr.utils.Util.ensurePackage("udc.template").UdcCombo = function(id){
		cpr.controls.UDCBase.call(this, "udc.template.UdcCombo", internalApp, id);
	};
	
	udc.template.UdcCombo.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.template.UdcCombo.prototype, "type", {
		get : function(){
			return "udc.template.UdcCombo";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.template.UdcCombo.prototype, "dsComboList", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dsComboList");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dsComboList", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.template.UdcCombo
/// start - udc.tmp.Ace
/*
 * UDC Qualified Name: udc.tmp.Ace
 * App URI: udc/tmp/Ace
 * Source Location: udc/tmp/Ace.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/tmp/Ace", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Ace.js
			 * Created at 2021. 1. 26. 오후 5:21:36.
			 *
			 * @author ryu
			 ************************************************/
			
			var myCodeMirror = null;
			
			var loaded = false;
			/**
			 * 코드를 정렬합니다.
			 * @param {String} value
			 */
			function beautify(value) {
				
				if (value == null || value == "") {
					return "";
				}
				
				var code = String(value);
				var mode = app.getAppProperty("language");
				
				if (mode == "javascript") {
					code = js_beautify(code);
				} else if (mode == "text/css" || mode == "text/x-less") {
					code = css_beautify(code);
				} else if (mode == "text/html") {
					code = html_beautify(code);
				}
				
				return code;
			}
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				if (!myCodeMirror) {
					return;
				}
				if (e.property == "value") {
					myCodeMirror.setValue(beautify(e.newValue));
				}
			}
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShlCdMrInit( /* cpr.events.CUIEvent */ e) {
				if (!loaded || myCodeMirror) {
					e.preventDefault();
				}
			}
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShlCdMrLoad( /* cpr.events.CUIEvent */ e) {
				var code = app.getAppProperty("value") || "";
				var mode = app.getAppProperty("language");
				var theme = "eclipse";
				
				myCodeMirror = CodeMirror(e.content, {
					value: code,
					mode: mode,
					theme: theme,
					lineNumbers: true,
					readOnly: true
				});
				
				//Ace 에디터 로드 시점에 이벤트 넣을수 있도록 로직 구현
				var event = new cpr.events.CUIEvent("afterLoad");
				app.dispatchEvent(event);
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				app.lookup("shlCdMr").style.css("overflow", "hidden");
			}
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbxFldEdtValueChange( /* cpr.events.CValueChangeEvent */ e) {
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var cbxFldEdt = e.control;
				
				var vcGrpCn = app.getContainer();
				var voGrpCnLt = vcGrpCn.getLayout();
				
				var vbFold = cbxFldEdt.checked;
				voGrpCnLt.setRowVisible(1, !vbFold);
			}
			
			/*
			 * 버튼(btnCp)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCpClick( /* cpr.events.CMouseEvent */ e) {
				myCodeMirror.execCommand("selectAll");
				myCodeMirror.focus();
				document.execCommand("copy");
				
				myCodeMirror.setSelection({
					line: -1
				});
			}
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				
				//해당 스크립트가 먼저 불러와져야 함
				var resourceLoader = new cpr.core.ResourceLoader();
				resourceLoader.addScript("./thirdparty/codemirror/codemirror-5.60.0/lib/codemirror.js");
				
				var resourceLoaderAfter = new cpr.core.ResourceLoader();
			
					resourceLoader.load().then(function(input) {
						
						resourceLoaderAfter.addScript("./thirdparty/codemirror/codemirror-5.60.0/mode/javascript/javascript.js");
						resourceLoaderAfter.addScript("./thirdparty/codemirror/codemirror-5.60.0/mode/clike/clike.js");
						resourceLoaderAfter.addScript("./thirdparty/codemirror/codemirror-5.60.0/mode/css/css.js");
						resourceLoaderAfter.addScript("./thirdparty/codemirror/codemirror-5.60.0/mode/xml/xml.js");
						resourceLoaderAfter.addScript("./thirdparty/codemirror/codemirror-5.60.0/mode/sql/sql.js");
						resourceLoaderAfter.addScript("./thirdparty/codemirror/js-beautify/beautify.js");
						resourceLoaderAfter.addScript("./thirdparty/codemirror/js-beautify/beautify-html.js");
						resourceLoaderAfter.addScript("./thirdparty/codemirror/js-beautify/polyfill.min.js");
						resourceLoaderAfter.addCSS("./thirdparty/codemirror/codemirror-5.60.0/lib/codemirror.css");
						resourceLoaderAfter.addCSS("./thirdparty/codemirror/codemirror-5.60.0/theme/eclipse.css");
						
						resourceLoaderAfter.load().then(function(input){
							loaded = true;
							app.lookup("shlCdMr").redraw();
							
						});
				});	
				
			}
			
			/*
			 * 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(e){
				myCodeMirror.execCommand("selectAll");
				myCodeMirror.focus();
				document.execCommand("copy");
				
				myCodeMirror.setSelection({
					line: -1
				});
			}
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbx1ValueChange(e){
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var cbxFldEdt = e.control;
					
				var vcGrpCn = app.getContainer();
				var voGrpCnLt = vcGrpCn.getLayout();
				
				var vbFold = cbxFldEdt.checked;
				voGrpCnLt.setRowVisible(1, !vbFold);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareAppProperty("language", "javascript");
			
			app.supportMedia("all and (min-width: 1200px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1199px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"text-align" : "left",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["35px", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			group_1.style.setClasses(["ace-editor-buttons"]);
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.scrollable = false;
			flowLayout_1.horizontalSpacing = 10;
			flowLayout_1.verticalSpacing = 10;
			flowLayout_1.horizontalAlign = "right";
			flowLayout_1.verticalAlign = "middle";
			flowLayout_1.lineWrap = false;
			flowLayout_1.leftMargin = 10;
			flowLayout_1.rightMargin = 10;
			flowLayout_1.topMargin = 5;
			flowLayout_1.bottomMargin = 5;
			group_1.setLayout(flowLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnDwld");
				button_1.visible = false;
				button_1.value = "";
				button_1.style.setClasses(["btn-transparent", "btn-share"]);
				container.addChild(button_1, {
					"width": "25px",
					"height": "25px"
				});
				var button_2 = new cpr.controls.Button("btn1");
				button_2.value = "";
				button_2.style.setClasses(["btn-transparent", "btn-copy"]);
				button_2.style.css({
					"background-color" : "white",
					"border-right-style" : "none",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"border-top-style" : "none"
				});
				if(typeof onBtn1Click == "function") {
					button_2.addEventListener("click", onBtn1Click);
				}
				container.addChild(button_2, {
					"width": "25px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var uIControlShell_1 = new cpr.controls.UIControlShell("shlCdMr");
			uIControlShell_1.style.setClasses(["border", "rounded-bottom"]);
			if(typeof onShlCdMrInit == "function") {
				uIControlShell_1.addEventListener("init", onShlCdMrInit);
			}
			if(typeof onShlCdMrLoad == "function") {
				uIControlShell_1.addEventListener("load", onShlCdMrLoad);
			}
			container.addChild(uIControlShell_1, {
				"colIndex": 0,
				"rowIndex": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	internalApp.title = "Ace";
	
	// Type declaration for Ace
	cpr.utils.Util.ensurePackage("udc.tmp").Ace = function(id){
		cpr.controls.UDCBase.call(this, "udc.tmp.Ace", internalApp, id);
	};
	
	udc.tmp.Ace.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.tmp.Ace.prototype, "type", {
		get : function(){
			return "udc.tmp.Ace";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.tmp.Ace.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.tmp.Ace.prototype, "language", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("language");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("language", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.tmp.Ace
