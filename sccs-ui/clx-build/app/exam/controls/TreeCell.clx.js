/*
 * App URI: app/exam/controls/TreeCell
 * Source Location: app/exam/controls/TreeCell.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/controls/TreeCell", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * TreeCell.js
			 * Created at 2022. 3. 29. 오후 1:38:52.
			 *
			 * @author 1amthomas
			 ************************************************/
			
			/*
			 * "실행" 버튼(btnInit)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInitClick(e){
				var btnInit = e.control;
				console.log(app.lookup("sampleTre1").level);
			}
			
			/*
			 * "실행" 버튼(btnInit2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInit2Click(e){
				var select = app.lookup("sampleCmb1").value;
				if(select == null){
					alert("입력값을 먼저 선택하세요");
					return false;
				}
				app.lookup("sampleTre1").indent = Number(select);		
				app.lookup("sampleGrd1").redraw();	
			}
			
			/*
			 * "실행" 버튼(btnInit3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInit3Click(e){
				var select = app.lookup("sampleCmb2").value;
				if(select == null){
					alert("입력값을 먼저 선택하세요");
					return false;
				}
				if(select == "true"){
					app.lookup("sampleTre2").showCheckbox = true;		
				}else{
					app.lookup("sampleTre2").showCheckbox = false;	
				}
				app.lookup("sampleGrd2").redraw();	
			}
			
			/*
			 * "실행" 버튼(btnInit4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInit4Click(e){
				var select = app.lookup("sampleCmb3").value;
				if(select == null){
					alert("입력값을 먼저 선택하세요");
					return false;
				}
				if(select == "true"){
					app.lookup("sampleTre3").showLines = true;		
				}else{
					app.lookup("sampleTre3").showLines = false;	
				}
				app.lookup("sampleGrd3").redraw();	
			}
			
			/*
			 * "실행" 버튼(btnInit5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInit5Click(e){
				var select = app.lookup("sampleCmb4").value;
				if(select == null){
					alert("입력값을 먼저 선택하세요");
					return false;
				}
				if(select == "true"){
					app.lookup("sampleTre4").showRootLines = true;		
				}else{
					app.lookup("sampleTre4").showRootLines = false;	
				}
				app.lookup("sampleGrd4").redraw();	
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "level"},
					{"name": "tree"}
				],
				"rows": [
					{"tree": "트리셀1", "level": "1"},
					{"tree": "트리셀2", "level": "2"},
					{"tree": "트리셀3", "level": "3"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_2.spacing = 0;
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				userDefinedControl_1.initializeYn = "N";
				userDefinedControl_1.searchBoxId = "grpHeader";
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "400px",
				"height": "30px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.spacing = 20;
			verticalLayout_3.leftMargin = 50;
			verticalLayout_3.rightMargin = 50;
			verticalLayout_3.topMargin = 20;
			verticalLayout_3.bottomMargin = 60;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container();
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 30;
				verticalLayout_4.leftMargin = 0;
				verticalLayout_4.rightMargin = 0;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "트리 셀";
					output_1.style.css({
						"font-weight" : "700",
						"font-size" : "2.5rem",
						"font-family" : "sans-serif , 'Malgun Gothic' , 'Noto Sans KR'"
					});
					container.addChild(output_1, {
						"autoSize": "height",
						"width": "100px",
						"height": "45px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "그리드를 treegrid 형태로 표현되도록 도와주는 컨트롤입니다.\r\n\r\n디테일 영역에만 배치 가능하며 level에 따른 트리 형태를 보여줍니다.";
					output_2.style.setClasses(["opt-tmpl"]);
					output_2.style.css({
						"font-family" : "sans-serif , 'Malgun Gothic' , 'Noto Sans KR'"
					});
					container.addChild(output_2, {
						"autoSize": "height",
						"width": "100px",
						"height": "150px"
					});
					var group_4 = new cpr.controls.Container();
					group_4.style.setClasses(["attach-box"]);
					group_4.style.css({
						"border-right-style" : "solid",
						"border-top-width" : "1px",
						"border-bottom-color" : "#babfc7",
						"border-right-width" : "1px",
						"border-left-color" : "#babfc7",
						"border-right-color" : "#babfc7",
						"border-left-width" : "1px",
						"border-top-style" : "solid",
						"background-color" : "#e9e9e9",
						"border-left-style" : "solid",
						"border-bottom-width" : "1px",
						"border-top-color" : "#babfc7",
						"border-bottom-style" : "solid"
					});
					// Layout
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					flowLayout_1.horizontalSpacing = 40;
					flowLayout_1.verticalSpacing = 20;
					flowLayout_1.horizontalAlign = "center";
					flowLayout_1.verticalAlign = "middle";
					flowLayout_1.leftMargin = 20;
					flowLayout_1.rightMargin = 20;
					flowLayout_1.topMargin = 20;
					flowLayout_1.bottomMargin = 20;
					group_4.setLayout(flowLayout_1);
					(function(container){
						var group_5 = new cpr.controls.Container();
						// Layout
						var formLayout_1 = new cpr.controls.layouts.FormLayout();
						formLayout_1.topMargin = "0px";
						formLayout_1.rightMargin = "0px";
						formLayout_1.bottomMargin = "0px";
						formLayout_1.leftMargin = "0px";
						formLayout_1.horizontalSpacing = "5px";
						formLayout_1.verticalSpacing = "5px";
						formLayout_1.setColumns(["1fr"]);
						formLayout_1.setRows(["1fr", "20px"]);
						group_5.setLayout(formLayout_1);
						(function(container){
							var output_3 = new cpr.controls.Output();
							output_3.value = "<그리드 내 트리셀 컨트롤>";
							output_3.style.setClasses(["text-center"]);
							container.addChild(output_3, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var grid_1 = new cpr.controls.Grid("grd1");
							grid_1.init({
								"dataSet": app.lookup("ds1"),
								"collapsible": true,
								"columns": [
									{"width": "50px"},
									{"width": "100px"}
								],
								"header": {
									"rows": [{"height": "24px"}],
									"cells": [
										{
											"constraint": {"rowIndex": 0, "colIndex": 0},
											"configurator": function(cell){
												cell.filterable = false;
												cell.sortable = false;
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 1},
											"configurator": function(cell){
												cell.targetColumnName = "tree";
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "tree";
											}
										}
									]
								},
								"detail": {
									"rows": [{"height": "24px"}],
									"cells": [
										{
											"constraint": {"rowIndex": 0, "colIndex": 0},
											"configurator": function(cell){
												cell.columnType = "rowindex";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 1},
											"configurator": function(cell){
												cell.columnName = "tree";
												cell.control = (function(){
													var treeCell_1 = new cpr.controls.gridpart.renderer.TreeCell();
													treeCell_1.bind("level").toDataColumn("level");
													treeCell_1.bind("value").toDataColumn("tree");
													return treeCell_1;
												})();
												cell.controlConstraint = {};
											}
										}
									]
								}
							});
							container.addChild(grid_1, {
								"colIndex": 0,
								"rowIndex": 0
							});
						})(group_5);
						container.addChild(group_5, {
							"autoSize": "height",
							"width": "300px",
							"height": "50px"
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1220px",
						"height": "381px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "400px",
					"height": "700px"
				});
				var group_6 = new cpr.controls.Container();
				group_6.style.setClasses(["card-inner"]);
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 30;
				verticalLayout_5.leftMargin = 0;
				verticalLayout_5.rightMargin = 0;
				verticalLayout_5.topMargin = 20;
				verticalLayout_5.bottomMargin = 40;
				group_6.setLayout(verticalLayout_5);
				(function(container){
					var output_4 = new cpr.controls.Output();
					output_4.value = "자주 사용되는 속성";
					output_4.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_4.style.css({
						"font-weight" : "700",
						"font-size" : "26px",
						"font-family" : "sans-serif , 'Malgun Gothic' , 'Noto Sans KR'"
					});
					container.addChild(output_4, {
						"autoSize": "none",
						"width": "1220px",
						"height": "38px"
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "자주 사용되는 속성과 시나리오를 통한 예제를 확인할 수 있습니다. 자세한 사항은 Help Contents를 참조하시기 바랍니다.";
					container.addChild(output_5, {
						"autoSize": "height",
						"width": "100px",
						"height": "141px"
					});
					var group_7 = new cpr.controls.Container();
					group_7.style.setClasses(["card-inner"]);
					// Layout
					var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_6.spacing = 15;
					verticalLayout_6.leftMargin = 40;
					verticalLayout_6.rightMargin = 40;
					verticalLayout_6.topMargin = 20;
					verticalLayout_6.bottomMargin = 40;
					group_7.setLayout(verticalLayout_6);
					(function(container){
						var output_6 = new cpr.controls.Output();
						output_6.value = "indent";
						output_6.style.css({
							"color" : "#2263b3",
							"font-weight" : "700",
							"font-size" : "20px",
							"font-family" : "sans-serif , 'Malgun Gothic' , 'Noto Sans KR'"
						});
						container.addChild(output_6, {
							"autoSize": "none",
							"width": "1220px",
							"height": "38px"
						});
						var group_8 = new cpr.controls.Container();
						group_8.style.css({
							"background-color" : "#e9eff7",
							"background-image" : "none"
						});
						// Layout
						var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_7.leftMargin = 30;
						verticalLayout_7.rightMargin = 30;
						verticalLayout_7.topMargin = 20;
						verticalLayout_7.bottomMargin = 20;
						group_8.setLayout(verticalLayout_7);
						(function(container){
							var output_7 = new cpr.controls.Output();
							output_7.value = "자식 트리 노드의 들여쓰기 간격을 설정하는 속성입니다. 기본값은 20입니다.";
							output_7.style.setClasses(["opt-tmpl"]);
							output_7.style.css({
								"font-weight" : "700"
							});
							container.addChild(output_7, {
								"autoSize": "height",
								"width": "100px",
								"height": "40px"
							});
						})(group_8);
						container.addChild(group_8, {
							"autoSize": "height",
							"width": "1140px",
							"height": "80px"
						});
						var group_9 = new cpr.controls.Container();
						group_9.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_2 = new cpr.controls.layouts.FormLayout();
						formLayout_2.topMargin = "5px";
						formLayout_2.rightMargin = "5px";
						formLayout_2.bottomMargin = "5px";
						formLayout_2.leftMargin = "5px";
						formLayout_2.horizontalSpacing = "10px";
						formLayout_2.verticalSpacing = "10px";
						formLayout_2.horizontalSeparatorWidth = 1;
						formLayout_2.verticalSeparatorWidth = 1;
						formLayout_2.setColumns(["1fr", "2fr"]);
						formLayout_2.setCustomColumnShade(0, "#edeff6");
						formLayout_2.setRows(["30px", "30px", "30px"]);
						formLayout_2.setRowAutoSizing(1, true);
						formLayout_2.setRowAutoSizing(2, true);
						group_9.setLayout(formLayout_2);
						(function(container){
							var output_8 = new cpr.controls.Output();
							output_8.value = "type";
							output_8.style.setClasses(["label"]);
							output_8.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_8, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_9 = new cpr.controls.Output();
							output_9.value = "Number";
							output_9.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_9, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_10 = new cpr.controls.Output();
							output_10.value = "get";
							output_10.style.setClasses(["label"]);
							output_10.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_10, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var output_11 = new cpr.controls.Output();
							output_11.value = "set";
							output_11.style.setClasses(["label"]);
							output_11.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_11, {
								"colIndex": 0,
								"rowIndex": 2
							});
							var output_12 = new cpr.controls.Output();
							output_12.value = "자식 트리 노드의 들여쓰기 간격을 얻습니다.";
							output_12.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_12, {
								"colIndex": 1,
								"rowIndex": 1
							});
							var output_13 = new cpr.controls.Output();
							output_13.value = "자식 트리 노드의 들여쓰기 간격을 지정합니다.";
							output_13.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_13, {
								"colIndex": 1,
								"rowIndex": 2
							});
						})(group_9);
						container.addChild(group_9, {
							"autoSize": "height",
							"width": "1220px",
							"height": "125px"
						});
						var group_10 = new cpr.controls.Container();
						group_10.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_3 = new cpr.controls.layouts.FormLayout();
						formLayout_3.topMargin = "5px";
						formLayout_3.rightMargin = "5px";
						formLayout_3.bottomMargin = "5px";
						formLayout_3.leftMargin = "5px";
						formLayout_3.horizontalSpacing = "10px";
						formLayout_3.verticalSpacing = "10px";
						formLayout_3.horizontalSeparatorWidth = 1;
						formLayout_3.verticalSeparatorWidth = 1;
						formLayout_3.setColumns(["1fr", "200px", "80px"]);
						formLayout_3.setRows(["30px", "30px"]);
						formLayout_3.setCustomRowShade(0, "#edeff6");
						formLayout_3.setRowAutoSizing(1, true);
						group_10.setLayout(formLayout_3);
						(function(container){
							var output_14 = new cpr.controls.Output();
							output_14.value = "시나리오";
							output_14.style.setClasses(["label"]);
							output_14.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_14, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_15 = new cpr.controls.Output();
							output_15.value = "입력값";
							output_15.style.setClasses(["label"]);
							output_15.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_15, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_16 = new cpr.controls.Output();
							output_16.value = "기능확인";
							output_16.style.setClasses(["label"]);
							output_16.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_16, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var button_1 = new cpr.controls.Button("btnInit2");
							button_1.value = "실행";
							button_1.style.setClasses(["btn-primary"]);
							if(typeof onBtnInit2Click == "function") {
								button_1.addEventListener("click", onBtnInit2Click);
							}
							container.addChild(button_1, {
								"colIndex": 2,
								"rowIndex": 1,
								"verticalAlign": "center",
								"height": 30
							});
							var output_17 = new cpr.controls.Output();
							output_17.value = "1) 입력값을 선택하고 확인 버튼을 클릭합니다.\r\n2) 들여쓰기 간격이 선택한 간격만큼 변경된 것을 확인할 수 있습니다.";
							output_17.style.setClasses(["opt-tmpl"]);
							output_17.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_17, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var comboBox_1 = new cpr.controls.ComboBox("sampleCmb1");
							comboBox_1.value = "50";
							(function(comboBox_1){
								comboBox_1.addItem(new cpr.controls.Item("30", "30"));
								comboBox_1.addItem(new cpr.controls.Item("50", "50"));
								comboBox_1.addItem(new cpr.controls.Item("70", "70"));
								comboBox_1.addItem(new cpr.controls.Item("90", "90"));
							})(comboBox_1);
							container.addChild(comboBox_1, {
								"colIndex": 1,
								"rowIndex": 1
							});
						})(group_10);
						container.addChild(group_10, {
							"autoSize": "height",
							"width": "1220px",
							"height": "80px"
						});
						var group_11 = new cpr.controls.Container();
						group_11.style.setClasses(["attach-box"]);
						group_11.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#babfc7",
							"border-right-width" : "1px",
							"border-left-color" : "#babfc7",
							"border-right-color" : "#babfc7",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#e9e9e9",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#babfc7",
							"border-bottom-style" : "solid",
							"background-image" : "none"
						});
						// Layout
						var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
						flowLayout_2.scrollable = false;
						flowLayout_2.horizontalSpacing = 20;
						flowLayout_2.verticalSpacing = 20;
						flowLayout_2.horizontalAlign = "center";
						flowLayout_2.verticalAlign = "middle";
						flowLayout_2.leftMargin = 20;
						flowLayout_2.rightMargin = 20;
						flowLayout_2.topMargin = 20;
						flowLayout_2.bottomMargin = 20;
						group_11.setLayout(flowLayout_2);
						(function(container){
							var group_12 = new cpr.controls.Container("grp7");
							// Layout
							var formLayout_4 = new cpr.controls.layouts.FormLayout();
							formLayout_4.topMargin = "0px";
							formLayout_4.rightMargin = "0px";
							formLayout_4.bottomMargin = "0px";
							formLayout_4.leftMargin = "0px";
							formLayout_4.horizontalSpacing = "5px";
							formLayout_4.verticalSpacing = "5px";
							formLayout_4.setColumns(["1fr"]);
							formLayout_4.setRows(["1fr", "20px"]);
							group_12.setLayout(formLayout_4);
							(function(container){
								var output_18 = new cpr.controls.Output();
								output_18.value = "<그리드 내 트리셀 컨트롤>";
								output_18.style.setClasses(["text-center"]);
								container.addChild(output_18, {
									"colIndex": 0,
									"rowIndex": 1
								});
								var grid_2 = new cpr.controls.Grid("sampleGrd1");
								grid_2.init({
									"dataSet": app.lookup("ds1"),
									"collapsible": true,
									"columns": [
										{"width": "50px"},
										{"width": "100px"}
									],
									"header": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.targetColumnName = "tree";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "tree";
												}
											}
										]
									},
									"detail": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.columnType = "rowindex";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.columnName = "tree";
													cell.control = (function(){
														var treeCell_2 = new cpr.controls.gridpart.renderer.TreeCell("sampleTre1");
														treeCell_2.bind("level").toDataColumn("level");
														treeCell_2.bind("value").toDataColumn("tree");
														return treeCell_2;
													})();
													cell.controlConstraint = {};
												}
											}
										]
									}
								});
								container.addChild(grid_2, {
									"colIndex": 0,
									"rowIndex": 0
								});
							})(group_12);
							container.addChild(group_12, {
								"autoSize": "height",
								"width": "400px",
								"height": "50px"
							});
						})(group_11);
						container.addChild(group_11, {
							"autoSize": "height",
							"width": "1220px",
							"height": "337px"
						});
					})(group_7);
					container.addChild(group_7, {
						"autoSize": "height",
						"width": "1220px",
						"height": "780px"
					});
					var group_13 = new cpr.controls.Container();
					group_13.style.setClasses(["card-inner"]);
					// Layout
					var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_8.spacing = 15;
					verticalLayout_8.leftMargin = 40;
					verticalLayout_8.rightMargin = 40;
					verticalLayout_8.topMargin = 20;
					verticalLayout_8.bottomMargin = 40;
					group_13.setLayout(verticalLayout_8);
					(function(container){
						var output_19 = new cpr.controls.Output();
						output_19.value = "showCheckBox";
						output_19.style.css({
							"color" : "#2263b3",
							"font-weight" : "700",
							"font-size" : "20px",
							"font-family" : "sans-serif , 'Malgun Gothic' , 'Noto Sans KR'"
						});
						container.addChild(output_19, {
							"autoSize": "none",
							"width": "1220px",
							"height": "38px"
						});
						var group_14 = new cpr.controls.Container();
						group_14.style.css({
							"background-color" : "#e9eff7",
							"background-image" : "none"
						});
						// Layout
						var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_9.leftMargin = 30;
						verticalLayout_9.rightMargin = 30;
						verticalLayout_9.topMargin = 20;
						verticalLayout_9.bottomMargin = 20;
						group_14.setLayout(verticalLayout_9);
						(function(container){
							var output_20 = new cpr.controls.Output();
							output_20.value = "트리 셀에 체크 박스를 보여주는 속성입니다. 기본값은 false이며, true로 변경 시 트리 셀에 체크박스가 표현됩니다.\r\n그리드에 트리셀이 배치되며, 트리셀의 showCheckbox=true로 체크박스도 함께 사용하는 경우 하나의 그룹에서 트리의 최상위 뎁스의 자식 행들이 모두 포함되어 있어야지 체크박스가 정상 동작합니다.\r\n(하위 체크에 대한 상위 부분 체크 등의 기능을 말합니다.)";
							output_20.style.setClasses(["opt-tmpl"]);
							output_20.style.css({
								"font-weight" : "700"
							});
							container.addChild(output_20, {
								"autoSize": "height",
								"width": "100px",
								"height": "40px"
							});
						})(group_14);
						container.addChild(group_14, {
							"autoSize": "height",
							"width": "1140px",
							"height": "80px"
						});
						var group_15 = new cpr.controls.Container();
						group_15.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_5 = new cpr.controls.layouts.FormLayout();
						formLayout_5.topMargin = "5px";
						formLayout_5.rightMargin = "5px";
						formLayout_5.bottomMargin = "5px";
						formLayout_5.leftMargin = "5px";
						formLayout_5.horizontalSpacing = "10px";
						formLayout_5.verticalSpacing = "10px";
						formLayout_5.horizontalSeparatorWidth = 1;
						formLayout_5.verticalSeparatorWidth = 1;
						formLayout_5.setColumns(["1fr", "2fr"]);
						formLayout_5.setCustomColumnShade(0, "#edeff6");
						formLayout_5.setRows(["30px", "30px", "30px"]);
						formLayout_5.setRowAutoSizing(1, true);
						formLayout_5.setRowAutoSizing(2, true);
						group_15.setLayout(formLayout_5);
						(function(container){
							var output_21 = new cpr.controls.Output();
							output_21.value = "type";
							output_21.style.setClasses(["label"]);
							output_21.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_21, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_22 = new cpr.controls.Output();
							output_22.value = "Boolean ( Default : false )";
							output_22.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_22, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_23 = new cpr.controls.Output();
							output_23.value = "get";
							output_23.style.setClasses(["label"]);
							output_23.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_23, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var output_24 = new cpr.controls.Output();
							output_24.value = "set";
							output_24.style.setClasses(["label"]);
							output_24.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_24, {
								"colIndex": 0,
								"rowIndex": 2
							});
							var output_25 = new cpr.controls.Output();
							output_25.value = "트리 셀에 체크박스를 표시할지 여부를 반환합니다.";
							output_25.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_25, {
								"colIndex": 1,
								"rowIndex": 1
							});
							var output_26 = new cpr.controls.Output();
							output_26.value = "트리 셀에 체크박스를 표시할지 여부를 설정합니다. ";
							output_26.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_26, {
								"colIndex": 1,
								"rowIndex": 2
							});
						})(group_15);
						container.addChild(group_15, {
							"autoSize": "height",
							"width": "1220px",
							"height": "125px"
						});
						var group_16 = new cpr.controls.Container();
						group_16.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_6 = new cpr.controls.layouts.FormLayout();
						formLayout_6.topMargin = "5px";
						formLayout_6.rightMargin = "5px";
						formLayout_6.bottomMargin = "5px";
						formLayout_6.leftMargin = "5px";
						formLayout_6.horizontalSpacing = "10px";
						formLayout_6.verticalSpacing = "10px";
						formLayout_6.horizontalSeparatorWidth = 1;
						formLayout_6.verticalSeparatorWidth = 1;
						formLayout_6.setColumns(["1fr", "200px", "80px"]);
						formLayout_6.setRows(["30px", "30px"]);
						formLayout_6.setCustomRowShade(0, "#edeff6");
						formLayout_6.setRowAutoSizing(1, true);
						group_16.setLayout(formLayout_6);
						(function(container){
							var output_27 = new cpr.controls.Output();
							output_27.value = "시나리오";
							output_27.style.setClasses(["label"]);
							output_27.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_27, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_28 = new cpr.controls.Output();
							output_28.value = "입력값";
							output_28.style.setClasses(["label"]);
							output_28.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_28, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_29 = new cpr.controls.Output();
							output_29.value = "기능확인";
							output_29.style.setClasses(["label"]);
							output_29.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_29, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var button_2 = new cpr.controls.Button("btnInit3");
							button_2.value = "실행";
							button_2.style.setClasses(["btn-primary"]);
							if(typeof onBtnInit3Click == "function") {
								button_2.addEventListener("click", onBtnInit3Click);
							}
							container.addChild(button_2, {
								"colIndex": 2,
								"rowIndex": 1,
								"verticalAlign": "center",
								"height": 30
							});
							var output_30 = new cpr.controls.Output();
							output_30.value = "1) 입력값을 선택하고 확인 버튼을 클릭합니다.\r\n2) 트리셀에 체크박스가 보이는 것을 확인할 수 있습니다.";
							output_30.style.setClasses(["opt-tmpl"]);
							output_30.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_30, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var comboBox_2 = new cpr.controls.ComboBox("sampleCmb2");
							comboBox_2.value = "true";
							(function(comboBox_2){
								comboBox_2.addItem(new cpr.controls.Item("true", "true"));
								comboBox_2.addItem(new cpr.controls.Item("false", "false"));
							})(comboBox_2);
							container.addChild(comboBox_2, {
								"colIndex": 1,
								"rowIndex": 1
							});
						})(group_16);
						container.addChild(group_16, {
							"autoSize": "height",
							"width": "1220px",
							"height": "80px"
						});
						var group_17 = new cpr.controls.Container();
						group_17.style.setClasses(["attach-box"]);
						group_17.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#babfc7",
							"border-right-width" : "1px",
							"border-left-color" : "#babfc7",
							"border-right-color" : "#babfc7",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#e9e9e9",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#babfc7",
							"border-bottom-style" : "solid",
							"background-image" : "none"
						});
						// Layout
						var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
						flowLayout_3.scrollable = false;
						flowLayout_3.horizontalSpacing = 20;
						flowLayout_3.verticalSpacing = 20;
						flowLayout_3.horizontalAlign = "center";
						flowLayout_3.verticalAlign = "middle";
						flowLayout_3.leftMargin = 20;
						flowLayout_3.rightMargin = 20;
						flowLayout_3.topMargin = 20;
						flowLayout_3.bottomMargin = 20;
						group_17.setLayout(flowLayout_3);
						(function(container){
							var group_18 = new cpr.controls.Container("grp8");
							// Layout
							var formLayout_7 = new cpr.controls.layouts.FormLayout();
							formLayout_7.topMargin = "0px";
							formLayout_7.rightMargin = "0px";
							formLayout_7.bottomMargin = "0px";
							formLayout_7.leftMargin = "0px";
							formLayout_7.horizontalSpacing = "5px";
							formLayout_7.verticalSpacing = "5px";
							formLayout_7.setColumns(["1fr"]);
							formLayout_7.setRows(["1fr", "20px"]);
							group_18.setLayout(formLayout_7);
							(function(container){
								var output_31 = new cpr.controls.Output();
								output_31.value = "<그리드 내 트리셀 컨트롤>";
								output_31.style.setClasses(["text-center"]);
								container.addChild(output_31, {
									"colIndex": 0,
									"rowIndex": 1
								});
								var grid_3 = new cpr.controls.Grid("sampleGrd2");
								grid_3.init({
									"dataSet": app.lookup("ds1"),
									"collapsible": true,
									"columns": [
										{"width": "50px"},
										{"width": "100px"}
									],
									"header": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.targetColumnName = "tree";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "tree";
												}
											}
										]
									},
									"detail": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.columnType = "rowindex";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.columnName = "tree";
													cell.control = (function(){
														var treeCell_3 = new cpr.controls.gridpart.renderer.TreeCell("sampleTre2");
														treeCell_3.bind("level").toDataColumn("level");
														treeCell_3.bind("value").toDataColumn("tree");
														return treeCell_3;
													})();
													cell.controlConstraint = {};
												}
											}
										]
									}
								});
								container.addChild(grid_3, {
									"colIndex": 0,
									"rowIndex": 0
								});
							})(group_18);
							container.addChild(group_18, {
								"autoSize": "height",
								"width": "400px",
								"height": "50px"
							});
						})(group_17);
						container.addChild(group_17, {
							"autoSize": "height",
							"width": "1220px",
							"height": "337px"
						});
					})(group_13);
					container.addChild(group_13, {
						"autoSize": "height",
						"width": "1220px",
						"height": "780px"
					});
					var group_19 = new cpr.controls.Container();
					group_19.style.setClasses(["card-inner"]);
					// Layout
					var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_10.spacing = 15;
					verticalLayout_10.leftMargin = 40;
					verticalLayout_10.rightMargin = 40;
					verticalLayout_10.topMargin = 20;
					verticalLayout_10.bottomMargin = 40;
					group_19.setLayout(verticalLayout_10);
					(function(container){
						var output_32 = new cpr.controls.Output();
						output_32.value = "showLines";
						output_32.style.css({
							"color" : "#2263b3",
							"font-weight" : "700",
							"font-size" : "20px",
							"font-family" : "sans-serif , 'Malgun Gothic' , 'Noto Sans KR'"
						});
						container.addChild(output_32, {
							"autoSize": "none",
							"width": "1220px",
							"height": "38px"
						});
						var group_20 = new cpr.controls.Container();
						group_20.style.css({
							"background-color" : "#e9eff7",
							"background-image" : "none"
						});
						// Layout
						var verticalLayout_11 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_11.leftMargin = 30;
						verticalLayout_11.rightMargin = 30;
						verticalLayout_11.topMargin = 20;
						verticalLayout_11.bottomMargin = 20;
						group_20.setLayout(verticalLayout_11);
						(function(container){
							var output_33 = new cpr.controls.Output();
							output_33.value = "트리셀에 연결선을 보여줄 수 있는 속성입니다. 선을 표시하는 엘리먼트의 너비는 indent 속성에 의해 정해집니다.";
							output_33.style.setClasses(["opt-tmpl"]);
							output_33.style.css({
								"font-weight" : "700"
							});
							container.addChild(output_33, {
								"autoSize": "height",
								"width": "100px",
								"height": "40px"
							});
						})(group_20);
						container.addChild(group_20, {
							"autoSize": "height",
							"width": "1140px",
							"height": "80px"
						});
						var group_21 = new cpr.controls.Container();
						group_21.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_8 = new cpr.controls.layouts.FormLayout();
						formLayout_8.topMargin = "5px";
						formLayout_8.rightMargin = "5px";
						formLayout_8.bottomMargin = "5px";
						formLayout_8.leftMargin = "5px";
						formLayout_8.horizontalSpacing = "10px";
						formLayout_8.verticalSpacing = "10px";
						formLayout_8.horizontalSeparatorWidth = 1;
						formLayout_8.verticalSeparatorWidth = 1;
						formLayout_8.setColumns(["1fr", "2fr"]);
						formLayout_8.setCustomColumnShade(0, "#edeff6");
						formLayout_8.setRows(["30px", "30px", "30px"]);
						formLayout_8.setRowAutoSizing(1, true);
						formLayout_8.setRowAutoSizing(2, true);
						group_21.setLayout(formLayout_8);
						(function(container){
							var output_34 = new cpr.controls.Output();
							output_34.value = "type";
							output_34.style.setClasses(["label"]);
							output_34.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_34, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_35 = new cpr.controls.Output();
							output_35.value = "Boolean ( Default : false )";
							output_35.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_35, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_36 = new cpr.controls.Output();
							output_36.value = "get";
							output_36.style.setClasses(["label"]);
							output_36.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_36, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var output_37 = new cpr.controls.Output();
							output_37.value = "set";
							output_37.style.setClasses(["label"]);
							output_37.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_37, {
								"colIndex": 0,
								"rowIndex": 2
							});
							var output_38 = new cpr.controls.Output();
							output_38.value = "트리 셀에 연결선이 보여줄지 여부를 반환합니다.";
							output_38.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_38, {
								"colIndex": 1,
								"rowIndex": 1
							});
							var output_39 = new cpr.controls.Output();
							output_39.value = "트리 셀에 연결선이 보여줄지 여부를 설정합니다. ";
							output_39.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_39, {
								"colIndex": 1,
								"rowIndex": 2
							});
						})(group_21);
						container.addChild(group_21, {
							"autoSize": "height",
							"width": "1220px",
							"height": "125px"
						});
						var group_22 = new cpr.controls.Container();
						group_22.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_9 = new cpr.controls.layouts.FormLayout();
						formLayout_9.topMargin = "5px";
						formLayout_9.rightMargin = "5px";
						formLayout_9.bottomMargin = "5px";
						formLayout_9.leftMargin = "5px";
						formLayout_9.horizontalSpacing = "10px";
						formLayout_9.verticalSpacing = "10px";
						formLayout_9.horizontalSeparatorWidth = 1;
						formLayout_9.verticalSeparatorWidth = 1;
						formLayout_9.setColumns(["1fr", "200px", "80px"]);
						formLayout_9.setRows(["30px", "30px"]);
						formLayout_9.setCustomRowShade(0, "#edeff6");
						formLayout_9.setRowAutoSizing(1, true);
						group_22.setLayout(formLayout_9);
						(function(container){
							var output_40 = new cpr.controls.Output();
							output_40.value = "시나리오";
							output_40.style.setClasses(["label"]);
							output_40.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_40, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_41 = new cpr.controls.Output();
							output_41.value = "입력값";
							output_41.style.setClasses(["label"]);
							output_41.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_41, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_42 = new cpr.controls.Output();
							output_42.value = "기능확인";
							output_42.style.setClasses(["label"]);
							output_42.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_42, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var button_3 = new cpr.controls.Button("btnInit4");
							button_3.value = "실행";
							button_3.style.setClasses(["btn-primary"]);
							if(typeof onBtnInit4Click == "function") {
								button_3.addEventListener("click", onBtnInit4Click);
							}
							container.addChild(button_3, {
								"colIndex": 2,
								"rowIndex": 1,
								"verticalAlign": "center",
								"height": 30
							});
							var output_43 = new cpr.controls.Output();
							output_43.value = "1) 입력값을 선택하고 확인 버튼을 클릭합니다.\r\n2) 트리셀에 연결선이 보이는 것을 확인할 수 있습니다.";
							output_43.style.setClasses(["opt-tmpl"]);
							output_43.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_43, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var comboBox_3 = new cpr.controls.ComboBox("sampleCmb3");
							comboBox_3.value = "true";
							(function(comboBox_3){
								comboBox_3.addItem(new cpr.controls.Item("true", "true"));
								comboBox_3.addItem(new cpr.controls.Item("false", "false"));
							})(comboBox_3);
							container.addChild(comboBox_3, {
								"colIndex": 1,
								"rowIndex": 1
							});
						})(group_22);
						container.addChild(group_22, {
							"autoSize": "height",
							"width": "1220px",
							"height": "80px"
						});
						var group_23 = new cpr.controls.Container();
						group_23.style.setClasses(["attach-box"]);
						group_23.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#babfc7",
							"border-right-width" : "1px",
							"border-left-color" : "#babfc7",
							"border-right-color" : "#babfc7",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#e9e9e9",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#babfc7",
							"border-bottom-style" : "solid",
							"background-image" : "none"
						});
						// Layout
						var flowLayout_4 = new cpr.controls.layouts.FlowLayout();
						flowLayout_4.scrollable = false;
						flowLayout_4.horizontalSpacing = 20;
						flowLayout_4.verticalSpacing = 20;
						flowLayout_4.horizontalAlign = "center";
						flowLayout_4.verticalAlign = "middle";
						flowLayout_4.leftMargin = 20;
						flowLayout_4.rightMargin = 20;
						flowLayout_4.topMargin = 20;
						flowLayout_4.bottomMargin = 20;
						group_23.setLayout(flowLayout_4);
						(function(container){
							var group_24 = new cpr.controls.Container("grp9");
							// Layout
							var formLayout_10 = new cpr.controls.layouts.FormLayout();
							formLayout_10.topMargin = "0px";
							formLayout_10.rightMargin = "0px";
							formLayout_10.bottomMargin = "0px";
							formLayout_10.leftMargin = "0px";
							formLayout_10.horizontalSpacing = "5px";
							formLayout_10.verticalSpacing = "5px";
							formLayout_10.setColumns(["1fr"]);
							formLayout_10.setRows(["1fr", "20px"]);
							group_24.setLayout(formLayout_10);
							(function(container){
								var output_44 = new cpr.controls.Output();
								output_44.value = "<그리드 내 트리셀 컨트롤>";
								output_44.style.setClasses(["text-center"]);
								container.addChild(output_44, {
									"colIndex": 0,
									"rowIndex": 1
								});
								var grid_4 = new cpr.controls.Grid("sampleGrd3");
								grid_4.init({
									"dataSet": app.lookup("ds1"),
									"collapsible": true,
									"columns": [
										{"width": "50px"},
										{"width": "100px"}
									],
									"header": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.targetColumnName = "tree";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "tree";
												}
											}
										]
									},
									"detail": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.columnType = "rowindex";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.columnName = "tree";
													cell.control = (function(){
														var treeCell_4 = new cpr.controls.gridpart.renderer.TreeCell("sampleTre3");
														treeCell_4.bind("level").toDataColumn("level");
														treeCell_4.bind("value").toDataColumn("tree");
														return treeCell_4;
													})();
													cell.controlConstraint = {};
												}
											}
										]
									}
								});
								container.addChild(grid_4, {
									"colIndex": 0,
									"rowIndex": 0
								});
							})(group_24);
							container.addChild(group_24, {
								"autoSize": "height",
								"width": "400px",
								"height": "50px"
							});
						})(group_23);
						container.addChild(group_23, {
							"autoSize": "height",
							"width": "1220px",
							"height": "337px"
						});
					})(group_19);
					container.addChild(group_19, {
						"autoSize": "height",
						"width": "1220px",
						"height": "780px"
					});
					var group_25 = new cpr.controls.Container("grp1");
					group_25.style.setClasses(["card-inner"]);
					// Layout
					var verticalLayout_12 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_12.spacing = 15;
					verticalLayout_12.leftMargin = 40;
					verticalLayout_12.rightMargin = 40;
					verticalLayout_12.topMargin = 20;
					verticalLayout_12.bottomMargin = 40;
					group_25.setLayout(verticalLayout_12);
					(function(container){
						var output_45 = new cpr.controls.Output();
						output_45.value = "showRootLines";
						output_45.style.css({
							"color" : "#2263b3",
							"font-weight" : "700",
							"font-size" : "20px",
							"font-family" : "sans-serif , 'Malgun Gothic' , 'Noto Sans KR'"
						});
						container.addChild(output_45, {
							"autoSize": "none",
							"width": "1220px",
							"height": "38px"
						});
						var group_26 = new cpr.controls.Container("grp2");
						group_26.style.css({
							"background-color" : "#e9eff7",
							"background-image" : "none"
						});
						// Layout
						var verticalLayout_13 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_13.leftMargin = 30;
						verticalLayout_13.rightMargin = 30;
						verticalLayout_13.topMargin = 20;
						verticalLayout_13.bottomMargin = 20;
						group_26.setLayout(verticalLayout_13);
						(function(container){
							var output_46 = new cpr.controls.Output();
							output_46.value = "트리 셀의 최상위 연결선을 보여줄 수 있는 속성입니다.";
							output_46.style.setClasses(["opt-tmpl"]);
							output_46.style.css({
								"font-weight" : "700"
							});
							container.addChild(output_46, {
								"autoSize": "height",
								"width": "100px",
								"height": "40px"
							});
						})(group_26);
						container.addChild(group_26, {
							"autoSize": "height",
							"width": "1140px",
							"height": "80px"
						});
						var group_27 = new cpr.controls.Container("grp3");
						group_27.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_11 = new cpr.controls.layouts.FormLayout();
						formLayout_11.topMargin = "5px";
						formLayout_11.rightMargin = "5px";
						formLayout_11.bottomMargin = "5px";
						formLayout_11.leftMargin = "5px";
						formLayout_11.horizontalSpacing = "10px";
						formLayout_11.verticalSpacing = "10px";
						formLayout_11.horizontalSeparatorWidth = 1;
						formLayout_11.verticalSeparatorWidth = 1;
						formLayout_11.setColumns(["1fr", "2fr"]);
						formLayout_11.setCustomColumnShade(0, "#edeff6");
						formLayout_11.setRows(["30px", "30px", "30px"]);
						formLayout_11.setRowAutoSizing(1, true);
						formLayout_11.setRowAutoSizing(2, true);
						group_27.setLayout(formLayout_11);
						(function(container){
							var output_47 = new cpr.controls.Output();
							output_47.value = "type";
							output_47.style.setClasses(["label"]);
							output_47.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_47, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_48 = new cpr.controls.Output();
							output_48.value = "Boolean ( Default : false )";
							output_48.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_48, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_49 = new cpr.controls.Output();
							output_49.value = "get";
							output_49.style.setClasses(["label"]);
							output_49.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_49, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var output_50 = new cpr.controls.Output();
							output_50.value = "set";
							output_50.style.setClasses(["label"]);
							output_50.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"font-size" : "16px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_50, {
								"colIndex": 0,
								"rowIndex": 2
							});
							var output_51 = new cpr.controls.Output();
							output_51.value = "트리 셀에 최상위 연결선이 보여줄지 여부를 반환합니다.";
							output_51.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_51, {
								"colIndex": 1,
								"rowIndex": 1
							});
							var output_52 = new cpr.controls.Output();
							output_52.value = "트리 셀에 최상위 연결선이 보여줄지 여부를 설정합니다.";
							output_52.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_52, {
								"colIndex": 1,
								"rowIndex": 2
							});
						})(group_27);
						container.addChild(group_27, {
							"autoSize": "height",
							"width": "1220px",
							"height": "125px"
						});
						var group_28 = new cpr.controls.Container("grp4");
						group_28.style.setClasses(["form-box", "vertical"]);
						// Layout
						var formLayout_12 = new cpr.controls.layouts.FormLayout();
						formLayout_12.topMargin = "5px";
						formLayout_12.rightMargin = "5px";
						formLayout_12.bottomMargin = "5px";
						formLayout_12.leftMargin = "5px";
						formLayout_12.horizontalSpacing = "10px";
						formLayout_12.verticalSpacing = "10px";
						formLayout_12.horizontalSeparatorWidth = 1;
						formLayout_12.verticalSeparatorWidth = 1;
						formLayout_12.setColumns(["1fr", "200px", "80px"]);
						formLayout_12.setRows(["30px", "30px"]);
						formLayout_12.setCustomRowShade(0, "#edeff6");
						formLayout_12.setRowAutoSizing(1, true);
						group_28.setLayout(formLayout_12);
						(function(container){
							var output_53 = new cpr.controls.Output();
							output_53.value = "시나리오";
							output_53.style.setClasses(["label"]);
							output_53.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_53, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_54 = new cpr.controls.Output();
							output_54.value = "입력값";
							output_54.style.setClasses(["label"]);
							output_54.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_54, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var output_55 = new cpr.controls.Output();
							output_55.value = "기능확인";
							output_55.style.setClasses(["label"]);
							output_55.style.css({
								"border-right-style" : "none",
								"background-color" : "transparent",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "center"
							});
							container.addChild(output_55, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var button_4 = new cpr.controls.Button("btnInit5");
							button_4.value = "실행";
							button_4.style.setClasses(["btn-primary"]);
							if(typeof onBtnInit5Click == "function") {
								button_4.addEventListener("click", onBtnInit5Click);
							}
							container.addChild(button_4, {
								"colIndex": 2,
								"rowIndex": 1,
								"verticalAlign": "center",
								"height": 30
							});
							var output_56 = new cpr.controls.Output();
							output_56.value = "1) 입력값을 선택하고 확인 버튼을 클릭합니다.\r\n2) 트리셀에 최상위 연결선이 보이는 것을 확인할 수 있습니다.";
							output_56.style.setClasses(["opt-tmpl"]);
							output_56.style.css({
								"background-color" : "transparent",
								"border-right-style" : "none",
								"border-left-style" : "none",
								"padding-left" : "15px",
								"border-bottom-style" : "none",
								"border-top-style" : "none",
								"text-align" : "left"
							});
							container.addChild(output_56, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var comboBox_4 = new cpr.controls.ComboBox("sampleCmb4");
							comboBox_4.value = "true";
							(function(comboBox_4){
								comboBox_4.addItem(new cpr.controls.Item("true", "true"));
								comboBox_4.addItem(new cpr.controls.Item("false", "false"));
							})(comboBox_4);
							container.addChild(comboBox_4, {
								"colIndex": 1,
								"rowIndex": 1
							});
						})(group_28);
						container.addChild(group_28, {
							"autoSize": "height",
							"width": "1220px",
							"height": "80px"
						});
						var group_29 = new cpr.controls.Container("grp5");
						group_29.style.setClasses(["attach-box"]);
						group_29.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#babfc7",
							"border-right-width" : "1px",
							"border-left-color" : "#babfc7",
							"border-right-color" : "#babfc7",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#e9e9e9",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#babfc7",
							"border-bottom-style" : "solid",
							"background-image" : "none"
						});
						// Layout
						var flowLayout_5 = new cpr.controls.layouts.FlowLayout();
						flowLayout_5.scrollable = false;
						flowLayout_5.horizontalSpacing = 20;
						flowLayout_5.verticalSpacing = 20;
						flowLayout_5.horizontalAlign = "center";
						flowLayout_5.verticalAlign = "middle";
						flowLayout_5.leftMargin = 20;
						flowLayout_5.rightMargin = 20;
						flowLayout_5.topMargin = 20;
						flowLayout_5.bottomMargin = 20;
						group_29.setLayout(flowLayout_5);
						(function(container){
							var group_30 = new cpr.controls.Container("grp10");
							// Layout
							var formLayout_13 = new cpr.controls.layouts.FormLayout();
							formLayout_13.topMargin = "0px";
							formLayout_13.rightMargin = "0px";
							formLayout_13.bottomMargin = "0px";
							formLayout_13.leftMargin = "0px";
							formLayout_13.horizontalSpacing = "5px";
							formLayout_13.verticalSpacing = "5px";
							formLayout_13.setColumns(["1fr"]);
							formLayout_13.setRows(["1fr", "20px"]);
							group_30.setLayout(formLayout_13);
							(function(container){
								var output_57 = new cpr.controls.Output();
								output_57.value = "<showLines = true>";
								output_57.style.setClasses(["text-center"]);
								container.addChild(output_57, {
									"colIndex": 0,
									"rowIndex": 1
								});
								var grid_5 = new cpr.controls.Grid("sampleGrd4");
								grid_5.init({
									"dataSet": app.lookup("ds1"),
									"collapsible": true,
									"columns": [
										{"width": "50px"},
										{"width": "100px"}
									],
									"header": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.targetColumnName = "tree";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "tree";
												}
											}
										]
									},
									"detail": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.columnType = "rowindex";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.columnName = "tree";
													cell.control = (function(){
														var treeCell_5 = new cpr.controls.gridpart.renderer.TreeCell("sampleTre4");
														treeCell_5.showLines = true;
														treeCell_5.bind("level").toDataColumn("level");
														treeCell_5.bind("value").toDataColumn("tree");
														return treeCell_5;
													})();
													cell.controlConstraint = {};
												}
											}
										]
									}
								});
								container.addChild(grid_5, {
									"colIndex": 0,
									"rowIndex": 0
								});
							})(group_30);
							container.addChild(group_30, {
								"autoSize": "height",
								"width": "400px",
								"height": "50px"
							});
						})(group_29);
						container.addChild(group_29, {
							"autoSize": "height",
							"width": "1220px",
							"height": "337px"
						});
					})(group_25);
					container.addChild(group_25, {
						"autoSize": "height",
						"width": "1220px",
						"height": "780px"
					});
				})(group_6);
				container.addChild(group_6, {
					"autoSize": "height",
					"width": "1100px",
					"height": "4400px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "400px",
				"height": "5200px"
			});
		}
	});
	app.title = "트리셀 관련 속성";
	cpr.core.Platform.INSTANCE.register(app);
})();
