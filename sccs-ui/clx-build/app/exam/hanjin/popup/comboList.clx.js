/*
 * App URI: app/exam/hanjin/popup/comboList
 * Source Location: app/exam/hanjin/popup/comboList.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/hanjin/popup/comboList", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * udcComboList.js
			 * Created at 2022. 1. 14. 오전 9:28:44.
			 *
			 * @author suhyun
			 ************************************************/
			
			var vaCmbValue = [];
			/** @type cpr.controls.ComboBox */
			var vcCmb = null;
			
			function appCloser(){
				app.close();
				window.removeEventListener("resize", appCloser);
			}
			
			/*
			 * "전체선택" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var vcGrd = app.lookup("grd1");
				
				if (!vcGrd.getFilter()) {
					for (var i = 0; i < vcGrd.rowCount; i++) {
						vcGrd.setCheckRowIndex(i, true);
						vcGrd.dataSet.setValue(vcGrd.getCheckRowIndices()[i], "checked", true);
					}
				} else {
					vcGrd.dataSet.forEachOfUnfilteredRows(function( /* cpr.data.Row */ dataRow) {
						dataRow.setValue("checked", false);
					});
					for (var i = 0; i < vcGrd.rowCount; i++) {
						vcGrd.setCellValue(i, "checked", true);
					}
				}
				
				comboData();
			}
			
			/*
			 * "전체취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var vcGrd = app.lookup("grd1");
				vcCmb.value = "";
				for (var i = 0; i < vcGrd.rowCount; i++) {
					vcGrd.dataSet.setValue(i, "checked", false);
				}
				
				vcGrd.dataSet.setUnfilteredRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
				vcCmb.redraw();
			}
			
			/*
			 * 인풋 박스에서 keyup 이벤트 발생 시 호출.
			 * 사용자가 키에서 손을 뗄 때 발생하는 이벤트.
			 */
			function onIpb1Keyup( /* cpr.events.CKeyboardEvent */ e) {
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				app.lookup("ds1").setFilter("label *= '" + ipb1.displayText + "'");
				app.lookup("grd1").redraw();
			}
			
			/*
			 * 그룹에서 mouseleave 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			 */
			function onGrpMouseleave( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Container
				 */
				var grp = e.control;
				appCloser();
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				vcCmb = app.getAppProperty("combobox");
				var vcDs = app.lookup("ds1");
				var vcGrd = app.lookup("grd1");
				
				app.lookup("ipb1").focus();
				
				/** @type cpr.data.DataSet */
				var vcDsList = app.getAppProperty("dataset");
				vcDsList.copyToDataSet(vcDs);
				
				if (vcCmb.value) {
					vcCmb.values.forEach(function(each) {
						vcGrd.findAllRow("value == '" + each + "'").forEach(function(each) {
							vcGrd.setCellValue(each.getIndex(), "checked", true);
						});
					});
				}
				window.addEventListener("resize", appCloser);
				vcDs.setUnfilteredRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
			}
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbx1ValueChange( /* cpr.events.CValueChangeEvent */ e) {
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var cbx1 = e.control;
				comboData();
			}
			
			function comboData(){
				var vcGrd = app.lookup("grd1");
				
				vaCmbValue = [];
				
				vcGrd.dataSet.getUnfilteredRowDatas().forEach(function(each) {
					if (each.checked == "true") {
						vaCmbValue.push(each.value);
					}
				});
				
				vcGrd.dataSet.setUnfilteredRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
				
				vcCmb.putValues(vaCmbValue);
				vcCmb.redraw();
			}
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpb1Keydown( /* cpr.events.CKeyboardEvent */ e) {
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				if (cpr.events.KeyCode.ENTER == e.keyCode) {
					app.lookup("btnAllChk").click();
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("combobox", null);
			app.declareAppProperty("dataset", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{"name": "label"},
					{"name": "value"},
					{"name": "checked"}
				]
			});
			if(typeof onDs1Filter == "function") {
				dataSet_1.addEventListener("filter", onDs1Filter);
			}
			if(typeof onDs1Update == "function") {
				dataSet_1.addEventListener("update", onDs1Update);
			}
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp");
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "#cccccc",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "#cccccc",
				"border-top-color" : "#cccccc",
				"border-bottom-style" : "solid",
				"border-right-color" : "#cccccc",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = true;
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["70px", "20px"]);
			formLayout_1.setRowAutoSizing(0, true);
			formLayout_1.setRowAutoSizing(1, true);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container();
				group_2.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-left-style" : "solid",
					"border-right-width" : "1px",
					"border-bottom-width" : "1px",
					"border-left-color" : "#cccccc",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid"
				});
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = true;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "0px";
				formLayout_2.verticalSpacing = "5px";
				formLayout_2.setColumns(["1fr"]);
				formLayout_2.setRows(["35px", "25px"]);
				formLayout_2.setRowAutoSizing(0, true);
				formLayout_2.setRowAutoSizing(1, true);
				group_2.setLayout(formLayout_2);
				(function(container){
					var group_3 = new cpr.controls.Container();
					// Layout
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.scrollable = true;
					formLayout_3.topMargin = "0px";
					formLayout_3.rightMargin = "0px";
					formLayout_3.bottomMargin = "0px";
					formLayout_3.leftMargin = "0px";
					formLayout_3.horizontalSpacing = "0px";
					formLayout_3.verticalSpacing = "0px";
					formLayout_3.setColumns(["1fr", "1fr"]);
					formLayout_3.setRows(["1fr"]);
					group_3.setLayout(formLayout_3);
					(function(container){
						var button_1 = new cpr.controls.Button("btnAllChk");
						button_1.value = "전체선택";
						button_1.icon = "theme/common/images/button/ico-check.jpg";
						button_1.style.setClasses(["btnAllChk"]);
						if(typeof onButtonClick == "function") {
							button_1.addEventListener("click", onButtonClick);
						}
						container.addChild(button_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var button_2 = new cpr.controls.Button();
						button_2.value = "전체취소";
						button_2.icon = "thirdparty/ckeditor4/skins/moono-lisa/images/hidpi/close.png";
						button_2.iconAlign = "right";
						button_2.style.setClasses(["btnAllChk"]);
						if(typeof onButtonClick2 == "function") {
							button_2.addEventListener("click", onButtonClick2);
						}
						container.addChild(button_2, {
							"colIndex": 1,
							"rowIndex": 0
						});
					})(group_3);
					container.addChild(group_3, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var group_4 = new cpr.controls.Container();
					// Layout
					var formLayout_4 = new cpr.controls.layouts.FormLayout();
					formLayout_4.scrollable = true;
					formLayout_4.topMargin = "0px";
					formLayout_4.rightMargin = "0px";
					formLayout_4.bottomMargin = "0px";
					formLayout_4.leftMargin = "0px";
					formLayout_4.horizontalSpacing = "0px";
					formLayout_4.verticalSpacing = "0px";
					formLayout_4.setColumns(["50px", "1fr"]);
					formLayout_4.setColumnAutoSizing(0, true);
					formLayout_4.setRows(["1fr"]);
					group_4.setLayout(formLayout_4);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "Filter :";
						output_1.style.css({
							"text-align" : "center"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var inputBox_1 = new cpr.controls.InputBox("ipb1");
						if(typeof onIpb1Keyup == "function") {
							inputBox_1.addEventListener("keyup", onIpb1Keyup);
						}
						if(typeof onIpb1Keydown == "function") {
							inputBox_1.addEventListener("keydown", onIpb1Keydown);
						}
						container.addChild(inputBox_1, {
							"colIndex": 1,
							"rowIndex": 0
						});
					})(group_4);
					container.addChild(group_4, {
						"colIndex": 0,
						"rowIndex": 0
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var grid_1 = new cpr.controls.Grid("grd1");
				grid_1.init({
					"dataSet": app.lookup("ds1"),
					"autoFit": "1",
					"clickMode": "edit",
					"columns": [
						{"width": "25px"},
						{"width": "100px"},
						{
							"width": "100px",
							"visible": false
						}
					],
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "checked";
									cell.control = (function(){
										var checkBox_1 = new cpr.controls.CheckBox("cbx1");
										checkBox_1.falseValue = "false";
										if(typeof onCbx1ValueChange == "function") {
											checkBox_1.addEventListener("value-change", onCbx1ValueChange);
										}
										checkBox_1.bind("value").toDataColumn("checked");
										return checkBox_1;
									})();
									cell.controlConstraint = {};
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "label";
									cell.style.css({
										"text-align" : "left"
									});
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "value";
								}
							}
						]
					}
				});
				grid_1.style.setClasses(["grdDtl"]);
				if(typeof onGrd1RowCheck == "function") {
					grid_1.addEventListener("row-check", onGrd1RowCheck);
				}
				if(typeof onGrd1RowUncheck == "function") {
					grid_1.addEventListener("row-uncheck", onGrd1RowUncheck);
				}
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_1);
			if(typeof onGrpMouseleave == "function") {
				group_1.addEventListener("mouseleave", onGrpMouseleave);
			}
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "300px",
				"height": "104px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
		}
	});
	app.title = "필터 콤보박스 리스트";
	cpr.core.Platform.INSTANCE.register(app);
})();
