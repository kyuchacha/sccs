/*
 * App URI: app/exam/appSmpl/controlDragNDrop
 * Source Location: app/exam/appSmpl/controlDragNDrop.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/appSmpl/controlDragNDrop", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * dragNDrop.js
			 * Created at 2022. 1. 18. 오후 4:49:44.
			 *
			 * @author kjyan
			 ************************************************/
			
			// 추가되는 항목 인덱스
			var index = 0;
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit2(e){
				var grpCanvas = app.lookup("grpCanvas");
				grpCanvas.getChildren().forEach(function(each){
					setDragSource(each);
				});
				setDragSource(app.lookup("lbx1"));
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad2(e){
				settingItem();
				index = app.lookup("dsPosition").getRowCount();
			}
			
			
			function createDragSourceFeedback() {
				var feedback = new cpr.controls.Output();
				feedback.userAttr("index", "-1");
				feedback.style.css({
					"opacity": "0.8",
					"text-align": "center",
					"color": "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move"
				});
				
				return feedback;
			}
			
			/**
			 * 
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control) {
				var feedback = null;
				var targetControl = null;
				
				var grpCanvas = app.lookup("grpCanvas");
				var dsList = app.lookup("dsList");
				var dsPosition = app.lookup("dsPosition");
				
				new cpr.controls.DragSource(control, {
					onDragStart: function(context){
						context.cursor = "grabbing";
						feedback = createDragSourceFeedback();
						
						// 리스트의 아이템을 드래그 한 경우와 이미 그려진 항목을 드래그한 경우 분류
						if(control.type == "listbox") {
							feedback.value = context.targetItem.label;
						} else {
							var voRow = dsPosition.findFirstRow("itemName =='"+control["value"]+"' && index==" + Number(control.userAttr("index")) + "");
							if(voRow != null && voRow.getValue("isDraggable")=="false") return;
							
							feedback.value = control["value"];
						}
						
			//			app.floatControl(feedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(control.getActualRect()));
					},
					onDragMove: function(context){
						var vsItemName = control.type == "listbox" ? context.targetItem.label: control["value"];
						if(control.type != "listbox") {
							var voRow = dsPosition.findFirstRow("itemName=='"+vsItemName+"' && index == " + Number(control.userAttr("index")) +"");
							if(voRow.getValue("isDraggable")=="false") return;
						}
						
						context.cursor = "grabbing";
						var actualRect = context.source.control.getActualRect();
						var newRect = actualRect.getTranslated(context.dragDelta);
						if(control.type=="listbox") {
							newRect.width = 120;
							newRect.height = 30; 
							newRect.top = context.dragStartLocation.y - (newRect.height / 2) + context.dragDelta.height;
							newRect.left = context.dragStartLocation.x - (newRect.width / 2) + context.dragDelta.width;
						} else {
							newRect.width = control.getOffsetRect().width;
							newRect.height = control.getOffsetRect().height;
							newRect.top = context.dragStartLocation.y - (newRect.height / 2) + context.dragDelta.height;
							newRect.left = context.dragStartLocation.x - (newRect.width / 2) + context.dragDelta.width;
						}
			
						var voCanvasRct = grpCanvas.getActualRect();
						if (voCanvasRct.top > newRect.top ||
							voCanvasRct.left > newRect.left ||
							voCanvasRct.right < newRect.right ||
							voCanvasRct.bottom < newRect.bottom) {
							// 캔버스 영역 외 드래그 방지
						} else {
							app.getRootAppInstance().floatControl(feedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(newRect));
						}
					},
					onDragEnd: function(context){
						context.cursor = "";
						
						// 그룹 영역 위에 있는지 확인
						var isPreventOver = preventOverBoundary(feedback);
						if(!isPreventOver) return;
						
						if(control.type=="listbox") {
							addItem(feedback, true);
				
						} else {
							var voRow = dsPosition.findFirstRow("itemName =='"+feedback.value+"' && index==" + Number(control.userAttr("index")) + "");
							if(voRow != null) {
								if(voRow.getValue("isDraggable")=="false") return;
								var voGrpRect = grpCanvas.getActualRect();
								grpCanvas.updateConstraint(control, {
									"top": (feedback.getActualRect().top - voGrpRect.top) + "px"
									, "left": (feedback.getActualRect().left - voGrpRect.left) + "px"
									, "width": control.getActualRect().width + "px"
									, "height": control.getActualRect().height + "px"
								});
								
								// 데이터 셋 값 변경
								dsPosition.setValue(voRow.getIndex(), "positionX", (feedback.getActualRect().left - voGrpRect.left));
								dsPosition.setValue(voRow.getIndex(), "positionY", (feedback.getActualRect().top - voGrpRect.top));
								
							} else {
								addItem(feedback, true);
							}
						}
			
						feedback.dispose();
						feedback = null;
					}
				});
			}
			
			/**
			 * 드래그 시 경계를 넘으면 리턴
			 * @param {cpr.controls.Output} feedback
			 */
			function preventOverBoundary (feedback) {
				var grpCanvas = app.lookup("grpCanvas");
				var voActualRect = grpCanvas.getActualRect();
				var voProcessRect = feedback.getActualRect();
				
				if (voActualRect.top > voProcessRect.top || 
					voActualRect.left > voProcessRect.left || 
					voActualRect.right < voProcessRect.right || 
					voActualRect.bottom < voProcessRect.bottom) return false;
			
				return true;
			}
			
			/**
			 * 새 항목 추가
			 * @param {cpr.controls.Output} feedback
			 * @param {Boolean} isStart
			 */
			function addItem(feedback, isStart) {
				var grpCanvas = app.lookup("grpCanvas");
				var dsPosition = app.lookup("dsPosition");
				var voGrpRect = grpCanvas.getActualRect();
				var voActualRect = feedback.getActualRect();
				
				var targetItem = new cpr.controls.Output();
				targetItem.userAttr("index", index.toString());
				targetItem.value = feedback.value;
				settingDefaultStyle(targetItem);
				
				if(isStart) {
					dsPosition.addRowData({
						index: index
						, itemName: targetItem.value
						, itemType: "string"
						, positionX: (voActualRect.left - voGrpRect.left)
						, positionY: (voActualRect.top - voGrpRect.top)
						, width: 100
						, height: 30
						, fontType: targetItem.style.getCSS("font-weight")
						, textAlign: targetItem.style.getCSS("text-align")
						, verticalAlign: targetItem.style.getCSS("vertical-align")
						, fontFamily: targetItem.style.getCSS("font-family")
						, fontSize: 9
						, whiteSpace: "false"
						, fontZoom: "true"
						, isDraggable: ""
					})
			
					grpCanvas.addChild(targetItem, {
						top: (voActualRect.top - voGrpRect.top) + "px"
						, left: (voActualRect.left - voGrpRect.left) + "px"
						, width: "100px"
						, height: "30px"
					});
				}
				setDragSource(targetItem);
				addContextEvent(targetItem);
				addEvent(targetItem);
				
				index++;
			}
			
			/**
			 * 화면 최초 로드 시 로컬스토리지에 저장된 아이템 캔버스에 추가
			 */
			function settingItem() {
				if (!localStorage.getItem("dsPosition")) {
					return;
				}
				
				var grpCanvas = app.lookup("grpCanvas"); 
				var dsPosition = app.lookup("dsPosition");
				var storedItemList = JSON.parse(localStorage.getItem("dsPosition"));
				if(storedItemList.length==0) return;
				storedItemList.forEach(function(each) {
					var voRow = each;
					dsPosition.pushRowData(voRow);
			
					var feedback = new cpr.controls.Output();
					feedback.value = voRow["itemName"];
					feedback.style.css({
						"border": "1px solid black"
						, "background-color": "#dedede"
						, "text-align": voRow["textAlign"]
						, "vertical-align": voRow["verticalAlign"]
						, "font-family": voRow["fontFamily"]
						, "font-size": voRow["fontSize"] + "pt"
					});
					
					// 글꼴 형식 지정
					var vsFontType = voRow["fontType"];
					if(vsFontType=="italic") {
						feedback.style.css("font-weight", "normal");
						feedback.style.css("font-style", vsFontType);
						feedback.style.css("text-decoration", "none");
					} else if(vsFontType=="underline") {
						feedback.style.css("font-weight", "normal");
						feedback.style.css("font-style", "normal");
						feedback.style.css("text-decoration", vsFontType);
					}  else if(vsFontType=="normal" || vsFontType=="bold") {
						feedback.style.css("font-weight", vsFontType);
						feedback.style.css("font-style", "normal");
						feedback.style.css("text-decoration", "none");
					} else {
						feedback.style.css("font-weight", "normal");
						feedback.style.css("font-style", "normal");
						feedback.style.css("text-decoration", "none");
					}
					
					feedback.userAttr("index", voRow["index"].toString());
					if(voRow["isDraggable"]=="false") feedback.style.css("color", "red");
					
					grpCanvas.addChild(feedback, {
						"top": voRow["positionY"] + "px",
						"left": voRow["positionX"] + "px",
						"width": voRow["width"] + "px",
						"height": voRow["height"] + "px"
					});
					
					setDragSource(feedback);
					addContextEvent(feedback);
					addEvent(feedback);
				});
			}
			
			/**
			 * 컨트롤의 기본 스타일 지정
			 * @param {cpr.controls.UIControl} control
			 */
			function settingDefaultStyle(control) {
				control.style.css({
					"border": "1px solid black",
					"background-color": "#dedede",
					"text-align": "center",
					"vertical-align": "middle",
					"font-family": "HY견고딕",
					"font-size": "9pt"
				});
				control.style.css("font-weight", "bold");
				control.style.css("font-style", "normal");
				control.style.css("text-decoration", "none");
			}
			
			
			/**
			 * 위치 고정을 위한 컨텍스트 메뉴 이벤트 추가
			 * @param {cpr.controls.Output} control
			 */
			function addContextEvent(control) {
				var dsPosition = app.lookup("dsPosition"); 
				control.addEventListener("contextmenu", function(e) {
					var vcOutput = e.control;
					e.preventDefault();
					
					var ctxMenu = new cpr.controls.Menu();
					ctxMenu.addItem(new cpr.controls.MenuItem("위치고정", "Fixed", ""));
					ctxMenu.addItem(new cpr.controls.MenuItem("위치고정해제", "UnFixed", ""));
					ctxMenu.addItem(new cpr.controls.MenuItem("삭제", "Delete", ""));
					ctxMenu.addEventListener("item-click", function(e) {
						var voRow = dsPosition.findFirstRow("itemName=='"+control.value+"' && index == " + Number(control.userAttr("index")) + "");
						if(e.item.value == "Fixed") {
							voRow.setValue("isDraggable", "false");
							control.style.css("color", "red");
						} else if(e.item.value == "UnFixed") {
							voRow.setValue("isDraggable", "");
							control.style.css("color", "black");
						} else if(e.item.value == "Delete") {
							console.log(voRow.getRowData());
							app.lookup("grpCanvas").removeChild(vcOutput, true);
							dsPosition.realDeleteRow(voRow.getIndex());
						}
						ctxMenu.dispose();
					});
					ctxMenu.addEventListener("blur", function(e){
						ctxMenu.dispose();
					});
					var showConstraint = {
						"position" : "absolute",
						"top" : e.clientY + "px",
						"left" : e.clientX + "px",
						"width" : "150px",
						"height" : "auto"
					};
					app.getRootAppInstance().floatControl(ctxMenu, showConstraint);
					ctxMenu.focus();
				});
			}
			
			/**
			 * 위치 고정을 위한 컨텍스트 메뉴 이벤트 추가
			 * @param {cpr.controls.Output} control
			 */
			function addEvent(control) {
				var dsPosition = app.lookup("dsPosition");
				control.addEventListener("click", function(e) {
					var voRow = dsPosition.findFirstRow("itemName=='"+control.value+"' && index == " + Number(control.userAttr("index")) + "");
					app.lookup("grd1").selectRows(voRow.getIndex());
				});
			}
			
			/*
			 * "저장" 버튼(btnSave)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(e){
				// 기존에 등록된 정보는 제거
				localStorage.removeItem("dsPosition");
				
				// 데이터 셋 정보 로컬스토리지 저장
				var dsPosition = app.lookup("dsPosition");
				var data = dsPosition.getRowDataRanged();
				localStorage.setItem("dsPosition", JSON.stringify(data));
			}
			
			
			/*
			 * "삭제" 버튼(btnDelete)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteClick(e){
				localStorage.removeItem("dsPosition");
			}
			
			/*
			 * 데이터셋에서 update 이벤트 발생 시 호출.
			 * 데이터가 수정되는 경우 발생하는 이벤트. 발생 메소드 : setValue, updateRow
			 */
			function onDsPositionUpdate2(e){
				/** @type cpr.data.DataSet */
				var dsPosition = e.control;
				var voRow = e.row;
				var grpCanvas = app.lookup("grpCanvas");
				grpCanvas.getChildren().forEach(function(each){
					if(each.value == voRow.getValue("itemName") && Number(each.userAttr("index")) == voRow.getValue("index")) {
						grpCanvas.updateConstraint(each, {
							top: voRow.getValue("positionY") + "px"
							, left: voRow.getValue("positionX") + "px"
							, width: voRow.getValue("width") + "px"
							, height: voRow.getValue("height") + "px"
						});
						
						each.style.css({
							"font-size": voRow.getValue("fontSize") + "pt"
							, "font-family": voRow.getValue("fontFamily")
							, "text-align": voRow.getValue("textAlign")
							, "vertical-align": voRow.getValue("verticalAlign")
						});
						
						// 글꼴 형식 지정
						var vsFontType = voRow.getValue("fontType");
						if(vsFontType=="italic") {
							each.style.css("font-weight", "normal");
							each.style.css("font-style", vsFontType);
							each.style.css("text-decoration", "none");
						} else if(vsFontType=="underline") {
							each.style.css("font-weight", "normal");
							each.style.css("font-style", "normal");
							each.style.css("text-decoration", vsFontType);
						} else if(vsFontType=="normal" || vsFontType=="bold"){
							each.style.css("font-weight", vsFontType);
							each.style.css("font-style", "normal");
							each.style.css("text-decoration", "none");
						} else {
							each.style.css("font-weight", "normal");
							each.style.css("font-style", "normal");
							each.style.css("text-decoration", "none");
						}
						
					}
				});
			}
			
			/*
			 * "리셋" 버튼(btnReset)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnResetClick(e){
				var grpCanvas = app.lookup("grpCanvas");
				grpCanvas.removeAllChildren();
			}
			
			
			/*
			 * "재배치" 버튼(btnRefresh)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRefreshClick(e){
				settingItem();
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb1SelectionChange2(e){
				/** @type cpr.controls.ComboBox */
				var cmb1 = e.control;
				var grd = app.lookup("grd1");
				var voRow = grd.getSelectedRow();
				if(e.newSelection[0].value == "image") {
					app.lookup("cmb4").clearSelection();
					app.lookup("cmb5").clearSelection();
					app.lookup("nbe5").putValue("");
				}
				
			}
			
			/*
			 * 사용자 정의 컨트롤에서 afterLoad 이벤트 발생 시 호출.
			 */
			function onAce1AfterLoad(e){
				/* 에디터에 소스 표시 */
				var vcAceEditor = app.lookup("ace1");
				vcAceEditor.value = settingDefaultStyle + setDragSource;
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "itemName"},
					{"name": "value"}
				],
				"rows": [
					{"itemName": "아이템1", "value": "value1"},
					{"itemName": "아이템2", "value": "value2"},
					{"itemName": "아이템3", "value": "value3"},
					{"itemName": "아이템4", "value": "value4"},
					{"itemName": "아이템5", "value": "value5"},
					{"itemName": "아이템6", "value": "value6"},
					{"itemName": "아이템7", "value": "value7"},
					{"itemName": "아이템8", "value": "value8"},
					{"itemName": "아이템9", "value": "value9"},
					{"itemName": "아이템10", "value": "value10"},
					{"itemName": "아이템11", "value": "value11"},
					{"itemName": "아이템12", "value": "value12"},
					{"itemName": "아이템13", "value": "value13"},
					{"itemName": "아이템14", "value": "value14"},
					{"itemName": "아이템15", "value": "value15"},
					{"itemName": "아이템16", "value": "value16"},
					{"itemName": "아이템17", "value": "value17"},
					{"itemName": "아이템18", "value": "value18"},
					{"itemName": "아이템19", "value": "value19"},
					{"itemName": "아이템20", "value": "value20"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsPosition");
			dataSet_2.parseData({
				"columns": [
					{
						"name": "index",
						"dataType": "number"
					},
					{"name": "itemName"},
					{"name": "itemType"},
					{
						"name": "positionX",
						"dataType": "number"
					},
					{
						"name": "positionY",
						"dataType": "number"
					},
					{
						"name": "width",
						"dataType": "number"
					},
					{
						"name": "height",
						"dataType": "number"
					},
					{"name": "textAlign"},
					{"name": "verticalAlign"},
					{"name": "barcode"},
					{"name": "fontFamily"},
					{
						"name": "fontSize",
						"dataType": "number"
					},
					{"name": "fontType"},
					{"name": "whiteSpace"},
					{"name": "writeMode"},
					{"name": "fontZoom"},
					{
						"name": "lineSpacing",
						"dataType": "number"
					},
					{
						"name": "textSpacing",
						"dataType": "number"
					},
					{"name": "itemString"},
					{"name": "isDraggable"}
				],
				"rows": []
			});
			if(typeof onDsPositionUpdate2 == "function") {
				dataSet_2.addEventListener("update", onDsPositionUpdate2);
			}
			app.register(dataSet_2);
			var submission_1 = new cpr.protocols.Submission("sub1");
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "1320px",
				"height": "30px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 30;
			verticalLayout_3.topMargin = 30;
			verticalLayout_3.bottomMargin = 30;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container("grp1");
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 30;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grp3");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.rightMargin = "50px";
					formLayout_1.horizontalSpacing = "5px";
					formLayout_1.verticalSpacing = "5px";
					formLayout_1.setColumns(["300px", "100px"]);
					formLayout_1.setColumnAutoSizing(0, true);
					formLayout_1.setColumnAutoSizing(1, true);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "컨트롤 드래그 앤 드랍";
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "2.5rem"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1270px",
						"height": "40px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "이 페이지는 컨트롤을 드래그 앤 드랍 동작으로 생성하는 예제입니다.";
					output_2.style.setClasses(["opt-tmpl"]);
					output_2.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_2, {
						"autoSize": "height",
						"width": "1210px",
						"height": "46px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "1270px",
					"height": "150px"
				});
				var group_5 = new cpr.controls.Container("grp2");
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 30;
				verticalLayout_5.topMargin = 10;
				verticalLayout_5.bottomMargin = 30;
				group_5.setLayout(verticalLayout_5);
				(function(container){
					var output_3 = new cpr.controls.Output();
					output_3.value = "시나리오";
					output_3.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_3.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_3, {
						"width": "100px",
						"height": "40px"
					});
					var output_4 = new cpr.controls.Output("ipbScenario");
					output_4.value = "1. 오른쪽 아이템들을 드래그하면 해당 컨트롤이 마우스를 따라 움직입니다.\r\n2. 왼쪽 그룹에 드랍하게되면 드래그했던 컨트롤이 드랍한 자리에 배치됩니다.";
					output_4.style.setClasses(["opt-tmpl"]);
					output_4.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_4, {
						"autoSize": "height",
						"width": "1210px",
						"height": "107px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1270px",
					"height": "239px"
				});
				var group_6 = new cpr.controls.Container("grpFunction");
				// Layout
				var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
				group_6.setLayout(verticalLayout_6);
				(function(container){
					var group_7 = new cpr.controls.Container("grpFuncFloating");
					group_7.userAttr({"floating-header": "true"});
					// Layout
					var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_7.bottomMargin = 30;
					group_7.setLayout(verticalLayout_7);
					(function(container){
						var output_5 = new cpr.controls.Output();
						output_5.value = "기능확인";
						output_5.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
						output_5.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "1.75rem"
						});
						container.addChild(output_5, {
							"autoSize": "none",
							"width": "1270px",
							"height": "40px"
						});
						var group_8 = new cpr.controls.Container("grp11");
						group_8.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#dedede",
							"border-right-width" : "1px",
							"border-left-color" : "#dedede",
							"border-right-color" : "#dedede",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#F0F0F0",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#dedede",
							"border-bottom-style" : "solid"
						});
						// Layout
						var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_8.leftMargin = 30;
						verticalLayout_8.rightMargin = 30;
						verticalLayout_8.topMargin = 5;
						verticalLayout_8.bottomMargin = 10;
						group_8.setLayout(verticalLayout_8);
						(function(container){
							var group_9 = new cpr.controls.Container("grpContent");
							// Layout
							var formLayout_2 = new cpr.controls.layouts.FormLayout();
							formLayout_2.scrollable = false;
							formLayout_2.setColumns(["1fr", "300px"]);
							formLayout_2.setRows(["1fr"]);
							group_9.setLayout(formLayout_2);
							(function(container){
								var group_10 = new cpr.controls.Container("grp4");
								// Layout
								var formLayout_3 = new cpr.controls.layouts.FormLayout();
								formLayout_3.scrollable = false;
								formLayout_3.setColumns(["1fr"]);
								formLayout_3.setRows(["25px", "1fr", "25px"]);
								formLayout_3.setRowVisible(2, false);
								group_10.setLayout(formLayout_3);
								(function(container){
									var group_11 = new cpr.controls.Container("grp5");
									// Layout
									var formLayout_4 = new cpr.controls.layouts.FormLayout();
									formLayout_4.scrollable = false;
									formLayout_4.topMargin = "0px";
									formLayout_4.rightMargin = "0px";
									formLayout_4.bottomMargin = "0px";
									formLayout_4.leftMargin = "0px";
									formLayout_4.verticalSpacing = "0px";
									formLayout_4.setColumns(["1fr", "60px", "60px", "60px", "60px"]);
									formLayout_4.setRows(["25px", "25px", "25px", "1fr"]);
									group_11.setLayout(formLayout_4);
									(function(container){
										var userDefinedControl_2 = new udc.com.comFormTitle("comformtitle1");
										userDefinedControl_2.title = "컨트롤 드래그 & 드롭";
										container.addChild(userDefinedControl_2, {
											"colIndex": 0,
											"rowIndex": 0
										});
										var button_1 = new cpr.controls.Button("btnRefresh");
										button_1.value = "재배치";
										if(typeof onBtnRefreshClick == "function") {
											button_1.addEventListener("click", onBtnRefreshClick);
										}
										container.addChild(button_1, {
											"colIndex": 1,
											"rowIndex": 0
										});
										var button_2 = new cpr.controls.Button("btnReset");
										button_2.value = "리셋";
										if(typeof onBtnResetClick == "function") {
											button_2.addEventListener("click", onBtnResetClick);
										}
										container.addChild(button_2, {
											"colIndex": 2,
											"rowIndex": 0
										});
										var button_3 = new cpr.controls.Button("btnDelete");
										button_3.value = "삭제";
										if(typeof onBtnDeleteClick == "function") {
											button_3.addEventListener("click", onBtnDeleteClick);
										}
										container.addChild(button_3, {
											"colIndex": 3,
											"rowIndex": 0
										});
										var button_4 = new cpr.controls.Button("btnSave");
										button_4.value = "저장";
										if(typeof onBtnSaveClick == "function") {
											button_4.addEventListener("click", onBtnSaveClick);
										}
										container.addChild(button_4, {
											"colIndex": 4,
											"rowIndex": 0
										});
									})(group_11);
									container.addChild(group_11, {
										"colIndex": 0,
										"rowIndex": 0
									});
									var group_12 = new cpr.controls.Container("grp6");
									// Layout
									var xYLayout_1 = new cpr.controls.layouts.XYLayout();
									group_12.setLayout(xYLayout_1);
									(function(container){
										var group_13 = new cpr.controls.Container("grpCanvas");
										group_13.style.css({
											"border-right-style" : "solid",
											"border-top-width" : "1px",
											"border-bottom-color" : "black",
											"border-right-width" : "1px",
											"border-left-color" : "black",
											"border-right-color" : "black",
											"border-left-width" : "1px",
											"border-top-style" : "solid",
											"border-radius" : "5px",
											"background-color" : "#ffffff",
											"border-left-style" : "solid",
											"border-bottom-width" : "1px",
											"border-top-color" : "black",
											"border-bottom-style" : "solid",
											"background-image" : "none"
										});
										// Layout
										var xYLayout_2 = new cpr.controls.layouts.XYLayout();
										group_13.setLayout(xYLayout_2);
										(function(container){
										})(group_13);
										container.addChild(group_13, {
											"top": "0px",
											"right": "0px",
											"bottom": "0px",
											"left": "0px"
										});
									})(group_12);
									container.addChild(group_12, {
										"colIndex": 0,
										"rowIndex": 1
									});
									var grid_1 = linker.grid_1 = new cpr.controls.Grid("grd1");
									grid_1.init({
										"dataSet": app.lookup("dsPosition"),
										"columns": [
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"},
											{"width": "100px"}
										],
										"header": {
											"rows": [{"height": "24px"}],
											"cells": [
												{
													"constraint": {"rowIndex": 0, "colIndex": 0},
													"configurator": function(cell){
														cell.targetColumnName = "index";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "index";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 1},
													"configurator": function(cell){
														cell.targetColumnName = "itemName";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "itemName";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 2},
													"configurator": function(cell){
														cell.targetColumnName = "itemType";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "itemType";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 3},
													"configurator": function(cell){
														cell.targetColumnName = "positionX";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "positionX";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 4},
													"configurator": function(cell){
														cell.targetColumnName = "positionY";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "positionY";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 5},
													"configurator": function(cell){
														cell.targetColumnName = "width";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "width";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 6},
													"configurator": function(cell){
														cell.targetColumnName = "height";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "height";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 7},
													"configurator": function(cell){
														cell.targetColumnName = "textAlign";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "textAlign";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 8},
													"configurator": function(cell){
														cell.targetColumnName = "verticalAlign";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "vertical-align";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 9},
													"configurator": function(cell){
														cell.targetColumnName = "barcode";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "barcode";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 10},
													"configurator": function(cell){
														cell.targetColumnName = "fontFamily";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "fontFamily";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 11},
													"configurator": function(cell){
														cell.targetColumnName = "fontSize";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "fontSize";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 12},
													"configurator": function(cell){
														cell.targetColumnName = "fontType";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "fontType";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 13},
													"configurator": function(cell){
														cell.targetColumnName = "whiteSpace";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "whiteSpace";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 14},
													"configurator": function(cell){
														cell.targetColumnName = "writeMode";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "writeMode";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 15},
													"configurator": function(cell){
														cell.targetColumnName = "fontZoom";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "fontZoom";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 16},
													"configurator": function(cell){
														cell.targetColumnName = "lineSpacing";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "lineSpacing";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 17},
													"configurator": function(cell){
														cell.targetColumnName = "textSpacing";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "textSpacing";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 18},
													"configurator": function(cell){
														cell.targetColumnName = "itemString";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "itemString";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 19},
													"configurator": function(cell){
														cell.targetColumnName = "isDraggable";
														cell.filterable = false;
														cell.sortable = false;
														cell.text = "isDraggable";
													}
												}
											]
										},
										"detail": {
											"rows": [{"height": "24px"}],
											"cells": [
												{
													"constraint": {"rowIndex": 0, "colIndex": 0},
													"configurator": function(cell){
														cell.columnName = "index";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 1},
													"configurator": function(cell){
														cell.columnName = "itemName";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 2},
													"configurator": function(cell){
														cell.columnName = "itemType";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 3},
													"configurator": function(cell){
														cell.columnName = "positionX";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 4},
													"configurator": function(cell){
														cell.columnName = "positionY";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 5},
													"configurator": function(cell){
														cell.columnName = "width";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 6},
													"configurator": function(cell){
														cell.columnName = "height";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 7},
													"configurator": function(cell){
														cell.columnName = "textAlign";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 8},
													"configurator": function(cell){
														cell.columnName = "verticalAlign";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 9},
													"configurator": function(cell){
														cell.columnName = "barcode";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 10},
													"configurator": function(cell){
														cell.columnName = "fontFamily";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 11},
													"configurator": function(cell){
														cell.columnName = "fontSize";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 12},
													"configurator": function(cell){
														cell.columnName = "fontType";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 13},
													"configurator": function(cell){
														cell.columnName = "whiteSpace";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 14},
													"configurator": function(cell){
														cell.columnName = "writeMode";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 15},
													"configurator": function(cell){
														cell.columnName = "fontZoom";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 16},
													"configurator": function(cell){
														cell.columnName = "lineSpacing";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 17},
													"configurator": function(cell){
														cell.columnName = "textSpacing";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 18},
													"configurator": function(cell){
														cell.columnName = "itemString";
													}
												},
												{
													"constraint": {"rowIndex": 0, "colIndex": 19},
													"configurator": function(cell){
														cell.columnName = "isDraggable";
													}
												}
											]
										}
									});
									container.addChild(grid_1, {
										"colIndex": 0,
										"rowIndex": 2
									});
								})(group_10);
								container.addChild(group_10, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var group_14 = new cpr.controls.Container("grp8");
								// Layout
								var formLayout_5 = new cpr.controls.layouts.FormLayout();
								formLayout_5.scrollable = true;
								formLayout_5.topMargin = "0px";
								formLayout_5.rightMargin = "0px";
								formLayout_5.bottomMargin = "0px";
								formLayout_5.leftMargin = "0px";
								formLayout_5.horizontalSpacing = "0px";
								formLayout_5.verticalSpacing = "0px";
								formLayout_5.setColumns(["1fr"]);
								formLayout_5.setRows(["280px", "1fr"]);
								group_14.setLayout(formLayout_5);
								(function(container){
									var group_15 = new cpr.controls.Container("grpList");
									group_15.style.setClasses(["form-box"]);
									// Layout
									var formLayout_6 = new cpr.controls.layouts.FormLayout();
									formLayout_6.scrollable = false;
									formLayout_6.topMargin = "5px";
									formLayout_6.rightMargin = "5px";
									formLayout_6.bottomMargin = "5px";
									formLayout_6.leftMargin = "5px";
									formLayout_6.setColumns(["1fr"]);
									formLayout_6.setRows(["25px", "1fr"]);
									group_15.setLayout(formLayout_6);
									(function(container){
										var output_6 = new cpr.controls.Output();
										output_6.value = "항목명";
										output_6.style.css({
											"text-align" : "center"
										});
										container.addChild(output_6, {
											"colIndex": 0,
											"rowIndex": 0
										});
										var listBox_1 = new cpr.controls.ListBox("lbx1");
										listBox_1.draggableItem = true;
										(function(listBox_1){
											listBox_1.setItemSet(app.lookup("dsList"), {
												"label": "itemName",
												"value": "value"
											})
										})(listBox_1);
										container.addChild(listBox_1, {
											"colIndex": 0,
											"rowIndex": 1
										});
									})(group_15);
									container.addChild(group_15, {
										"colIndex": 0,
										"rowIndex": 0
									});
									var group_16 = new cpr.controls.Container("grp10");
									// Layout
									var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
									group_16.setLayout(verticalLayout_9);
									(function(container){
										var group_17 = linker.group_17 = new cpr.controls.Container("grpInfo");
										group_17.style.setClasses(["form-box"]);
										// Layout
										var formLayout_7 = new cpr.controls.layouts.FormLayout();
										formLayout_7.scrollable = false;
										formLayout_7.topMargin = "5px";
										formLayout_7.rightMargin = "5px";
										formLayout_7.bottomMargin = "5px";
										formLayout_7.leftMargin = "5px";
										formLayout_7.setColumns(["100px", "1fr"]);
										formLayout_7.setRows(["25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px"]);
										group_17.setLayout(formLayout_7);
										(function(container){
											var output_7 = new cpr.controls.Output();
											output_7.value = "항목명";
											output_7.style.css({
												"text-align" : "center"
											});
											container.addChild(output_7, {
												"colIndex": 0,
												"rowIndex": 0
											});
											var output_8 = new cpr.controls.Output();
											output_8.value = "항목유형";
											output_8.style.css({
												"text-align" : "center"
											});
											container.addChild(output_8, {
												"colIndex": 0,
												"rowIndex": 1
											});
											var output_9 = new cpr.controls.Output();
											output_9.value = "상단좌표";
											output_9.style.css({
												"text-align" : "center"
											});
											container.addChild(output_9, {
												"colIndex": 0,
												"rowIndex": 2
											});
											var output_10 = new cpr.controls.Output();
											output_10.value = "좌측좌표";
											output_10.style.css({
												"text-align" : "center"
											});
											container.addChild(output_10, {
												"colIndex": 0,
												"rowIndex": 3
											});
											var output_11 = new cpr.controls.Output();
											output_11.value = "가로길이";
											output_11.style.css({
												"text-align" : "center"
											});
											container.addChild(output_11, {
												"colIndex": 0,
												"rowIndex": 4
											});
											var output_12 = new cpr.controls.Output();
											output_12.value = "세로길이";
											output_12.style.css({
												"text-align" : "center"
											});
											container.addChild(output_12, {
												"colIndex": 0,
												"rowIndex": 5
											});
											var output_13 = new cpr.controls.Output();
											output_13.value = "가로정렬";
											output_13.style.css({
												"text-align" : "center"
											});
											container.addChild(output_13, {
												"colIndex": 0,
												"rowIndex": 6
											});
											var output_14 = new cpr.controls.Output();
											output_14.value = "세로정렬";
											output_14.style.css({
												"text-align" : "center"
											});
											container.addChild(output_14, {
												"colIndex": 0,
												"rowIndex": 7
											});
											var output_15 = new cpr.controls.Output();
											output_15.value = "이미지";
											output_15.style.css({
												"text-align" : "center"
											});
											container.addChild(output_15, {
												"colIndex": 0,
												"rowIndex": 8
											});
											var output_16 = new cpr.controls.Output();
											output_16.value = "글꼴명";
											output_16.style.css({
												"text-align" : "center"
											});
											container.addChild(output_16, {
												"colIndex": 0,
												"rowIndex": 9
											});
											var output_17 = new cpr.controls.Output();
											output_17.value = "글꼴크기";
											output_17.style.css({
												"text-align" : "center"
											});
											container.addChild(output_17, {
												"colIndex": 0,
												"rowIndex": 10
											});
											var output_18 = new cpr.controls.Output();
											output_18.value = "개행여부";
											output_18.style.css({
												"text-align" : "center"
											});
											container.addChild(output_18, {
												"colIndex": 0,
												"rowIndex": 12
											});
											var output_19 = new cpr.controls.Output();
											output_19.value = "쓰기방향";
											output_19.style.css({
												"text-align" : "center"
											});
											container.addChild(output_19, {
												"colIndex": 0,
												"rowIndex": 13
											});
											var output_20 = new cpr.controls.Output();
											output_20.value = "폰트축소";
											output_20.style.css({
												"text-align" : "center"
											});
											container.addChild(output_20, {
												"colIndex": 0,
												"rowIndex": 14
											});
											var output_21 = new cpr.controls.Output();
											output_21.value = "줄간격";
											output_21.style.css({
												"text-align" : "center"
											});
											container.addChild(output_21, {
												"colIndex": 0,
												"rowIndex": 15
											});
											var output_22 = new cpr.controls.Output();
											output_22.value = "글자간격";
											output_22.style.css({
												"text-align" : "center"
											});
											container.addChild(output_22, {
												"colIndex": 0,
												"rowIndex": 16
											});
											var output_23 = new cpr.controls.Output();
											output_23.value = "항목문자열";
											output_23.style.css({
												"text-align" : "center"
											});
											container.addChild(output_23, {
												"colIndex": 0,
												"rowIndex": 17
											});
											var output_24 = new cpr.controls.Output();
											output_24.value = "글꼴형식";
											output_24.style.css({
												"text-align" : "center"
											});
											container.addChild(output_24, {
												"colIndex": 0,
												"rowIndex": 11
											});
											var inputBox_1 = new cpr.controls.InputBox("ipb1");
											inputBox_1.bind("value").toDataColumn("itemName");
											container.addChild(inputBox_1, {
												"colIndex": 1,
												"rowIndex": 0
											});
											var comboBox_1 = new cpr.controls.ComboBox("cmb1");
											comboBox_1.maxVisibleItems = 10;
											comboBox_1.autoSelect = true;
											comboBox_1.bind("value").toDataColumn("itemType");
											(function(comboBox_1){
												comboBox_1.addItem(new cpr.controls.Item("문자열", "string"));
												comboBox_1.addItem(new cpr.controls.Item("이미지", "image"));
											})(comboBox_1);
											if(typeof onCmb1SelectionChange2 == "function") {
												comboBox_1.addEventListener("selection-change", onCmb1SelectionChange2);
											}
											container.addChild(comboBox_1, {
												"colIndex": 1,
												"rowIndex": 1
											});
											var comboBox_2 = new cpr.controls.ComboBox("cmb2");
											comboBox_2.maxVisibleItems = 10;
											comboBox_2.autoSelect = true;
											comboBox_2.bind("value").toDataColumn("textAlign");
											(function(comboBox_2){
												comboBox_2.addItem(new cpr.controls.Item("왼쪽정렬", "left"));
												comboBox_2.addItem(new cpr.controls.Item("가운데정렬", "center"));
												comboBox_2.addItem(new cpr.controls.Item("오른쪽정렬", "right"));
												comboBox_2.addItem(new cpr.controls.Item("양쪽정렬", "justify"));
											})(comboBox_2);
											container.addChild(comboBox_2, {
												"colIndex": 1,
												"rowIndex": 6
											});
											var comboBox_3 = new cpr.controls.ComboBox("cmb3");
											comboBox_3.maxVisibleItems = 10;
											comboBox_3.autoSelect = true;
											comboBox_3.bind("value").toDataColumn("verticalAlign");
											(function(comboBox_3){
												comboBox_3.addItem(new cpr.controls.Item("상단정렬", "top"));
												comboBox_3.addItem(new cpr.controls.Item("중간정렬", "middle"));
												comboBox_3.addItem(new cpr.controls.Item("하단정렬", "bottom"));
											})(comboBox_3);
											container.addChild(comboBox_3, {
												"colIndex": 1,
												"rowIndex": 7
											});
											var comboBox_4 = new cpr.controls.ComboBox("cmb4");
											comboBox_4.maxVisibleItems = 10;
											comboBox_4.autoSelect = true;
											comboBox_4.bind("value").toDataColumn("fontFamily");
											comboBox_4.bind("enabled").toExpression("itemType==\"image\"? false: true");
											(function(comboBox_4){
												comboBox_4.addItem(new cpr.controls.Item("HY울릉도B", "HY울릉도B"));
												comboBox_4.addItem(new cpr.controls.Item("HY울릉도M", "HY울릉도M"));
												comboBox_4.addItem(new cpr.controls.Item("HY울릉도L", "HY울릉도L"));
												comboBox_4.addItem(new cpr.controls.Item("HY견고딕", "HY견고딕"));
											})(comboBox_4);
											container.addChild(comboBox_4, {
												"colIndex": 1,
												"rowIndex": 9
											});
											var comboBox_5 = new cpr.controls.ComboBox("cmb5");
											comboBox_5.maxVisibleItems = 10;
											comboBox_5.autoSelect = true;
											comboBox_5.bind("value").toDataColumn("fontType");
											comboBox_5.bind("enabled").toExpression("itemType==\"image\"? false: true");
											(function(comboBox_5){
												comboBox_5.addItem(new cpr.controls.Item("일반", "normal"));
												comboBox_5.addItem(new cpr.controls.Item("굵게", "bold"));
												comboBox_5.addItem(new cpr.controls.Item("기울임", "italic"));
												comboBox_5.addItem(new cpr.controls.Item("밑줄", "underline"));
											})(comboBox_5);
											container.addChild(comboBox_5, {
												"colIndex": 1,
												"rowIndex": 11
											});
											var comboBox_6 = new cpr.controls.ComboBox("cmb6");
											comboBox_6.enabled = false;
											comboBox_6.maxVisibleItems = 10;
											comboBox_6.autoSelect = true;
											comboBox_6.bind("value").toDataColumn("whiteSpace");
											(function(comboBox_6){
												comboBox_6.addItem(new cpr.controls.Item("사용", "true"));
												comboBox_6.addItem(new cpr.controls.Item("미사용", "false"));
											})(comboBox_6);
											container.addChild(comboBox_6, {
												"colIndex": 1,
												"rowIndex": 12
											});
											var comboBox_7 = new cpr.controls.ComboBox("cmb7");
											comboBox_7.maxVisibleItems = 10;
											comboBox_7.autoSelect = true;
											comboBox_7.bind("value").toDataColumn("writeMode");
											(function(comboBox_7){
											})(comboBox_7);
											container.addChild(comboBox_7, {
												"colIndex": 1,
												"rowIndex": 13
											});
											var comboBox_8 = new cpr.controls.ComboBox("cmb8");
											comboBox_8.enabled = false;
											comboBox_8.maxVisibleItems = 10;
											comboBox_8.autoSelect = true;
											comboBox_8.bind("value").toDataColumn("fontZoom");
											(function(comboBox_8){
												comboBox_8.addItem(new cpr.controls.Item("사용", "true"));
												comboBox_8.addItem(new cpr.controls.Item("미사용", "false"));
											})(comboBox_8);
											container.addChild(comboBox_8, {
												"colIndex": 1,
												"rowIndex": 14
											});
											var comboBox_9 = new cpr.controls.ComboBox("cmb9");
											comboBox_9.maxVisibleItems = 10;
											comboBox_9.autoSelect = true;
											comboBox_9.bind("value").toDataColumn("barcode");
											comboBox_9.bind("enabled").toExpression("itemType==\"image\"? true: false");
											(function(comboBox_9){
												comboBox_9.addItem(new cpr.controls.Item("label1", "value1"));
											})(comboBox_9);
											container.addChild(comboBox_9, {
												"colIndex": 1,
												"rowIndex": 8
											});
											var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
											numberEditor_1.spinButton = false;
											numberEditor_1.autoSelect = true;
											numberEditor_1.bind("value").toDataColumn("positionY");
											container.addChild(numberEditor_1, {
												"colIndex": 1,
												"rowIndex": 2
											});
											var numberEditor_2 = new cpr.controls.NumberEditor("nbe2");
											numberEditor_2.spinButton = false;
											numberEditor_2.autoSelect = true;
											numberEditor_2.bind("value").toDataColumn("positionX");
											container.addChild(numberEditor_2, {
												"colIndex": 1,
												"rowIndex": 3
											});
											var numberEditor_3 = new cpr.controls.NumberEditor("nbe3");
											numberEditor_3.spinButton = false;
											numberEditor_3.autoSelect = true;
											numberEditor_3.bind("value").toDataColumn("width");
											container.addChild(numberEditor_3, {
												"colIndex": 1,
												"rowIndex": 4
											});
											var numberEditor_4 = new cpr.controls.NumberEditor("nbe4");
											numberEditor_4.spinButton = false;
											numberEditor_4.autoSelect = true;
											numberEditor_4.bind("value").toDataColumn("height");
											container.addChild(numberEditor_4, {
												"colIndex": 1,
												"rowIndex": 5
											});
											var numberEditor_5 = new cpr.controls.NumberEditor("nbe5");
											numberEditor_5.spinButton = false;
											numberEditor_5.autoSelect = true;
											numberEditor_5.bind("value").toDataColumn("fontSize");
											numberEditor_5.bind("enabled").toExpression("itemType==\"image\"? false: true");
											container.addChild(numberEditor_5, {
												"colIndex": 1,
												"rowIndex": 10
											});
											var numberEditor_6 = new cpr.controls.NumberEditor("nbe6");
											numberEditor_6.spinButton = false;
											numberEditor_6.autoSelect = true;
											numberEditor_6.bind("value").toDataColumn("lineSpacing");
											container.addChild(numberEditor_6, {
												"colIndex": 1,
												"rowIndex": 15
											});
											var numberEditor_7 = new cpr.controls.NumberEditor("nbe7");
											numberEditor_7.spinButton = false;
											numberEditor_7.bind("value").toDataColumn("textSpacing");
											container.addChild(numberEditor_7, {
												"colIndex": 1,
												"rowIndex": 16
											});
											var inputBox_2 = new cpr.controls.InputBox("ipb2");
											inputBox_2.enabled = false;
											inputBox_2.bind("value").toDataColumn("itemString");
											container.addChild(inputBox_2, {
												"colIndex": 1,
												"rowIndex": 17
											});
										})(group_17);
										container.addChild(group_17, {
											"autoSize": "height",
											"width": "300px",
											"height": "358px"
										});
									})(group_16);
									container.addChild(group_16, {
										"colIndex": 0,
										"rowIndex": 1
									});
								})(group_14);
								container.addChild(group_14, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_9);
							container.addChild(group_9, {
								"autoSize": "none",
								"width": "1320px",
								"height": "643px"
							});
						})(group_8);
						container.addChild(group_8, {
							"autoSize": "height",
							"width": "1210px",
							"height": "550px"
						});
					})(group_7);
					container.addChild(group_7, {
						"autoSize": "height",
						"width": "1270px",
						"height": "600px"
					});
				})(group_6);
				container.addChild(group_6, {
					"autoSize": "height",
					"width": "1270px",
					"height": "600px"
				});
				var output_25 = new cpr.controls.Output();
				output_25.value = "주요코드";
				output_25.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
				output_25.style.css({
					"font-weight" : "bold",
					"padding-left" : "1rem",
					"font-size" : "1.75rem"
				});
				container.addChild(output_25, {
					"autoSize": "none",
					"width": "1210px",
					"height": "40px"
				});
				var group_18 = new cpr.controls.Container("grp15");
				// Layout
				var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_10.spacing = 20;
				verticalLayout_10.leftMargin = 30;
				verticalLayout_10.rightMargin = 30;
				verticalLayout_10.topMargin = 0;
				verticalLayout_10.bottomMargin = 0;
				group_18.setLayout(verticalLayout_10);
				(function(container){
					var group_19 = new cpr.controls.Container("grp7");
					// Layout
					var formLayout_8 = new cpr.controls.layouts.FormLayout();
					formLayout_8.scrollable = false;
					formLayout_8.topMargin = "0px";
					formLayout_8.rightMargin = "0px";
					formLayout_8.bottomMargin = "0px";
					formLayout_8.leftMargin = "0px";
					formLayout_8.horizontalSpacing = "5px";
					formLayout_8.verticalSpacing = "5px";
					formLayout_8.setColumns(["1fr"]);
					formLayout_8.setRows(["1fr"]);
					group_19.setLayout(formLayout_8);
					(function(container){
						var group_20 = new cpr.controls.Container("grp9");
						group_20.style.setClasses(["form-box"]);
						// Layout
						var verticalLayout_11 = new cpr.controls.layouts.VerticalLayout();
						group_20.setLayout(verticalLayout_11);
						(function(container){
							var userDefinedControl_3 = new udc.tmp.Ace("ace1");
							if(typeof onAce1AfterLoad == "function") {
								userDefinedControl_3.addEventListener("afterLoad", onAce1AfterLoad);
							}
							container.addChild(userDefinedControl_3, {
								"autoSize": "height",
								"width": "300px",
								"height": "300px"
							});
						})(group_20);
						container.addChild(group_20, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_19);
					container.addChild(group_19, {
						"autoSize": "height",
						"width": "1210px",
						"height": "310px"
					});
				})(group_18);
				container.addChild(group_18, {
					"autoSize": "height",
					"width": "1270px",
					"height": "350px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "1320px",
				"height": "2056px"
			});
			if(typeof onBodyInit2 == "function"){
				app.addEventListener("init", onBodyInit2);
			}
			if(typeof onBodyLoad2 == "function"){
				app.addEventListener("load", onBodyLoad2);
			}
			// Linking
			linker.group_17.setBindContext(new cpr.bind.GridSelectionContext(linker.grid_1));
		}
	});
	app.title = "컨트롤 드래그&드롭";
	cpr.core.Platform.INSTANCE.register(app);
})();
