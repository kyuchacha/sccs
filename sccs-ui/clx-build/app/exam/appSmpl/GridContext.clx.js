/*
 * App URI: app/exam/appSmpl/GridContext
 * Source Location: app/exam/appSmpl/GridContext.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/appSmpl/GridContext", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			* GridContext.js
			 * Created at 2022. 3. 10. 오전 10:39:21.
			 *
			 * @author aaajd
			 ************************************************/
			
			//복사한 row
			var copyRow = null;
				
			/*
			 * 그리드에서 contextmenu 이벤트 발생 시 호출.
			 * 마우스의 오른쪽 버튼이 클릭되거나 컨텍스트 메뉴 키가 눌려지면 호출되는 이벤트.
			 */
			function onGrd1Contextmenu(e){
				/* 동작 실행 */
				gridFloater(e);
			}
			
			function gridFloater(event) {
				/* 기존의 우클릭시 나오던 메뉴 실행하지 않음 */
				event.preventDefault();
				var grd1 = app.lookup("grd1");
				var gridContextMenu = new cpr.controls.Menu("contextMenu");
				
				gridContextMenu.addItem(new cpr.controls.TreeItem("행추가","addRow"));
				gridContextMenu.addItem(new cpr.controls.TreeItem("행삭제","removeRow"));
				gridContextMenu.addItem(new cpr.controls.TreeItem("행복사","copyRow"));
				gridContextMenu.addItem(new cpr.controls.TreeItem("행잘라내기","cutRow"));
				gridContextMenu.addItem(new cpr.controls.TreeItem("행붙여넣기","pasteRow"));
				gridContextMenu.addItem(new cpr.controls.TreeItem("필터/필터취소","filter"));
				gridContextMenu.addItem(new cpr.controls.TreeItem("스플릿/스플릿취소","split"));
				gridContextMenu.addItem(new cpr.controls.TreeItem("정렬/정렬취소","sort"));
				
				//컨텍스트 메뉴의 위치를 지정
				var voAppRect = app.getActualRect();
				
				//마우스 좌표 - 실제 앱이 그려진 크기 빼주어야 정확한 로케이션을 잡을 수 있다.
				gridContextMenu.style.css({
						position: "absolute",
						top: "" + (event.clientY - voAppRect.top) + "px",
						left: "" + (event.clientX - voAppRect.left) + "px",
						width: "200px"		
				});
				
				//컨텍스트 메뉴 플로팅
				app.floatControl(gridContextMenu);
				gridContextMenu.focus();
				
				gridContextMenu.addEventListener("blur", function(e){
					gridContextMenu.dispose();		
				});
				
				//추가 삭제 이벤트 추가
				var menuItem = gridContextMenu.getChildren();
				gridContextMenu.addEventListener("item-click", function(e){
						//클릭한 아이템 value에 따라 동작
						if(e.item.value == "addRow"){
							//컨텍스트 아이템 추가 로직
							app.openDialog("app/exam/appSmpl/popup/GridContextDialog", {
								width : 250, 
								height : 200,
			//					modal : false,
								headerVisible : false,
								resizable : false
							}, function(dialog){dialog.ready(function(dialogApp){
									// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
									dialog.style.css("top",(event.clientY - voAppRect.top)+"px");
									dialog.style.css("left",(event.clientX - voAppRect.left)+"px");
									//모달을 false로 주지 말고, background-color에 transparent를 해야 overlay-click이 정상 동작한다.
									dialog.style.overlay.css("background-color","transparent");
									dialog.addEventListener("overlay-click", function(e){
											dialog.close();
										});						
								});
			
							}).then(function(returnValue){
								;
							});
						} else if (e.item.value == 'removeRow'){
							//그리드에서 컨텍스트 아이템 삭제
							grd1.deleteRow(grd1.getSelectedIndices()[0]);
							//comtitle안의 숫자 업데이트
							var counts = app.lookup("grd1").rowCount;
							app.lookup("comtitle1").rowCount = counts;
							
							gridContextMenu.dispose();
						} else if (e.item.value == 'copyRow'){ 
							//그리드에서 로우 복사
							copyRow = grd1.getRow(grd1.getSelectedRowIndices()[0]);
							
							gridContextMenu.dispose();
						} else if (e.item.value == 'cutRow'){
							//그리드에서 로우 잘라내기 
							copyRow = grd1.getRow(grd1.getSelectedRowIndices()[0]);
							grd1.deleteRow(grd1.getSelectedIndices()[0]);
							//comtitle안의 숫자 업데이트
							var counts = app.lookup("grd1").rowCount;
							app.lookup("comtitle1").rowCount = counts;
							
							gridContextMenu.dispose();
						} else if (e.item.value == 'pasteRow'){ 
							//그리드에 로우 붙여넣기
							if (copyRow != null) {
								grd1.insertRowData(grd1.getSelectedIndices()[0], true, copyRow.getRowData());					
							}
							//comtitle안의 숫자 업데이트
							var counts = app.lookup("grd1").rowCount;
							app.lookup("comtitle1").rowCount = counts;
							
							gridContextMenu.dispose();
						} else if (e.item.value == 'filter'){
							//그리드에 필터걸기 
							for (var i = 0; i < grd1.columnCount; i ++) {
								grd1.header.getColumn(i).filterable = !grd1.header.getColumn(i).filterable;
							}
							gridContextMenu.dispose();
						} else if (e.item.value == 'split'){
							//그리드 split하기 
							if (grd1.topSplit == 0) {
								grd1.topSplit = grd1.getSelectedRowIndices()[0];
								grd1.topSplitHeight = grd1.getSelectedRowIndices()[0] * 24;					
							} else {
								grd1.topSplit = 0;
							}
							gridContextMenu.dispose();
						} else if (e.item.value == 'sort'){
							//그리드 정렬하기 
							for (var i = 0; i < grd1.columnCount; i ++) {
								grd1.header.getColumn(i).sortable = !grd1.header.getColumn(i).sortable;
							}
							gridContextMenu.dispose();
						}
				});
			}
			
			/*
			 * 사용자 정의 컨트롤에서 afterLoad 이벤트 발생 시 호출.
			 */
			function onAce1AfterLoad(e){
				/* 에디터에 소스 표시 */
				var vcAceEditor = app.lookup("ace1");
				vcAceEditor.value = gridFloater;
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				var grd1 = app.lookup('grd1');
				for (var i = 0; i < grd1.columnCount; i ++) {
					grd1.header.getColumn(i).sortable = false;
				}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "File", "value": "File", "parent": "root"},
					{"label": "Edit", "value": "Edit", "parent": "root"},
					{"label": "Navigate", "value": "Navigate", "parent": "root"},
					{"label": "Search", "value": "Search", "parent": "root"},
					{"label": "Project", "value": "Project", "parent": "root"},
					{"label": "Run", "value": "Run", "parent": "root"},
					{"label": "Window", "value": "Window", "parent": "root"},
					{"label": "Help", "value": "Help", "parent": "root"},
					{"label": "New Window", "value": "Window1", "parent": "Window"},
					{"label": "Editor", "value": "Window2", "parent": "Window"},
					{"label": "Hide Toolbar", "value": "Window3", "parent": "Window"},
					{"label": "Show View", "value": "Window4", "parent": "Window"},
					{"label": "Perspective", "value": "Window5", "parent": "Window"},
					{"label": "Navigation", "value": "Window6", "parent": "Window"},
					{"label": "Preferences", "value": "Window7", "parent": "Window"},
					{"label": "Toggle Split Editor", "value": "Editor1", "parent": "Window2"},
					{"label": "Toggle Split Editor", "value": "Editor2", "parent": "Window2"},
					{"label": "Clone", "value": "Editor3", "parent": "Window2"},
					{"label": "Other...", "value": "ShowView1", "parent": "Window4"},
					{"label": "Open Perspective", "value": "Perspective1", "parent": "Window5"},
					{"label": "Customize Perspective", "value": "Perspective2", "parent": "Window5"},
					{"label": "Save Perspective As", "value": "Perspective3", "parent": "Window5"},
					{"label": "Reset Perspective", "value": "Perspective4", "parent": "Window5"},
					{"label": "Close Perspective", "value": "Perspective5", "parent": "Window5"},
					{"label": "Close All Perspectives", "value": "Perspective6", "parent": "Window5"},
					{"label": "Other...", "value": "OpenPerspective1", "parent": "Perspective1"},
					{"label": "Show System Menu", "value": "Navigation1", "parent": "Window6"},
					{"label": "Show View Menu", "value": "Navigation2", "parent": "Window6"},
					{"label": "Quick Access", "value": "Navigation3", "parent": "Window6"},
					{"label": "Maximize Active View or Editor", "value": "Navigation4", "parent": "Window6"},
					{"label": "Minimize Active View or Editor", "value": "Navigation5", "parent": "Window6"},
					{"label": "Activate Editor", "value": "Navigation6", "parent": "Window6"},
					{"label": "Next Editor", "value": "Navigation7", "parent": "Window6"},
					{"label": "Previous Editor", "value": "Navigation8", "parent": "Window6"},
					{"label": "Switch to Editor", "value": "Navigation9", "parent": "Window6"},
					{"label": "Next View", "value": "Navigation10", "parent": "Window6"},
					{"label": "Previous View", "value": "Navigation11", "parent": "Window6"},
					{"label": "Next Perspective", "value": "Navigation12", "parent": "Window6"},
					{"label": "Previous Perspective", "value": "Navigation13", "parent": "Window6"},
					{"label": "New File", "value": "File1", "parent": "File"},
					{"label": "New Project", "value": "File2", "parent": "File"},
					{"label": "Save", "value": "File3", "parent": "File"},
					{"label": "Import", "value": "File4", "parent": "File"},
					{"label": "Undo", "value": "Edit1", "parent": "Edit"},
					{"label": "Redo", "value": "Edit2", "parent": "Edit"},
					{"label": "Copy", "value": "Edit3", "parent": "Edit"},
					{"label": "Cut", "value": "Edit4", "parent": "Edit"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "1320px",
				"height": "30px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 30;
			verticalLayout_3.topMargin = 30;
			verticalLayout_3.bottomMargin = 30;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container("grp1");
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 30;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grp3");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.rightMargin = "50px";
					formLayout_1.horizontalSpacing = "5px";
					formLayout_1.verticalSpacing = "5px";
					formLayout_1.setColumns(["300px", "100px"]);
					formLayout_1.setColumnAutoSizing(0, true);
					formLayout_1.setColumnAutoSizing(1, true);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "그리드 컨텍스트 메뉴";
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "2.5rem"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1270px",
						"height": "40px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "이 페이지는 그리드에 컨텍스트 메뉴를 통한 아이템 추가, 삭제 등을 구현한 샘플입니다.";
					output_2.style.setClasses(["opt-tmpl"]);
					output_2.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_2, {
						"autoSize": "height",
						"width": "1210px",
						"height": "46px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "1270px",
					"height": "150px"
				});
				var group_5 = new cpr.controls.Container("grp2");
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 30;
				verticalLayout_5.topMargin = 10;
				verticalLayout_5.bottomMargin = 30;
				group_5.setLayout(verticalLayout_5);
				(function(container){
					var output_3 = new cpr.controls.Output();
					output_3.value = "시나리오";
					output_3.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_3.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_3, {
						"width": "100px",
						"height": "40px"
					});
					var output_4 = new cpr.controls.Output("ipbScenario");
					output_4.value = "1. 기능확인 그리드에서 우클릭하여 컨텍스트 메뉴가 정상적으로 뜨는지 확인합니다.\r\n2. 컨텍스트 메뉴 중 '행추가'를 클릭 후 뜨는 다이얼로그에 값을 입력하고 '추가하기' 버튼을 클릭했을 시, 행이 정상적으로 추가되는지 확인합니다.\r\n3. 컨텍스트 메뉴 중 '행삭제'를 클릭 후 해당 행이 정상적으로 삭제되는지 확인합니다.\r\n4. 컨텍스트 메뉴 중 '행복사'를 클릭합니다.\r\n5. 컨텍스트 메뉴 중 '행붙여넣기'를 클릭 후, 복사했던 행이 정상적으로 붙여넣기되는지 확인합니다.\r\n6. 컨텍스트 메뉴 중 '행잘라내기'를 클릭 후, 해당 행이 삭제되는지 확인합니다.\r\n7. 컨텍스트 메뉴 중 '행붙여넣기'를 클릭 후, 잘라내기했던 행이 정상적으로 붙여넣기되는지 확인합니다.\r\n8. 컨텍스트 메뉴 중 '필터'를 클릭하여 헤더에 필터조건이 생기고 사라지는지 확인합니다.\r\n9. 컨텍스트 메뉴 중 '스플릿'를 클릭하여 첫 행부터 해당 행까지 고정되고 고정이 풀리는지 확인합니다.\r\n10. 컨텍스트 메뉴 중 '정렬'를 클릭하여 헤더에 정렬조건이 생기고 사라지는지 확인합니다.";
					output_4.style.setClasses(["opt-tmpl"]);
					output_4.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_4, {
						"autoSize": "height",
						"width": "1210px",
						"height": "251px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1270px",
					"height": "370px"
				});
				var group_6 = new cpr.controls.Container("grpFunction");
				// Layout
				var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
				group_6.setLayout(verticalLayout_6);
				(function(container){
					var group_7 = new cpr.controls.Container("grpFuncFloating");
					group_7.userAttr({"floating-header": "true"});
					// Layout
					var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_7.bottomMargin = 30;
					group_7.setLayout(verticalLayout_7);
					(function(container){
						var output_5 = new cpr.controls.Output();
						output_5.value = "기능확인";
						output_5.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
						output_5.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "1.75rem"
						});
						container.addChild(output_5, {
							"autoSize": "none",
							"width": "1270px",
							"height": "40px"
						});
						var group_8 = new cpr.controls.Container("grp11");
						group_8.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#dedede",
							"border-right-width" : "1px",
							"border-left-color" : "#dedede",
							"border-right-color" : "#dedede",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#F0F0F0",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#dedede",
							"border-bottom-style" : "solid"
						});
						// Layout
						var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_8.leftMargin = 30;
						verticalLayout_8.rightMargin = 30;
						verticalLayout_8.topMargin = 5;
						verticalLayout_8.bottomMargin = 10;
						group_8.setLayout(verticalLayout_8);
						(function(container){
							var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comTitle("comtitle1");
							userDefinedControl_2.title = "그리드";
							userDefinedControl_2.showExpandBtn = false;
							container.addChild(userDefinedControl_2, {
								"autoSize": "none",
								"width": "803px",
								"height": "25px"
							});
							var grid_1 = linker.grid_1 = new cpr.controls.Grid("grd1");
							grid_1.fieldLabel = "그리드";
							grid_1.init({
								"dataSet": app.lookup("ds1"),
								"showDeletedRow": false,
								"columns": [
									{"width": "100px"},
									{"width": "100px"},
									{"width": "100px"}
								],
								"header": {
									"rows": [{"height": "24px"}],
									"cells": [
										{
											"constraint": {"rowIndex": 0, "colIndex": 0},
											"configurator": function(cell){
												cell.targetColumnName = "label";
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "label";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 1},
											"configurator": function(cell){
												cell.targetColumnName = "value";
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "value";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 2},
											"configurator": function(cell){
												cell.targetColumnName = "parent";
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "parent";
											}
										}
									]
								},
								"detail": {
									"rows": [{"height": "24px"}],
									"cells": [
										{
											"constraint": {"rowIndex": 0, "colIndex": 0},
											"configurator": function(cell){
												cell.columnName = "label";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 1},
											"configurator": function(cell){
												cell.columnName = "value";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 2},
											"configurator": function(cell){
												cell.columnName = "parent";
											}
										}
									]
								}
							});
							if(typeof onGrd1Contextmenu == "function") {
								grid_1.addEventListener("contextmenu", onGrd1Contextmenu);
							}
							container.addChild(grid_1, {
								"autoSize": "none",
								"width": "803px",
								"height": "590px"
							});
						})(group_8);
						container.addChild(group_8, {
							"autoSize": "height",
							"width": "1210px",
							"height": "700px"
						});
					})(group_7);
					container.addChild(group_7, {
						"autoSize": "height",
						"width": "1270px",
						"height": "700px"
					});
				})(group_6);
				container.addChild(group_6, {
					"autoSize": "height",
					"width": "1270px",
					"height": "700px"
				});
				var output_6 = new cpr.controls.Output();
				output_6.value = "주요코드";
				output_6.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
				output_6.style.css({
					"font-weight" : "bold",
					"padding-left" : "1rem",
					"font-size" : "1.75rem"
				});
				container.addChild(output_6, {
					"autoSize": "none",
					"width": "1210px",
					"height": "40px"
				});
				var group_9 = new cpr.controls.Container("grp15");
				// Layout
				var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_9.spacing = 20;
				verticalLayout_9.leftMargin = 30;
				verticalLayout_9.rightMargin = 30;
				verticalLayout_9.topMargin = 0;
				verticalLayout_9.bottomMargin = 0;
				group_9.setLayout(verticalLayout_9);
				(function(container){
					var group_10 = new cpr.controls.Container("grp7");
					// Layout
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.scrollable = false;
					formLayout_2.topMargin = "0px";
					formLayout_2.rightMargin = "0px";
					formLayout_2.bottomMargin = "0px";
					formLayout_2.leftMargin = "0px";
					formLayout_2.horizontalSpacing = "5px";
					formLayout_2.verticalSpacing = "5px";
					formLayout_2.setColumns(["1fr"]);
					formLayout_2.setRows(["1fr"]);
					group_10.setLayout(formLayout_2);
					(function(container){
						var group_11 = new cpr.controls.Container("grp9");
						group_11.style.setClasses(["form-box"]);
						// Layout
						var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
						group_11.setLayout(verticalLayout_10);
						(function(container){
							var userDefinedControl_3 = new udc.tmp.Ace("ace1");
							if(typeof onAce1AfterLoad == "function") {
								userDefinedControl_3.addEventListener("afterLoad", onAce1AfterLoad);
							}
							container.addChild(userDefinedControl_3, {
								"autoSize": "height",
								"width": "300px",
								"height": "300px"
							});
						})(group_11);
						container.addChild(group_11, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_10);
					container.addChild(group_10, {
						"autoSize": "height",
						"width": "1210px",
						"height": "310px"
					});
				})(group_9);
				container.addChild(group_9, {
					"autoSize": "height",
					"width": "1270px",
					"height": "350px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "1320px",
				"height": "2056px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.grid_1;
		}
	});
	app.title = "그리드 컨텍스트";
	cpr.core.Platform.INSTANCE.register(app);
})();
