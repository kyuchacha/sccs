/*
 * App URI: app/exam/appSmpl/treeDragAndDrop
 * Source Location: app/exam/appSmpl/treeDragAndDrop.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/appSmpl/treeDragAndDrop", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * TreeDragAndDrop.js
			 * Created at 2022. 1. 24. 오후 3:38:26.
			 *
			 * @author jiyeon
			 ************************************************/
			
			var feedback;
			var dragItem = null;
			var dragControl = null;
			
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit2(/* cpr.events.CEvent */ e){
				setDragSource(app.lookup("tre1"));
				setDragSource(app.lookup("tre2"));
				setDropTarget(app.lookup("tre1"));
				setDropTarget(app.lookup("tre2"));
			}	
			
			//드래그 중인 걸 표시하기 위한 컨트롤 생성
			function createDragSourceFeedback(){
				var feedback = new cpr.controls.Output();
				feedback.style.css({
					"opacity": "0.8",
					"text-align": "center",
					"color": "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move",
				});
				return feedback;
			}
			
			//드래그 소스 설정
			/**
			 * 
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control){
			  
			 	new cpr.controls.DragSource(control, {
					onDragStart : function(context){
						//드래그 시작 아이템
						var targetItem = context.targetItem;
						
						
						//커서 변경, 이동 아웃풋 생성
						if(targetItem && targetItem != undefined) {
							context.cursor = "grabbing";
							dragControl = control;
							dragItem = targetItem;
							feedback = createDragSourceFeedback();
							
					  		control.style.css("opacity"," 0.5");
					  		
					  		//크기, value 지정
					  		context.data = targetItem.label;
					  		var actualRect = control.getActualRect();
					  		feedback.value = context.data;
					  		
					  		//요소의 depth에 따라 색상 지정
					  		if(targetItem.depth == 0){
								feedback.style.css("background", "lightPink");					
							}else if(targetItem.depth == 1){
								feedback.style.css("background", "lightGreen");	
							}else if(targetItem.depth == 2){
								feedback.style.css("background", "orange");	
							}
					  	
					  		//플로트
					  		app.floatControl(feedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(actualRect));
						} else {
							return false;
						}
					  	
					},
					onDragMove : function(context){
					  	context.cursor = "grabbing";
					  	
					  	
					  	//이동 애니메이션
					  	var actualRect = context.source.control.getActualRect();
					  	var newRect = actualRect.getTranslated(context.dragDelta);
					  	var targetItem = context.targetItem;
					  	if(targetItem && targetItem != undefined) {
					  		newRect.height = 40;
							newRect.width = 220;
							newRect.top = context.dragStartLocation.y - (newRect.height / 2) + context.dragDelta.height;
							newRect.left = context.dragStartLocation.x - (newRect.width / 2) + context.dragDelta.width;
							
							//임베디드된 경우 앱이 밀린만큼 위치 조정
							if(app.getActualRect().top > 0) {
								newRect.top = newRect.top - app.getActualRect().top;
							}
							
							if(app.getActualRect().left > 0) {
								newRect.left = newRect.left - app.getActualRect().left;
							}
							
							app.floatControl(feedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(newRect));
					  	} else {
					  		context.cursor = "auto";
					  	}
					  	
					},
					onDragEnd : function(context){
					  	context.cursor = "";
					  	
						if (feedback && feedback.disposed === false) {
								// 드롭 타겟이 존재한다면, 작아지는 애니메이션 표시.
							if (context.target) {
								feedback.style.animateTo({
									"transform": "scale(0, 0)"
								}, 0.1);
								feedback.addEventListenerOnce("transitionend", function(e) {
									feedback.dispose();
									feedback = null;
								});
							}
							// 드롭 타겟 없이 드래그 앤 드랍이 종료되었다면 캔슬 애니메이션 표시. 위치
							else {
								var actualRect = control.getActualRect();
								feedback.style.animateTo({
									"left": actualRect.left + "px",
									"top": actualRect.top + "px",
									"opacity": "0"
								}, 0.3);
								feedback.addEventListenerOnce("transitionend", function(e) {
									feedback.dispose();
									feedback = null;
								});
							}
						}
						control.style.removeStyle("opacity");
					}
				});
			}
			
			
			//드롭 타겟 설정
			/**
			 * @param {cpr.controls.UIControl} control
			 */
			function setDropTarget(control){
				
				/**
				 * @param {String} targetValue
				 */
				function rebindItemStyle(targetValue) {
					control.style.item.bind("background").toExpression('value == "' + targetValue + '" ? "rgba(0, 0, 0, 0.3)" : "none"');
				}
				
				new cpr.controls.DropTarget(control, {
					onDragEnter : function(context){
						//드롭 타겟에 드래그 진입
						
						var item = context.targetItem;
						if (item && item != undefined) {
							control.style.css("background-color", "skyblue");
							rebindItemStyle(item.value);
						}
						control.redraw();
					},
					onDragLeave: function(context) {
						//트리박스를 떠날 때
						control.style.removeStyle("background-color");
						control.style.item.unbind("background");
						control.redraw();
					},
					onDrop : function(context){
						/** @type cpr.controls.Item */
						var item = context.targetItem;
						
						if (feedback && feedback.disposed == false) {
							control.style.removeStyle("background-color");
							control.style.item.unbind("background");
							
							//자기 자신 요소 위에 놓았을 때
							if(item == undefined || dragItem.parentValue == item.value || dragItem.value == item.value){
								control.redraw();
								return;
							}
							
							//부모가 자신의 자식 요소로 이동했을 때
							if(control.hasChild(dragItem)) {
								if(dragItem.value == item.parentValue) {
									control.redraw();
									return;
								}
							}
							
							var dropItem = new cpr.controls.TreeItem(dragItem.label, dragItem.value, dragItem.parentValue);
			
							//부모 요소의 트리 - 트리 간 이동
							if(control != dragControl && dragControl.hasChild(dragItem)){
								var dragChildren = dragControl.getChildren(dragItem);
								
								if(control.hasChild(item)){ //타겟 아이템이 부모 요소일 때
									dropItem.parentValue = item.value;
									dragControl.deleteItem(dragItem);
									control.insertItemAfter(dropItem, item.children[item.children.length - 1]);
									
									//드래그 아이템의 자식 요소 옮기는 작업
									for(var i = 0; i < dragChildren.length; i++) {
										dragControl.deleteItem(dragChildren[i]);
										control.addItem(new cpr.controls.TreeItem(dragChildren[i].label, dragChildren[i].value, dragChildren[i].parentValue));
									}
								}else if(item.parentValue != ""){ //타겟 요소가 자식 요소일 때
									dropItem.parentValue = item.parentValue;
									dragControl.deleteItem(dragItem);
									control.insertItemAfter(dropItem, item);
									
									for(var i = 0; i < dragChildren.length; i++) {
										dragControl.deleteItem(dragChildren[i]);
										control.addItem(new cpr.controls.TreeItem(dragChildren[i].label, dragChildren[i].value, dragChildren[i].parentValue));
									}
								}else{
									dropItem.parentValue = ""; //타겟 요소가 부모도 자식도 아닐 때
									dragControl.deleteItem(dragItem);
									control.insertItemAfter(dropItem, item);
									
									for(var i = 0; i < dragChildren.length; i++) {
										dragControl.deleteItem(dragChildren[i]);
										control.addItem(new cpr.controls.TreeItem(dragChildren[i].label, dragChildren[i].value, dragChildren[i].parentValue));
									}
								}
							}else{ //트리 내 이동, 자식 요소의 트리 간 이동
								if(control.hasChild(item)){
									dropItem.parentValue = item.value;
									dragControl.deleteItem(dragItem);
									control.insertItemAfter(dropItem, item.children[item.children.length - 1]);
								} else {
									//하위 요소로 변경
									if(app.lookup("cbx1").value == 'Y') {
										dragControl.deleteItem(dragItem);
										control.addItem(new cpr.controls.TreeItem(dropItem.label, dropItem.value, item.value));
									//요소 간 순서 변경
									} else {
										if(item.parentValue != ""){
											dropItem.parentValue = item.parentValue;
											dragControl.deleteItem(dragItem);
											control.insertItemAfter(dropItem, item);
										}else{
											dropItem.parentValue = "";
											dragControl.deleteItem(dragItem);
											control.insertItemAfter(dropItem, item);
										}	
									}
								}	
							}
						}
						
						dragItem = null;
						dragControl = null;
						control.redraw();
					}, 
					onDragMove: function(context) {
						if (context.targetItem) {
							/** @type cpr.controls.Item */
							var item = context.targetItem;
							rebindItemStyle(item.value);
							control.redraw();
						}
					}
				});
			}
			
			/*
			 * 사용자 정의 컨트롤에서 afterLoad 이벤트 발생 시 호출.
			 */
			function onAce1AfterLoad(e){
				/* 에디터에 소스 표시 */
				var vcAceEditor = app.lookup("ace1");
				vcAceEditor.value = createDragSourceFeedback + setDragSource + setDropTarget;
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "pValue"}
				],
				"rows": [
					{"label": "사과", "value": "apple", "pValue": "pValue1"},
					{"label": "딸기", "value": "strawberry", "pValue": "apple"},
					{"label": "복숭아", "value": "peach", "pValue": "apple"},
					{"label": "포도", "value": "grape", "pValue": "apple"},
					{"label": "망고", "value": "mango", "pValue": "pValue2"},
					{"label": "파인애플", "value": "pineapple", "pValue": "mango"},
					{"label": "자두", "value": "plum", "pValue": "mango"},
					{"label": "체리", "value": "cherry", "pValue": "mango"},
					{"label": "바나나", "value": "banana", "pValue": "mango"},
					{"label": "멜론", "value": "melon", "pValue": ""},
					{"label": "키위", "value": "kiwi", "pValue": ""}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "pValue"}
				],
				"rows": [
					{"label": "토마토", "value": "tomato", "pValue": ""},
					{"label": "배추", "value": "cabbage", "pValue": "tomato"},
					{"label": "시금치", "value": "spinach", "pValue": "tomato"},
					{"label": "상추", "value": "lettuce", "pValue": "tomato"},
					{"label": "깻잎", "value": "sesame", "pValue": "tomato"},
					{"label": "마늘", "value": "garlic", "pValue": ""},
					{"label": "고추", "value": "pepper", "pValue": "garlic"},
					{"label": "올리브", "value": "olive", "pValue": "garlic"},
					{"label": "호박", "value": "pumpkin", "pValue": ""}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "1320px",
				"height": "30px"
			});
			
			var group_2 = linker.group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 30;
			verticalLayout_3.topMargin = 30;
			verticalLayout_3.bottomMargin = 30;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container("grp1");
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 30;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grp3");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.rightMargin = "50px";
					formLayout_1.horizontalSpacing = "5px";
					formLayout_1.verticalSpacing = "5px";
					formLayout_1.setColumns(["300px", "100px"]);
					formLayout_1.setColumnAutoSizing(0, true);
					formLayout_1.setColumnAutoSizing(1, true);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "트리 드래그 앤 드랍";
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "2.5rem"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0,
							"colSpan": 2,
							"rowSpan": 1
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1270px",
						"height": "40px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "이 페이지는 트리 컨트롤 드래그 앤 드랍 동작으로 생성하는 예제입니다.";
					output_2.style.setClasses(["opt-tmpl"]);
					output_2.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_2, {
						"autoSize": "height",
						"width": "1210px",
						"height": "46px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "1270px",
					"height": "150px"
				});
				var group_5 = new cpr.controls.Container("grp2");
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 30;
				verticalLayout_5.topMargin = 10;
				verticalLayout_5.bottomMargin = 30;
				group_5.setLayout(verticalLayout_5);
				(function(container){
					var output_3 = new cpr.controls.Output();
					output_3.value = "시나리오";
					output_3.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_3.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_3, {
						"width": "100px",
						"height": "40px"
					});
					var output_4 = new cpr.controls.Output("ipbScenario");
					output_4.value = "1. 왼쪽 트리에서 오른쪽 트리로 아이템을 드래그 앤 드랍해서 아이템이 정상적으로 동작하는지 확인합니다.\r\n2. 오른쪽 트리에서 왼쪽 트리로 아이템을 드래그 앤 드랍해서 아이템이 정상적으로 동작하는지 확인합니다.\r\n3. 왼쪽에서 왼쪽, 오른쪽에서 오른쪽 트리로 아이템을 드래그 앤 드랍해서 아이템이 정상적으로 동작하는지 확인합니다.";
					output_4.style.setClasses(["opt-tmpl"]);
					output_4.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_4, {
						"autoSize": "height",
						"width": "1210px",
						"height": "107px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1270px",
					"height": "345px"
				});
				var group_6 = new cpr.controls.Container("grpFunction");
				// Layout
				var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
				group_6.setLayout(verticalLayout_6);
				(function(container){
					var group_7 = new cpr.controls.Container("grpFuncFloating");
					group_7.userAttr({"floating-header": "true"});
					// Layout
					var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_7.bottomMargin = 30;
					group_7.setLayout(verticalLayout_7);
					(function(container){
						var output_5 = new cpr.controls.Output();
						output_5.value = "기능확인";
						output_5.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
						output_5.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "1.75rem"
						});
						container.addChild(output_5, {
							"autoSize": "none",
							"width": "1270px",
							"height": "40px"
						});
						var group_8 = new cpr.controls.Container("grp11");
						group_8.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#dedede",
							"border-right-width" : "1px",
							"border-left-color" : "#dedede",
							"border-right-color" : "#dedede",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#F0F0F0",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#dedede",
							"border-bottom-style" : "solid"
						});
						// Layout
						var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_8.leftMargin = 30;
						verticalLayout_8.rightMargin = 30;
						verticalLayout_8.topMargin = 5;
						verticalLayout_8.bottomMargin = 10;
						group_8.setLayout(verticalLayout_8);
						(function(container){
							var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comFormTitle("comformtitle1");
							container.addChild(userDefinedControl_2, {
								"autoSize": "none",
								"width": "1320px",
								"height": "25px"
							});
							var checkBox_1 = new cpr.controls.CheckBox("cbx1");
							checkBox_1.value = "";
							checkBox_1.trueValue = "Y";
							checkBox_1.text = "*가장 하위 요소에 드롭 시, 해당 요소의 하위로 이동";
							container.addChild(checkBox_1, {
								"autoSize": "none",
								"width": "658px",
								"height": "45px"
							});
							var group_9 = new cpr.controls.Container("grp4");
							// Layout
							var xYLayout_1 = new cpr.controls.layouts.XYLayout();
							group_9.setLayout(xYLayout_1);
							(function(container){
								var tree_1 = new cpr.controls.Tree("tre1");
								tree_1.autoOpen = 1;
								(function(tree_1){
									tree_1.setItemSet(app.lookup("ds1"), {
										"label": "label",
										"value": "value",
										"parentValue": "pValue"
									});
								})(tree_1);
								container.addChild(tree_1, {
									"top": "5px",
									"left": "5px",
									"width": "300px",
									"height": "500px"
								});
								var tree_2 = new cpr.controls.Tree("tre2");
								tree_2.autoOpen = 1;
								(function(tree_2){
									tree_2.setItemSet(app.lookup("ds2"), {
										"label": "label",
										"value": "value",
										"parentValue": "pValue"
									});
								})(tree_2);
								container.addChild(tree_2, {
									"top": "5px",
									"left": "415px",
									"width": "300px",
									"height": "500px"
								});
							})(group_9);
							container.addChild(group_9, {
								"autoSize": "none",
								"width": "1320px",
								"height": "535px"
							});
						})(group_8);
						container.addChild(group_8, {
							"autoSize": "height",
							"width": "1210px",
							"height": "700px"
						});
					})(group_7);
					container.addChild(group_7, {
						"autoSize": "height",
						"width": "1270px",
						"height": "700px"
					});
				})(group_6);
				container.addChild(group_6, {
					"autoSize": "height",
					"width": "1270px",
					"height": "700px"
				});
				var output_6 = new cpr.controls.Output();
				output_6.value = "주요코드";
				output_6.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
				output_6.style.css({
					"font-weight" : "bold",
					"padding-left" : "1rem",
					"font-size" : "1.75rem"
				});
				container.addChild(output_6, {
					"autoSize": "none",
					"width": "1210px",
					"height": "40px"
				});
				var group_10 = new cpr.controls.Container("grp15");
				// Layout
				var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_9.spacing = 20;
				verticalLayout_9.leftMargin = 30;
				verticalLayout_9.rightMargin = 30;
				verticalLayout_9.topMargin = 0;
				verticalLayout_9.bottomMargin = 0;
				group_10.setLayout(verticalLayout_9);
				(function(container){
					var group_11 = new cpr.controls.Container("grp7");
					// Layout
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.scrollable = false;
					formLayout_2.topMargin = "0px";
					formLayout_2.rightMargin = "0px";
					formLayout_2.bottomMargin = "0px";
					formLayout_2.leftMargin = "0px";
					formLayout_2.horizontalSpacing = "5px";
					formLayout_2.verticalSpacing = "5px";
					formLayout_2.setColumns(["1fr"]);
					formLayout_2.setRows(["1fr"]);
					group_11.setLayout(formLayout_2);
					(function(container){
						var group_12 = new cpr.controls.Container("grp9");
						group_12.style.setClasses(["form-box"]);
						// Layout
						var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
						group_12.setLayout(verticalLayout_10);
						(function(container){
							var userDefinedControl_3 = new udc.tmp.Ace("ace1");
							if(typeof onAce1AfterLoad == "function") {
								userDefinedControl_3.addEventListener("afterLoad", onAce1AfterLoad);
							}
							container.addChild(userDefinedControl_3, {
								"autoSize": "height",
								"width": "300px",
								"height": "300px"
							});
						})(group_12);
						container.addChild(group_12, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_11);
					container.addChild(group_11, {
						"autoSize": "height",
						"width": "1210px",
						"height": "310px"
					});
				})(group_10);
				container.addChild(group_10, {
					"autoSize": "height",
					"width": "1270px",
					"height": "350px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "1320px",
				"height": "2056px"
			});
			if(typeof onBodyInit2 == "function"){
				app.addEventListener("init", onBodyInit2);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.group_2;
		}
	});
	app.title = "트리 드래그&드롭";
	cpr.core.Platform.INSTANCE.register(app);
})();
