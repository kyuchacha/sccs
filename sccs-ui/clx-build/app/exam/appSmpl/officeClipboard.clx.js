/*
 * App URI: app/exam/appSmpl/officeClipboard
 * Source Location: app/exam/appSmpl/officeClipboard.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/appSmpl/officeClipboard", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * CopyPaste.js
			 * Created at 2020. 9. 9. 오후 2:46:09.
			 *
			 * @author ryu54
			 ************************************************/
			
			var util = createCommonUtil();
			
			/************************************************
			 * 그리드 -> 오피스 복사/붙여넣기
			 ************************************************/
			
			/**
			 * 
			 * @param {cpr.controls.Grid} grd
			 * @param {"cell" | "row" | "column"} selUnit
			 * @parem {String} data
			 */
			function copyHtml(grd, selUnit, data) {
				var tagArr = null;
				switch(selUnit) {
					case "cell" : {
						tagArr = copyCellHtml(grd, data);
						break;
					}
					case "row" : {
						tagArr = copyRowHtml(grd, data);
					}
					case "column" : {
						tagArr = copyColumnHtml(grd, data);
					}
				}
				
				var clipTag = getClipboardNode();
				var tblTag = clipTag.firstElementChild;
				tblTag.innerHTML = tagArr.join("");
				tagArr = null;
				
				var selection = window.getSelection();
				selection.removeAllRanges();
				
				var isIE = (cpr.core.Platform.INSTANCE.browserInfo.name == "ie");
				if(isIE) {
					var range = document.createRange();
			    	range.selectNode(tblTag);
			    	selection.addRange(range);
				} else {
					selection.selectAllChildren(tblTag);
				}
				
				document.execCommand("copy");
				
				selection.removeAllRanges();
				
				/* 클립보드 태그 삭제 (스크롤 방지) */
				var clipTag = document.getElementById("gridClipboard");
				document.body.removeChild(clipTag);
			}
			
			function getClipboardNode() {
				var clipTag = document.getElementById("gridClipboard");
				if(!clipTag) {
					clipTag = document.createElement("div");
					clipTag.id = "gridClipboard";
					clipTag.style.width = "1px";
					clipTag.style.height = "1px";
					clipTag.style.overflow = "hidden";
					clipTag.style.position = "absolute";
					clipTag.style.left = "-1px";
					clipTag.style.top = "-1px";
					
					var tblTag = document.createElement("table");
					tblTag.style.border = "1px solid black";
					tblTag.style.borderCollapse = "collapse";
					clipTag.appendChild(tblTag);
					
					clipTag = document.body.appendChild(clipTag);
				}
				
				return clipTag;
			}
			
			
			function copyCellHtml(/* cpr.controls.Grid */ grd, data) {
				var htmlText = [];
				
				var rows = data.split("\n");
				for(var i = 0; i < rows.length - 1; i++){
					
					var datas = rows[i].split("\t");
					if(datas.length > 0) {
						htmlText[htmlText.length] = "<tr>";
						for(var j = 0; j < datas.length; j++){
							htmlText[htmlText.length] = "<td style='border-left: 1px solid #000000; "
							 + "border-right: 1px solid #000000; "
							 + "border-bottom: 1px solid #000000; "
							 + "border-top: 1px solid #000000;'>";
							htmlText[htmlText.length] = datas[j];
							htmlText[htmlText.length] = "</td>";
						}
						htmlText[htmlText.length] = "</tr>";
					}
				}
				
				return htmlText;
			}
			
			/**
			 * 행을 복사합니다.
			 * @param {cpr.controls.Grid} grd
			 * @param {String} data
			 */
			function copyRowHtml(grd, data) {
				var htmlText = [];
				var selectDataRowCount = grd.getSelectedRowIndices().length;
				var designRowCount = grd.detail.getRowHeights().length;
				var selectedRowCount = selectDataRowCount * designRowCount;
				
				var rows = data.split("\n");
				for(var i = 0; i < rows.length; i++){
					if(i >= selectedRowCount){
						break;
					}
					
					var datas = rows[i].split("\t");
					if(datas.length > 0) {
						htmlText[htmlText.length] = "<tr>";
						for(var j = 0; j < datas.length; j++){
							htmlText[htmlText.length] = "<td style='border-left: 1px solid #000000; "
							 + "border-right: 1px solid #000000; "
							 + "border-bottom: 1px solid #000000; "
							 + "border-top: 1px solid #000000;'>";
							htmlText[htmlText.length] = datas[j];
							htmlText[htmlText.length] = "</td>";
						}
						htmlText[htmlText.length] = "</tr>";
					}
				}
				
				return htmlText;
			}
			
			/**
			 * 열을 복사합니다.
			 * @param {cpr.controls.Grid} grd
			 * @param {String} data
			 */
			function copyColumnHtml(grd, data) {
				
				var htmlText = [];
				var totalDataRowCount = grd.getRowCount();
				var designRowCount = grd.detail.getRowHeights().length;
				var selectedRowCount = totalDataRowCount * designRowCount;
				
				var rows = data.split("\n");
				for(var i = 0; i < rows.length; i++){
					if(i >= selectedRowCount){
						break;
					}
					
					var datas = rows[i].split("\t");
					if(datas.length > 0) {
						htmlText[htmlText.length] = "<tr>";
						for(var j = 0; j < datas.length; j++){
							htmlText[htmlText.length] = "<td style='border-left: 1px solid #000000; "
							 + "border-right: 1px solid #000000; "
							 + "border-bottom: 1px solid #000000; "
							 + "border-top: 1px solid #000000;'>";
							htmlText[htmlText.length] = datas[j];
							htmlText[htmlText.length] = "</td>";
						}
						htmlText[htmlText.length] = "</tr>";
					}
				}
			
				
				return htmlText;
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				util.SelectCtl.selectItem(app, "cmbCpPst", 0);
				
				util.Submit.send(app, "subList", null, function (pbSuccess) {
					if (pbSuccess){
						util.Control.redraw(app, "grdMst");
					}	
				});
			}
			
			
			/*
			 * 루트 컨테이너에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onBodyKeydown(/* cpr.events.CKeyboardEvent */ e){
				/* 그리드의 셀렉션을 제거 */
				if (e.keyCode == cpr.events.KeyCode.ESC){
					app.lookup("grdMst").clearSelection();
				}
			}
			
			
			/*
			 * 그리드에서 copy 이벤트 발생 시 호출.
			 * Grid의 선택된 요소를 ctrl + c 로 복사했을 때 발생하는 이벤트.
			 */
			function onGrdMstCopy(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdMst = e.control;
			
				var vsCpPstVal = util.Control.getValue(app, "cmbCpPst");
			
				if (vsCpPstVal == "office"){
					var selUnit = grdMst.selectionUnit;
					
					e.preventDefault();
					
					copyHtml(grdMst, selUnit, e.data);
				}
			}
			
			
			/*
			 * 그리드에서 before-paste 이벤트 발생 시 호출.
			 * Grid에서 ctrl + v 로 붙여넣기시 붙여넣기 전에 발생하는 이벤트.
			 */
			function onGrdMstBeforePaste(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdMst = e.control;
				
				var vsCpPstVal = util.Control.getValue(app, "cmbCpPst");
			
				if (vsCpPstVal == "grid"){
					var vaSelectedCells = grdMst.getSelectedCellIndices();
				
					if(vaSelectedCells != null && vaSelectedCells.length == 0) {
						var data = e.data.split("\n");
						var vnCount = data.length - 1;
						
						for(var idx = 0; idx < vnCount; idx++){
							grdMst.insertRow(0);
						}
						grdMst.redraw();
					}
				}
			}
			
			
			/*
			 * "초기화" 버튼(btnRvrt)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRvrtClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRvrt = e.control;
				
				app.lookup("dsList").revert();
				
				app.lookup("grdMst").clearSelection();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "EMPL_NO"},
					{"name": "EMPL_NM"},
					{"name": "EMPL_DEPT"},
					{
						"name": "ECNY_DE",
						"dataType": "string"
					},
					{
						"name": "CNWK_STDDE",
						"dataType": "string"
					},
					{
						"name": "CNWK_YYCNT",
						"dataType": "number"
					},
					{
						"name": "REMNDR_YRYC",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "THSYY_YRYC - USE_YRYC + MDAT_YRYC"
					},
					{
						"name": "CNWK_YRYC",
						"dataType": "number"
					},
					{
						"name": "CYFD_YRYC",
						"dataType": "number"
					},
					{
						"name": "BSIS_MDAT_YRYC",
						"dataType": "number"
					},
					{
						"name": "THSYY_YRYC",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "CNWK_YRYC + CYFD_YRYC + BSIS_MDAT_YRYC"
					},
					{
						"name": "USE_YRYC",
						"dataType": "number"
					},
					{
						"name": "MDAT_YRYC",
						"dataType": "number"
					},
					{"name": "EXCESS_POSBL_AT"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("subList");
			submission_1.action = "app/exam/data/temp/copyPaste.json";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["card", "card-bordered"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "데이터 복사/붙여넣기";
				output_1.style.setClasses(["card-title"]);
				container.addChild(output_1, {
					"top": "20px",
					"right": "20px",
					"left": "20px",
					"height": "25px"
				});
				var group_2 = new cpr.controls.Container();
				group_2.style.setClasses(["search-box"]);
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.topMargin = "12px";
				formLayout_1.rightMargin = "20px";
				formLayout_1.bottomMargin = "12px";
				formLayout_1.leftMargin = "20px";
				formLayout_1.horizontalSpacing = "5px";
				formLayout_1.verticalSpacing = "5px";
				formLayout_1.setColumns(["120px", "1fr", "120px"]);
				formLayout_1.setRows(["32px"]);
				group_2.setLayout(formLayout_1);
				(function(container){
					var button_1 = new cpr.controls.Button("btnRvrt");
					button_1.value = "그리드 초기화";
					button_1.icon = "theme/images/controls/button/btn_ico_cancel_w.png";
					button_1.style.setClasses(["btn-dark", "btn-icon", "s-18"]);
					if(typeof onBtnRvrtClick == "function") {
						button_1.addEventListener("click", onBtnRvrtClick);
					}
					container.addChild(button_1, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "복사/붙여넣기 대상";
					output_2.style.setClasses(["label"]);
					container.addChild(output_2, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var comboBox_1 = new cpr.controls.ComboBox("cmbCpPst");
					(function(comboBox_1){
						comboBox_1.addItem(new cpr.controls.Item("그리드", "grid"));
						comboBox_1.addItem(new cpr.controls.Item("오피스", "office"));
					})(comboBox_1);
					container.addChild(comboBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"horizontalAlign": "left",
						"width": 100
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "50px",
					"right": "20px",
					"left": "20px",
					"height": "58px"
				});
				var grid_1 = new cpr.controls.Grid("grdMst");
				grid_1.init({
					"dataSet": app.lookup("dsList"),
					"columnMovable": true,
					"selectionUnit": "cell",
					"selectionMulti": "multi",
					"autoFit": "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13",
					"resizableColumns": "all",
					"columns": [
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "120px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "120px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "50px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.targetColumnName = "EMPL_NO";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "사원번호";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.targetColumnName = "EMPL_NM";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "성명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.targetColumnName = "EMPL_DEPT";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "부서";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.targetColumnName = "ECNY_DE";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "입사일자";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.targetColumnName = "CNWK_STDDE";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "근속기준일";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.targetColumnName = "CNWK_YYCNT";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "근속년수";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.targetColumnName = "REMNDR_YRYC";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "잔여연차(D-E+F)";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.targetColumnName = "CNWK_YRYC";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "근속연차(A)";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.targetColumnName = "CYFD_YRYC";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "이월연차(B)";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.targetColumnName = "BSIS_MDAT_YRYC";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "기초조정연차(C)";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.targetColumnName = "THSYY_YRYC";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "당년연차\r\n(A+B+C)=(D)";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.targetColumnName = "USE_YRYC";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "사용연차(E)";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.targetColumnName = "MDAT_YRYC";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "조정연차(F)";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.targetColumnName = "EXCESS_POSBL_AT";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "초과가능여부";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "38px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "EMPL_NO";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("ipb1");
										inputBox_1.bind("value").toDataColumn("EMPL_NO");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "EMPL_NM";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("ipb2");
										inputBox_2.bind("value").toDataColumn("EMPL_NM");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "EMPL_DEPT";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("ipb3");
										inputBox_3.bind("value").toDataColumn("EMPL_DEPT");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "ECNY_DE";
									cell.control = (function(){
										var dateInput_1 = new cpr.controls.DateInput("dti1");
										dateInput_1.bind("value").toDataColumn("ECNY_DE");
										return dateInput_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "CNWK_STDDE";
									cell.control = (function(){
										var dateInput_2 = new cpr.controls.DateInput("dti2");
										dateInput_2.bind("value").toDataColumn("CNWK_STDDE");
										return dateInput_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "CNWK_YYCNT";
									cell.control = (function(){
										var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
										numberEditor_1.format = "s#,##0.0";
										numberEditor_1.bind("value").toDataColumn("CNWK_YYCNT");
										return numberEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "REMNDR_YRYC";
									cell.control = (function(){
										var output_3 = new cpr.controls.Output();
										output_3.value = "Output";
										output_3.dataType = "number";
										output_3.format = "s#,##0.0";
										output_3.style.css({
											"background-color" : "#ff9",
											"text-align" : "right"
										});
										output_3.bind("value").toDataColumn("REMNDR_YRYC");
										return output_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "CNWK_YRYC";
									cell.control = (function(){
										var numberEditor_2 = new cpr.controls.NumberEditor("nbe3");
										numberEditor_2.format = "s#,##0.0";
										numberEditor_2.bind("value").toDataColumn("CNWK_YRYC");
										return numberEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "CYFD_YRYC";
									cell.control = (function(){
										var numberEditor_3 = new cpr.controls.NumberEditor("nbe4");
										numberEditor_3.format = "s#,##0.0";
										numberEditor_3.bind("value").toDataColumn("CYFD_YRYC");
										return numberEditor_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "BSIS_MDAT_YRYC";
									cell.control = (function(){
										var numberEditor_4 = new cpr.controls.NumberEditor("nbe5");
										numberEditor_4.format = "s#,##0.0";
										numberEditor_4.bind("value").toDataColumn("BSIS_MDAT_YRYC");
										return numberEditor_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "THSYY_YRYC";
									cell.control = (function(){
										var output_4 = new cpr.controls.Output();
										output_4.value = "Output";
										output_4.dataType = "number";
										output_4.format = "s#,##0.0";
										output_4.style.setClasses(["text-right"]);
										output_4.bind("value").toDataColumn("THSYY_YRYC");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "USE_YRYC";
									cell.control = (function(){
										var numberEditor_5 = new cpr.controls.NumberEditor("nbe7");
										numberEditor_5.format = "s#,##0.0";
										numberEditor_5.bind("value").toDataColumn("USE_YRYC");
										return numberEditor_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "MDAT_YRYC";
									cell.control = (function(){
										var numberEditor_6 = new cpr.controls.NumberEditor("nbe2");
										numberEditor_6.format = "s#,##0.0";
										numberEditor_6.bind("value").toDataColumn("MDAT_YRYC");
										return numberEditor_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "EXCESS_POSBL_AT";
									cell.control = (function(){
										var output_5 = new cpr.controls.Output();
										output_5.style.setClasses(["text-center"]);
										output_5.bind("value").toExpression("EXCESS_POSBL_AT == \"Y\" ? \"가능\" : \"불가\"");
										return output_5;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrdMstBeforePaste == "function") {
					grid_1.addEventListener("before-paste", onGrdMstBeforePaste);
				}
				if(typeof onGrdMstCopy == "function") {
					grid_1.addEventListener("copy", onGrdMstCopy);
				}
				container.addChild(grid_1, {
					"top": "113px",
					"right": "20px",
					"bottom": "20px",
					"left": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "53px",
				"right": "20px",
				"bottom": "20px",
				"left": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyKeydown == "function"){
				app.getContainer().addEventListener("keydown", onBodyKeydown);
			}
		}
	});
	app.title = "복사/붙여넣기";
	cpr.core.Platform.INSTANCE.register(app);
})();
