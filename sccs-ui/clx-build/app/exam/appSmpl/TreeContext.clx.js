/*
 * App URI: app/exam/appSmpl/TreeContext
 * Source Location: app/exam/appSmpl/TreeContext.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/appSmpl/TreeContext", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * TreeContext.js
			 * Created at 2022. 1. 25. 오전 10:41:40.
			 *
			 * @author 1amthomas
			 ************************************************/
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad2(e){
				//트리의 아이템을 전부 펼쳐서 보여준다.
				app.lookup("tre1").expandAllItems();
			}
			
			
			/*
			 * 트리에서 contextmenu 이벤트 발생 시 호출.
			 * 마우스의 오른쪽 버튼이 클릭되거나 컨텍스트 메뉴 키가 눌려지면 호출되는 이벤트.
			 */
			function onTre1Contextmenu2(e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var tre1 = e.control;
				//우클릭한 item을 select상태로 변경
				app.lookup("tre1").selectItem(e.targetObject.item);
				/* 동작 실행 */
				treeFloater(e);
			}
			
			/**
				@param {cpr.events.CMouseEvent} event 마우스 이벤트
			*/
			function treeFloater(event){
				/* 기존의 우클릭시 나오던 메뉴 실행하지 않음 */
				event.preventDefault();
				var tre1 = app.lookup("tre1");
				var treeContextMenu = new cpr.controls.Menu("contextMenu");
				
				treeContextMenu.addItem(new cpr.controls.TreeItem("아이템추가","addItem"));
				treeContextMenu.addItem(new cpr.controls.TreeItem("아이템삭제","removeItem"));
				//컨텍스트 메뉴의 위치를 지정
				var voAppRect = app.getActualRect();
				//마우스 좌표 - 실제 앱이 그려진 크기 빼주어야 정확한 로케이션을 잡을 수 있다.
				treeContextMenu.style.css({
						position: "absolute",
						top: "" + (event.clientY - voAppRect.top) + "px",
						left: "" + (event.clientX - voAppRect.left) + "px",
						width: "200px"		
				});
				//컨텍스트 메뉴 플로팅
				app.floatControl(treeContextMenu);
				treeContextMenu.focus();
				
				treeContextMenu.addEventListener("blur", function(e){
					treeContextMenu.dispose();		
				});
				
				//추가 삭제 이벤트 	추가
				var menuItem = treeContextMenu.getChildren();
				treeContextMenu.addEventListener("item-click", function(e){
						//클릭한 아이템 value에 따라 추가,삭제 동작
						if(e.item.value == "addItem"){
							//컨텍스트 아이템 추가 로직
							app.openDialog("app/exam/appSmpl/popup/TreeContextDialog", {
								width : 250, 
								height : 200,
			//					modal : false,
								headerVisible : false,
								resizable : false
							}, function(dialog){dialog.ready(function(dialogApp){
									// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
									dialog.style.css("top",(event.clientY - voAppRect.top)+"px");
									dialog.style.css("left",(event.clientX - voAppRect.left)+"px");
									//모달을 false로 주지 말고, background-color에 transparent를 해야 overlay-click이 정상 동작한다.
									dialog.style.overlay.css("background-color","transparent");
									dialog.addEventListener("overlay-click", function(e){
											dialog.close();
										});						
								});
			
							}).then(function(returnValue){
								;
							});
						}else{
							//트리에서 컨텍스트 아이템 삭제
							tre1.deleteItem(tre1.getSelectedIndices()[0]);
							treeContextMenu.dispose();
							//comtitle안의 숫자 업데이트
			//				var counts = app.lookup("grd1").rowCount;
			//
			//				app.lookup("comtitle1").rowCount = counts;
						}
				});
			}
			
			/*
			 * 사용자 정의 컨트롤에서 afterLoad 이벤트 발생 시 호출.
			 */
			function onAce1AfterLoad(e){
				/* 에디터에 소스 표시 */
				var vcAceEditor = app.lookup("ace1");
				vcAceEditor.value = treeFloater;
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds2");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "L1", "value": "V1", "parent": ""},
					{"label": "L2", "value": "V2", "parent": "V1"},
					{"label": "L3", "value": "V3", "parent": "V1"},
					{"label": "L4", "value": "V4", "parent": "V3"},
					{"label": "L5", "value": "V5", "parent": ""},
					{"label": "L6", "value": "V6", "parent": "V5"},
					{"label": "L7", "value": "V7", "parent": "V5"},
					{"label": "l1", "value": "v1", "parent": "v2"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds1");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "File", "value": "File", "parent": "root"},
					{"label": "Edit", "value": "Edit", "parent": "root"},
					{"label": "Navigate", "value": "Navigate", "parent": "root"},
					{"label": "Search", "value": "Search", "parent": "root"},
					{"label": "Project", "value": "Project", "parent": "root"},
					{"label": "Run", "value": "Run", "parent": "root"},
					{"label": "Window", "value": "Window", "parent": "root"},
					{"label": "Help", "value": "Help", "parent": "root"},
					{"label": "New Window", "value": "Window1", "parent": "Window"},
					{"label": "Editor", "value": "Window2", "parent": "Window"},
					{"label": "Hide Toolbar", "value": "Window3", "parent": "Window"},
					{"label": "Show View", "value": "Window4", "parent": "Window"},
					{"label": "Perspective", "value": "Window5", "parent": "Window"},
					{"label": "Navigation", "value": "Window6", "parent": "Window"},
					{"label": "Preferences", "value": "Window7", "parent": "Window"},
					{"label": "Toggle Split Editor", "value": "Editor1", "parent": "Window2"},
					{"label": "Toggle Split Editor", "value": "Editor2", "parent": "Window2"},
					{"label": "Clone", "value": "Editor3", "parent": "Window2"},
					{"label": "Other...", "value": "ShowView1", "parent": "Window4"},
					{"label": "Open Perspective", "value": "Perspective1", "parent": "Window5"},
					{"label": "Customize Perspective", "value": "Perspective2", "parent": "Window5"},
					{"label": "Save Perspective As", "value": "Perspective3", "parent": "Window5"},
					{"label": "Reset Perspective", "value": "Perspective4", "parent": "Window5"},
					{"label": "Close Perspective", "value": "Perspective5", "parent": "Window5"},
					{"label": "Close All Perspectives", "value": "Perspective6", "parent": "Window5"},
					{"label": "Other...", "value": "OpenPerspective1", "parent": "Perspective1"},
					{"label": "Show System Menu", "value": "Navigation1", "parent": "Window6"},
					{"label": "Show View Menu", "value": "Navigation2", "parent": "Window6"},
					{"label": "Quick Access", "value": "Navigation3", "parent": "Window6"},
					{"label": "Maximize Active View or Editor", "value": "Navigation4", "parent": "Window6"},
					{"label": "Minimize Active View or Editor", "value": "Navigation5", "parent": "Window6"},
					{"label": "Activate Editor", "value": "Navigation6", "parent": "Window6"},
					{"label": "Next Editor", "value": "Navigation7", "parent": "Window6"},
					{"label": "Previous Editor", "value": "Navigation8", "parent": "Window6"},
					{"label": "Switch to Editor", "value": "Navigation9", "parent": "Window6"},
					{"label": "Next View", "value": "Navigation10", "parent": "Window6"},
					{"label": "Previous View", "value": "Navigation11", "parent": "Window6"},
					{"label": "Next Perspective", "value": "Navigation12", "parent": "Window6"},
					{"label": "Previous Perspective", "value": "Navigation13", "parent": "Window6"},
					{"label": "New File", "value": "File1", "parent": "File"},
					{"label": "New Project", "value": "File2", "parent": "File"},
					{"label": "Save", "value": "File3", "parent": "File"},
					{"label": "Import", "value": "File4", "parent": "File"},
					{"label": "Undo", "value": "Edit1", "parent": "Edit"},
					{"label": "Redo", "value": "Edit2", "parent": "Edit"},
					{"label": "Copy", "value": "Edit3", "parent": "Edit"},
					{"label": "Cut", "value": "Edit4", "parent": "Edit"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["opt-tmpl"]);
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "1320px",
				"height": "30px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 30;
			verticalLayout_3.topMargin = 30;
			verticalLayout_3.bottomMargin = 30;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container("grp1");
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 30;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grp3");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.rightMargin = "50px";
					formLayout_1.horizontalSpacing = "5px";
					formLayout_1.verticalSpacing = "5px";
					formLayout_1.setColumns(["300px", "100px"]);
					formLayout_1.setColumnAutoSizing(0, true);
					formLayout_1.setColumnAutoSizing(1, true);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "트리 컨텍스트 메뉴";
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "2.5rem"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0,
							"colSpan": 2,
							"rowSpan": 1
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1270px",
						"height": "40px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "이 페이지는 트리에 컨텍스트 메뉴를 통한 아이템 추가, 삭제를 구현한 샘플입니다.";
					output_2.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_2, {
						"autoSize": "height",
						"width": "1210px",
						"height": "46px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "1270px",
					"height": "150px"
				});
				var group_5 = new cpr.controls.Container("grp2");
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 30;
				verticalLayout_5.topMargin = 10;
				verticalLayout_5.bottomMargin = 30;
				group_5.setLayout(verticalLayout_5);
				(function(container){
					var output_3 = new cpr.controls.Output();
					output_3.value = "시나리오";
					output_3.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_3.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_3, {
						"width": "100px",
						"height": "40px"
					});
					var output_4 = new cpr.controls.Output("ipbScenario");
					output_4.value = "1. 트리에 아이템에서 우클릭하여 컨텍스트 메뉴를 엽니다.\r\n2. 아이템 추가를 클릭합니다.\r\n3. label과 value를 입력하여 아이템을 추가합니다. \r\n4. 트리와 그리드에 해당 아이템이 생성되는지 확인합니다.\r\n5. 트리에 아이템에서 우클릭하여 컨텍스트 메뉴를 엽니다.\r\n6. 아이템 삭제를 클릭합니다.\r\n7. 트리에선 해당 아이템이 보이지않고 그리드에선 삭제처리로 보입니다.";
					output_4.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_4, {
						"autoSize": "height",
						"width": "1210px",
						"height": "176px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1270px",
					"height": "345px"
				});
				var group_6 = new cpr.controls.Container("grpFunction");
				// Layout
				var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
				group_6.setLayout(verticalLayout_6);
				(function(container){
					var group_7 = new cpr.controls.Container("grpFuncFloating");
					group_7.userAttr({"floating-header": "true"});
					// Layout
					var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_7.bottomMargin = 30;
					group_7.setLayout(verticalLayout_7);
					(function(container){
						var output_5 = new cpr.controls.Output();
						output_5.value = "기능확인";
						output_5.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
						output_5.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "1.75rem"
						});
						container.addChild(output_5, {
							"autoSize": "none",
							"width": "1270px",
							"height": "40px"
						});
						var group_8 = new cpr.controls.Container("grp11");
						group_8.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#dedede",
							"border-right-width" : "1px",
							"border-left-color" : "#dedede",
							"border-right-color" : "#dedede",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#F0F0F0",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#dedede",
							"border-bottom-style" : "solid"
						});
						// Layout
						var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
						verticalLayout_8.leftMargin = 30;
						verticalLayout_8.rightMargin = 30;
						verticalLayout_8.topMargin = 5;
						verticalLayout_8.bottomMargin = 10;
						group_8.setLayout(verticalLayout_8);
						(function(container){
							var group_9 = new cpr.controls.Container("grp4");
							// Layout
							var formLayout_2 = new cpr.controls.layouts.FormLayout();
							formLayout_2.scrollable = true;
							formLayout_2.topMargin = "0px";
							formLayout_2.rightMargin = "0px";
							formLayout_2.bottomMargin = "0px";
							formLayout_2.leftMargin = "0px";
							formLayout_2.horizontalSpacing = "5px";
							formLayout_2.verticalSpacing = "5px";
							formLayout_2.setColumns(["400px", "1fr"]);
							formLayout_2.setRows(["1fr"]);
							group_9.setLayout(formLayout_2);
							(function(container){
								var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.com.comFormTitle("comformtitle1");
								container.addChild(userDefinedControl_2, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var userDefinedControl_3 = linker.userDefinedControl_3 = new udc.com.comTitle("comtitle1");
								userDefinedControl_3.title = "그리드";
								userDefinedControl_3.showExpandBtn = false;
								container.addChild(userDefinedControl_3, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_9);
							container.addChild(group_9, {
								"autoSize": "none",
								"width": "1320px",
								"height": "25px"
							});
							var group_10 = new cpr.controls.Container("grp10");
							// Layout
							var formLayout_3 = new cpr.controls.layouts.FormLayout();
							formLayout_3.scrollable = true;
							formLayout_3.topMargin = "0px";
							formLayout_3.rightMargin = "0px";
							formLayout_3.bottomMargin = "0px";
							formLayout_3.leftMargin = "0px";
							formLayout_3.setColumns(["400px", "1fr"]);
							formLayout_3.setRows(["1fr"]);
							group_10.setLayout(formLayout_3);
							(function(container){
								var tree_1 = linker.tree_1 = new cpr.controls.Tree("tre1");
								tree_1.fieldLabel = "트리";
								(function(tree_1){
									tree_1.setItemSet(app.lookup("ds1"), {
										"label": "label",
										"value": "value",
										"parentValue": "parent"
									});
								})(tree_1);
								if(typeof onTre1Contextmenu2 == "function") {
									tree_1.addEventListener("contextmenu", onTre1Contextmenu2);
								}
								container.addChild(tree_1, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var grid_1 = linker.grid_1 = new cpr.controls.Grid("grd1");
								grid_1.fieldLabel = "그리드";
								grid_1.init({
									"dataSet": app.lookup("ds1"),
									"columns": [
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"}
									],
									"header": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.targetColumnName = "label";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "label";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.targetColumnName = "value";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "value";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 2},
												"configurator": function(cell){
													cell.targetColumnName = "parent";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "parent";
												}
											}
										]
									},
									"detail": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.columnName = "label";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.columnName = "value";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 2},
												"configurator": function(cell){
													cell.columnName = "parent";
												}
											}
										]
									}
								});
								container.addChild(grid_1, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_10);
							container.addChild(group_10, {
								"autoSize": "none",
								"width": "1320px",
								"height": "590px"
							});
						})(group_8);
						container.addChild(group_8, {
							"autoSize": "height",
							"width": "1210px",
							"height": "700px"
						});
					})(group_7);
					container.addChild(group_7, {
						"autoSize": "height",
						"width": "1270px",
						"height": "700px"
					});
				})(group_6);
				container.addChild(group_6, {
					"autoSize": "height",
					"width": "1270px",
					"height": "700px"
				});
				var output_6 = new cpr.controls.Output();
				output_6.value = "주요코드";
				output_6.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
				output_6.style.css({
					"font-weight" : "bold",
					"padding-left" : "1rem",
					"font-size" : "1.75rem"
				});
				container.addChild(output_6, {
					"autoSize": "none",
					"width": "1210px",
					"height": "40px"
				});
				var group_11 = new cpr.controls.Container("grp15");
				// Layout
				var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_9.spacing = 20;
				verticalLayout_9.leftMargin = 30;
				verticalLayout_9.rightMargin = 30;
				verticalLayout_9.topMargin = 0;
				verticalLayout_9.bottomMargin = 0;
				group_11.setLayout(verticalLayout_9);
				(function(container){
					var group_12 = new cpr.controls.Container("grp7");
					// Layout
					var formLayout_4 = new cpr.controls.layouts.FormLayout();
					formLayout_4.scrollable = false;
					formLayout_4.topMargin = "0px";
					formLayout_4.rightMargin = "0px";
					formLayout_4.bottomMargin = "0px";
					formLayout_4.leftMargin = "0px";
					formLayout_4.horizontalSpacing = "5px";
					formLayout_4.verticalSpacing = "5px";
					formLayout_4.setColumns(["1fr"]);
					formLayout_4.setRows(["1fr"]);
					group_12.setLayout(formLayout_4);
					(function(container){
						var group_13 = new cpr.controls.Container("grp9");
						group_13.style.setClasses(["form-box"]);
						// Layout
						var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
						group_13.setLayout(verticalLayout_10);
						(function(container){
							var userDefinedControl_4 = new udc.tmp.Ace("ace1");
							if(typeof onAce1AfterLoad == "function") {
								userDefinedControl_4.addEventListener("afterLoad", onAce1AfterLoad);
							}
							container.addChild(userDefinedControl_4, {
								"autoSize": "height",
								"width": "300px",
								"height": "300px"
							});
						})(group_13);
						container.addChild(group_13, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_12);
					container.addChild(group_12, {
						"autoSize": "height",
						"width": "1210px",
						"height": "310px"
					});
				})(group_11);
				container.addChild(group_11, {
					"autoSize": "height",
					"width": "1270px",
					"height": "350px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "1320px",
				"height": "2056px"
			});
			if(typeof onBodyLoad2 == "function"){
				app.addEventListener("load", onBodyLoad2);
			}
			// Linking
			linker.userDefinedControl_2.ctrl = linker.tree_1;
			linker.userDefinedControl_3.ctrl = linker.grid_1;
		}
	});
	app.title = "트리 컨텍스트";
	cpr.core.Platform.INSTANCE.register(app);
})();
