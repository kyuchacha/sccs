/*
 * App URI: app/exam/thirdparty/BarcodeQR
 * Source Location: app/exam/thirdparty/BarcodeQR.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/thirdparty/BarcodeQR", {
		onPrepare: function(loader){
			loader.addScript("thirdparty/JsBarcode/JsBarcode.all.min.js");
			loader.addScript("thirdparty/JsBarcode/qrcode.min.js");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			* BarcordQR2.js
			 * Created at 2022. 3. 8. 오후 4:18:01.
			 *
			 * @author aaajd
			 ************************************************/
			
			// 인쇄 시 저장 변수
			var print;
			var innerBody;
			
			// 추가되는 항목 인덱스
			var index = 0;
			
			// QRCode 저장 변수
			var qrCode;
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				var grpCanvas = app.lookup("grpCanvas");
				grpCanvas.getChildren().forEach(function(each) {
					setDragSource(each);
				});
				setDragSource(app.lookup("lbx1"));
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				
				doSettingItem();
				
				// 인덱스 값 지정
				var vnIndex = app.lookup("dsPosition").getMax("index");
				if(vnIndex != null) index = vnIndex+1;
			}
			
			function createDragSourceFeedback() {
				var feedback = new cpr.controls.Output();
				feedback.userAttr("index", "-1");
				feedback.style.css({
					"opacity": "0.8",
					"text-align": "center",
					"color": "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move"
				});
				
				return feedback;
			}
			
			/**
			 * 
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control) {
				var feedback = null;
				var targetControl = null;
				
				var grpCanvas = app.lookup("grpCanvas");
				var dsList = app.lookup("dsList");
				var dsPosition = app.lookup("dsPosition");
				
				new cpr.controls.DragSource(control, {
					onDragStart: function(context) {
						context.cursor = "grabbing";
						feedback = createDragSourceFeedback();
						
						// 리스트의 아이템을 드래그 한 경우와 이미 그려진 항목을 드래그한 경우 분류
						if (control.type == "listbox") {
							feedback.value = context.targetItem.label;
						} else {
							var vsItemName = control.type=="output"? control["value"]: control.userAttr("itemName");
							var voRow = dsPosition.findFirstRow("itemName =='" + vsItemName + "' && index==" + Number(control.userAttr("index")) + "");
							if (voRow != null && voRow.getValue("isDraggable") == "false") return;
							
							feedback.value = control["value"];
						}
						
						// app.floatControl(feedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(control.getActualRect()));
					},
					onDragMove: function(context) {
						var vsItemName = "";
						if(control.type=="listbox") vsItemName = context.targetItem.label;
						else if(control.type=="output") vsItemName = control["value"];
						else vsItemName = control.userAttr("itemName");
						
						// 리스트박스에서 드래그한 경우가 아닌 경우 데이터셋에서 드래그 가능여부를 받아온다.
						if (control.type != "listbox") {
							var voRow = dsPosition.findFirstRow("itemName=='" + vsItemName + "' && index == " + Number(control.userAttr("index")) + "");
							if (voRow.getValue("isDraggable") == "false") return;
						}
						
						context.cursor = "grabbing";
						var actualRect = context.source.control.getActualRect();
						var newRect = actualRect.getTranslated(context.dragDelta);
						if (control.type == "listbox") {
							newRect.width = 120;
							newRect.height = 30;
							newRect.top = context.dragStartLocation.y - (newRect.height / 2) + context.dragDelta.height;
							newRect.left = context.dragStartLocation.x - (newRect.width / 2) + context.dragDelta.width;
						} else {
							newRect.width = control.getOffsetRect().width;
							newRect.height = control.getOffsetRect().height;
							newRect.top = context.dragStartLocation.y - (newRect.height / 2) + context.dragDelta.height;
							newRect.left = context.dragStartLocation.x - (newRect.width / 2) + context.dragDelta.width;
						}
						
						var voCanvasRct = grpCanvas.getActualRect();
						if (voCanvasRct.top > newRect.top ||
							voCanvasRct.left > newRect.left ||
							voCanvasRct.right < newRect.right ||
							voCanvasRct.bottom < newRect.bottom) {
							// 캔버스 영역 외 드래그 방지
						} else {
							app.getRootAppInstance().floatControl(feedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(newRect));
						}
					},
					onDragEnd: function(context) {
						context.cursor = "";
						// 그룹 영역 위에 있는지 확인
						var isPreventOver = preventOverBoundary(feedback);
						if (!isPreventOver) return;
						
						if (control.type == "listbox") {
							addItem(feedback, true);
							
						} else {
							var vsItemName = control.type=="output"? control["value"]: control.userAttr("itemName");
							var voRow = dsPosition.findFirstRow("itemName =='" + vsItemName + "' && index==" + Number(control.userAttr("index")) + "");
							if (voRow != null) {
								if (voRow.getValue("isDraggable") == "false") return;
								var voGrpRect = grpCanvas.getActualRect();
								grpCanvas.updateConstraint(control, {
									"top": (feedback.getActualRect().top - voGrpRect.top) + "px",
									"left": (feedback.getActualRect().left - voGrpRect.left) + "px",
									"width": control.getActualRect().width + "px",
									"height": control.getActualRect().height + "px"
								});
								
								// 데이터 셋 값 변경
								dsPosition.setValue(voRow.getIndex(), "positionX", (feedback.getActualRect().left - voGrpRect.left));
								dsPosition.setValue(voRow.getIndex(), "positionY", (feedback.getActualRect().top - voGrpRect.top));
								
							} else {
								addItem(feedback, true);
							}
						}
						
						feedback.dispose();
						feedback = null;
					}
				});
			}
			
			/**
			 * 드래그 시 경계를 넘으면 리턴
			 * @param {cpr.controls.Output} feedback
			 */
			function preventOverBoundary(feedback) {
				var grpCanvas = app.lookup("grpCanvas");
				var voActualRect = grpCanvas.getActualRect();
				var voProcessRect = feedback.getActualRect();
			
				if (voActualRect.top > voProcessRect.top ||
					voActualRect.left > voProcessRect.left ||
					voActualRect.right < voProcessRect.right ||
					voActualRect.bottom < voProcessRect.bottom) return false;
				
				return true;
			}
			
			/**
			 * 새 항목 추가
			 * @param {cpr.controls.Output} feedback
			 * @param {Boolean} isStart
			 */
			function addItem(feedback, isStart) {
				var grpCanvas = app.lookup("grpCanvas");
				var dsPosition = app.lookup("dsPosition");
				var voGrpRect = grpCanvas.getActualRect();
				var voActualRect = feedback.getActualRect();
				
				var targetItem;
				var vsItemType;
				if(feedback.value == "상품 바코드") {
					vsItemType = "barcode";
					var vnBarCodeVal = Number(window.prompt("상품 바코드 값을 입력하세요", ""));
					if(vnBarCodeVal == "") return;
					
					targetItem = new cpr.controls.UIControlShell();
					targetItem.userAttr("index", index.toString());
					targetItem.userAttr("itemName", vnBarCodeVal.toString());
					
					// 바코드 생성
					doInitBarcode(targetItem, vnBarCodeVal, index, 200, 150);
					
				} else if(feedback.value == "상품 QR") {
					vsItemType = "qrcode";
					var vsQrCodeVal = window.prompt("상품 QR코드 값을 입력하세요", "");
					if(vsQrCodeVal == "") return;
					
					targetItem = new cpr.controls.UIControlShell();
					targetItem.userAttr("index", index.toString());
					targetItem.userAttr("itemName", vsQrCodeVal);
					
					// qr코드 생성
					doInitQrCode(targetItem, vsQrCodeVal, index, 200, 150);
					
				} else {
					vsItemType = "string";
					targetItem = new cpr.controls.Output();
					targetItem.userAttr("index", index.toString());
					targetItem.value = feedback.value;
					settingDefaultStyle(targetItem);
					
				}
				
				if (isStart) {
					var vsItemName = targetItem.type=="output"? targetItem.value: targetItem.userAttr("itemName");
					// 데이터셋에 타겟 정보 추가
					dsPosition.addRowData({
						index: index,
						itemName: vsItemName,
						itemType: vsItemType,
						positionX: (voActualRect.left - voGrpRect.left),
						positionY: (voActualRect.top - voGrpRect.top),
						width: targetItem.type=="output"? 100: 200,
						height: targetItem.type=="output"? 30: 150,
						fontType: targetItem.style.getCSS("font-weight"),
						textAlign: targetItem.style.getCSS("text-align"),
						verticalAlign: targetItem.style.getCSS("vertical-align"),
						fontFamily: targetItem.style.getCSS("font-family"),
						fontSize: 9,
						whiteSpace: "false",
						fontZoom: "true",
						isDraggable: ""
					});
					
					// 그룹에 타겟 아이템 추가
					grpCanvas.addChild(targetItem, {
						top: (voActualRect.top - voGrpRect.top) + "px",
						left: (voActualRect.left - voGrpRect.left) + "px",
						width: "100px",
						height: "30px"
					});
				}
				setDragSource(targetItem);
				addContextEvent(targetItem);
				addEvent(targetItem);
				
				index++;
			}
			
			/**
			 * 
			 * @param {cpr.controls.UIControlShell} control
			 * @param {Number} vnBarcode
			 * @param {Number} index
			 * @param {Number} vnWidth
			 * @param {Number} vnHeight
			 */
			function doInitBarcode(control, vnBarcode, index, vnWidth, vnHeight) {
			//	control.style.css("border", "1px solid black");
				control.addEventListener("init", function(e){
					var shellDiv = e.content;
					if(shellDiv) e.preventDefault();
				});
				control.addEventListener("load", function(e){
					var shellDiv = e.content;
					// 바코드를 그리기 위한 div 태그 추가
					var elCode = document.createElement("div");
					e.content.appendChild(elCode).id = "barcode" + index;
					
					// 바코드를 표시하기 위한 svg 태그 추가
					var elCodeSvg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
					e.content.appendChild(elCodeSvg).id = "barcodeSvg" + index;
					
					// 바코드 그리기
					JsBarcode("#barcodeSvg" + index, vnBarcode, {format: "code128"});
					
					document.getElementById("barcodeSvg" + index).setAttribute("width", vnWidth + "px");
					document.getElementById("barcodeSvg" + index).setAttribute("height", vnHeight + "px");
				});
			}
			
			/**
			 * 
			 * @param {cpr.controls.UIControlShell} control
			 * @param {String} vsQrCode
			 * @param {Number} index
			 * @param {Number} vnWidth
			 * @param {Number} vnHeight
			 */
			function doInitQrCode(control, vsQrCode, index, vnWidth, vnHeight) {
				control.addEventListener("init", function(e){
					var shellDiv = e.content;
					if(shellDiv) e.preventDefault();
				});
				control.addEventListener("load", function(e){
					var shellDiv = e.content;
					var elQrCode = document.createElement("div");
					elQrCode.style.backgroundColor = "#FFFFFF";
					elQrCode.style.width = (vnWidth+10) + "px";
					elQrCode.style.height = (vnHeight+10) + "px";
					elQrCode.style.padding = "5px";
					
					shellDiv.appendChild(elQrCode).id = "qrcode" + index;
					elQrCode = new QRCode("qrcode" + index, {
						text: vsQrCode
						, width: vnWidth
						, height: vnHeight
					});
				});
			}
			
			/**
			 * 로컬스토리지에 저장된 데이터를 받아와 화면에 그려준다.
			 */
			function doSettingItem(storedItemList) {
				// 로컬스토리지 아이템 셋팅
				if (!localStorage.getItem("dsPosition")) {
					return;
				}
				
				var grpCanvas = app.lookup("grpCanvas");
				var dsPosition = app.lookup("dsPosition");
				var storedItemList = JSON.parse(localStorage.getItem("dsPosition"));
				if (storedItemList.length == 0) return;
				// 스토리지에 저장된 데이터를 화면에 그린다.
				storedItemList.forEach(function(each) {
					dsPosition.pushRowData(each);
					
					var feedback;
					if(each["itemType"]=="barcode") {
						feedback = new cpr.controls.UIControlShell();
						feedback.userAttr("index", each["index"].toString());
						feedback.userAttr("itemName", each["itemName"]);
						doInitBarcode(feedback, Number(each["itemName"]), each["index"], each["width"], each["height"]);
						
					} else if(each["itemType"]=="qrcode") {
						feedback = new cpr.controls.UIControlShell();
						feedback.userAttr("index", each["index"].toString());
						feedback.userAttr("itemName", each["itemName"]);
						doInitQrCode(feedback, Number(each["itemName"]), each["index"], each["width"], each["height"]);
						
					} else {
						feedback = new cpr.controls.Output();
						feedback.userAttr("index", each["index"].toString());
						feedback.value = each["itemName"];
					}
					
					if (each["isDraggable"] == "false") feedback.style.css("color", "red");
					doSetFontStyle(feedback, each);
					
					grpCanvas.addChild(feedback, {
						"top": each["positionY"] + "px",
						"left": each["positionX"] + "px",
						"width": each["width"] + "px",
						"height": each["height"] + "px"
					});
					
					setDragSource(feedback);
					addContextEvent(feedback);
					addEvent(feedback);
				});
			}
			
			/**
			 * 기본 폰트 스타일 지정
			 * @param {cpr.controls.UIControl} control
			 */
			function settingDefaultStyle(control) {
				control.style.css({
					"text-align": "left",
					"vertical-align": "middle",
					"font-family": "HY견고딕",
					"font-size": "9pt"
				});
				control.style.css("font-weight", "bold");
				control.style.css("font-style", "normal");
				control.style.css("text-decoration", "none");
				control.style.css("border", "1px solid gray");
			}
			
			/**
			 * 글꼴 스타일 지정
			 * @param {cpr.controls.UIControl} control
			 * @param {cpr.data.RowConfigInfo} voRow
			 */
			function doSetFontStyle(control, voRow) {
				control.style.css({
					"text-align": voRow["textAlign"],
					"vertical-align": voRow["verticalAlign"],
					"font-family": voRow["fontFamily"],
					"font-size": voRow["fontSize"] + "pt"
				});
				
				// 글꼴 형식 지정
				var vsFontType = voRow["fontType"];
				if (vsFontType == "italic") {
					control.style.css("font-weight", "normal");
					control.style.css("font-style", vsFontType);
					control.style.css("text-decoration", "none");
					
				} else if (vsFontType == "underline") {
					control.style.css("font-weight", "normal");
					control.style.css("font-style", "normal");
					control.style.css("text-decoration", vsFontType);
					
				} else if (vsFontType == "normal" || vsFontType == "bold") {
					control.style.css("font-weight", vsFontType);
					control.style.css("font-style", "normal");
					control.style.css("text-decoration", "none");
					
				} else {
					control.style.css("font-weight", "normal");
					control.style.css("font-style", "normal");
					control.style.css("text-decoration", "none");
				}
			}
			
			
			/**
			 * 위치 고정을 위한 컨텍스트 메뉴 이벤트 추가
			 * @param {cpr.controls.Output} control
			 */
			function addContextEvent(control) {
				var dsPosition = app.lookup("dsPosition");
				control.addEventListener("contextmenu", function(e) {
					var vcControl = e.control;
					
					e.preventDefault();
					
					var ctxMenu = new cpr.controls.Menu();
					ctxMenu.addItem(new cpr.controls.MenuItem("위치고정", "Fixed", ""));
					ctxMenu.addItem(new cpr.controls.MenuItem("위치고정해제", "UnFixed", ""));
					ctxMenu.addItem(new cpr.controls.MenuItem("삭제", "Delete", ""));
					
					ctxMenu.addEventListener("item-click", function(e) {
						var vsItemName = vcControl.type=="output"? control.value: control.userAttr("itemName");
						var voRow = dsPosition.findFirstRow("itemName=='" + vsItemName + "' && index == " + Number(control.userAttr("index")) + "");
						if(voRow==null) return;
						
						if (e.item.value == "Fixed") {
							voRow.setValue("isDraggable", "false");
							control.style.css("color", "red");
						} else if (e.item.value == "UnFixed") {
							voRow.setValue("isDraggable", "");
							control.style.css("color", "black");
						} else if (e.item.value == "Delete") {
							app.lookup("grpCanvas").removeChild(vcControl, true);
							dsPosition.realDeleteRow(voRow.getIndex());
						}
						ctxMenu.dispose();
					});
					
					ctxMenu.addEventListener("blur", function(e) {
						ctxMenu.dispose();
					});
					
					var vnTop = (e.clientY - control.getAppInstance().getContainer().getActualRect().top);
					var vnLeft = (e.clientX - control.getAppInstance().getContainer().getActualRect().left);
					var showConstraint = {
						"position": "absolute",
						"top": vnTop + "px",
						"left": vnLeft + "px",
						"width": "150px",
						"height": "auto"
					};
					app.floatControl(ctxMenu, showConstraint);
					
					ctxMenu.focus();
				});
			}
			
			/**
			 * 위치 고정을 위한 컨텍스트 메뉴 이벤트 추가
			 * @param {cpr.controls.Output} control
			 */
			function addEvent(control) {
				var dsPosition = app.lookup("dsPosition");
				control.addEventListener("click", function(e) {
					var vsItemName = control.type=="output"? control.value: control.userAttr("itemName");
					var voRow = dsPosition.findFirstRow("itemName=='" + vsItemName + "' && index == " + Number(control.userAttr("index")) + "");
					app.lookup("grd1").selectRows(voRow.getIndex());
				});
				
				control.addEventListener("value-change", function(e) {
					var vnIndex = dsPosition.findFirstRow("index=='"+Number(control.userAttr("index"))+"'").getIndex();
					dsPosition.setValue(vnIndex, "itemName", e.newValue);
					app.lookup("grpForm").redraw();
				});
			}
			
			/*
			 * "저장" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn5Click(e){
				// 기존에 등록된 정보는 제거
				localStorage.removeItem("dsPosition");
				
				// 데이터 셋 정보 로컬스토리지 저장
				var dsPosition = app.lookup("dsPosition");
				var data = dsPosition.getRowDataRanged();
				localStorage.setItem("dsPosition", JSON.stringify(data));
			}
			
			/*
			 * "삭제" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(e){
				// 로컬스토리지 정보 제거
				localStorage.removeItem("dsPosition");
				
				// 화면에 그려진 모든 아이템 제거
				app.lookup("grpCanvas").removeAllChildren();
			}
			
			/*
			 * 데이터셋에서 update 이벤트 발생 시 호출.
			 * 데이터가 수정되는 경우 발생하는 이벤트. 발생 메소드 : setValue, updateRow
			 */
			function onDsPositionUpdate(e){
				/** @type cpr.data.DataSet */
				var dsPosition = e.control;
				var voRow = e.row;
				
				var grpCanvas = app.lookup("grpCanvas");
				grpCanvas.getChildren().forEach(function(each) {
					var vnIndex = Number(each.userAttr("index"));
					if (vnIndex == voRow.getValue("index")) {
						if(each.type=="output") {
							// 아이템 값 변경
							each.value = voRow.getValue("itemName");
							// 스타일 지정
							doSetFontStyle(each, voRow.getRowData());
						} else if(voRow.getValue("itemType")=="qrcode"){
							each.userAttr("itemName", voRow.getValue("itemName"));
							
							var elQrCode = document.querySelector("#qrcode"+vnIndex);
							elQrCode.innerHTML = "";
							elQrCode.style.width = (voRow.getValue("width")+10) + "px";
							elQrCode.style.height = (voRow.getValue("height")+10) + "px";
							
							elQrCode = new QRCode(elQrCode, {
								text: voRow.getValue("itemName")
								, width: voRow.getValue("width")
								, height: voRow.getValue("height")
							});
			//				elQrCode.getElementsByTagName("img")[0].setAttribute("width", voRow.getValue("width") + "px");
			//				elQrCode.getElementsByTagName("img")[0].setAttribute("height", voRow.getValue("height") + "px");
							
						} else {
							each.userAttr("itemName", voRow.getValue("itemName"));
							// 변경된 바코드 값으로 다시 표시
							JsBarcode("#barcodeSvg" + vnIndex, Number(voRow.getValue("itemName")), {format: "code128"});
							document.getElementById("barcodeSvg" + vnIndex).setAttribute("width", voRow.getValue("width") + "px");
							document.getElementById("barcodeSvg" + vnIndex).setAttribute("height", voRow.getValue("height") + "px");
						}
						// 위지 변경
						grpCanvas.updateConstraint(each, {
							top: voRow.getValue("positionY") + "px",
							left: voRow.getValue("positionX") + "px",
							width: voRow.getValue("width") + "px",
							height: voRow.getValue("height") + "px"
						});
					}
				});
			}
			
			/*
			 * "리셋" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(e){
				// 화면에 그려진 모든 항목 제거
				app.lookup("grpCanvas").removeAllChildren();
			}
			
			/*
			 * "재배치" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn4Click(e){
				doSettingItem();
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb1SelectionChange(e){
				/** @type cpr.controls.ComboBox */
				var cmb1 = e.control;
				if (e.newSelection[0].value == "barcode") {
					app.lookup("cmb4").clearSelection();
					app.lookup("cmb5").clearSelection();
					app.lookup("nbe5").putValue("");
				}
			}
			
			/*
			 * "출력" 버튼(btn6)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn6Click(e){
				innerBody = document.body.innerHTML;
				print = document.querySelector("[data-usr-print=true]");
				window.addEventListener("beforeprint", function(e) {
					document.body.innerHTML =  print.innerHTML;
					document.body.className = "canvas";
				});
				
				window.addEventListener("afterprint", function(e) {
					document.body.innerHTML =  innerBody;
					app.getRootAppInstance().getContainer().redraw();
				});
				
				window.print();
			}
			
			/*
			 * "http://davidshimjs.github.io/qrcodejs/" 버튼(btn7)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn7Click(e){
				window.open('http://davidshimjs.github.io/qrcodejs/');
			}
			
			/*
			 * "https://github.com/lindell/JsBarcode/tree/master/dist/barcodes" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(e){
				window.open('https://github.com/lindell/JsBarcode/tree/master/dist/barcodes');
			}
			
			/*
			 * 사용자 정의 컨트롤에서 afterLoad 이벤트 발생 시 호출.
			 */
			function onAce1AfterLoad(e){
				/* 에디터에 소스 표시 */
				var vcAceEditor = app.lookup("ace1");
				vcAceEditor.value = doInitBarcode + doInitQrCode;
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "itemName"},
					{"name": "value"}
				],
				"rows": [
					{"itemName": "국가 코드", "value": "value3"},
					{"itemName": "제조사 코드", "value": "value4"},
					{"itemName": "상품 코드", "value": "value5"},
					{"itemName": "상품명", "value": "value6"},
					{"itemName": "수량", "value": "value7"},
					{"itemName": "가격", "value": "value8"},
					{"itemName": "상품 바코드", "value": "value16"},
					{"itemName": "상품 QR", "value": "value17"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsPosition");
			dataSet_2.parseData({
				"columns": [
					{
						"name": "index",
						"dataType": "number"
					},
					{"name": "itemName"},
					{"name": "itemType"},
					{
						"name": "positionX",
						"dataType": "number"
					},
					{
						"name": "positionY",
						"dataType": "number"
					},
					{
						"name": "width",
						"dataType": "number"
					},
					{
						"name": "height",
						"dataType": "number"
					},
					{"name": "textAlign"},
					{"name": "verticalAlign"},
					{"name": "barcode"},
					{"name": "fontFamily"},
					{
						"name": "fontSize",
						"dataType": "number"
					},
					{"name": "fontType"},
					{"name": "isDraggable"}
				],
				"rows": []
			});
			if(typeof onDsPositionUpdate == "function") {
				dataSet_2.addEventListener("update", onDsPositionUpdate);
			}
			app.register(dataSet_2);
			var submission_1 = new cpr.protocols.Submission("sub1");
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "1320px",
				"height": "30px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 30;
			verticalLayout_3.topMargin = 30;
			verticalLayout_3.bottomMargin = 30;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container("grp1");
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 30;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grp3");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.rightMargin = "50px";
					formLayout_1.horizontalSpacing = "5px";
					formLayout_1.verticalSpacing = "5px";
					formLayout_1.setColumns(["300px", "100px"]);
					formLayout_1.setColumnAutoSizing(0, true);
					formLayout_1.setColumnAutoSizing(1, true);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "바코드&QR 생성";
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "2.5rem"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1270px",
						"height": "40px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "JsBarcode.js와 qrcode.js 라이브러리로 바코드와 QR코드를 생성하는 예제입니다.";
					output_2.style.setClasses(["opt-tmpl"]);
					output_2.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_2, {
						"autoSize": "height",
						"width": "1210px",
						"height": "46px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "1270px",
					"height": "150px"
				});
				var group_5 = new cpr.controls.Container("grp2");
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 30;
				verticalLayout_5.topMargin = 10;
				verticalLayout_5.bottomMargin = 30;
				group_5.setLayout(verticalLayout_5);
				(function(container){
					var output_3 = new cpr.controls.Output();
					output_3.value = "시나리오";
					output_3.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_3.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_3, {
						"width": "100px",
						"height": "40px"
					});
					var output_4 = new cpr.controls.Output("ipbScenario");
					output_4.value = "1. 기능확인 창에서 우측 아이템을 왼쪽 캔퍼스로 드래그앤드랍합니다.\r\n2. 바코드 아이템을 드래그앤드랍하고 팝업창에 숫자를 입력 후 바코드가 정상적으로 생성되는지 확인합니다.\r\n3. QR코드 아이템을 드래그앤드랍하고 팝업창에 숫자를 입력 후 바코드가 정상적으로 생성되는지 확인합니다.";
					output_4.style.setClasses(["opt-tmpl"]);
					output_4.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_4, {
						"autoSize": "height",
						"width": "1210px",
						"height": "107px"
					});
					var group_6 = new cpr.controls.Container("grp4");
					group_6.style.css({
						"background-color" : "#dff7fb"
					});
					// Layout
					var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_6.spacing = 10;
					verticalLayout_6.leftMargin = 30;
					verticalLayout_6.rightMargin = 30;
					verticalLayout_6.topMargin = 20;
					verticalLayout_6.bottomMargin = 20;
					group_6.setLayout(verticalLayout_6);
					(function(container){
						var output_5 = new cpr.controls.Output();
						output_5.value = "JsBarcode.js";
						output_5.style.setClasses(["ref-title"]);
						output_5.style.css({
							"color" : "#09c2de",
							"font-weight" : "bold"
						});
						container.addChild(output_5, {
							"width": "100px",
							"height": "25px"
						});
						var output_6 = new cpr.controls.Output();
						output_6.value = "js파일은 아래 링크에서 최신 버전을 다운로드합니다.";
						output_6.style.css({
							"color" : "#09c2de"
						});
						container.addChild(output_6, {
							"autoSize": "height",
							"width": "100px",
							"height": "25px"
						});
						var button_1 = new cpr.controls.Button("btn1");
						button_1.value = "https://github.com/lindell/JsBarcode/tree/master/dist/barcodes";
						button_1.ariaButtonType = "link";
						button_1.style.css({
							"background-color" : "#dff7fb",
							"color" : "false",
							"border-top-width" : "0px",
							"border-right-width" : "0px",
							"border-bottom-width" : "0px",
							"background-image" : "none",
							"border-left-width" : "0px",
							"text-align" : "left"
						});
						if(typeof onBtn1Click == "function") {
							button_1.addEventListener("click", onBtn1Click);
						}
						container.addChild(button_1, {
							"autoSize": "none",
							"width": "1210px",
							"height": "20px"
						});
					})(group_6);
					container.addChild(group_6, {
						"autoSize": "height",
						"width": "1100px",
						"height": "150px"
					});
					var group_7 = new cpr.controls.Container("grp12");
					group_7.style.css({
						"background-color" : "#dff7fb"
					});
					// Layout
					var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_7.spacing = 10;
					verticalLayout_7.leftMargin = 30;
					verticalLayout_7.rightMargin = 30;
					verticalLayout_7.topMargin = 20;
					verticalLayout_7.bottomMargin = 20;
					group_7.setLayout(verticalLayout_7);
					(function(container){
						var output_7 = new cpr.controls.Output();
						output_7.value = "qrcode.js";
						output_7.style.setClasses(["ref-title"]);
						output_7.style.css({
							"color" : "#09c2de",
							"font-weight" : "bold"
						});
						container.addChild(output_7, {
							"width": "100px",
							"height": "25px"
						});
						var output_8 = new cpr.controls.Output();
						output_8.value = "js파일은 아래 링크에서 최신 버전을 다운로드합니다.";
						output_8.style.css({
							"color" : "#09c2de"
						});
						container.addChild(output_8, {
							"autoSize": "height",
							"width": "100px",
							"height": "25px"
						});
						var button_2 = new cpr.controls.Button("btn7");
						button_2.value = "http://davidshimjs.github.io/qrcodejs/";
						button_2.ariaButtonType = "link";
						button_2.style.css({
							"background-color" : "#dff7fb",
							"color" : "false",
							"border-top-width" : "0px",
							"border-right-width" : "0px",
							"border-bottom-width" : "0px",
							"background-image" : "none",
							"border-left-width" : "0px",
							"text-align" : "left"
						});
						if(typeof onBtn7Click == "function") {
							button_2.addEventListener("click", onBtn7Click);
						}
						container.addChild(button_2, {
							"autoSize": "none",
							"width": "1210px",
							"height": "20px"
						});
					})(group_7);
					container.addChild(group_7, {
						"autoSize": "height",
						"width": "1270px",
						"height": "150px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1270px",
					"height": "600px"
				});
				var group_8 = new cpr.controls.Container("grpFunction");
				// Layout
				var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
				group_8.setLayout(verticalLayout_8);
				(function(container){
					var group_9 = new cpr.controls.Container("grpFuncFloating");
					group_9.userAttr({"floating-header": "true"});
					// Layout
					var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_9.bottomMargin = 30;
					group_9.setLayout(verticalLayout_9);
					(function(container){
						var output_9 = new cpr.controls.Output();
						output_9.value = "기능확인";
						output_9.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
						output_9.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "1.75rem"
						});
						container.addChild(output_9, {
							"autoSize": "none",
							"width": "1270px",
							"height": "40px"
						});
						var group_10 = new cpr.controls.Container("grp11");
						group_10.style.css({
							"border-right-style" : "solid",
							"border-top-width" : "1px",
							"border-bottom-color" : "#dedede",
							"border-right-width" : "1px",
							"border-left-color" : "#dedede",
							"border-right-color" : "#dedede",
							"border-left-width" : "1px",
							"border-top-style" : "solid",
							"background-color" : "#F0F0F0",
							"border-left-style" : "solid",
							"border-bottom-width" : "1px",
							"border-top-color" : "#dedede",
							"border-bottom-style" : "solid"
						});
						// Layout
						var formLayout_2 = new cpr.controls.layouts.FormLayout();
						formLayout_2.scrollable = false;
						formLayout_2.topMargin = "0px";
						formLayout_2.rightMargin = "0px";
						formLayout_2.bottomMargin = "0px";
						formLayout_2.leftMargin = "0px";
						formLayout_2.horizontalSpacing = "0px";
						formLayout_2.verticalSpacing = "0px";
						formLayout_2.setColumns(["1fr", "300px"]);
						formLayout_2.setRows(["300px", "1fr"]);
						group_10.setLayout(formLayout_2);
						(function(container){
							var group_11 = new cpr.controls.Container("grp");
							// Layout
							var formLayout_3 = new cpr.controls.layouts.FormLayout();
							formLayout_3.scrollable = false;
							formLayout_3.setColumns(["1fr"]);
							formLayout_3.setRows(["25px", "1fr", "25px"]);
							formLayout_3.setRowVisible(2, false);
							group_11.setLayout(formLayout_3);
							(function(container){
								var grid_1 = linker.grid_1 = new cpr.controls.Grid("grd1");
								grid_1.init({
									"dataSet": app.lookup("dsPosition"),
									"columns": [
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"}
									],
									"header": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.targetColumnName = "index";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "index";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.targetColumnName = "itemName";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "itemName";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 2},
												"configurator": function(cell){
													cell.targetColumnName = "itemType";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "itemType";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 3},
												"configurator": function(cell){
													cell.targetColumnName = "positionX";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "positionX";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 4},
												"configurator": function(cell){
													cell.targetColumnName = "positionY";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "positionY";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 5},
												"configurator": function(cell){
													cell.targetColumnName = "width";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "width";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 6},
												"configurator": function(cell){
													cell.targetColumnName = "height";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "height";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 7},
												"configurator": function(cell){
													cell.targetColumnName = "textAlign";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "textAlign";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 8},
												"configurator": function(cell){
													cell.targetColumnName = "verticalAlign";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "vertical-align";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 9},
												"configurator": function(cell){
													cell.targetColumnName = "barcode";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "barcode";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 10},
												"configurator": function(cell){
													cell.targetColumnName = "fontFamily";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "fontFamily";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 11},
												"configurator": function(cell){
													cell.targetColumnName = "fontSize";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "fontSize";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 12},
												"configurator": function(cell){
													cell.targetColumnName = "fontType";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "fontType";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 13},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "whiteSpace";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 14},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "writeMode";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 15},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "fontZoom";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 16},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "lineSpacing";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 17},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "textSpacing";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 18},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "itemString";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 19},
												"configurator": function(cell){
													cell.targetColumnName = "isDraggable";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "isDraggable";
												}
											}
										]
									},
									"detail": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.columnName = "index";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.columnName = "itemName";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 2},
												"configurator": function(cell){
													cell.columnName = "itemType";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 3},
												"configurator": function(cell){
													cell.columnName = "positionX";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 4},
												"configurator": function(cell){
													cell.columnName = "positionY";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 5},
												"configurator": function(cell){
													cell.columnName = "width";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 6},
												"configurator": function(cell){
													cell.columnName = "height";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 7},
												"configurator": function(cell){
													cell.columnName = "textAlign";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 8},
												"configurator": function(cell){
													cell.columnName = "verticalAlign";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 9},
												"configurator": function(cell){
													cell.columnName = "barcode";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 10},
												"configurator": function(cell){
													cell.columnName = "fontFamily";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 11},
												"configurator": function(cell){
													cell.columnName = "fontSize";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 12},
												"configurator": function(cell){
													cell.columnName = "fontType";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 13},
												"configurator": function(cell){
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 14},
												"configurator": function(cell){
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 15},
												"configurator": function(cell){
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 16},
												"configurator": function(cell){
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 17},
												"configurator": function(cell){
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 18},
												"configurator": function(cell){
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 19},
												"configurator": function(cell){
													cell.columnName = "isDraggable";
												}
											}
										]
									}
								});
								container.addChild(grid_1, {
									"colIndex": 0,
									"rowIndex": 2
								});
								var group_12 = new cpr.controls.Container("grp18");
								// Layout
								var formLayout_4 = new cpr.controls.layouts.FormLayout();
								formLayout_4.scrollable = false;
								formLayout_4.topMargin = "0px";
								formLayout_4.rightMargin = "0px";
								formLayout_4.bottomMargin = "0px";
								formLayout_4.leftMargin = "0px";
								formLayout_4.verticalSpacing = "0px";
								formLayout_4.setColumns(["1fr", "60px", "60px", "60px", "60px", "60px"]);
								formLayout_4.setRows(["25px", "25px", "25px", "1fr"]);
								group_12.setLayout(formLayout_4);
								(function(container){
									var button_3 = new cpr.controls.Button("btn2");
									button_3.value = "삭제";
									if(typeof onBtn2Click == "function") {
										button_3.addEventListener("click", onBtn2Click);
									}
									container.addChild(button_3, {
										"colIndex": 4,
										"rowIndex": 0
									});
									var button_4 = new cpr.controls.Button("btn3");
									button_4.value = "리셋";
									if(typeof onBtn3Click == "function") {
										button_4.addEventListener("click", onBtn3Click);
									}
									container.addChild(button_4, {
										"colIndex": 3,
										"rowIndex": 0
									});
									var button_5 = new cpr.controls.Button("btn4");
									button_5.value = "재배치";
									if(typeof onBtn4Click == "function") {
										button_5.addEventListener("click", onBtn4Click);
									}
									container.addChild(button_5, {
										"colIndex": 2,
										"rowIndex": 0
									});
									var button_6 = new cpr.controls.Button("btn5");
									button_6.value = "저장";
									if(typeof onBtn5Click == "function") {
										button_6.addEventListener("click", onBtn5Click);
									}
									container.addChild(button_6, {
										"colIndex": 5,
										"rowIndex": 0
									});
									var button_7 = new cpr.controls.Button("btn6");
									button_7.value = "출력";
									if(typeof onBtn6Click == "function") {
										button_7.addEventListener("click", onBtn6Click);
									}
									container.addChild(button_7, {
										"colIndex": 1,
										"rowIndex": 0
									});
								})(group_12);
								container.addChild(group_12, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var group_13 = new cpr.controls.Container("grpCanvas");
								group_13.style.css({
									"border-right-style" : "solid",
									"border-top-width" : "1px",
									"border-bottom-color" : "black",
									"border-right-width" : "1px",
									"border-left-color" : "black",
									"border-right-color" : "black",
									"border-left-width" : "1px",
									"border-top-style" : "solid",
									"border-radius" : "5px",
									"background-color" : "#ffffff",
									"border-left-style" : "solid",
									"border-bottom-width" : "1px",
									"border-top-color" : "black",
									"border-bottom-style" : "solid",
									"background-image" : "none"
								});
								// Layout
								var xYLayout_1 = new cpr.controls.layouts.XYLayout();
								group_13.setLayout(xYLayout_1);
								(function(container){
								})(group_13);
								container.addChild(group_13, {
									"colIndex": 0,
									"rowIndex": 1,
									"topSpacing": 10,
									"rightSpacing": 10,
									"bottomSpacing": 10,
									"leftSpacing": 10
								});
							})(group_11);
							container.addChild(group_11, {
								"colIndex": 0,
								"rowIndex": 0,
								"colSpan": 1,
								"rowSpan": 2
							});
							var group_14 = new cpr.controls.Container("grp10");
							group_14.style.setClasses(["form-box"]);
							// Layout
							var formLayout_5 = new cpr.controls.layouts.FormLayout();
							formLayout_5.scrollable = false;
							formLayout_5.setColumns(["1fr"]);
							formLayout_5.setRows(["25px", "1fr"]);
							group_14.setLayout(formLayout_5);
							(function(container){
								var output_10 = new cpr.controls.Output();
								output_10.value = "항목명";
								output_10.style.css({
									"text-align" : "center"
								});
								container.addChild(output_10, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var listBox_1 = new cpr.controls.ListBox("lbx1");
								listBox_1.draggableItem = true;
								(function(listBox_1){
									listBox_1.setItemSet(app.lookup("dsList"), {
										"label": "itemName",
										"value": "value"
									})
								})(listBox_1);
								container.addChild(listBox_1, {
									"colIndex": 0,
									"rowIndex": 1
								});
							})(group_14);
							container.addChild(group_14, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var group_15 = linker.group_15 = new cpr.controls.Container("grpForm");
							group_15.style.setClasses(["form-box"]);
							// Layout
							var formLayout_6 = new cpr.controls.layouts.FormLayout();
							formLayout_6.scrollable = false;
							formLayout_6.topMargin = "5px";
							formLayout_6.rightMargin = "5px";
							formLayout_6.bottomMargin = "5px";
							formLayout_6.leftMargin = "5px";
							formLayout_6.setColumns(["100px", "1fr"]);
							formLayout_6.setRows(["25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px"]);
							group_15.setLayout(formLayout_6);
							(function(container){
								var output_11 = new cpr.controls.Output();
								output_11.value = "항목명";
								output_11.style.css({
									"text-align" : "center"
								});
								container.addChild(output_11, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var output_12 = new cpr.controls.Output();
								output_12.value = "항목유형";
								output_12.style.css({
									"text-align" : "center"
								});
								container.addChild(output_12, {
									"colIndex": 0,
									"rowIndex": 1
								});
								var output_13 = new cpr.controls.Output();
								output_13.value = "상단좌표";
								output_13.style.css({
									"text-align" : "center"
								});
								container.addChild(output_13, {
									"colIndex": 0,
									"rowIndex": 2
								});
								var output_14 = new cpr.controls.Output();
								output_14.value = "좌측좌표";
								output_14.style.css({
									"text-align" : "center"
								});
								container.addChild(output_14, {
									"colIndex": 0,
									"rowIndex": 3
								});
								var output_15 = new cpr.controls.Output();
								output_15.value = "가로길이";
								output_15.style.css({
									"text-align" : "center"
								});
								container.addChild(output_15, {
									"colIndex": 0,
									"rowIndex": 4
								});
								var output_16 = new cpr.controls.Output();
								output_16.value = "세로길이";
								output_16.style.css({
									"text-align" : "center"
								});
								container.addChild(output_16, {
									"colIndex": 0,
									"rowIndex": 5
								});
								var output_17 = new cpr.controls.Output();
								output_17.value = "가로정렬";
								output_17.style.css({
									"text-align" : "center"
								});
								container.addChild(output_17, {
									"colIndex": 0,
									"rowIndex": 6
								});
								var output_18 = new cpr.controls.Output();
								output_18.value = "세로정렬";
								output_18.style.css({
									"text-align" : "center"
								});
								container.addChild(output_18, {
									"colIndex": 0,
									"rowIndex": 7
								});
								var output_19 = new cpr.controls.Output();
								output_19.value = "글꼴명";
								output_19.style.css({
									"text-align" : "center"
								});
								container.addChild(output_19, {
									"colIndex": 0,
									"rowIndex": 8
								});
								var output_20 = new cpr.controls.Output();
								output_20.value = "글꼴크기";
								output_20.style.css({
									"text-align" : "center"
								});
								container.addChild(output_20, {
									"colIndex": 0,
									"rowIndex": 9
								});
								var output_21 = new cpr.controls.Output();
								output_21.value = "글꼴형식";
								output_21.style.css({
									"text-align" : "center"
								});
								container.addChild(output_21, {
									"colIndex": 0,
									"rowIndex": 10
								});
								var inputBox_1 = new cpr.controls.InputBox("ipb1");
								inputBox_1.bind("value").toDataColumn("itemName");
								container.addChild(inputBox_1, {
									"colIndex": 1,
									"rowIndex": 0
								});
								var comboBox_1 = new cpr.controls.ComboBox("cmb1");
								comboBox_1.maxVisibleItems = 10;
								comboBox_1.autoSelect = true;
								comboBox_1.bind("value").toDataColumn("itemType");
								(function(comboBox_1){
									comboBox_1.addItem(new cpr.controls.Item("문자열", "string"));
									comboBox_1.addItem(new cpr.controls.Item("바코드", "barcode"));
									comboBox_1.addItem(new cpr.controls.Item("QR코드", "qrcode"));
								})(comboBox_1);
								if(typeof onCmb1SelectionChange == "function") {
									comboBox_1.addEventListener("selection-change", onCmb1SelectionChange);
								}
								container.addChild(comboBox_1, {
									"colIndex": 1,
									"rowIndex": 1
								});
								var comboBox_2 = new cpr.controls.ComboBox("cmb2");
								comboBox_2.maxVisibleItems = 10;
								comboBox_2.autoSelect = true;
								comboBox_2.bind("value").toDataColumn("textAlign");
								comboBox_2.bind("enabled").toExpression("itemType==\"barcode\"? false: true");
								(function(comboBox_2){
									comboBox_2.addItem(new cpr.controls.Item("왼쪽정렬", "left"));
									comboBox_2.addItem(new cpr.controls.Item("가운데정렬", "center"));
									comboBox_2.addItem(new cpr.controls.Item("오른쪽정렬", "right"));
									comboBox_2.addItem(new cpr.controls.Item("양쪽정렬", "justify"));
								})(comboBox_2);
								container.addChild(comboBox_2, {
									"colIndex": 1,
									"rowIndex": 6
								});
								var comboBox_3 = new cpr.controls.ComboBox("cmb3");
								comboBox_3.maxVisibleItems = 10;
								comboBox_3.autoSelect = true;
								comboBox_3.bind("value").toDataColumn("verticalAlign");
								comboBox_3.bind("enabled").toExpression("itemType==\"barcode\"? false: true");
								(function(comboBox_3){
									comboBox_3.addItem(new cpr.controls.Item("상단정렬", "top"));
									comboBox_3.addItem(new cpr.controls.Item("중간정렬", "middle"));
									comboBox_3.addItem(new cpr.controls.Item("하단정렬", "bottom"));
								})(comboBox_3);
								container.addChild(comboBox_3, {
									"colIndex": 1,
									"rowIndex": 7
								});
								var comboBox_4 = new cpr.controls.ComboBox("cmb4");
								comboBox_4.maxVisibleItems = 10;
								comboBox_4.autoSelect = true;
								comboBox_4.bind("value").toDataColumn("fontFamily");
								comboBox_4.bind("enabled").toExpression("itemType==\"barcode\"? false: true");
								(function(comboBox_4){
									comboBox_4.addItem(new cpr.controls.Item("HY울릉도B", "HY울릉도B"));
									comboBox_4.addItem(new cpr.controls.Item("HY울릉도M", "HY울릉도M"));
									comboBox_4.addItem(new cpr.controls.Item("HY울릉도L", "HY울릉도L"));
									comboBox_4.addItem(new cpr.controls.Item("HY견고딕", "HY견고딕"));
								})(comboBox_4);
								container.addChild(comboBox_4, {
									"colIndex": 1,
									"rowIndex": 8
								});
								var comboBox_5 = new cpr.controls.ComboBox("cmb5");
								comboBox_5.maxVisibleItems = 10;
								comboBox_5.autoSelect = true;
								comboBox_5.bind("value").toDataColumn("fontType");
								comboBox_5.bind("enabled").toExpression("itemType==\"barcode\"? false: true");
								(function(comboBox_5){
									comboBox_5.addItem(new cpr.controls.Item("일반", "normal"));
									comboBox_5.addItem(new cpr.controls.Item("굵게", "bold"));
									comboBox_5.addItem(new cpr.controls.Item("기울임", "italic"));
									comboBox_5.addItem(new cpr.controls.Item("밑줄", "underline"));
								})(comboBox_5);
								container.addChild(comboBox_5, {
									"colIndex": 1,
									"rowIndex": 10
								});
								var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
								numberEditor_1.spinButton = false;
								numberEditor_1.autoSelect = true;
								numberEditor_1.bind("value").toDataColumn("positionY");
								container.addChild(numberEditor_1, {
									"colIndex": 1,
									"rowIndex": 2
								});
								var numberEditor_2 = new cpr.controls.NumberEditor("nbe2");
								numberEditor_2.spinButton = false;
								numberEditor_2.autoSelect = true;
								numberEditor_2.bind("value").toDataColumn("positionX");
								container.addChild(numberEditor_2, {
									"colIndex": 1,
									"rowIndex": 3
								});
								var numberEditor_3 = new cpr.controls.NumberEditor("nbe3");
								numberEditor_3.spinButton = false;
								numberEditor_3.autoSelect = true;
								numberEditor_3.bind("value").toDataColumn("width");
								container.addChild(numberEditor_3, {
									"colIndex": 1,
									"rowIndex": 4
								});
								var numberEditor_4 = new cpr.controls.NumberEditor("nbe4");
								numberEditor_4.spinButton = false;
								numberEditor_4.autoSelect = true;
								numberEditor_4.bind("value").toDataColumn("height");
								container.addChild(numberEditor_4, {
									"colIndex": 1,
									"rowIndex": 5
								});
								var numberEditor_5 = new cpr.controls.NumberEditor("nbe5");
								numberEditor_5.spinButton = false;
								numberEditor_5.autoSelect = true;
								numberEditor_5.bind("value").toDataColumn("fontSize");
								numberEditor_5.bind("enabled").toExpression("itemType==\"barcode\"? false: true");
								container.addChild(numberEditor_5, {
									"colIndex": 1,
									"rowIndex": 9
								});
							})(group_15);
							container.addChild(group_15, {
								"colIndex": 1,
								"rowIndex": 1
							});
						})(group_10);
						container.addChild(group_10, {
							"autoSize": "height",
							"width": "1210px",
							"height": "750px"
						});
					})(group_9);
					container.addChild(group_9, {
						"autoSize": "height",
						"width": "1270px",
						"height": "800px"
					});
				})(group_8);
				container.addChild(group_8, {
					"autoSize": "height",
					"width": "1270px",
					"height": "800px"
				});
				var output_22 = new cpr.controls.Output();
				output_22.value = "주요코드";
				output_22.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
				output_22.style.css({
					"font-weight" : "bold",
					"padding-left" : "1rem",
					"font-size" : "1.75rem"
				});
				container.addChild(output_22, {
					"autoSize": "none",
					"width": "1210px",
					"height": "40px"
				});
				var group_16 = new cpr.controls.Container("grp15");
				// Layout
				var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_10.spacing = 20;
				verticalLayout_10.leftMargin = 30;
				verticalLayout_10.rightMargin = 30;
				verticalLayout_10.topMargin = 0;
				verticalLayout_10.bottomMargin = 0;
				group_16.setLayout(verticalLayout_10);
				(function(container){
					var group_17 = new cpr.controls.Container("grp7");
					// Layout
					var formLayout_7 = new cpr.controls.layouts.FormLayout();
					formLayout_7.scrollable = false;
					formLayout_7.topMargin = "0px";
					formLayout_7.rightMargin = "0px";
					formLayout_7.bottomMargin = "0px";
					formLayout_7.leftMargin = "0px";
					formLayout_7.horizontalSpacing = "5px";
					formLayout_7.verticalSpacing = "5px";
					formLayout_7.setColumns(["1fr"]);
					formLayout_7.setRows(["1fr"]);
					group_17.setLayout(formLayout_7);
					(function(container){
						var group_18 = new cpr.controls.Container("grp9");
						group_18.style.setClasses(["form-box"]);
						// Layout
						var verticalLayout_11 = new cpr.controls.layouts.VerticalLayout();
						group_18.setLayout(verticalLayout_11);
						(function(container){
							var userDefinedControl_2 = new udc.tmp.Ace("ace1");
							if(typeof onAce1AfterLoad == "function") {
								userDefinedControl_2.addEventListener("afterLoad", onAce1AfterLoad);
							}
							container.addChild(userDefinedControl_2, {
								"autoSize": "height",
								"width": "300px",
								"height": "300px"
							});
						})(group_18);
						container.addChild(group_18, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_17);
					container.addChild(group_17, {
						"autoSize": "height",
						"width": "1210px",
						"height": "310px"
					});
				})(group_16);
				container.addChild(group_16, {
					"autoSize": "height",
					"width": "1270px",
					"height": "350px"
				});
				var group_19 = new cpr.controls.Container("grp5");
				group_19.style.setClasses(["card-inner"]);
				// Layout
				var verticalLayout_12 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_12.spacing = 15;
				verticalLayout_12.leftMargin = 0;
				verticalLayout_12.rightMargin = 0;
				verticalLayout_12.topMargin = 20;
				verticalLayout_12.bottomMargin = 40;
				group_19.setLayout(verticalLayout_12);
				(function(container){
					var output_23 = new cpr.controls.Output();
					output_23.value = "서드파티 버전 및 라이센스 정책";
					output_23.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_23.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_23, {
						"autoSize": "none",
						"width": "1270px",
						"height": "40px"
					});
					var group_20 = new cpr.controls.Container("grp6");
					group_20.style.css({
						"background-color" : "#FFF5EF"
					});
					// Layout
					var verticalLayout_13 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_13.leftMargin = 30;
					verticalLayout_13.rightMargin = 30;
					verticalLayout_13.topMargin = 20;
					verticalLayout_13.bottomMargin = 20;
					group_20.setLayout(verticalLayout_13);
					(function(container){
						var output_24 = new cpr.controls.Output();
						output_24.value = "서드파티 버전";
						output_24.style.css({
							"color" : "#FF9149",
							"font-weight" : "bolder"
						});
						container.addChild(output_24, {
							"width": "100px",
							"height": "25px"
						});
						var output_25 = new cpr.controls.Output();
						output_25.value = "JsBarcode.js v3.11.5\r\n";
						output_25.style.css({
							"color" : "#FF9149"
						});
						container.addChild(output_25, {
							"autoSize": "height",
							"width": "100px",
							"height": "25px"
						});
					})(group_20);
					container.addChild(group_20, {
						"autoSize": "height",
						"width": "1040px",
						"height": "100px"
					});
					var group_21 = new cpr.controls.Container("grp8");
					group_21.style.css({
						"background-color" : "#FFF5EF"
					});
					// Layout
					var verticalLayout_14 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_14.leftMargin = 30;
					verticalLayout_14.rightMargin = 30;
					verticalLayout_14.topMargin = 20;
					verticalLayout_14.bottomMargin = 20;
					group_21.setLayout(verticalLayout_14);
					(function(container){
						var output_26 = new cpr.controls.Output();
						output_26.value = "라이센스 정책 및 호환";
						output_26.style.css({
							"color" : "#FF9149",
							"font-weight" : "bolder"
						});
						container.addChild(output_26, {
							"width": "100px",
							"height": "25px"
						});
						var output_27 = new cpr.controls.Output();
						output_27.value = "JsBarcode.js\r\n - MIT License를 따릅니다.\r\n\r\nqrcode.js\r\n - MIT License를 따릅니다.\r\n - IE6~10, Chrome, Firefox, Safari, Opera, Mobile Safari, Android, Windows Mobile, ETC.";
						output_27.style.css({
							"color" : "#FF9149"
						});
						container.addChild(output_27, {
							"autoSize": "height",
							"width": "100px",
							"height": "195px"
						});
					})(group_21);
					container.addChild(group_21, {
						"autoSize": "height",
						"width": "1270px",
						"height": "250px"
					});
				})(group_19);
				container.addChild(group_19, {
					"autoSize": "height",
					"width": "1100px",
					"height": "500px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "1320px",
				"height": "2500px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			// Linking
			linker.group_15.setBindContext(new cpr.bind.GridSelectionContext(linker.grid_1));
		}
	});
	app.title = "바코드&QR 생성";
	cpr.core.Platform.INSTANCE.register(app);
})();
