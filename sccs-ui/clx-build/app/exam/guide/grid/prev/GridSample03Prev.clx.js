/*
 * App URI: app/exam/guide/grid/prev/GridSample03Prev
 * Source Location: app/exam/guide/grid/prev/GridSample03Prev.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/guide/grid/prev/GridSample03Prev", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * GridSample03.js
			 * Created at 2020. 6. 1. 오후 7:01:00.
			 *
			 * @author 1073727
			 ************************************************/
			
			var util = createCommonUtil();
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit( /* cpr.events.CEvent */ e) {
				//그리드 초기화
				util.Grid.init(app, "grdSourceList");
				
				//폼 초기화
				util.FreeForm.init(app, ["grpFormFunc", "grpFormCont"]);
				
			}
			
			/*
			 * "Row복사" 버튼(btnCopyRow)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCopyRowClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCopyRow = e.control;
				
				f_onBtnCopyRowClick();
				
				//결과표시
				app.lookup("otpRslt").value = "그리드에 선택된 Row들을 타겟 그리드에 복사한다. 이미 있는 Row는 추가되지 않는다.";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnCopyRowClick;
				
			}
			
			function f_onBtnCopyRowClick() {
				// 소스(Source) 그리드의 선택된 행(Row)의 데이터를 타겟(Target) 그리드로 복사한다.
				// 단, 복사할려는 데이터가 타겟 그리드에 이미 존재하는 경우에는 복사하지 않는다.(중복 복사 방지)
				util.Grid.copyToGridData(app, "grdSourceList", "grdTargetList");
			}
			
			/*
			 * "전체복사" 버튼(btnCopyAll)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCopyAllClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCopyAll = e.control;
				
				f_onBtnCopyAllClick();
				
				//결과표시
				app.lookup("otpRslt").value = "소스(Source)그리드의 모든 행(Row)의 데이터를 타겟(Target)그리드로 복사한다. 이미 있는 Row는 추가되지 않는다.";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnCopyAllClick;
				
			}
			
			function f_onBtnCopyAllClick() {
				// 소스(Source) 그리드의 모든 행(Row)의 데이터를 타겟(Target) 그리드로 복사한다.
				//  단, 복사할려는 데이터가 타겟 그리드에 이미 존재하는 경우에는 복사하지 않는다.(중복 복사 방지)
				util.Grid.copyToAllGridData(app, "grdSourceList", "grdTargetList");
				
			}
			
			/*
			 * "그리드 초기화" 버튼(btnSrcGridInit)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSrcGridInitClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSrcGridInit = e.control;
				
				util.Grid.reset(app, "grdTargetList");
			}
			
			/*
			 * "Row이동" 버튼(btnMoveRow)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMoveRowClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnMoveRow = e.control;
				
				f_onBtnMoveRowClick();
				
				//결과표시
				app.lookup("otpRslt").value = "그리드에 선택된 Row들을 타겟 그리드로 이동한다. 소스(Source)그리드의  이동된 로우는 delete모드로 상태값만 변경됨";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnMoveRowClick;
			}
			
			function f_onBtnMoveRowClick() {
				// 소스(Source) 그리드의 선택된 행(Row)의 데이터를 타겟(Target) 그리드로 이동한다.
				// 데이터 이동 후, 소스(Source) 그리드의 이동된 행(Row)의 상태는 delete모드로 상태값만 변경된다.
				util.Grid.moveToGridData(app, "grdSourceList", "grdTargetList");
			}
			
			/*
			 * "전체이동" 버튼(btnMoveAll)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMoveAllClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnMoveAll = e.control;
				
				f_onBtnMoveAllClick();
				
				//결과표시
				app.lookup("otpRslt").value = "소스(Source)그리드의 모든 행(Row)의 데이터를 타겟(Target)그리드로 이동한다. 소스(Source)그리드의 이동된 로우는 delete모드로 상태값만 변경됨";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnMoveAllClick;
			}
			
			function f_onBtnMoveAllClick() {
				// 소스(Source) 그리드의 모든 데이터행(Row)을 타겟(Target) 그리드로 이동한다.
				// 데이터 이동 후, 소스(Source) 그리드의 이동된 행(Row)의 상태는 delete모드로 상태값만 변경된다.
				util.Grid.moveToAllGridData(app, "grdSourceList", "grdTargetList");
			}
			
			/*
			 * "그리드 원상태로 되돌리기" 버튼(btnOrgInit)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnOrgInitClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnOrgInit = e.control;
				
				var dsList = app.lookup("dsList");
				
				util.DataSet.copyToDataSet(app, "dsListOrg", "dsList");
				dsList.setRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "id"},
					{"name": "name"},
					{"name": "tel"},
					{"name": "addr"}
				],
				"rows": [
					{"id": "ID0001", "name": "박보검", "tel": "010-1234-5678", "addr": "서울시 여의도"},
					{"id": "ID0002", "name": "홍길동", "tel": "02-3414-5678", "addr": "서울시 동작구 123"},
					{"id": "ID0003", "name": "이순신", "tel": "010-1234-5678", "addr": "경기도 의정부시 111"},
					{"id": "ID0004", "name": "송혜교", "tel": "010-1234-5678", "addr": "서울시 노원구 중계동"},
					{"id": "ID0004", "name": "이보영", "tel": "010-1234-5678", "addr": "서울시 강북구"},
					{"id": "ID0005", "name": "임장군", "tel": "010-1234-5678", "addr": "서울시 여의도 영등포동"},
					{"id": "ID0005", "name": "김토마토", "tel": "010-1234-5678", "addr": "서울시 여의도 영등포동"},
					{"id": "ID0005", "name": "김퇴직", "tel": "010-1234-5678", "addr": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsTargetList");
			dataSet_2.parseData({
				"columns": [
					{"name": "id"},
					{"name": "name"},
					{"name": "tel"},
					{"name": "addr"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsListOrg");
			dataSet_3.parseData({
				"columns": [
					{"name": "id"},
					{"name": "name"},
					{"name": "tel"},
					{"name": "addr"}
				],
				"rows": [
					{"id": "ID0001", "name": "박보검", "tel": "010-1234-5678", "addr": "서울시 여의도"},
					{"id": "ID0002", "name": "홍길동", "tel": "02-3414-5678", "addr": "서울시 동작구 123"},
					{"id": "ID0003", "name": "이순신", "tel": "010-1234-5678", "addr": "경기도 의정부시 111"},
					{"id": "ID0004", "name": "송혜교", "tel": "010-1234-5678", "addr": "서울시 노원구 중계동"},
					{"id": "ID0004", "name": "이보영", "tel": "010-1234-5678", "addr": "서울시 강북구"},
					{"id": "ID0005", "name": "임장군", "tel": "010-1234-5678", "addr": "서울시 여의도 영등포동"},
					{"id": "ID0005", "name": "김토마토", "tel": "010-1234-5678", "addr": "서울시 여의도 영등포동"},
					{"id": "ID0005", "name": "김퇴직", "tel": "010-1234-5678", "addr": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_3);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader");
			userDefinedControl_1.initializeYn = "N";
			userDefinedControl_1.groupBoxIds = "grpContent";
			container.addChild(userDefinedControl_1, {
				"autoSize": "none",
				"width": "998px",
				"height": "30px"
			});
			
			var group_1 = new cpr.controls.Container("grpContent");
			group_1.userAttr({"fillLayout": "Y"});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["25px", "150px", "25px", "110px", "25px", "50px", "25px", "1fr"]);
			formLayout_1.setRowAutoSizing(1, true);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grp4");
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.setColumns(["2fr", "200px"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var button_1 = new cpr.controls.Button("btnOrgInit");
					button_1.value = "그리드 원상태로 되돌리기";
					button_1.style.setClasses(["btn-blue"]);
					if(typeof onBtnOrgInitClick == "function") {
						button_1.addEventListener("click", onBtnOrgInitClick);
					}
					container.addChild(button_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
					var userDefinedControl_2 = new udc.com.comFormTitle("comformtitle3");
					userDefinedControl_2.title = "소스(Source) 그리드";
					container.addChild(userDefinedControl_2, {
						"colIndex": 0,
						"rowIndex": 0
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var userDefinedControl_3 = new udc.com.comFormTitle("comformtitle2");
				userDefinedControl_3.title = "기능(함수)";
				container.addChild(userDefinedControl_3, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var grid_1 = new cpr.controls.Grid("grdSourceList");
				grid_1.init({
					"dataSet": app.lookup("dsList"),
					"columnMovable": true,
					"resizableColumns": "all",
					"columns": [
						{"width": "25px"},
						{"width": "26px"},
						{"width": "54px"},
						{"width": "60px"},
						{"width": "100px"},
						{"width": "175px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.targetColumnName = "id";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.targetColumnName = "name";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "성명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.targetColumnName = "tel";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "전화번호";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.targetColumnName = "addr";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "주소";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "id";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("ipb1");
										inputBox_1.bind("value").toDataColumn("id");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "name";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("ipb2");
										inputBox_2.bind("value").toDataColumn("name");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "tel";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("ipb3");
										inputBox_3.bind("value").toDataColumn("tel");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "addr";
									cell.style.css({
										"text-align" : "left"
									});
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("ipb4");
										inputBox_4.bind("value").toDataColumn("addr");
										return inputBox_4;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 3
				});
				var group_3 = new cpr.controls.Container("grpFormFunc");
				group_3.style.setClasses(["form-box"]);
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.topMargin = "5px";
				formLayout_3.rightMargin = "5px";
				formLayout_3.bottomMargin = "5px";
				formLayout_3.leftMargin = "5px";
				formLayout_3.setColumns(["24px", "150px", "1fr", "80px"]);
				formLayout_3.setRows(["25px", "25px", "25px", "25px", "25px"]);
				formLayout_3.setRowMinHeight(1, 1);
				formLayout_3.setRowMinHeight(2, 1);
				formLayout_3.setRowMinHeight(3, 1);
				formLayout_3.setRowMinHeight(4, 1);
				group_3.setLayout(formLayout_3);
				(function(container){
					var output_1 = new cpr.controls.Output("otp1");
					output_1.value = "No";
					output_1.style.css({
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_2 = new cpr.controls.Output("otp4");
					output_2.value = "함수";
					output_2.style.css({
						"text-align" : "center"
					});
					container.addChild(output_2, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var output_3 = new cpr.controls.Output("otp42");
					output_3.value = "설명";
					output_3.style.css({
						"text-align" : "center"
					});
					container.addChild(output_3, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var output_4 = new cpr.controls.Output("otp44");
					output_4.value = "동작";
					output_4.style.css({
						"text-align" : "center"
					});
					container.addChild(output_4, {
						"colIndex": 3,
						"rowIndex": 0
					});
					var output_5 = new cpr.controls.Output("otp6");
					output_5.value = "1";
					output_5.style.css({
						"text-align" : "center"
					});
					container.addChild(output_5, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var inputBox_5 = new cpr.controls.InputBox("ipb9");
					inputBox_5.readOnly = true;
					inputBox_5.value = "copyToGridData";
					container.addChild(inputBox_5, {
						"colIndex": 1,
						"rowIndex": 1
					});
					var inputBox_6 = new cpr.controls.InputBox("ipb13");
					inputBox_6.readOnly = true;
					inputBox_6.value = "그리드의 선택된 Row를 대상(Target) 그리드로 복사";
					container.addChild(inputBox_6, {
						"colIndex": 2,
						"rowIndex": 1
					});
					var button_2 = new cpr.controls.Button("btnCopyRow");
					button_2.value = "Row복사";
					if(typeof onBtnCopyRowClick == "function") {
						button_2.addEventListener("click", onBtnCopyRowClick);
					}
					container.addChild(button_2, {
						"colIndex": 3,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var output_6 = new cpr.controls.Output("otp12");
					output_6.value = "2";
					output_6.style.css({
						"text-align" : "center"
					});
					container.addChild(output_6, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var inputBox_7 = new cpr.controls.InputBox("ipb10");
					inputBox_7.readOnly = true;
					inputBox_7.value = "copyToAllGridData";
					container.addChild(inputBox_7, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var inputBox_8 = new cpr.controls.InputBox("ipb14");
					inputBox_8.readOnly = true;
					inputBox_8.value = "그리드의 모든 데이터를 대상(Target) 그리드로 복사";
					container.addChild(inputBox_8, {
						"colIndex": 2,
						"rowIndex": 2
					});
					var button_3 = new cpr.controls.Button("btnCopyAll");
					button_3.value = "전체복사";
					if(typeof onBtnCopyAllClick == "function") {
						button_3.addEventListener("click", onBtnCopyAllClick);
					}
					container.addChild(button_3, {
						"colIndex": 3,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var output_7 = new cpr.controls.Output("otp8");
					output_7.value = "3";
					output_7.style.css({
						"text-align" : "center"
					});
					container.addChild(output_7, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var inputBox_9 = new cpr.controls.InputBox("ipb11");
					inputBox_9.readOnly = true;
					inputBox_9.value = "moveToGridData";
					container.addChild(inputBox_9, {
						"colIndex": 1,
						"rowIndex": 3
					});
					var inputBox_10 = new cpr.controls.InputBox("ipb15");
					inputBox_10.readOnly = true;
					inputBox_10.value = "그리드의 선택된 Row를 대상(Target) 그리드로 이동";
					container.addChild(inputBox_10, {
						"colIndex": 2,
						"rowIndex": 3
					});
					var button_4 = new cpr.controls.Button("btnMoveRow");
					button_4.value = "Row이동";
					if(typeof onBtnMoveRowClick == "function") {
						button_4.addEventListener("click", onBtnMoveRowClick);
					}
					container.addChild(button_4, {
						"colIndex": 3,
						"rowIndex": 3,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var output_8 = new cpr.controls.Output("otp17");
					output_8.value = "4";
					output_8.style.css({
						"text-align" : "center"
					});
					container.addChild(output_8, {
						"colIndex": 0,
						"rowIndex": 4
					});
					var inputBox_11 = new cpr.controls.InputBox("ipb12");
					inputBox_11.readOnly = true;
					inputBox_11.value = "moveToAllGridData";
					container.addChild(inputBox_11, {
						"colIndex": 1,
						"rowIndex": 4
					});
					var inputBox_12 = new cpr.controls.InputBox("ipb16");
					inputBox_12.readOnly = true;
					inputBox_12.value = "그리드의 모든 데이터를 대상(Target) 그리드로 이동";
					container.addChild(inputBox_12, {
						"colIndex": 2,
						"rowIndex": 4
					});
					var button_5 = new cpr.controls.Button("btnMoveAll");
					button_5.value = "전체이동";
					if(typeof onBtnMoveAllClick == "function") {
						button_5.addEventListener("click", onBtnMoveAllClick);
					}
					container.addChild(button_5, {
						"colIndex": 3,
						"rowIndex": 4,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 1,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 1
				});
				var userDefinedControl_4 = new udc.com.comFormTitle("comformtitle4");
				userDefinedControl_4.title = "시나리오";
				container.addChild(userDefinedControl_4, {
					"colIndex": 1,
					"rowIndex": 2
				});
				var group_4 = new cpr.controls.Container("grpFormCont");
				group_4.style.setClasses(["form-box"]);
				// Layout
				var formLayout_4 = new cpr.controls.layouts.FormLayout();
				formLayout_4.topMargin = "5px";
				formLayout_4.rightMargin = "5px";
				formLayout_4.bottomMargin = "5px";
				formLayout_4.leftMargin = "5px";
				formLayout_4.setColumns(["120px", "1fr"]);
				formLayout_4.setRows(["1fr"]);
				group_4.setLayout(formLayout_4);
				(function(container){
					var output_9 = new cpr.controls.Output("otp25");
					output_9.value = "시나리오";
					container.addChild(output_9, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var textArea_1 = new cpr.controls.TextArea("txa1");
					textArea_1.readOnly = true;
					textArea_1.value = "1. 그리드를 확인하고 동작 버튼을 클릭한다.\r\n2. 그리드의 기능동작을 확인한다. \r\n3. 하단의 스크립트내용을 확인한다.\r\n4. 스크립트내용을 복사하여 코딩에 활용한다.";
					container.addChild(textArea_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_4);
				container.addChild(group_4, {
					"colIndex": 1,
					"rowIndex": 3
				});
				var group_5 = new cpr.controls.Container("grp3");
				// Layout
				var formLayout_5 = new cpr.controls.layouts.FormLayout();
				formLayout_5.setColumns(["1fr", "120px"]);
				formLayout_5.setRows(["1fr"]);
				group_5.setLayout(formLayout_5);
				(function(container){
					var button_6 = new cpr.controls.Button("btnSrcGridInit");
					button_6.value = "그리드 초기화";
					button_6.style.setClasses(["btn-blue"]);
					if(typeof onBtnSrcGridInitClick == "function") {
						button_6.addEventListener("click", onBtnSrcGridInitClick);
					}
					container.addChild(button_6, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "center",
						"width": 160
					});
					var userDefinedControl_5 = new udc.com.comFormTitle("comformtitle6");
					userDefinedControl_5.title = "대상(Target) 그리드";
					container.addChild(userDefinedControl_5, {
						"colIndex": 0,
						"rowIndex": 0
					});
				})(group_5);
				container.addChild(group_5, {
					"colIndex": 0,
					"rowIndex": 4
				});
				var userDefinedControl_6 = new udc.com.comFormTitle("comformtitle5");
				userDefinedControl_6.title = "결과값";
				container.addChild(userDefinedControl_6, {
					"colIndex": 1,
					"rowIndex": 4
				});
				var grid_2 = new cpr.controls.Grid("grdTargetList");
				grid_2.init({
					"dataSet": app.lookup("dsTargetList"),
					"columnMovable": true,
					"resizableColumns": "all",
					"columns": [
						{"width": "25px"},
						{"width": "26px"},
						{"width": "54px"},
						{"width": "60px"},
						{"width": "100px"},
						{"width": "175px"}
					],
					"header": {
						"rows": [{"height": "27px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.targetColumnName = "id";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.targetColumnName = "name";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "성명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.targetColumnName = "tel";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "전화번호";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.targetColumnName = "addr";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "주소";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "checkbox";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnType = "rowindex";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "id";
									cell.control = (function(){
										var inputBox_13 = new cpr.controls.InputBox("ipb5");
										inputBox_13.bind("value").toDataColumn("id");
										return inputBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "name";
									cell.control = (function(){
										var inputBox_14 = new cpr.controls.InputBox("ipb6");
										inputBox_14.bind("value").toDataColumn("name");
										return inputBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "tel";
									cell.control = (function(){
										var inputBox_15 = new cpr.controls.InputBox("ipb7");
										inputBox_15.bind("value").toDataColumn("tel");
										return inputBox_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "addr";
									cell.style.css({
										"text-align" : "left"
									});
									cell.control = (function(){
										var inputBox_16 = new cpr.controls.InputBox("ipb8");
										inputBox_16.bind("value").toDataColumn("addr");
										return inputBox_16;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_2, {
					"colIndex": 0,
					"rowIndex": 5,
					"colSpan": 1,
					"rowSpan": 3
				});
				var inputBox_17 = new cpr.controls.InputBox("otpRslt");
				inputBox_17.readOnly = true;
				container.addChild(inputBox_17, {
					"colIndex": 1,
					"rowIndex": 5
				});
				var userDefinedControl_7 = new udc.com.comFormTitle("comformtitle7");
				userDefinedControl_7.title = "스크립트 내용";
				container.addChild(userDefinedControl_7, {
					"colIndex": 1,
					"rowIndex": 6
				});
				var textArea_2 = new cpr.controls.TextArea("txaScript");
				textArea_2.style.setClasses(["form-box"]);
				container.addChild(textArea_2, {
					"colIndex": 1,
					"rowIndex": 7,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "972px",
				"height": "645px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "그리드 복사/이동 기능";
	cpr.core.Platform.INSTANCE.register(app);
})();
