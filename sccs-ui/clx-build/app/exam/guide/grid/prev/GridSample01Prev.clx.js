/*
 * App URI: app/exam/guide/grid/prev/GridSample01Prev
 * Source Location: app/exam/guide/grid/prev/GridSample01Prev.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/guide/grid/prev/GridSample01Prev", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * GridSample01.js
			 * Created at 2020. 3. 7. 오전 9:52:37.
			 *
			 * @author 1073727
			 ************************************************/
			
			var util = createCommonUtil();
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit( /* cpr.events.CEvent */ e) {
				//그리드 초기화
				util.Grid.init(app, "grdList");
				//폼 초기화
				util.FreeForm.init(app, ["grpFormFunc", "grpFormCont"]);
			}
			
			/*
			 * "초기화" 버튼(btnReset)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnResetClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnReset = e.control;
				
				f_onBtnResetClick();
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnResetClick;
			}
			
			function f_onBtnResetClick() {
				util.Grid.reset(app, "grdList");
			}
			
			/*
			 * "그리드 원상태로 초기화" 버튼(btnOrgInit)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnOrgInitClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnOrgInit = e.control;
				
				var dsList = app.lookup("dsList");
				
				util.DataSet.copyToDataSet(app, "dsListOrg", "dsList");
				dsList.setRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
				
			}
			
			/*
			 * "확인" 버튼(btnModi)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnModiClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnModi = e.control;
				
				var result = f_onBtnModiClick();
				
				//결과표시
				app.lookup("otpRslt").value = "" + result;
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnModiClick;
				
			}
			
			function f_onBtnModiClick() {
				
				//그리드의 변경사항 유/무를 반환한다. 
				if (util.Grid.isModified(app, "grdList")) {
					return true;
				} else {
					return false;
				}
			}
			
			/*
			 * "확인" 버튼(btnRevertRowData)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRevertRowDataClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRevertRowData = e.control;
				
				f_onBtnRevertRowDataClick();
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnRevertRowDataClick;
				
			}
			
			function f_onBtnRevertRowDataClick() {
				
				if (!util.Grid.isModified(app, "grdList")) {
					util.Msg.alert( "그리드 특정행 내용 변경 후 진행해 주시기 바랍니다.");
					
					return false;
				};
				
				//Index 가져오기 
				var idxRow = util.Grid.getIndex(app, "grdList");
				//특정행 원상태로 복구
				util.Grid.revertRowData(app, "grdList", idxRow);
				
			}
			
			/*
			 * "가져오기" 버튼(btnGetIndex)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnGetIndexClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnGetIndex = e.control;
				
				var result = f_onBtnGetIndexClick();
				
				//결과표시
				app.lookup("otpRslt").value = "" + result;
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnGetIndexClick;
				
			}
			
			function f_onBtnGetIndexClick() {
				//Index 가져오기 
				var result = util.Grid.getIndex(app, "grdList");
				
				return result;
			}
			
			/*
			 * "전체복구" 버튼(btnRevertAllData)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRevertAllDataClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRevertAllData = e.control;
				
				f_onBtnRevertAllDataClick();
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnRevertAllDataClick;
				
			}
			
			function f_onBtnRevertAllDataClick() {
				util.Grid.revertAllData(app, "grdList");
			}
			
			/*
			 * "가져오기" 버튼(btnGetChkSelRowIndex)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnGetChkSelRowIndexClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnGetChkSelRowIndex = e.control;
				
				var result = f_onBtnGetChkSelRowIndexClick();
				
				//결과표시
				app.lookup("otpRslt").value = result;
				app.lookup("otpRslt").value = "그리드에서 체크 또는 선택된 행의 Index: [ " + result + " ]";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnGetChkSelRowIndexClick;
				
			}
			
			function f_onBtnGetChkSelRowIndexClick() {
				//그리드의 선택 또는 체크된 행의 인덱스(Index) 반환
				var result = util.Grid.getCheckOrSelectedRowIndex(app, "grdList");
				
				return result;
			}
			
			/*
			 * "가져오기" 버튼(btnGetChkRowIndex)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnGetChkRowIndexClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnGetChkRowIndex = e.control;
				
				var result = f_onBtnGetChkRowIndexClick();
				
				//결과표시
				app.lookup("otpRslt").value = "그리드에서 체크된 행의 Index: [ " + result + " ]";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnGetChkRowIndexClick;
				
			}
			
			function f_onBtnGetChkRowIndexClick() {
				//그리드의 체크된 행의 인덱스(Index) 반환
				var result = util.Grid.getCheckedRowIndex(app, "grdList");
				
				return result;
			}
			
			/*
			 * "가져오기" 버튼(btnGetCellValue)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnGetCellValueClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnGetCellValue = e.control;
				
				var result = f_onBtnGetCellValueClick();
				if (!result) return;
				
				//결과표시
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelVal = util.Control.getValue(app, "cmbGetCellValue"); //콤보박스에서 선택된 컬럼명
				app.lookup("otpRslt").value = "현재 선택된 행에서 " + vsSelVal + " 컬럼의 값 : " + result;
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnGetCellValueClick;
				
			}
			
			function f_onBtnGetCellValueClick() {
				
				//cellIndex 값을 가져오고자 하는 cell의 행 index
				var vnIdx = util.Grid.getIndex(app, "grdList"); //그리드에서 선택된 행의 index
				if (vnIdx < 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelVal = util.Control.getValue(app, "cmbGetCellValue"); //콤보박스에서 선택된 컬럼명
				if (ValueUtil.isNull(vsSelVal)) {
					util.Msg.alert( "컬럼을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				//그리드 특정cell의 값을 반환
				var result = util.Grid.getCellValue(app, "grdList", vsSelVal, vnIdx);
				
				return result;
			}
			
			/*
			 * "변경" 버튼(btnSetCellValue)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSetCellValueClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSetCellValue = e.control;
				
				var result = f_onBtnSetCellValueClick();
				if (!result) return;
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnSetCellValueClick;
				
			}
			
			function f_onBtnSetCellValueClick() {
				
				//cellIndex 값을 가져오고자 하는 cell의 행 index
				var vnIdx = util.Grid.getIndex(app, "grdList"); //그리드에서 선택된 행의 index
				if (vnIdx < 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelVal = util.Control.getValue(app, "cmbSetCellValue"); //콤보박스에서 선택된 컬럼명
				if (ValueUtil.isNull(vsSelVal)) {
					util.Msg.alert( "컬럼을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				//그리드 특정cell의 값을 변경
				var vsValue = util.Control.getValue(app, "ipbSetCellValue");
				util.Grid.setCellValue(app, "grdList", vsSelVal, vsValue, vnIdx);
				
			}
			
			/*
			 * "Row추가" 버튼(btnInsertRow)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInsertRowClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnInsertRow = e.control;
				
				f_onBtnInsertRowClick();
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnInsertRowClick;
				
			}
			
			function f_onBtnInsertRowClick() {
				
				//그리드에 신규 행(Row) 추가
				util.Grid.insertRow(app, "grdList", 1);
			}
			
			/*
			 * "Row삭제" 버튼(btnDeleteRow)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteRowClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDeleteRow = e.control;
				
				f_onBtnDeleteRowClick();
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnDeleteRowClick;
			}
			
			function f_onBtnDeleteRowClick() {
				
				var vnIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdList");
				
				if (vnIdx.length == 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				
				//그리드의 선택된 행(Row) 삭제
				util.Grid.deleteRow(app, "grdList", vnIdx)
				
			}
			
			/*
			 * "확인" 버튼(btnGetRowCount)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnGetRowCountClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnGetRowCount = e.control;
				
				var result = f_onBtnGetRowCountClick();
				
				//결과표시
				app.lookup("otpRslt").value = "그리드 행의 개수 : [ " + result + " ]";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnGetRowCountClick;
				
			}
			
			function f_onBtnGetRowCountClick() {
				var result = util.Grid.getRowCount(app, "grdList");
				
				return result;
			}
			
			/*
			 * "선택" 버튼(btnSelectRow)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSelectRowClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSelectRow = e.control;
				
				if (!f_onBtnSelectRowClick()) return;
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnSelectRowClick;
			}
			
			function f_onBtnSelectRowClick() {
				
				//그리드 특정cell의 값을 변경
				var vsIndex = util.Control.getValue(app, "ipbSelectRow");
				if (vsIndex != null && vsIndex != "") {
					//그리드에서 로우(Row)를 선택
					util.Grid.selectRow(app, "grdList", ValueUtil.fixNumber(vsIndex));
				} else {
					util.Msg.alert("선택 할 row index를 입력하시고 클릭하시기 바랍니다.");
				}
			}
			
			/*
			 * "선택" 버튼(btnSelectRowByCondition)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSelectRowByConditionClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSelectRowByCondition = e.control;
				
				f_onBtnSelectRowByConditionClick();
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + onBtnSelectRowByConditionClick;
				
			}
			
			function f_onBtnSelectRowByConditionClick() {
				
				//psCondition 조건식
				//	 ex)"STUD_DIV_RCD == 'CT101REGU' && SA_NM == '컴퓨터정보과'"
				//		사용가능수식 !=", "!==", "$=", "%", "&&", "(", "*", "*=", "+", ",", "-", ".", "/", "/*", "//", "<", "<=", "==", "===", ">", ">=", "?", "[", "^=", "||"
				var psCondition = util.Control.getValue(app, "ipbSelectRowByCondition");
				if (psCondition != null && psCondition != "") {
					//그리드에서 조건에 만족하는 로우(Row)를 선택
					util.Grid.selectRowByCondition(app, "grdList", psCondition);
				} else {
					util.Msg.alert( "조건식을 입력하시고 클릭하시기 바랍니다.");
				}
				
				//그리드에서 조건을 만족하는 Row를 선택
				util.Grid.selectRowByCondition(app, "grdList", psCondition);
				
			}
			
			/*
			 * "확인" 버튼(btnGetRowState)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnGetRowStateClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnGetRowState = e.control;
				
				var result = f_onBtnGetRowStateClick();
				if (!result) return;
				
				//결과표시
				app.lookup("otpRslt").value = util.Grid.getIndex(app, "grdList") + "Row 상태 [ " + result + " ]";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnGetRowStateClick;
				
			}
			
			function f_onBtnGetRowStateClick() {
				
				var vnIdx = util.Grid.getIndex(app, "grdList");
				if (vnIdx < 0) {
					util.Msg.alert( "상태값을 가져올 행을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var result = util.Grid.getRowState(app, "grdList", vnIdx);
				var vsDesc = "";
				if (result == "1") {
					vsDesc = "cpr.data.tabledata.RowState.UNCHANGED : 변경되지 않은 상태\ncpr.data.tabledata.RowState.EMPTIED : 삭제된 로우를 커밋 시 삭제된 배열에서 제거하기 위한 임시 상태";
				} else if (result == "2") {
					vsDesc = "cpr.data.tabledata.RowState.INSERTED : 행이 신규로 추가된 상태.";
				} else if (result == "4") {
					vsDesc = "cpr.data.tabledata.RowState.UPDATED : 행이 수정된 상태";
				} else if (result == "8") {
					vsDesc = "cpr.data.tabledata.RowState.DELETED : 행이 삭제된 상태";
				} else if (result == "16") {
					vsDesc = "cpr.data.tabledata.RowState.INSERTDELETED : 행이 추가되었다가 삭제된 상태";
				};
				
				return vsDesc;
			}
			
			/*
			 * "확인" 버튼(btnSetRowState)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSetRowStateClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSetRowState = e.control;
				
				var result = f_onBtnSetRowStateClick();
				if (!result) return;
				
				//결과표시
				app.lookup("otpRslt").value = util.Grid.getIndex(app, "grdList") + "Row의 상태 변경  ";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnSetRowStateClick;
				
			}
			
			function f_onBtnSetRowStateClick() {
				//cellIndex 값을 가져오고자 하는 cell의 행 index
				var vnIdx = util.Grid.getIndex(app, "grdList"); //그리드에서 선택된 행의 index
				if (vnIdx < 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelState = util.Control.getValue(app, "cmbSetRowState"); //콤보박스에서 선택된 상태값
				if (ValueUtil.isNull(vsSelState)) {
					util.Msg.alert( "변경할 상태값을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var state = null;
				if (vsSelState == "emp") {
					state = cpr.data.tabledata.RowState.EMPTIED; //삭제된 로우를 커밋 시 삭제된 배열을에서 제거하기 위한 임시 상태.
				} else if (vsSelState == "uc") {
					state = cpr.data.tabledata.RowState.UNCHANGED; //변경되지 않은 상태.
				} else if (vsSelState == "i") {
					state = cpr.data.tabledata.RowState.INSERTED; //행이 신규로 추가된 상태.
				} else if (vsSelState == "u") {
					state = cpr.data.tabledata.RowState.UPDATED; //행이 수정된 상태.
				} else if (vsSelState == "d") {
					state = cpr.data.tabledata.RowState.DELETED; //행이 삭제된 상태.
				} else if (vsSelState == "id") {
					state = cpr.data.tabledata.RowState.INSERTDELETED; //행이 추가되었다가 삭제된 상태.
				};
				
				util.Grid.setRowState(app, "grdList", state, vnIdx);
				
				return true;
			}
			
			/*
			 * "일괄상태변경" 버튼(btnSetRowStateAll)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSetRowStateAllClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSetRowStateAll = e.control;
				
				var result = f_onBtnSetRowStateAllClick();
				if (!result) return;
				
				//결과표시
				app.lookup("otpRslt").value = "그리드의 전체Row 상태 변경 [" + app.lookup("cmbSetRowStateAll").getItemByValue(result).label + "] ";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnSetRowStateAllClick;
			}
			
			function f_onBtnSetRowStateAllClick() {
				//콤보박스에서 선택된 상태값
				var vsSelState = util.Control.getValue(app, "cmbSetRowStateAll");
				if (ValueUtil.isNull(vsSelState)) {
					util.Msg.alert( "변경할 상태값을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var state = null;
				if (vsSelState == "emp") {
					state = cpr.data.tabledata.RowState.EMPTIED; //삭제된 로우를 커밋 시 삭제된 배열을에서 제거하기 위한 임시 상태.
				} else if (vsSelState == "uc") {
					state = cpr.data.tabledata.RowState.UNCHANGED; //변경되지 않은 상태.
				} else if (vsSelState == "i") {
					state = cpr.data.tabledata.RowState.INSERTED; //행이 신규로 추가된 상태.
				} else if (vsSelState == "u") {
					state = cpr.data.tabledata.RowState.UPDATED; //행이 수정된 상태.
				} else if (vsSelState == "d") {
					state = cpr.data.tabledata.RowState.DELETED; //행이 삭제된 상태.
				} else if (vsSelState == "id") {
					state = cpr.data.tabledata.RowState.INSERTDELETED; //행이 추가되었다가 삭제된 상태.
				};
				
				util.Grid.setRowStateAll(app, "grdList", state);
				
				return vsSelState;
			}
			
			/*
			 * "확인" 버튼(btnGetRowStatedIndices)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnGetRowStatedIndicesClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnGetRowStatedIndices = e.control;
				
				var result = f_onBtnGetRowStatedIndicesClick();
				if (!result) return;
				
				//결과표시
				app.lookup("otpRslt").value = "해당 상태 값을 갖는 row를 검색하여 row index 배열을 반환 [ " + result + " ]";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnGetRowStatedIndicesClick;
				
			}
			
			function f_onBtnGetRowStatedIndicesClick() {
				//콤보박스에서 선택된 상태값
				var vsSelState = util.Control.getValue(app, "cmbGetRowStatedIndices");
				if (ValueUtil.isNull(vsSelState)) {
					util.Msg.alert( "반환할 상태값을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var state = null;
				if (vsSelState == "emp") {
					state = cpr.data.tabledata.RowState.EMPTIED; //삭제된 로우를 커밋 시 삭제된 배열을에서 제거하기 위한 임시 상태.
				} else if (vsSelState == "uc") {
					state = cpr.data.tabledata.RowState.UNCHANGED; //변경되지 않은 상태.
				} else if (vsSelState == "i") {
					state = cpr.data.tabledata.RowState.INSERTED; //행이 신규로 추가된 상태.
				} else if (vsSelState == "u") {
					state = cpr.data.tabledata.RowState.UPDATED; //행이 수정된 상태.
				} else if (vsSelState == "d") {
					state = cpr.data.tabledata.RowState.DELETED; //행이 삭제된 상태.
				} else if (vsSelState == "id") {
					state = cpr.data.tabledata.RowState.INSERTDELETED; //행이 추가되었다가 삭제된 상태.
				};
				
				var result = util.Grid.getRowStatedIndices(app, "grdList", state);
				
				return result;
			}
			
			/*
			 * "Init" 버튼(btnInit)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInitClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btnInit = e.control;
				f_onBtnInitClick();
				
				//결과표시
				app.lookup("otpRslt").value = "";
				//스크립트 내용 표시
				app.lookup("txaScript").value = "" + f_onBtnInitClick;
			}
			
			function f_onBtnInitClick() {
				//그리드를 초기화한다.
				util.Grid.init(app, "grdList");
			}
			
			/*
			 * "그리드 원상태로 되돌리기" 버튼(btnOrgInit)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnOrgInitClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnOrgInit = e.control;
				var dsList = app.lookup("dsList");
				
				util.DataSet.copyToDataSet(app, "dsListOrg", "dsList");
				dsList.setRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "col1"},
					{"name": "col2"},
					{"name": "col3"},
					{"name": "col4"}
				],
				"rows": [
					{"col1": "ID0001", "col2": "박보검", "col3": "010-1234-5678", "col4": "서울시 여의도"},
					{"col1": "ID0002", "col2": "홍길동", "col3": "02-3414-5678", "col4": "서울시 동작구 123"},
					{"col1": "ID0003", "col2": "이순신", "col3": "010-1234-5678", "col4": "경기도 의정부시 111"},
					{"col1": "ID0004", "col2": "송혜교", "col3": "010-1234-5678", "col4": "서울시 노원구 중계동"},
					{"col1": "ID0004", "col2": "이보영", "col3": "010-1234-5678", "col4": "서울시 강북구"},
					{"col1": "ID0005", "col2": "임장군", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김토마토", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김퇴직", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListOrg");
			dataSet_2.parseData({
				"columns": [
					{"name": "col1"},
					{"name": "col2"},
					{"name": "col3"},
					{"name": "col4"}
				],
				"rows": [
					{"col1": "ID0001", "col2": "박보검", "col3": "010-1234-5678", "col4": "서울시 여의도"},
					{"col1": "ID0002", "col2": "홍길동", "col3": "02-3414-5678", "col4": "서울시 동작구 123"},
					{"col1": "ID0003", "col2": "이순신", "col3": "010-1234-5678", "col4": "경기도 의정부시 111"},
					{"col1": "ID0004", "col2": "송혜교", "col3": "010-1234-5678", "col4": "서울시 노원구 중계동"},
					{"col1": "ID0004", "col2": "이보영", "col3": "010-1234-5678", "col4": "서울시 강북구"},
					{"col1": "ID0005", "col2": "임장군", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김토마토", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김퇴직", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.appHeader("appheader");
			userDefinedControl_1.initializeYn = "N";
			userDefinedControl_1.groupBoxIds = "grpContent";
			container.addChild(userDefinedControl_1, {
				"autoSize": "none",
				"width": "998px",
				"height": "30px"
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			group_1.userAttr({"fillLayout": "Y"});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["3fr", "3fr"]);
			formLayout_1.setRows(["25px", "300px", "1fr"]);
			formLayout_1.setRowAutoSizing(1, true);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grpFormFunc");
				group_2.style.setClasses(["form-box"]);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.setColumns(["24px", "220px", "1fr", "80px", "24px", "170px", "1fr", "150px", "100px"]);
				formLayout_2.setColumnAutoSizing(1, true);
				formLayout_2.setRows(["25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px"]);
				formLayout_2.setRowMinHeight(1, 1);
				formLayout_2.setRowMinHeight(2, 1);
				formLayout_2.setRowMinHeight(3, 1);
				formLayout_2.setRowMinHeight(4, 1);
				formLayout_2.setRowMinHeight(5, 1);
				formLayout_2.setRowMinHeight(6, 1);
				formLayout_2.setRowMinHeight(7, 1);
				formLayout_2.setRowMinHeight(8, 1);
				formLayout_2.setRowMinHeight(9, 1);
				formLayout_2.setRowMinHeight(10, 1);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output("otp1");
					output_1.value = "No";
					output_1.style.css({
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_2 = new cpr.controls.Output("otp3");
					output_2.value = "함수";
					output_2.style.css({
						"text-align" : "center"
					});
					container.addChild(output_2, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_1 = new cpr.controls.Button("btnRevertRowData");
					button_1.value = "행 복구";
					if(typeof onBtnRevertRowDataClick == "function") {
						button_1.addEventListener("click", onBtnRevertRowDataClick);
					}
					container.addChild(button_1, {
						"colIndex": 3,
						"rowIndex": 9,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80,
						"height": 30
					});
					var output_3 = new cpr.controls.Output("otp6");
					output_3.value = "1";
					output_3.style.css({
						"text-align" : "center"
					});
					container.addChild(output_3, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var output_4 = new cpr.controls.Output("otp8");
					output_4.value = "3";
					output_4.style.css({
						"text-align" : "center"
					});
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var output_5 = new cpr.controls.Output("otp12");
					output_5.value = "2";
					output_5.style.css({
						"text-align" : "center"
					});
					container.addChild(output_5, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var button_2 = new cpr.controls.Button("btnReset");
					button_2.value = "Clear";
					if(typeof onBtnResetClick == "function") {
						button_2.addEventListener("click", onBtnResetClick);
					}
					if(typeof onBtnResetClick == "function") {
						button_2.addEventListener("click", onBtnResetClick);
					}
					container.addChild(button_2, {
						"colIndex": 3,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80,
						"height": 25
					});
					var output_6 = new cpr.controls.Output("otp20");
					output_6.value = "설명";
					output_6.style.css({
						"text-align" : "center"
					});
					container.addChild(output_6, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var output_7 = new cpr.controls.Output("otp2");
					output_7.value = "5";
					output_7.style.css({
						"text-align" : "center"
					});
					container.addChild(output_7, {
						"colIndex": 0,
						"rowIndex": 5
					});
					var button_3 = new cpr.controls.Button("btnModi");
					button_3.value = "확인";
					if(typeof onBtnModiClick == "function") {
						button_3.addEventListener("click", onBtnModiClick);
					}
					container.addChild(button_3, {
						"colIndex": 3,
						"rowIndex": 5,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var output_8 = new cpr.controls.Output("otp17");
					output_8.value = "4";
					output_8.style.css({
						"text-align" : "center"
					});
					container.addChild(output_8, {
						"colIndex": 0,
						"rowIndex": 4
					});
					var output_9 = new cpr.controls.Output("otp30");
					output_9.value = "11";
					output_9.style.css({
						"text-align" : "center"
					});
					container.addChild(output_9, {
						"colIndex": 4,
						"rowIndex": 1
					});
					var output_10 = new cpr.controls.Output("otp31");
					output_10.value = "12";
					output_10.style.css({
						"text-align" : "center"
					});
					container.addChild(output_10, {
						"colIndex": 4,
						"rowIndex": 2
					});
					var output_11 = new cpr.controls.Output("otp32");
					output_11.value = "No";
					output_11.style.css({
						"text-align" : "center"
					});
					container.addChild(output_11, {
						"colIndex": 4,
						"rowIndex": 0
					});
					var output_12 = new cpr.controls.Output("otp4");
					output_12.value = "함수";
					output_12.style.css({
						"text-align" : "center"
					});
					container.addChild(output_12, {
						"colIndex": 5,
						"rowIndex": 0
					});
					var output_13 = new cpr.controls.Output("otp42");
					output_13.value = "설명";
					output_13.style.css({
						"text-align" : "center"
					});
					container.addChild(output_13, {
						"colIndex": 6,
						"rowIndex": 0
					});
					var output_14 = new cpr.controls.Output("otp43");
					output_14.value = "동작";
					output_14.style.css({
						"text-align" : "center"
					});
					container.addChild(output_14, {
						"colIndex": 3,
						"rowIndex": 0
					});
					var output_15 = new cpr.controls.Output("otp44");
					output_15.value = "동작";
					output_15.style.css({
						"text-align" : "center"
					});
					container.addChild(output_15, {
						"colIndex": 8,
						"rowIndex": 0
					});
					var output_16 = new cpr.controls.Output("otp45");
					output_16.value = "6";
					output_16.style.css({
						"text-align" : "center"
					});
					container.addChild(output_16, {
						"colIndex": 0,
						"rowIndex": 6
					});
					var output_17 = new cpr.controls.Output("otp46");
					output_17.value = "7";
					output_17.style.css({
						"text-align" : "center"
					});
					container.addChild(output_17, {
						"colIndex": 0,
						"rowIndex": 7
					});
					var output_18 = new cpr.controls.Output("otp47");
					output_18.value = "8";
					output_18.style.css({
						"text-align" : "center"
					});
					container.addChild(output_18, {
						"colIndex": 0,
						"rowIndex": 8
					});
					var output_19 = new cpr.controls.Output("otp48");
					output_19.value = "9";
					output_19.style.css({
						"text-align" : "center"
					});
					container.addChild(output_19, {
						"colIndex": 0,
						"rowIndex": 9
					});
					var output_20 = new cpr.controls.Output("otp49");
					output_20.value = "19";
					output_20.style.css({
						"text-align" : "center"
					});
					container.addChild(output_20, {
						"colIndex": 4,
						"rowIndex": 9
					});
					var output_21 = new cpr.controls.Output("otp50");
					output_21.value = "13";
					output_21.style.css({
						"text-align" : "center"
					});
					container.addChild(output_21, {
						"colIndex": 4,
						"rowIndex": 3
					});
					var output_22 = new cpr.controls.Output("otp51");
					output_22.value = "15";
					output_22.style.css({
						"text-align" : "center"
					});
					container.addChild(output_22, {
						"colIndex": 4,
						"rowIndex": 5
					});
					var output_23 = new cpr.controls.Output("otp52");
					output_23.value = "14";
					output_23.style.css({
						"text-align" : "center"
					});
					container.addChild(output_23, {
						"colIndex": 4,
						"rowIndex": 4
					});
					var output_24 = new cpr.controls.Output("otp53");
					output_24.value = "16";
					output_24.style.css({
						"text-align" : "center"
					});
					container.addChild(output_24, {
						"colIndex": 4,
						"rowIndex": 6
					});
					var output_25 = new cpr.controls.Output("otp54");
					output_25.value = "17";
					output_25.style.css({
						"text-align" : "center"
					});
					container.addChild(output_25, {
						"colIndex": 4,
						"rowIndex": 7
					});
					var output_26 = new cpr.controls.Output("otp55");
					output_26.value = "18";
					output_26.style.css({
						"text-align" : "center"
					});
					container.addChild(output_26, {
						"colIndex": 4,
						"rowIndex": 8
					});
					var button_4 = new cpr.controls.Button("btnGetIndex");
					button_4.value = "가져오기";
					if(typeof onBtnGetIndexClick == "function") {
						button_4.addEventListener("click", onBtnGetIndexClick);
					}
					container.addChild(button_4, {
						"colIndex": 3,
						"rowIndex": 8,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var button_5 = new cpr.controls.Button("btnRevertAllData");
					button_5.value = "전체복구";
					button_5.style.setClasses(["btnBlue"]);
					if(typeof onBtnRevertAllDataClick == "function") {
						button_5.addEventListener("click", onBtnRevertAllDataClick);
					}
					container.addChild(button_5, {
						"colIndex": 3,
						"rowIndex": 10,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var button_6 = new cpr.controls.Button("btnGetChkRowIndex");
					button_6.value = "가져오기";
					if(typeof onBtnGetChkRowIndexClick == "function") {
						button_6.addEventListener("click", onBtnGetChkRowIndexClick);
					}
					container.addChild(button_6, {
						"colIndex": 3,
						"rowIndex": 7,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var button_7 = new cpr.controls.Button("btnGetChkSelRowIndex");
					button_7.value = "가져오기";
					if(typeof onBtnGetChkSelRowIndexClick == "function") {
						button_7.addEventListener("click", onBtnGetChkSelRowIndexClick);
					}
					container.addChild(button_7, {
						"colIndex": 3,
						"rowIndex": 6,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var button_8 = new cpr.controls.Button("btnSetCellValue");
					button_8.value = "변경";
					if(typeof onBtnSetCellValueClick == "function") {
						button_8.addEventListener("click", onBtnSetCellValueClick);
					}
					container.addChild(button_8, {
						"colIndex": 8,
						"rowIndex": 4,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var output_27 = new cpr.controls.Output("otp63");
					output_27.value = "입력값";
					output_27.style.css({
						"text-align" : "center"
					});
					container.addChild(output_27, {
						"colIndex": 7,
						"rowIndex": 0
					});
					var comboBox_1 = new cpr.controls.ComboBox("cmbGetCellValue");
					comboBox_1.placeholder = "-반환col-";
					(function(comboBox_1){
						comboBox_1.addItem(new cpr.controls.Item("ID", "col1"));
						comboBox_1.addItem(new cpr.controls.Item("성명", "col2"));
						comboBox_1.addItem(new cpr.controls.Item("전화번호", "col3"));
						comboBox_1.addItem(new cpr.controls.Item("주소", "col4"));
					})(comboBox_1);
					container.addChild(comboBox_1, {
						"colIndex": 7,
						"rowIndex": 5
					});
					var button_9 = new cpr.controls.Button("btnGetCellValue");
					button_9.value = "확인";
					if(typeof onBtnGetCellValueClick == "function") {
						button_9.addEventListener("click", onBtnGetCellValueClick);
					}
					container.addChild(button_9, {
						"colIndex": 8,
						"rowIndex": 5,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var group_3 = new cpr.controls.Container("grp3");
					// Layout
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.setColumns(["1fr", "60px"]);
					formLayout_3.setRows(["1fr"]);
					group_3.setLayout(formLayout_3);
					(function(container){
						var comboBox_2 = new cpr.controls.ComboBox("cmbSetCellValue");
						comboBox_2.placeholder = "수정col";
						(function(comboBox_2){
							comboBox_2.addItem(new cpr.controls.Item("ID", "col1"));
							comboBox_2.addItem(new cpr.controls.Item("성명", "col2"));
							comboBox_2.addItem(new cpr.controls.Item("전화번호", "col3"));
							comboBox_2.addItem(new cpr.controls.Item("주소", "col4"));
						})(comboBox_2);
						container.addChild(comboBox_2, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var inputBox_1 = new cpr.controls.InputBox("ipbSetCellValue");
						inputBox_1.placeholder = "수정값";
						container.addChild(inputBox_1, {
							"colIndex": 1,
							"rowIndex": 0
						});
					})(group_3);
					container.addChild(group_3, {
						"colIndex": 7,
						"rowIndex": 4
					});
					var button_10 = new cpr.controls.Button("btnInsertRow");
					button_10.value = "Row추가";
					if(typeof onBtnInsertRowClick == "function") {
						button_10.addEventListener("click", onBtnInsertRowClick);
					}
					container.addChild(button_10, {
						"colIndex": 3,
						"rowIndex": 3,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var button_11 = new cpr.controls.Button("btnDeleteRow");
					button_11.value = "Row삭제";
					if(typeof onBtnDeleteRowClick == "function") {
						button_11.addEventListener("click", onBtnDeleteRowClick);
					}
					container.addChild(button_11, {
						"colIndex": 3,
						"rowIndex": 4,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var button_12 = new cpr.controls.Button("btnGetRowCount");
					button_12.value = "확인";
					if(typeof onBtnGetRowCountClick == "function") {
						button_12.addEventListener("click", onBtnGetRowCountClick);
					}
					container.addChild(button_12, {
						"colIndex": 8,
						"rowIndex": 3,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var inputBox_2 = new cpr.controls.InputBox("ipbSelectRow");
					inputBox_2.placeholder = "선택 할 row index";
					container.addChild(inputBox_2, {
						"colIndex": 7,
						"rowIndex": 1
					});
					var button_13 = new cpr.controls.Button("btnSelectRow");
					button_13.value = "선택";
					if(typeof onBtnSelectRowClick == "function") {
						button_13.addEventListener("click", onBtnSelectRowClick);
					}
					container.addChild(button_13, {
						"colIndex": 8,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var button_14 = new cpr.controls.Button("btnSelectRowByCondition");
					button_14.value = "선택";
					if(typeof onBtnSelectRowByConditionClick == "function") {
						button_14.addEventListener("click", onBtnSelectRowByConditionClick);
					}
					container.addChild(button_14, {
						"colIndex": 8,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var inputBox_3 = new cpr.controls.InputBox("ipbSelectRowByCondition");
					inputBox_3.placeholder = "조건식 ex: col2=\"임장군\"";
					container.addChild(inputBox_3, {
						"colIndex": 7,
						"rowIndex": 2
					});
					var button_15 = new cpr.controls.Button("btnGetRowState");
					button_15.value = "확인";
					if(typeof onBtnGetRowStateClick == "function") {
						button_15.addEventListener("click", onBtnGetRowStateClick);
					}
					container.addChild(button_15, {
						"colIndex": 8,
						"rowIndex": 6,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var button_16 = new cpr.controls.Button("btnSetRowState");
					button_16.value = "Row상태변경";
					if(typeof onBtnSetRowStateClick == "function") {
						button_16.addEventListener("click", onBtnSetRowStateClick);
					}
					container.addChild(button_16, {
						"colIndex": 8,
						"rowIndex": 7,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var comboBox_3 = new cpr.controls.ComboBox("cmbSetRowState");
					comboBox_3.placeholder = "변경할 상태값 선택";
					(function(comboBox_3){
						comboBox_3.addItem(new cpr.controls.Item("EMPTIED(삭제된 로우를 커밋 시 제거하지위한 임시 상태)", "emp"));
						comboBox_3.addItem(new cpr.controls.Item("UNCHANGED(변경되지 않은 상태)", "uc"));
						comboBox_3.addItem(new cpr.controls.Item("INSERTED(행이 신규로 추가된 상태)", "i"));
						comboBox_3.addItem(new cpr.controls.Item("UPDATED(행이 수정된 상태)", "u"));
						comboBox_3.addItem(new cpr.controls.Item("DELETED(행이 삭제된 상태)", "d"));
						comboBox_3.addItem(new cpr.controls.Item("INSERTDELETED(행이 추가되었다가 삭제된 상태)", "id"));
					})(comboBox_3);
					container.addChild(comboBox_3, {
						"colIndex": 7,
						"rowIndex": 7
					});
					var button_17 = new cpr.controls.Button("btnSetRowStateAll");
					button_17.value = "일괄상태변경";
					if(typeof onBtnSetRowStateAllClick == "function") {
						button_17.addEventListener("click", onBtnSetRowStateAllClick);
					}
					container.addChild(button_17, {
						"colIndex": 8,
						"rowIndex": 8,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var comboBox_4 = new cpr.controls.ComboBox("cmbSetRowStateAll");
					comboBox_4.placeholder = "변경할 상태값 선택";
					(function(comboBox_4){
						comboBox_4.addItem(new cpr.controls.Item("EMPTIED(삭제된 로우를 커밋 시 제거하지위한 임시 상태)", "emp"));
						comboBox_4.addItem(new cpr.controls.Item("UNCHANGED(변경되지 않은 상태)", "uc"));
						comboBox_4.addItem(new cpr.controls.Item("INSERTED(행이 신규로 추가된 상태)", "i"));
						comboBox_4.addItem(new cpr.controls.Item("UPDATED(행이 수정된 상태)", "u"));
						comboBox_4.addItem(new cpr.controls.Item("DELETED(행이 삭제된 상태)", "d"));
						comboBox_4.addItem(new cpr.controls.Item("INSERTDELETED(행이 추가되었다가 삭제된 상태)", "id"));
					})(comboBox_4);
					container.addChild(comboBox_4, {
						"colIndex": 7,
						"rowIndex": 8
					});
					var button_18 = new cpr.controls.Button("btnGetRowStatedIndices");
					button_18.value = "확인";
					if(typeof onBtnGetRowStatedIndicesClick == "function") {
						button_18.addEventListener("click", onBtnGetRowStatedIndicesClick);
					}
					container.addChild(button_18, {
						"colIndex": 8,
						"rowIndex": 9,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 90
					});
					var comboBox_5 = new cpr.controls.ComboBox("cmbGetRowStatedIndices");
					comboBox_5.placeholder = "상태값 선택";
					(function(comboBox_5){
						comboBox_5.addItem(new cpr.controls.Item("EMPTIED(삭제된 로우를 커밋 시 제거하지위한 임시 상태)", "emp"));
						comboBox_5.addItem(new cpr.controls.Item("UNCHANGED(변경되지 않은 상태)", "uc"));
						comboBox_5.addItem(new cpr.controls.Item("INSERTED(행이 신규로 추가된 상태)", "i"));
						comboBox_5.addItem(new cpr.controls.Item("UPDATED(행이 수정된 상태)", "u"));
						comboBox_5.addItem(new cpr.controls.Item("DELETED(행이 삭제된 상태)", "d"));
						comboBox_5.addItem(new cpr.controls.Item("INSERTDELETED(행이 추가되었다가 삭제된 상태)", "id"));
					})(comboBox_5);
					container.addChild(comboBox_5, {
						"colIndex": 7,
						"rowIndex": 9
					});
					var output_28 = new cpr.controls.Output("otp9");
					output_28.value = "10";
					output_28.style.css({
						"text-align" : "center"
					});
					container.addChild(output_28, {
						"colIndex": 0,
						"rowIndex": 10
					});
					var button_19 = new cpr.controls.Button("btnInit");
					button_19.value = "Init";
					if(typeof onBtnInitClick == "function") {
						button_19.addEventListener("click", onBtnInitClick);
					}
					container.addChild(button_19, {
						"colIndex": 3,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 80
					});
					var inputBox_4 = new cpr.controls.InputBox("ipb5");
					inputBox_4.readOnly = true;
					inputBox_4.value = "init";
					container.addChild(inputBox_4, {
						"colIndex": 1,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_5 = new cpr.controls.InputBox("ipb6");
					inputBox_5.readOnly = true;
					inputBox_5.value = "reset";
					container.addChild(inputBox_5, {
						"colIndex": 1,
						"rowIndex": 2,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_6 = new cpr.controls.InputBox("ipb7");
					inputBox_6.readOnly = true;
					inputBox_6.value = "insertRow";
					container.addChild(inputBox_6, {
						"colIndex": 1,
						"rowIndex": 3,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_7 = new cpr.controls.InputBox("ipb8");
					inputBox_7.readOnly = true;
					inputBox_7.value = "deleteRow";
					container.addChild(inputBox_7, {
						"colIndex": 1,
						"rowIndex": 4,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_8 = new cpr.controls.InputBox("ipb9");
					inputBox_8.readOnly = true;
					inputBox_8.value = "isModified";
					container.addChild(inputBox_8, {
						"colIndex": 1,
						"rowIndex": 5,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_9 = new cpr.controls.InputBox("ipb10");
					inputBox_9.readOnly = true;
					inputBox_9.value = "getCheckOrSelectedRowIndex";
					container.addChild(inputBox_9, {
						"colIndex": 1,
						"rowIndex": 6,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_10 = new cpr.controls.InputBox("ipb11");
					inputBox_10.readOnly = true;
					inputBox_10.value = "getCheckedRowIndex";
					container.addChild(inputBox_10, {
						"colIndex": 1,
						"rowIndex": 7
					});
					var inputBox_11 = new cpr.controls.InputBox("ipb12");
					inputBox_11.readOnly = true;
					inputBox_11.value = "getIndex";
					container.addChild(inputBox_11, {
						"colIndex": 1,
						"rowIndex": 8
					});
					var inputBox_12 = new cpr.controls.InputBox("ipb13");
					inputBox_12.readOnly = true;
					inputBox_12.value = "revertRowData";
					container.addChild(inputBox_12, {
						"colIndex": 1,
						"rowIndex": 9
					});
					var inputBox_13 = new cpr.controls.InputBox("ipb14");
					inputBox_13.readOnly = true;
					inputBox_13.value = "revertAllData";
					container.addChild(inputBox_13, {
						"colIndex": 1,
						"rowIndex": 10
					});
					var inputBox_14 = new cpr.controls.InputBox("ipb15");
					inputBox_14.readOnly = true;
					inputBox_14.value = "그리드 초기화";
					container.addChild(inputBox_14, {
						"colIndex": 2,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_15 = new cpr.controls.InputBox("ipb16");
					inputBox_15.readOnly = true;
					inputBox_15.value = "그리드 데이터clear";
					container.addChild(inputBox_15, {
						"colIndex": 2,
						"rowIndex": 2,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_16 = new cpr.controls.InputBox("ipb17");
					inputBox_16.readOnly = true;
					inputBox_16.value = "그리드에 신규 행(Row) 추가";
					container.addChild(inputBox_16, {
						"colIndex": 2,
						"rowIndex": 3,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_17 = new cpr.controls.InputBox("ipb18");
					inputBox_17.readOnly = true;
					inputBox_17.value = "그리드의 선택된 행(Row) 삭제";
					container.addChild(inputBox_17, {
						"colIndex": 2,
						"rowIndex": 4,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_18 = new cpr.controls.InputBox("ipb19");
					inputBox_18.readOnly = true;
					inputBox_18.value = "그리드의 변경사항 유/무 반환";
					container.addChild(inputBox_18, {
						"colIndex": 2,
						"rowIndex": 5,
						"colSpan": 1,
						"rowSpan": 1
					});
					var inputBox_19 = new cpr.controls.InputBox("ipb20");
					inputBox_19.readOnly = true;
					inputBox_19.value = "그리드의 체크 또는 선택된 행의 인덱스 반환 (check우선)";
					container.addChild(inputBox_19, {
						"colIndex": 2,
						"rowIndex": 6
					});
					var inputBox_20 = new cpr.controls.InputBox("ipb21");
					inputBox_20.readOnly = true;
					inputBox_20.value = "그리드의 체크된 행의 인덱스(Index) 반환";
					container.addChild(inputBox_20, {
						"colIndex": 2,
						"rowIndex": 7
					});
					var inputBox_21 = new cpr.controls.InputBox("ipb22");
					inputBox_21.readOnly = true;
					inputBox_21.value = "그리드의 현재 선택된 행의 인덱스(Index) 반환";
					container.addChild(inputBox_21, {
						"colIndex": 2,
						"rowIndex": 8
					});
					var inputBox_22 = new cpr.controls.InputBox("ipb23");
					inputBox_22.readOnly = true;
					inputBox_22.value = "그리드내 변경된 특정행(Row)의 데이터를 원상태로 복구";
					container.addChild(inputBox_22, {
						"colIndex": 2,
						"rowIndex": 9
					});
					var inputBox_23 = new cpr.controls.InputBox("ipb24");
					inputBox_23.readOnly = true;
					inputBox_23.value = "그리드내 변경된 모든데이터를 원상태로 복구";
					container.addChild(inputBox_23, {
						"colIndex": 2,
						"rowIndex": 10
					});
					var inputBox_24 = new cpr.controls.InputBox("ipb25");
					inputBox_24.readOnly = true;
					inputBox_24.value = "selectRow";
					container.addChild(inputBox_24, {
						"colIndex": 5,
						"rowIndex": 1
					});
					var inputBox_25 = new cpr.controls.InputBox("ipb26");
					inputBox_25.readOnly = true;
					inputBox_25.value = "selectRowByCondition";
					container.addChild(inputBox_25, {
						"colIndex": 5,
						"rowIndex": 2
					});
					var inputBox_26 = new cpr.controls.InputBox("ipb27");
					inputBox_26.readOnly = true;
					inputBox_26.value = "getRowCount";
					container.addChild(inputBox_26, {
						"colIndex": 5,
						"rowIndex": 3
					});
					var inputBox_27 = new cpr.controls.InputBox("ipb28");
					inputBox_27.readOnly = true;
					inputBox_27.value = "setCellValue";
					container.addChild(inputBox_27, {
						"colIndex": 5,
						"rowIndex": 4
					});
					var inputBox_28 = new cpr.controls.InputBox("ipb29");
					inputBox_28.readOnly = true;
					inputBox_28.value = "getCellValue";
					container.addChild(inputBox_28, {
						"colIndex": 5,
						"rowIndex": 5
					});
					var inputBox_29 = new cpr.controls.InputBox("ipb30");
					inputBox_29.readOnly = true;
					inputBox_29.value = "getRowState";
					container.addChild(inputBox_29, {
						"colIndex": 5,
						"rowIndex": 6
					});
					var inputBox_30 = new cpr.controls.InputBox("ipb31");
					inputBox_30.readOnly = true;
					inputBox_30.value = "setRowState";
					container.addChild(inputBox_30, {
						"colIndex": 5,
						"rowIndex": 7
					});
					var inputBox_31 = new cpr.controls.InputBox("ipb32");
					inputBox_31.readOnly = true;
					inputBox_31.value = "setRowStateAll";
					container.addChild(inputBox_31, {
						"colIndex": 5,
						"rowIndex": 8
					});
					var inputBox_32 = new cpr.controls.InputBox("ipb33");
					inputBox_32.readOnly = true;
					inputBox_32.value = "getRowStatedIndices";
					container.addChild(inputBox_32, {
						"colIndex": 5,
						"rowIndex": 9
					});
					var inputBox_33 = new cpr.controls.InputBox("ipb34");
					inputBox_33.readOnly = true;
					inputBox_33.value = "그리드에서 로우(Row)를 선택";
					container.addChild(inputBox_33, {
						"colIndex": 6,
						"rowIndex": 1
					});
					var inputBox_34 = new cpr.controls.InputBox("ipb35");
					inputBox_34.readOnly = true;
					inputBox_34.value = "그리드에서 조건을 만족하는 Row를 선택";
					container.addChild(inputBox_34, {
						"colIndex": 6,
						"rowIndex": 2
					});
					var inputBox_35 = new cpr.controls.InputBox("ipb36");
					inputBox_35.readOnly = true;
					inputBox_35.value = "그리드의 Row개수 반환";
					container.addChild(inputBox_35, {
						"colIndex": 6,
						"rowIndex": 3
					});
					var inputBox_36 = new cpr.controls.InputBox("ipb37");
					inputBox_36.readOnly = true;
					inputBox_36.value = "그리드 특정cell의 값을 변경";
					container.addChild(inputBox_36, {
						"colIndex": 6,
						"rowIndex": 4
					});
					var inputBox_37 = new cpr.controls.InputBox("ipb38");
					inputBox_37.readOnly = true;
					inputBox_37.value = "그리드 특정cell의 값을 반환";
					container.addChild(inputBox_37, {
						"colIndex": 6,
						"rowIndex": 5
					});
					var inputBox_38 = new cpr.controls.InputBox("ipb39");
					inputBox_38.readOnly = true;
					inputBox_38.value = "특정Row의 상태값 반환";
					container.addChild(inputBox_38, {
						"colIndex": 6,
						"rowIndex": 6
					});
					var inputBox_39 = new cpr.controls.InputBox("ipb40");
					inputBox_39.readOnly = true;
					inputBox_39.value = "특정Row의 상태값 변경";
					container.addChild(inputBox_39, {
						"colIndex": 6,
						"rowIndex": 7
					});
					var inputBox_40 = new cpr.controls.InputBox("ipb41");
					inputBox_40.readOnly = true;
					inputBox_40.value = "전체Row의 상태값을 특정 상태(state)로 일괄 업데이트";
					container.addChild(inputBox_40, {
						"colIndex": 6,
						"rowIndex": 8
					});
					var inputBox_41 = new cpr.controls.InputBox("ipb42");
					inputBox_41.readOnly = true;
					inputBox_41.value = "특정상태값의 Row Index를 배열로 반환";
					container.addChild(inputBox_41, {
						"colIndex": 6,
						"rowIndex": 9
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 2,
					"rowSpan": 1
				});
				var group_4 = new cpr.controls.Container("grpFormCont");
				// Layout
				var formLayout_4 = new cpr.controls.layouts.FormLayout();
				formLayout_4.setColumns(["1fr"]);
				formLayout_4.setRows(["25px", "1fr", "25px", "100px"]);
				group_4.setLayout(formLayout_4);
				(function(container){
					var userDefinedControl_2 = new udc.com.comFormTitle("comformtitle4");
					userDefinedControl_2.title = "프리폼 연결그리드";
					container.addChild(userDefinedControl_2, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1
					});
					var group_5 = new cpr.controls.Container("grp4");
					group_5.style.setClasses(["form-box"]);
					// Layout
					var formLayout_5 = new cpr.controls.layouts.FormLayout();
					formLayout_5.topMargin = "5px";
					formLayout_5.rightMargin = "5px";
					formLayout_5.bottomMargin = "5px";
					formLayout_5.leftMargin = "5px";
					formLayout_5.setColumns(["120px", "1fr"]);
					formLayout_5.setRows(["1fr"]);
					group_5.setLayout(formLayout_5);
					(function(container){
						var textArea_1 = new cpr.controls.TextArea("txa1");
						textArea_1.readOnly = true;
						textArea_1.value = "1. 예시그리드를 확인하고 동작 버튼을 클릭한다. (필요시 입력값 선택)\r\n2. 그리드의 기능동작 및 결과값을 확인한다. \r\n3. 하단의 스크립트내용을 확인한다.\r\n4. 스크립트내용을 복사하여 코딩에 활용한다.";
						container.addChild(textArea_1, {
							"colIndex": 1,
							"rowIndex": 0
						});
						var output_29 = new cpr.controls.Output("otp25");
						output_29.value = "시나리오";
						container.addChild(output_29, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_5);
					container.addChild(group_5, {
						"colIndex": 0,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1
					});
					var userDefinedControl_3 = new udc.com.comFormTitle("comformtitle5");
					userDefinedControl_3.title = "스크립트 내용";
					container.addChild(userDefinedControl_3, {
						"colIndex": 0,
						"rowIndex": 2,
						"colSpan": 1,
						"rowSpan": 1
					});
					var textArea_2 = new cpr.controls.TextArea("txaScript");
					textArea_2.style.setClasses(["form-box"]);
					container.addChild(textArea_2, {
						"colIndex": 0,
						"rowIndex": 3
					});
				})(group_4);
				container.addChild(group_4, {
					"colIndex": 1,
					"rowIndex": 2
				});
				var userDefinedControl_4 = new udc.com.comFormTitle("comformtitle3");
				userDefinedControl_4.title = "기능(함수)";
				container.addChild(userDefinedControl_4, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
				var group_6 = new cpr.controls.Container("grp2");
				// Layout
				var formLayout_6 = new cpr.controls.layouts.FormLayout();
				formLayout_6.setColumns(["3fr", "190px"]);
				formLayout_6.setRows(["25px", "1fr", "25px", "100px"]);
				group_6.setLayout(formLayout_6);
				(function(container){
					var button_20 = new cpr.controls.Button("btnOrgInit");
					button_20.value = "그리드 원상태로 되돌리기";
					button_20.style.setClasses(["btn-blue"]);
					if(typeof onBtnOrgInitClick2 == "function") {
						button_20.addEventListener("click", onBtnOrgInitClick2);
					}
					container.addChild(button_20, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill",
						"width": 180
					});
					var userDefinedControl_5 = new udc.com.comFormTitle("comformtitle2");
					userDefinedControl_5.title = "예시 그리드";
					container.addChild(userDefinedControl_5, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var grid_1 = new cpr.controls.Grid("grdList");
					grid_1.init({
						"dataSet": app.lookup("dsList"),
						"columnMovable": true,
						"resizableColumns": "all",
						"columns": [
							{"width": "25px"},
							{"width": "26px"},
							{"width": "54px"},
							{"width": "60px"},
							{"width": "100px"},
							{"width": "175px"}
						],
						"header": {
							"rows": [{"height": "27px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.columnType = "checkbox";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "No";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.targetColumnName = "col1";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "ID";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.targetColumnName = "col2";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "성명";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.targetColumnName = "col3";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "전화번호";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.targetColumnName = "col4";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "주소";
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.columnType = "checkbox";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.columnType = "rowindex";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.columnName = "col1";
										cell.control = (function(){
											var inputBox_42 = new cpr.controls.InputBox("ipb1");
											inputBox_42.bind("value").toDataColumn("col1");
											return inputBox_42;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.columnName = "col2";
										cell.control = (function(){
											var inputBox_43 = new cpr.controls.InputBox("ipb2");
											inputBox_43.bind("value").toDataColumn("col2");
											return inputBox_43;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.columnName = "col3";
										cell.control = (function(){
											var inputBox_44 = new cpr.controls.InputBox("ipb3");
											inputBox_44.bind("value").toDataColumn("col3");
											return inputBox_44;
										})();
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.columnName = "col4";
										cell.style.css({
											"text-align" : "left"
										});
										cell.control = (function(){
											var inputBox_45 = new cpr.controls.InputBox("ipb4");
											inputBox_45.bind("value").toDataColumn("col4");
											return inputBox_45;
										})();
									}
								}
							]
						}
					});
					container.addChild(grid_1, {
						"colIndex": 0,
						"rowIndex": 1,
						"colSpan": 2,
						"rowSpan": 1
					});
					var userDefinedControl_6 = new udc.com.comFormTitle("comformtitle6");
					userDefinedControl_6.title = "결과값";
					container.addChild(userDefinedControl_6, {
						"colIndex": 0,
						"rowIndex": 2,
						"colSpan": 2,
						"rowSpan": 1
					});
					var inputBox_46 = new cpr.controls.InputBox("otpRslt");
					inputBox_46.readOnly = true;
					container.addChild(inputBox_46, {
						"colIndex": 0,
						"rowIndex": 3,
						"colSpan": 2,
						"rowSpan": 1
					});
				})(group_6);
				container.addChild(group_6, {
					"colIndex": 0,
					"rowIndex": 2,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "972px",
				"height": "645px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "그리드 기능";
	cpr.core.Platform.INSTANCE.register(app);
})();
