/*
 * App URI: app/exam/guide/grid/GridSample01
 * Source Location: app/exam/guide/grid/GridSample01.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/guide/grid/GridSample01", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * GridSample01.js
			 * Created at 2022. 3. 8. 오후 12:38:56.
			 *
			 * @author jiyeon
			 ************************************************/
			
			var util = createCommonUtil();
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				//그리드 초기화
				util.Grid.init(app, "grdList");
				//폼 초기화
				util.FreeForm.init(app, "grpFormFunc");
			}
			
			
			
			
			
			/*
			 * "그리드 원상태로 되돌리기" 버튼(btnRe)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnReClick(e){
				var btnRe = e.control;
				
				var dsList = app.lookup("dsList");
				
				util.DataSet.copyToDataSet(app, "dsListOrg", "dsList");
				dsList.setRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
			}
			
			
			
			
			
			/*
			 * "Init" 버튼(btnInit)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * init 함수
			 */
			function onBtnInitClick(e){
				var btnInit = e.control;
				
				//함수 실행
				f_onInit();
				
				//스크립트 출력
				printSource(f_onInit);
				
				//결과 표시
				app.lookup("optRslt").value = "";
			}
			
			function f_onInit() {
				//그리드를 초기화한다.
				util.Grid.init(app, "grdList");
			}
			
			
			/*
			 * "Clear" 버튼(btnReset)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * reset 함수
			 */
			function onBtnResetClick(e){
				var btnReset = e.control;
				
				f_onReset();
				
				printSource(f_onReset);
				
				app.lookup("optRslt").value = "";
			}
			
			function f_onReset() {
				util.Grid.reset(app, "grdList");
			}
			
			
			/*
			 * "Row 추가" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * row 추가
			 */
			function onBtn3Click(e){
				var btn3 = e.control;
				
				f_onInsertRow();
				
				printSource(f_onInsertRow);
				
				app.lookup("optRslt").value = "";
			}
			
			function f_onInsertRow() {
				//그리드에 신규 행(Row) 추가
				util.Grid.insertRow(app, "grdList", 1);
			}
			
			
			/*
			 * "Row 삭제" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * row 삭제
			 */
			function onBtn4Click(e){
				var btn4 = e.control;
				
				f_onDeleteRow();
				
				printSource(f_onDeleteRow);
				
				app.lookup("optRslt").value = "";
			}
			
			function f_onDeleteRow() {
				
				var vnIdx = util.Grid.getCheckOrSelectedRowIndex(app, "grdList");
				
				if (vnIdx.length == 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				
				//그리드의 선택된 행(Row) 삭제
				util.Grid.deleteRow(app, "grdList", vnIdx)
				
			}
			
			
			/*
			 * "확인" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 그리드의 변경사항 유/무 반환
			 */
			function onBtn5Click(e){
				var btn5 = e.control;
				
				var result = f_onIsModified();
				
				printSource(f_onIsModified);
				
				app.lookup("optRslt").value = result;
			}
			
			function f_onIsModified() {
				
				//그리드의 변경사항 유/무를 반환한다. 
				if (util.Grid.isModified(app, "grdList")) {
					return true;
				} else {
					return false;
				}
			}
			
			
			/*
			 * "가져오기" 버튼(btn6)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 선택 혹은 체크된 행의 인덱스 반환
			 */
			function onBtn6Click(e){
				var btn6 = e.control;
				
				var result = f_onGetChkSelRowIndex();
				
				printSource(f_onGetChkSelRowIndex);
				
				app.lookup("optRslt").value = "그리드에서 체크 또는 선택된 행의 Index : [ " + result + " ]";
			}
			
			function f_onGetChkSelRowIndex() {
				//그리드의 선택 또는 체크된 행의 인덱스(Index) 반환
				var result = util.Grid.getCheckOrSelectedRowIndex(app, "grdList");
				
				return result;
			}
			
			
			/*
			 * "가져오기" 버튼(btn7)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 체크된 행의 인덱스 반환
			 */
			function onBtn7Click(e){
				var btn7 = e.control;
				
				var result = f_onGetChkRowIndex();
				
				printSource(f_onGetChkRowIndex);
				
				app.lookup("optRslt").value = "그리드에서 체크된 행의 Index : [ " + result + " ]";
			}
			
			function f_onGetChkRowIndex() {
				//그리드의 체크된 행의 인덱스(Index) 반환
				var result = util.Grid.getCheckedRowIndex(app, "grdList");
				
				return result;
			}
			
			
			/*
			 * "가져오기" 버튼(btn8)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 현재 선택된 행의 인덱스 반환
			 */
			function onBtn8Click(e){
				var btn8 = e.control;
				
				var result = f_onGetIndex();
				
				printSource(f_onGetIndex);
				
				app.lookup("optRslt").value = result;
			}
			
			function f_onGetIndex() {
				//Index 가져오기 
				var result = util.Grid.getIndex(app, "grdList");
				
				return result;
			}
			
			
			/*
			 * "행 복구" 버튼(btn9)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 특정 행 복구
			 */
			function onBtn9Click(e){
				var btn9 = e.control;
				
				f_onRevertRowData();
				
				printSource(f_onRevertRowData);
				
				app.lookup("optRslt").value = "";
			}
			
			function f_onRevertRowData() {
				
				if (!util.Grid.isModified(app, "grdList")) {
					util.Msg.alert( "그리드 특정행 내용 변경 후 진행해 주시기 바랍니다.");
					
					return false;
				};
				
				//Index 가져오기 
				var idxRow = util.Grid.getIndex(app, "grdList");
				//특정행 원상태로 복구
				util.Grid.revertRowData(app, "grdList", idxRow);
				
			}
			
			
			/*
			 * "전체 복구" 버튼(btn10)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 전체 행 복구
			 */
			function onBtn10Click(e){
				var btn10 = e.control;
				
				f_onRevertAllData();
				
				printSource(f_onRevertAllData);
				
				app.lookup("optRslt").value = "";
			}
			
			function f_onRevertAllData() {
				util.Grid.revertAllData(app, "grdList");
			}
			
			
			/*
			 * "선택" 버튼(btn11)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn11Click(e){
				var btn11 = e.control;
				
				f_onSelectRow();
				
				printSource(f_onSelectRow);
				
				app.lookup("optRslt").value = "";
			}
			
			
			function f_onSelectRow() {
				
				//선택할 로우의 인덱스를 가져옴
				var vsIndex = util.Control.getValue(app, "ipbSelectRow");
				
				if (vsIndex != null && vsIndex != "") {
					//그리드에서 로우(Row)를 선택
					util.Grid.selectRow(app, "grdList", ValueUtil.fixNumber(vsIndex));
				} else {
					util.Msg.alert("선택 할 row index를 입력하시고 클릭하시기 바랍니다.");
				}
			}
			
			
			/*
			 * "선택" 버튼(btn12)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 조건을 만족하는 행 선택
			 */
			function onBtn12Click(e){
				var btn12 = e.control;
				
				f_onSelectRowByCondition();
				
				printSource(f_onSelectRowByCondition);
				
				app.lookup("optRslt").value = "";
			}
			
			function f_onSelectRowByCondition() {
				
				//psCondition 조건식
				//	 ex)"STUD_DIV_RCD == 'CT101REGU' && SA_NM == '컴퓨터정보과'"
				//		사용가능수식 !=", "!==", "$=", "%", "&&", "(", "*", "*=", "+", ",", "-", ".", "/", "/*", "//", "<", "<=", "==", "===", ">", ">=", "?", "[", "^=", "||"
				var psCondition = util.Control.getValue(app, "ipbSelectRowByCondition");
				if (psCondition != null && psCondition != "") {
					//그리드에서 조건에 만족하는 로우(Row)를 선택
					util.Grid.selectRowByCondition(app, "grdList", psCondition);
				} else {
					util.Msg.alert( "조건식을 입력하시고 클릭하시기 바랍니다.");
				}
				
				//그리드에서 조건을 만족하는 Row를 선택
				util.Grid.selectRowByCondition(app, "grdList", psCondition);
				
			}
			
			
			/*
			 * "확인" 버튼(btn13)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 그리드의 개수 반환
			 */
			function onBtn13Click(e){
				var btn13 = e.control;
				
				var result = f_onGetRowCount();
				
				printSource(f_onGetRowCount);
				
				app.lookup("optRslt").value = "그리드 행의 개수 : [ " + result + " ]";
			}
			
			function f_onGetRowCount() {
				var result = util.Grid.getRowCount(app, "grdList");
				
				return result;
			}
			
			
			/*
			 * "확인" 버튼(btn14)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 그리드 특정 Cell의 값을 반환
			 */
			function onBtn14Click(e){
				var btn14 = e.control;
				
				var result = f_onGetCellValue();
				
				printSource(f_onGetCellValue);
				
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelVal = util.Control.getValue(app, "cmbGetCellValue"); //콤보박스에서 선택된 컬럼명
				app.lookup("optRslt").value = "현재 선택된 행에서 " + vsSelVal + " 컬럼의 값 : " + result;
			}
			
			function f_onGetCellValue() {
				
				//cellIndex 값을 가져오고자 하는 cell의 행 index
				var vnIdx = util.Grid.getIndex(app, "grdList"); //그리드에서 선택된 행의 index
				if (vnIdx < 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelVal = util.Control.getValue(app, "cmbGetCellValue"); //콤보박스에서 선택된 컬럼명
				if (ValueUtil.isNull(vsSelVal)) {
					util.Msg.alert( "컬럼을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				//그리드 특정cell의 값을 반환
				var result = util.Grid.getCellValue(app, "grdList", vsSelVal, vnIdx);
				
				return result;
			}
			
			
			/*
			 * "변경" 버튼(btn15)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 특정 Cell의 값을 변경
			 */
			function onBtn15Click(e){
				var btn15 = e.control;
				
				f_onSetCellValue();
				
				printSource(f_onSetCellValue);
				
				app.lookup("optRslt").value = "";
			}
			
			function f_onSetCellValue() {
				
				//cellIndex 값을 가져오고자 하는 cell의 행 index
				var vnIdx = util.Grid.getIndex(app, "grdList"); //그리드에서 선택된 행의 index
				if (vnIdx < 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelVal = util.Control.getValue(app, "cmbSetCellValue"); //콤보박스에서 선택된 컬럼명
				if (ValueUtil.isNull(vsSelVal)) {
					util.Msg.alert( "컬럼을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				//그리드 특정 cell의 값을 변경
				var vsValue = util.Control.getValue(app, "ipbSetCellValue");
				util.Grid.setCellValue(app, "grdList", vsSelVal, vsValue, vnIdx);
				
			}
			
			
			/*
			 * "확인" 버튼(btn16)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 특정 Row의 상태값 반환
			 */
			function onBtn16Click(e){
				var btn16 = e.control;
				
				var result = f_onGetRowState();
				
				printSource(f_onGetRowState);
				
				app.lookup("optRslt").value = result;
			}
			
			function f_onGetRowState() {
				
				var vnIdx = util.Grid.getIndex(app, "grdList");
				if (vnIdx < 0) {
					util.Msg.alert( "상태값을 가져올 행을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var result = util.Grid.getRowState(app, "grdList", vnIdx);
				var vsDesc = "";
				if (result == "1") {
					vsDesc = "cpr.data.tabledata.RowState.UNCHANGED : 변경되지 않은 상태\ncpr.data.tabledata.RowState.EMPTIED : 삭제된 로우를 커밋 시 삭제된 배열에서 제거하기 위한 임시 상태";
				} else if (result == "2") {
					vsDesc = "cpr.data.tabledata.RowState.INSERTED : 행이 신규로 추가된 상태.";
				} else if (result == "4") {
					vsDesc = "cpr.data.tabledata.RowState.UPDATED : 행이 수정된 상태";
				} else if (result == "8") {
					vsDesc = "cpr.data.tabledata.RowState.DELETED : 행이 삭제된 상태";
				} else if (result == "16") {
					vsDesc = "cpr.data.tabledata.RowState.INSERTDELETED : 행이 추가되었다가 삭제된 상태";
				};
				
				return vsDesc;
			}
			
			
			/*
			 * "Row 상태 변경" 버튼(btn17)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 특정 Row의 상태 변경
			 */
			function onBtn17Click(e){
				var btn17 = e.control;
				
				f_onSetRowState();
				
				printSource(f_onSetRowState);
				
				app.lookup("optRslt").value = "[ " + util.Grid.getIndex(app, "grdList") + " ] Row의 상태 변경";
			}
			
			function f_onSetRowState() {
				//cellIndex 값을 가져오고자 하는 cell의 행 index
				var vnIdx = util.Grid.getIndex(app, "grdList"); //그리드에서 선택된 행의 index
				if (vnIdx < 0) {
					util.Msg.alert( "그리드에서 행을 선택 후 진행해 주시기 바랍니다.");
					return false;
				};
				//cellIndex 값을 가져오고자 하는 cell의 컬럼  index
				var vsSelState = util.Control.getValue(app, "cmbSetRowState"); //콤보박스에서 선택된 상태값
				if (ValueUtil.isNull(vsSelState)) {
					util.Msg.alert( "변경할 상태값을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var state = null;
				if (vsSelState == "emp") {
					state = cpr.data.tabledata.RowState.EMPTIED; //삭제된 로우를 커밋 시 삭제된 배열을에서 제거하기 위한 임시 상태.
				} else if (vsSelState == "uc") {
					state = cpr.data.tabledata.RowState.UNCHANGED; //변경되지 않은 상태.
				} else if (vsSelState == "i") {
					state = cpr.data.tabledata.RowState.INSERTED; //행이 신규로 추가된 상태.
				} else if (vsSelState == "u") {
					state = cpr.data.tabledata.RowState.UPDATED; //행이 수정된 상태.
				} else if (vsSelState == "d") {
					state = cpr.data.tabledata.RowState.DELETED; //행이 삭제된 상태.
				} else if (vsSelState == "id") {
					state = cpr.data.tabledata.RowState.INSERTDELETED; //행이 추가되었다가 삭제된 상태.
				};
				
				util.Grid.setRowState(app, "grdList", state, vnIdx);
				
				return true;
			}
			
			
			/*
			 * "일괄 상태 변경" 버튼(btn18)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 전체 Row의 상태 일괄 변경
			 */
			function onBtn18Click(e){
				var btn18 = e.control;
				
				var result = f_onSetRowStateAll();
				
				printSource(f_onSetRowStateAll);
				
				app.lookup("optRslt").value = "그리드의 전체 Row 상태 변경 [ " + app.lookup("cmbSetRowStateAll").getItemByValue(result).label + " ]";
			}
			
			function f_onSetRowStateAll() {
				//콤보박스에서 선택된 상태값
				var vsSelState = util.Control.getValue(app, "cmbSetRowStateAll");
				if (ValueUtil.isNull(vsSelState)) {
					util.Msg.alert( "변경할 상태값을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var state = null;
				if (vsSelState == "emp") {
					state = cpr.data.tabledata.RowState.EMPTIED; //삭제된 로우를 커밋 시 삭제된 배열을에서 제거하기 위한 임시 상태.
				} else if (vsSelState == "uc") {
					state = cpr.data.tabledata.RowState.UNCHANGED; //변경되지 않은 상태.
				} else if (vsSelState == "i") {
					state = cpr.data.tabledata.RowState.INSERTED; //행이 신규로 추가된 상태.
				} else if (vsSelState == "u") {
					state = cpr.data.tabledata.RowState.UPDATED; //행이 수정된 상태.
				} else if (vsSelState == "d") {
					state = cpr.data.tabledata.RowState.DELETED; //행이 삭제된 상태.
				} else if (vsSelState == "id") {
					state = cpr.data.tabledata.RowState.INSERTDELETED; //행이 추가되었다가 삭제된 상태.
				};
				
				util.Grid.setRowStateAll(app, "grdList", state);
				
				return vsSelState;
			}
			
			
			/*
			 * "확인" 버튼(btn19)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 * 
			 * 특정 상태값의 Row 인덱스를 배열로 반환
			 */
			function onBtn19Click(e){
				var btn19 = e.control;
				
				var result = f_onGetRowStatedIndices();
				
				printSource(f_onGetRowStatedIndices);
				
				app.lookup("optRslt").value = "해당 상태 값을 갖는 row를 검색하여 row index 배열을 반환 [ " + result + " ]";
			}
			
			function f_onGetRowStatedIndices() {
				//콤보박스에서 선택된 상태값
				var vsSelState = util.Control.getValue(app, "cmbGetRowStatedIndices");
				if (ValueUtil.isNull(vsSelState)) {
					util.Msg.alert( "반환할 상태값을 선택 후 진행해주시기 바랍니다.");
					return false;
				};
				
				var state = null;
				if (vsSelState == "emp") {
					state = cpr.data.tabledata.RowState.EMPTIED; //삭제된 로우를 커밋 시 삭제된 배열을에서 제거하기 위한 임시 상태.
				} else if (vsSelState == "uc") {
					state = cpr.data.tabledata.RowState.UNCHANGED; //변경되지 않은 상태.
				} else if (vsSelState == "i") {
					state = cpr.data.tabledata.RowState.INSERTED; //행이 신규로 추가된 상태.
				} else if (vsSelState == "u") {
					state = cpr.data.tabledata.RowState.UPDATED; //행이 수정된 상태.
				} else if (vsSelState == "d") {
					state = cpr.data.tabledata.RowState.DELETED; //행이 삭제된 상태.
				} else if (vsSelState == "id") {
					state = cpr.data.tabledata.RowState.INSERTDELETED; //행이 추가되었다가 삭제된 상태.
				};
				
				var result = util.Grid.getRowStatedIndices(app, "grdList", state);
				
				return result;
			}
			
			
			
			//== 스크립트 출력 ==//
			
			function printSource(value) {
				/* 에디터에 소스 표시 */
				var vcAceEditor = app.lookup("ace1");
				vcAceEditor.value = value;	
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "col1"},
					{"name": "col2"},
					{"name": "col3"},
					{"name": "col4"}
				],
				"rows": [
					{"col1": "ID0001", "col2": "박보검", "col3": "010-1234-5678", "col4": "서울시 여의도"},
					{"col1": "ID0002", "col2": "홍길동", "col3": "010-1234-5678", "col4": "서울시 동작구 123"},
					{"col1": "ID0003", "col2": "이순신", "col3": "010-1234-5678", "col4": "경기도 의정부시 111"},
					{"col1": "ID0004", "col2": "송혜교", "col3": "010-1234-5678", "col4": "서울시 노원구 중계동"},
					{"col1": "ID0004", "col2": "이보영", "col3": "010-1234-5678", "col4": "서울시 강북구"},
					{"col1": "ID0005", "col2": "임장군", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김토마토", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김퇴직", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListOrg");
			dataSet_2.parseData({
				"columns": [
					{"name": "col1"},
					{"name": "col2"},
					{"name": "col3"},
					{"name": "col4"}
				],
				"rows": [
					{"col1": "ID0001", "col2": "박보검", "col3": "010-1234-5678", "col4": "서울시 여의도"},
					{"col1": "ID0002", "col2": "홍길동", "col3": "010-1234-5678", "col4": "서울시 동작구 123"},
					{"col1": "ID0003", "col2": "이순신", "col3": "010-1234-5678", "col4": "경기도 의정부시 111"},
					{"col1": "ID0004", "col2": "송혜교", "col3": "010-1234-5678", "col4": "서울시 노원구 중계동"},
					{"col1": "ID0004", "col2": "이보영", "col3": "010-1234-5678", "col4": "서울시 강북구"},
					{"col1": "ID0005", "col2": "임장군", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김토마토", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김퇴직", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "400px",
				"height": "30px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 30;
			verticalLayout_3.topMargin = 30;
			verticalLayout_3.bottomMargin = 20;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container();
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 20;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grp1");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.rightMargin = "50px";
					formLayout_1.horizontalSpacing = "5px";
					formLayout_1.verticalSpacing = "5px";
					formLayout_1.setColumns(["150px", "100px"]);
					formLayout_1.setColumnAutoSizing(0, true);
					formLayout_1.setColumnAutoSizing(1, true);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "그리드 기능";
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "2.5rem"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var output_2 = new cpr.controls.Output();
						output_2.value = "util.Grid";
						output_2.style.setClasses(["text-primary"]);
						output_2.style.css({
							"font-weight" : "bold",
							"padding-left" : "3rem",
							"font-size" : "1.25rem",
							"text-align" : "left"
						});
						container.addChild(output_2, {
							"colIndex": 1,
							"rowIndex": 0,
							"verticalAlign": "bottom",
							"height": 35
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1270px",
						"height": "40px"
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "이 페이지는 공통모듈 내 그리드 기능에 대해 설명합니다.";
					output_3.style.setClasses(["opt-tmpl"]);
					output_3.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_3, {
						"autoSize": "height",
						"width": "1210px",
						"height": "46px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "1270px",
					"height": "120px"
				});
				var group_5 = new cpr.controls.Container();
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 20;
				verticalLayout_5.topMargin = 20;
				verticalLayout_5.bottomMargin = 40;
				group_5.setLayout(verticalLayout_5);
				(function(container){
					var output_4 = new cpr.controls.Output();
					output_4.value = "시나리오";
					output_4.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_4.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_4, {
						"width": "100px",
						"height": "40px"
					});
					var output_5 = new cpr.controls.Output("ipbScenario");
					output_5.value = "1. 기능 확인 그리드를 확인하고 동작 버튼을 클릭한다. (필요시 입력값 선택)\r\n2. 기능 확인 그리드의 기능 동작 및 결과값을 확인한다.\r\n3. 스크립트를 확인한다.\r\n4. 스크립트를 복사하여 코딩에 활용한다.";
					output_5.style.setClasses(["opt-tmpl"]);
					output_5.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_5, {
						"autoSize": "height",
						"width": "1210px",
						"height": "107px"
					});
					var group_6 = new cpr.controls.Container("grp2");
					group_6.visible = false;
					group_6.style.css({
						"background-color" : "#dff7fb"
					});
					// Layout
					var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_6.leftMargin = 30;
					verticalLayout_6.rightMargin = 30;
					verticalLayout_6.topMargin = 20;
					verticalLayout_6.bottomMargin = 20;
					group_6.setLayout(verticalLayout_6);
					(function(container){
						var output_6 = new cpr.controls.Output();
						output_6.value = "추가설명";
						output_6.style.setClasses(["text-info", "opt-tmpl"]);
						output_6.style.css({
							"font-weight" : "bold"
						});
						container.addChild(output_6, {
							"width": "100px",
							"height": "25px"
						});
						var output_7 = new cpr.controls.Output();
						output_7.value = "추가적으로 설명할 정보가 있다면 작성해주세요.";
						output_7.style.setClasses(["text-info", "opt-tmpl"]);
						container.addChild(output_7, {
							"autoSize": "height",
							"width": "100px",
							"height": "25px"
						});
					})(group_6);
					container.addChild(group_6, {
						"autoSize": "height",
						"width": "1100px",
						"height": "100px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1270px",
					"height": "345px"
				});
				var group_7 = new cpr.controls.Container();
				group_7.userAttr({"floating-header": "true"});
				// Layout
				var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_7.spacing = 15;
				verticalLayout_7.topMargin = 20;
				verticalLayout_7.bottomMargin = 0;
				group_7.setLayout(verticalLayout_7);
				(function(container){
					var output_8 = new cpr.controls.Output();
					output_8.value = "기능 확인";
					output_8.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_8.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_8, {
						"autoSize": "none",
						"width": "1270px",
						"height": "40px"
					});
					var group_8 = new cpr.controls.Container("grp3");
					group_8.style.css({
						"border-right-style" : "solid",
						"border-top-width" : "1px",
						"border-bottom-color" : "#dedede",
						"border-right-width" : "1px",
						"border-left-color" : "#dedede",
						"border-right-color" : "#dedede",
						"border-left-width" : "1px",
						"border-top-style" : "solid",
						"background-color" : "#F0F0F0",
						"border-left-style" : "solid",
						"border-bottom-width" : "1px",
						"border-top-color" : "#dedede",
						"border-bottom-style" : "solid"
					});
					// Layout
					var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_8.leftMargin = 30;
					verticalLayout_8.rightMargin = 30;
					verticalLayout_8.topMargin = 5;
					verticalLayout_8.bottomMargin = 10;
					group_8.setLayout(verticalLayout_8);
					(function(container){
						var group_9 = new cpr.controls.Container("grp5");
						// Layout
						var formLayout_2 = new cpr.controls.layouts.FormLayout();
						formLayout_2.scrollable = false;
						formLayout_2.topMargin = "0px";
						formLayout_2.rightMargin = "0px";
						formLayout_2.leftMargin = "0px";
						formLayout_2.horizontalSpacing = "5px";
						formLayout_2.verticalSpacing = "5px";
						formLayout_2.setColumns(["1fr"]);
						formLayout_2.setRows(["25px", "25px", "1fr"]);
						group_9.setLayout(formLayout_2);
						(function(container){
							var group_10 = new cpr.controls.Container("grp8");
							// Layout
							var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
							group_10.setLayout(verticalLayout_9);
							(function(container){
								var grid_1 = new cpr.controls.Grid("grdList");
								grid_1.init({
									"dataSet": app.lookup("dsList"),
									"columns": [
										{"width": "25px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"},
										{"width": "100px"}
									],
									"header": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.filterable = false;
													cell.sortable = false;
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.targetColumnName = "col1";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "ID";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 2},
												"configurator": function(cell){
													cell.targetColumnName = "col2";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "성명";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 3},
												"configurator": function(cell){
													cell.targetColumnName = "col3";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "전화번호";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 4},
												"configurator": function(cell){
													cell.targetColumnName = "col4";
													cell.filterable = false;
													cell.sortable = false;
													cell.text = "주소";
												}
											}
										]
									},
									"detail": {
										"rows": [{"height": "24px"}],
										"cells": [
											{
												"constraint": {"rowIndex": 0, "colIndex": 0},
												"configurator": function(cell){
													cell.columnType = "rowindex";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 1},
												"configurator": function(cell){
													cell.columnName = "col1";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 2},
												"configurator": function(cell){
													cell.columnName = "col2";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 3},
												"configurator": function(cell){
													cell.columnName = "col3";
												}
											},
											{
												"constraint": {"rowIndex": 0, "colIndex": 4},
												"configurator": function(cell){
													cell.columnName = "col4";
												}
											}
										]
									}
								});
								container.addChild(grid_1, {
									"autoSize": "none",
									"width": "633px",
									"height": "220px"
								});
							})(group_10);
							container.addChild(group_10, {
								"colIndex": 0,
								"rowIndex": 2,
								"colSpan": 1,
								"rowSpan": 1
							});
							var output_9 = new cpr.controls.Output();
							output_9.value = "<기능 확인 그리드>";
							output_9.style.setClasses(["opt-tmpl"]);
							output_9.style.css({
								"text-align" : "center"
							});
							output_9.bind("tooltip").toExpression("#ipbScenario.value");
							container.addChild(output_9, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var button_1 = new cpr.controls.Button("btnRe");
							button_1.value = "그리드 원상태로 되돌리기";
							button_1.style.setClasses(["btn-secondary"]);
							if(typeof onBtn1Click == "function") {
								button_1.addEventListener("click", onBtn1Click);
							}
							if(typeof onBtnReClick == "function") {
								button_1.addEventListener("click", onBtnReClick);
							}
							container.addChild(button_1, {
								"colIndex": 0,
								"rowIndex": 1,
								"horizontalAlign": "right",
								"width": 250
							});
						})(group_9);
						container.addChild(group_9, {
							"autoSize": "none",
							"width": "860px",
							"height": "280px"
						});
					})(group_8);
					if(typeof onGrp11Click == "function") {
						group_8.addEventListener("click", onGrp11Click);
					}
					container.addChild(group_8, {
						"autoSize": "height",
						"width": "1210px",
						"height": "340px"
					});
					var group_11 = new cpr.controls.Container("grp4");
					// Layout
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.userResizingMode = "standard";
					formLayout_3.topMargin = "0px";
					formLayout_3.rightMargin = "0px";
					formLayout_3.bottomMargin = "0px";
					formLayout_3.leftMargin = "0px";
					formLayout_3.horizontalSpacing = "5px";
					formLayout_3.verticalSpacing = "5px";
					formLayout_3.setColumns(["1fr", "470px"]);
					formLayout_3.setRows(["1fr"]);
					group_11.setLayout(formLayout_3);
					(function(container){
						var group_12 = new cpr.controls.Container("grp7");
						group_12.style.setClasses(["form-box"]);
						// Layout
						var verticalLayout_10 = new cpr.controls.layouts.VerticalLayout();
						group_12.setLayout(verticalLayout_10);
						(function(container){
							var userDefinedControl_2 = new udc.tmp.Ace("ace1");
							container.addChild(userDefinedControl_2, {
								"autoSize": "height",
								"width": "418px",
								"height": "295px"
							});
						})(group_12);
						container.addChild(group_12, {
							"colIndex": 1,
							"rowIndex": 0
						});
						var group_13 = new cpr.controls.Container("grp6");
						// Layout
						var formLayout_4 = new cpr.controls.layouts.FormLayout();
						formLayout_4.horizontalSpacing = "5px";
						formLayout_4.verticalSpacing = "10px";
						formLayout_4.setColumns(["1fr", "10px"]);
						formLayout_4.setColumnAutoSizing(1, true);
						formLayout_4.setRows(["1fr"]);
						group_13.setLayout(formLayout_4);
						(function(container){
							var userDefinedControl_3 = new udc.com.udcSplit("udcsplit1");
							userDefinedControl_3.leftGrpId = "grp6";
							userDefinedControl_3.rightGrpId = "grp7";
							container.addChild(userDefinedControl_3, {
								"colIndex": 1,
								"rowIndex": 0,
								"colSpan": 1,
								"rowSpan": 1,
								"horizontalAlign": "right",
								"width": 9
							});
							var group_14 = new cpr.controls.Container("grp9");
							// Layout
							var formLayout_5 = new cpr.controls.layouts.FormLayout();
							formLayout_5.scrollable = false;
							formLayout_5.topMargin = "0px";
							formLayout_5.rightMargin = "0px";
							formLayout_5.bottomMargin = "0px";
							formLayout_5.leftMargin = "0px";
							formLayout_5.horizontalSpacing = "10px";
							formLayout_5.verticalSpacing = "10px";
							formLayout_5.setColumns(["1fr"]);
							formLayout_5.setRows(["40px", "1fr"]);
							formLayout_5.setRowAutoSizing(0, true);
							group_14.setLayout(formLayout_5);
							(function(container){
								var group_15 = new cpr.controls.Container("grp10");
								group_15.style.setClasses(["form-box"]);
								// Layout
								var formLayout_6 = new cpr.controls.layouts.FormLayout();
								formLayout_6.scrollable = false;
								formLayout_6.topMargin = "5px";
								formLayout_6.rightMargin = "30px";
								formLayout_6.bottomMargin = "5px";
								formLayout_6.leftMargin = "5px";
								formLayout_6.horizontalSpacing = "5px";
								formLayout_6.verticalSpacing = "5px";
								formLayout_6.setColumns(["100px", "1fr"]);
								formLayout_6.setRows(["1fr"]);
								group_15.setLayout(formLayout_6);
								(function(container){
									var output_10 = new cpr.controls.Output();
									output_10.value = "결과값";
									output_10.style.css({
										"background-color" : "#e1edfe",
										"background-image" : "none",
										"padding-right" : "1rem"
									});
									container.addChild(output_10, {
										"colIndex": 0,
										"rowIndex": 0
									});
									var output_11 = new cpr.controls.Output("optRslt");
									output_11.value = "";
									output_11.style.css({
										"background-color" : "white",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"padding-left" : "1rem",
										"border-bottom-style" : "none",
										"border-top-style" : "none",
										"text-align" : "left"
									});
									container.addChild(output_11, {
										"colIndex": 1,
										"rowIndex": 0
									});
								})(group_15);
								container.addChild(group_15, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var group_16 = new cpr.controls.Container("grpFormFunc");
								group_16.style.setClasses(["form-box"]);
								// Layout
								var formLayout_7 = new cpr.controls.layouts.FormLayout();
								formLayout_7.topMargin = "5px";
								formLayout_7.rightMargin = "5px";
								formLayout_7.bottomMargin = "5px";
								formLayout_7.leftMargin = "5px";
								formLayout_7.horizontalSpacing = "5px";
								formLayout_7.verticalSpacing = "5px";
								formLayout_7.setColumns(["24px", "200px", "1fr", "170px", "120px"]);
								formLayout_7.setColumnAutoSizing(1, true);
								formLayout_7.setRows(["25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px"]);
								formLayout_7.setRowAutoSizing(1, true);
								formLayout_7.setRowAutoSizing(2, true);
								formLayout_7.setRowAutoSizing(3, true);
								formLayout_7.setRowAutoSizing(4, true);
								formLayout_7.setRowAutoSizing(5, true);
								formLayout_7.setRowAutoSizing(6, true);
								formLayout_7.setRowAutoSizing(7, true);
								formLayout_7.setRowAutoSizing(8, true);
								formLayout_7.setRowAutoSizing(9, true);
								formLayout_7.setRowAutoSizing(10, true);
								formLayout_7.setRowAutoSizing(11, true);
								formLayout_7.setRowAutoSizing(12, true);
								formLayout_7.setRowAutoSizing(13, true);
								formLayout_7.setRowAutoSizing(14, true);
								formLayout_7.setRowAutoSizing(15, true);
								formLayout_7.setRowAutoSizing(16, true);
								formLayout_7.setRowAutoSizing(17, true);
								formLayout_7.setRowAutoSizing(18, true);
								formLayout_7.setRowAutoSizing(19, true);
								group_16.setLayout(formLayout_7);
								(function(container){
									var output_12 = new cpr.controls.Output();
									output_12.value = "No";
									output_12.style.css({
										"background-color" : "#e1edfe",
										"background-image" : "none",
										"text-align" : "center"
									});
									container.addChild(output_12, {
										"colIndex": 0,
										"rowIndex": 0
									});
									var output_13 = new cpr.controls.Output();
									output_13.value = "함수";
									output_13.style.css({
										"background-color" : "#e1edfe",
										"background-image" : "none",
										"text-align" : "center"
									});
									container.addChild(output_13, {
										"colIndex": 1,
										"rowIndex": 0
									});
									var output_14 = new cpr.controls.Output();
									output_14.value = "설명";
									output_14.style.css({
										"background-color" : "#e1edfe",
										"background-image" : "none",
										"text-align" : "center"
									});
									container.addChild(output_14, {
										"colIndex": 2,
										"rowIndex": 0
									});
									var output_15 = new cpr.controls.Output();
									output_15.value = "입력값";
									output_15.style.css({
										"background-color" : "#e1edfe",
										"background-image" : "none",
										"text-align" : "center"
									});
									container.addChild(output_15, {
										"colIndex": 3,
										"rowIndex": 0
									});
									var output_16 = new cpr.controls.Output();
									output_16.value = "동작";
									output_16.style.css({
										"background-color" : "#e1edfe",
										"background-image" : "none",
										"text-align" : "center"
									});
									container.addChild(output_16, {
										"colIndex": 4,
										"rowIndex": 0
									});
									var output_17 = new cpr.controls.Output();
									output_17.value = "1";
									output_17.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_17, {
										"colIndex": 0,
										"rowIndex": 1
									});
									var output_18 = new cpr.controls.Output();
									output_18.value = "2";
									output_18.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_18, {
										"colIndex": 0,
										"rowIndex": 2
									});
									var button_2 = new cpr.controls.Button("btn1");
									button_2.value = "Init";
									button_2.style.setClasses(["btn-primary"]);
									if(typeof onBtnInitClick == "function") {
										button_2.addEventListener("click", onBtnInitClick);
									}
									container.addChild(button_2, {
										"colIndex": 4,
										"rowIndex": 1
									});
									var button_3 = new cpr.controls.Button("btn2");
									button_3.value = "Clear";
									button_3.style.setClasses(["btn-primary"]);
									if(typeof onBtnResetClick == "function") {
										button_3.addEventListener("click", onBtnResetClick);
									}
									container.addChild(button_3, {
										"colIndex": 4,
										"rowIndex": 2
									});
									var inputBox_1 = new cpr.controls.InputBox("ipb2");
									inputBox_1.readOnly = true;
									inputBox_1.value = "init";
									container.addChild(inputBox_1, {
										"colIndex": 1,
										"rowIndex": 1
									});
									var inputBox_2 = new cpr.controls.InputBox("ipb3");
									inputBox_2.readOnly = true;
									inputBox_2.value = "그리드 초기화";
									container.addChild(inputBox_2, {
										"colIndex": 2,
										"rowIndex": 1
									});
									var inputBox_3 = new cpr.controls.InputBox("ipb4");
									inputBox_3.readOnly = true;
									inputBox_3.value = "그리드 데이터 clear";
									container.addChild(inputBox_3, {
										"colIndex": 2,
										"rowIndex": 2
									});
									var inputBox_4 = new cpr.controls.InputBox("ipb5");
									inputBox_4.readOnly = true;
									inputBox_4.value = "reset";
									container.addChild(inputBox_4, {
										"colIndex": 1,
										"rowIndex": 2
									});
									var output_19 = new cpr.controls.Output();
									output_19.value = "3";
									output_19.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_19, {
										"colIndex": 0,
										"rowIndex": 3
									});
									var output_20 = new cpr.controls.Output();
									output_20.value = "4";
									output_20.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_20, {
										"colIndex": 0,
										"rowIndex": 4
									});
									var output_21 = new cpr.controls.Output();
									output_21.value = "5";
									output_21.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_21, {
										"colIndex": 0,
										"rowIndex": 5
									});
									var output_22 = new cpr.controls.Output();
									output_22.value = "6";
									output_22.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_22, {
										"colIndex": 0,
										"rowIndex": 6
									});
									var output_23 = new cpr.controls.Output();
									output_23.value = "7";
									output_23.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_23, {
										"colIndex": 0,
										"rowIndex": 7
									});
									var output_24 = new cpr.controls.Output();
									output_24.value = "8";
									output_24.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_24, {
										"colIndex": 0,
										"rowIndex": 8
									});
									var output_25 = new cpr.controls.Output();
									output_25.value = "9";
									output_25.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_25, {
										"colIndex": 0,
										"rowIndex": 9
									});
									var output_26 = new cpr.controls.Output();
									output_26.value = "10";
									output_26.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_26, {
										"colIndex": 0,
										"rowIndex": 10
									});
									var output_27 = new cpr.controls.Output();
									output_27.value = "11";
									output_27.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_27, {
										"colIndex": 0,
										"rowIndex": 11
									});
									var output_28 = new cpr.controls.Output();
									output_28.value = "12";
									output_28.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_28, {
										"colIndex": 0,
										"rowIndex": 12
									});
									var output_29 = new cpr.controls.Output();
									output_29.value = "13";
									output_29.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_29, {
										"colIndex": 0,
										"rowIndex": 13
									});
									var output_30 = new cpr.controls.Output();
									output_30.value = "14";
									output_30.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_30, {
										"colIndex": 0,
										"rowIndex": 14
									});
									var output_31 = new cpr.controls.Output();
									output_31.value = "15";
									output_31.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_31, {
										"colIndex": 0,
										"rowIndex": 15
									});
									var output_32 = new cpr.controls.Output();
									output_32.value = "16";
									output_32.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_32, {
										"colIndex": 0,
										"rowIndex": 16
									});
									var output_33 = new cpr.controls.Output();
									output_33.value = "17";
									output_33.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_33, {
										"colIndex": 0,
										"rowIndex": 17
									});
									var output_34 = new cpr.controls.Output();
									output_34.value = "18";
									output_34.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_34, {
										"colIndex": 0,
										"rowIndex": 18
									});
									var output_35 = new cpr.controls.Output();
									output_35.value = "19";
									output_35.style.css({
										"background-color" : "#e1edfe",
										"border-right-style" : "none",
										"border-left-style" : "none",
										"border-bottom-style" : "none",
										"background-image" : "none",
										"border-top-style" : "none",
										"text-align" : "center"
									});
									container.addChild(output_35, {
										"colIndex": 0,
										"rowIndex": 19
									});
									var inputBox_5 = new cpr.controls.InputBox("ipb6");
									inputBox_5.readOnly = true;
									inputBox_5.value = "selectRow";
									container.addChild(inputBox_5, {
										"colIndex": 1,
										"rowIndex": 11
									});
									var inputBox_6 = new cpr.controls.InputBox("ipb7");
									inputBox_6.readOnly = true;
									inputBox_6.value = "deleteRow";
									container.addChild(inputBox_6, {
										"colIndex": 1,
										"rowIndex": 4
									});
									var inputBox_7 = new cpr.controls.InputBox("ipb8");
									inputBox_7.readOnly = true;
									inputBox_7.value = "insertRow";
									container.addChild(inputBox_7, {
										"colIndex": 1,
										"rowIndex": 3
									});
									var inputBox_8 = new cpr.controls.InputBox("ipb9");
									inputBox_8.readOnly = true;
									inputBox_8.value = "isModified";
									container.addChild(inputBox_8, {
										"colIndex": 1,
										"rowIndex": 5
									});
									var inputBox_9 = new cpr.controls.InputBox("ipb10");
									inputBox_9.readOnly = true;
									inputBox_9.value = "getCheckOrSelectedRowIndex";
									container.addChild(inputBox_9, {
										"colIndex": 1,
										"rowIndex": 6
									});
									var inputBox_10 = new cpr.controls.InputBox("ipb11");
									inputBox_10.readOnly = true;
									inputBox_10.value = "getCheckedRowIndex";
									container.addChild(inputBox_10, {
										"colIndex": 1,
										"rowIndex": 7
									});
									var inputBox_11 = new cpr.controls.InputBox("ipb12");
									inputBox_11.readOnly = true;
									inputBox_11.value = "revertRowData";
									container.addChild(inputBox_11, {
										"colIndex": 1,
										"rowIndex": 9
									});
									var inputBox_12 = new cpr.controls.InputBox("ipb13");
									inputBox_12.readOnly = true;
									inputBox_12.value = "getIndex";
									container.addChild(inputBox_12, {
										"colIndex": 1,
										"rowIndex": 8
									});
									var inputBox_13 = new cpr.controls.InputBox("ipb14");
									inputBox_13.readOnly = true;
									inputBox_13.value = "revertAllData";
									container.addChild(inputBox_13, {
										"colIndex": 1,
										"rowIndex": 10
									});
									var inputBox_14 = new cpr.controls.InputBox("ipb15");
									inputBox_14.readOnly = true;
									inputBox_14.value = "selectRowByCondition";
									container.addChild(inputBox_14, {
										"colIndex": 1,
										"rowIndex": 12
									});
									var inputBox_15 = new cpr.controls.InputBox("ipb16");
									inputBox_15.readOnly = true;
									inputBox_15.value = "getCellValue";
									container.addChild(inputBox_15, {
										"colIndex": 1,
										"rowIndex": 14
									});
									var inputBox_16 = new cpr.controls.InputBox("ipb17");
									inputBox_16.readOnly = true;
									inputBox_16.value = "getRowCount";
									container.addChild(inputBox_16, {
										"colIndex": 1,
										"rowIndex": 13
									});
									var inputBox_17 = new cpr.controls.InputBox("ipb18");
									inputBox_17.readOnly = true;
									inputBox_17.value = "setCellValue";
									container.addChild(inputBox_17, {
										"colIndex": 1,
										"rowIndex": 15
									});
									var inputBox_18 = new cpr.controls.InputBox("ipb19");
									inputBox_18.readOnly = true;
									inputBox_18.value = "setRowState";
									container.addChild(inputBox_18, {
										"colIndex": 1,
										"rowIndex": 17
									});
									var inputBox_19 = new cpr.controls.InputBox("ipb20");
									inputBox_19.readOnly = true;
									inputBox_19.value = "getRowState";
									container.addChild(inputBox_19, {
										"colIndex": 1,
										"rowIndex": 16
									});
									var inputBox_20 = new cpr.controls.InputBox("ipb21");
									inputBox_20.readOnly = true;
									inputBox_20.value = "setRowStateAll";
									container.addChild(inputBox_20, {
										"colIndex": 1,
										"rowIndex": 18
									});
									var inputBox_21 = new cpr.controls.InputBox("ipb22");
									inputBox_21.readOnly = true;
									inputBox_21.value = "getRowStatedIndices";
									container.addChild(inputBox_21, {
										"colIndex": 1,
										"rowIndex": 19
									});
									var inputBox_22 = new cpr.controls.InputBox("ipb23");
									inputBox_22.readOnly = true;
									inputBox_22.value = "그리드에 신규 행(Row) 추가";
									container.addChild(inputBox_22, {
										"colIndex": 2,
										"rowIndex": 3
									});
									var inputBox_23 = new cpr.controls.InputBox("ipb24");
									inputBox_23.readOnly = true;
									inputBox_23.value = "그리드의 변경사항 유/무 반환";
									container.addChild(inputBox_23, {
										"colIndex": 2,
										"rowIndex": 5
									});
									var inputBox_24 = new cpr.controls.InputBox("ipb25");
									inputBox_24.readOnly = true;
									inputBox_24.value = "그리드의 선택된 행(Row) 삭제";
									container.addChild(inputBox_24, {
										"colIndex": 2,
										"rowIndex": 4
									});
									var inputBox_25 = new cpr.controls.InputBox("ipb26");
									inputBox_25.readOnly = true;
									inputBox_25.value = "그리드의 체크 또는 선택된 행의 인덱스 반환(check 우선)";
									container.addChild(inputBox_25, {
										"colIndex": 2,
										"rowIndex": 6
									});
									var inputBox_26 = new cpr.controls.InputBox("ipb27");
									inputBox_26.readOnly = true;
									inputBox_26.value = "그리드의 현재 선택된 행의 인덱스(Index) 반환";
									container.addChild(inputBox_26, {
										"colIndex": 2,
										"rowIndex": 8
									});
									var inputBox_27 = new cpr.controls.InputBox("ipb28");
									inputBox_27.readOnly = true;
									inputBox_27.value = "그리드의 체크된 행의 인덱스(Index) 반환";
									container.addChild(inputBox_27, {
										"colIndex": 2,
										"rowIndex": 7
									});
									var inputBox_28 = new cpr.controls.InputBox("ipb29");
									inputBox_28.readOnly = true;
									inputBox_28.value = "그리드내 변경된 특정 행(Row)의 데이터를 원상태로 복구";
									container.addChild(inputBox_28, {
										"colIndex": 2,
										"rowIndex": 9
									});
									var inputBox_29 = new cpr.controls.InputBox("ipb30");
									inputBox_29.readOnly = true;
									inputBox_29.value = "그리드내 변경된 모든 데이터를 원상태로 복구";
									container.addChild(inputBox_29, {
										"colIndex": 2,
										"rowIndex": 10
									});
									var inputBox_30 = new cpr.controls.InputBox("ipb31");
									inputBox_30.readOnly = true;
									inputBox_30.value = "그리드에서 로우(Row)를 선택";
									container.addChild(inputBox_30, {
										"colIndex": 2,
										"rowIndex": 11
									});
									var inputBox_31 = new cpr.controls.InputBox("ipb32");
									inputBox_31.readOnly = true;
									inputBox_31.value = "그리드에서 조건을 만족하는 Row를 선택";
									container.addChild(inputBox_31, {
										"colIndex": 2,
										"rowIndex": 12
									});
									var inputBox_32 = new cpr.controls.InputBox("ipb33");
									inputBox_32.readOnly = true;
									inputBox_32.value = "그리드 특정 cell의 값을 반환";
									container.addChild(inputBox_32, {
										"colIndex": 2,
										"rowIndex": 14
									});
									var inputBox_33 = new cpr.controls.InputBox("ipb34");
									inputBox_33.readOnly = true;
									inputBox_33.value = "그리드의 Row 개수 반환";
									container.addChild(inputBox_33, {
										"colIndex": 2,
										"rowIndex": 13
									});
									var inputBox_34 = new cpr.controls.InputBox("ipb35");
									inputBox_34.readOnly = true;
									inputBox_34.value = "그리드 특정 cell의 값을 변경";
									container.addChild(inputBox_34, {
										"colIndex": 2,
										"rowIndex": 15
									});
									var inputBox_35 = new cpr.controls.InputBox("ipb36");
									inputBox_35.readOnly = true;
									inputBox_35.value = "특정 Row의 상태값 반환";
									container.addChild(inputBox_35, {
										"colIndex": 2,
										"rowIndex": 16
									});
									var inputBox_36 = new cpr.controls.InputBox("ipb37");
									inputBox_36.readOnly = true;
									inputBox_36.value = "특정 Row의 상태값 변경";
									container.addChild(inputBox_36, {
										"colIndex": 2,
										"rowIndex": 17
									});
									var inputBox_37 = new cpr.controls.InputBox("ipb38");
									inputBox_37.readOnly = true;
									inputBox_37.value = "전체 Row의 상태값을 특정 상태(state)로 일괄 업데이트";
									container.addChild(inputBox_37, {
										"colIndex": 2,
										"rowIndex": 18
									});
									var inputBox_38 = new cpr.controls.InputBox("ipb39");
									inputBox_38.readOnly = true;
									inputBox_38.value = "특정 상태값의 Row Index를 배열로 반환";
									container.addChild(inputBox_38, {
										"colIndex": 2,
										"rowIndex": 19
									});
									var button_4 = new cpr.controls.Button("btn3");
									button_4.value = "Row 추가";
									button_4.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset2Click == "function") {
										button_4.addEventListener("click", onBtnReset2Click);
									}
									if(typeof onBtn3Click == "function") {
										button_4.addEventListener("click", onBtn3Click);
									}
									container.addChild(button_4, {
										"colIndex": 4,
										"rowIndex": 3
									});
									var button_5 = new cpr.controls.Button("btn4");
									button_5.value = "Row 삭제";
									button_5.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset3Click == "function") {
										button_5.addEventListener("click", onBtnReset3Click);
									}
									if(typeof onBtn4Click == "function") {
										button_5.addEventListener("click", onBtn4Click);
									}
									container.addChild(button_5, {
										"colIndex": 4,
										"rowIndex": 4
									});
									var button_6 = new cpr.controls.Button("btn5");
									button_6.value = "확인";
									button_6.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset4Click == "function") {
										button_6.addEventListener("click", onBtnReset4Click);
									}
									if(typeof onBtn5Click == "function") {
										button_6.addEventListener("click", onBtn5Click);
									}
									container.addChild(button_6, {
										"colIndex": 4,
										"rowIndex": 5
									});
									var button_7 = new cpr.controls.Button("btn6");
									button_7.value = "가져오기";
									button_7.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset5Click == "function") {
										button_7.addEventListener("click", onBtnReset5Click);
									}
									if(typeof onBtn6Click == "function") {
										button_7.addEventListener("click", onBtn6Click);
									}
									container.addChild(button_7, {
										"colIndex": 4,
										"rowIndex": 6
									});
									var button_8 = new cpr.controls.Button("btn7");
									button_8.value = "가져오기";
									button_8.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset6Click == "function") {
										button_8.addEventListener("click", onBtnReset6Click);
									}
									if(typeof onBtn7Click == "function") {
										button_8.addEventListener("click", onBtn7Click);
									}
									container.addChild(button_8, {
										"colIndex": 4,
										"rowIndex": 7
									});
									var button_9 = new cpr.controls.Button("btn8");
									button_9.value = "가져오기";
									button_9.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset7Click == "function") {
										button_9.addEventListener("click", onBtnReset7Click);
									}
									if(typeof onBtn8Click == "function") {
										button_9.addEventListener("click", onBtn8Click);
									}
									container.addChild(button_9, {
										"colIndex": 4,
										"rowIndex": 8
									});
									var button_10 = new cpr.controls.Button("btn9");
									button_10.value = "행 복구";
									button_10.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset8Click == "function") {
										button_10.addEventListener("click", onBtnReset8Click);
									}
									if(typeof onBtn9Click == "function") {
										button_10.addEventListener("click", onBtn9Click);
									}
									container.addChild(button_10, {
										"colIndex": 4,
										"rowIndex": 9
									});
									var button_11 = new cpr.controls.Button("btn10");
									button_11.value = "전체 복구";
									button_11.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset9Click == "function") {
										button_11.addEventListener("click", onBtnReset9Click);
									}
									if(typeof onBtn10Click == "function") {
										button_11.addEventListener("click", onBtn10Click);
									}
									container.addChild(button_11, {
										"colIndex": 4,
										"rowIndex": 10
									});
									var button_12 = new cpr.controls.Button("btn11");
									button_12.value = "선택";
									button_12.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset10Click == "function") {
										button_12.addEventListener("click", onBtnReset10Click);
									}
									if(typeof onBtn11Click == "function") {
										button_12.addEventListener("click", onBtn11Click);
									}
									container.addChild(button_12, {
										"colIndex": 4,
										"rowIndex": 11
									});
									var button_13 = new cpr.controls.Button("btn12");
									button_13.value = "선택";
									button_13.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset11Click == "function") {
										button_13.addEventListener("click", onBtnReset11Click);
									}
									if(typeof onBtn12Click == "function") {
										button_13.addEventListener("click", onBtn12Click);
									}
									container.addChild(button_13, {
										"colIndex": 4,
										"rowIndex": 12
									});
									var button_14 = new cpr.controls.Button("btn14");
									button_14.value = "확인";
									button_14.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset12Click == "function") {
										button_14.addEventListener("click", onBtnReset12Click);
									}
									if(typeof onBtn14Click == "function") {
										button_14.addEventListener("click", onBtn14Click);
									}
									container.addChild(button_14, {
										"colIndex": 4,
										"rowIndex": 14
									});
									var button_15 = new cpr.controls.Button("btn13");
									button_15.value = "확인";
									button_15.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset13Click == "function") {
										button_15.addEventListener("click", onBtnReset13Click);
									}
									if(typeof onBtn13Click == "function") {
										button_15.addEventListener("click", onBtn13Click);
									}
									container.addChild(button_15, {
										"colIndex": 4,
										"rowIndex": 13
									});
									var button_16 = new cpr.controls.Button("btn15");
									button_16.value = "변경";
									button_16.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset14Click == "function") {
										button_16.addEventListener("click", onBtnReset14Click);
									}
									if(typeof onBtn15Click == "function") {
										button_16.addEventListener("click", onBtn15Click);
									}
									container.addChild(button_16, {
										"colIndex": 4,
										"rowIndex": 15
									});
									var button_17 = new cpr.controls.Button("btn16");
									button_17.value = "확인";
									button_17.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset15Click == "function") {
										button_17.addEventListener("click", onBtnReset15Click);
									}
									if(typeof onBtn16Click == "function") {
										button_17.addEventListener("click", onBtn16Click);
									}
									container.addChild(button_17, {
										"colIndex": 4,
										"rowIndex": 16
									});
									var button_18 = new cpr.controls.Button("btn17");
									button_18.value = "Row 상태 변경";
									button_18.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset16Click == "function") {
										button_18.addEventListener("click", onBtnReset16Click);
									}
									if(typeof onBtn17Click == "function") {
										button_18.addEventListener("click", onBtn17Click);
									}
									container.addChild(button_18, {
										"colIndex": 4,
										"rowIndex": 17
									});
									var button_19 = new cpr.controls.Button("btn18");
									button_19.value = "일괄 상태 변경";
									button_19.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset17Click == "function") {
										button_19.addEventListener("click", onBtnReset17Click);
									}
									if(typeof onBtn18Click == "function") {
										button_19.addEventListener("click", onBtn18Click);
									}
									container.addChild(button_19, {
										"colIndex": 4,
										"rowIndex": 18
									});
									var button_20 = new cpr.controls.Button("btn19");
									button_20.value = "확인";
									button_20.style.setClasses(["btn-primary"]);
									if(typeof onBtnReset18Click == "function") {
										button_20.addEventListener("click", onBtnReset18Click);
									}
									if(typeof onBtn19Click == "function") {
										button_20.addEventListener("click", onBtn19Click);
									}
									container.addChild(button_20, {
										"colIndex": 4,
										"rowIndex": 19
									});
									var inputBox_39 = new cpr.controls.InputBox("ipbSelectRow");
									inputBox_39.tooltip = "선택 할 row index";
									inputBox_39.placeholder = "선택 할 row index";
									container.addChild(inputBox_39, {
										"colIndex": 3,
										"rowIndex": 11
									});
									var inputBox_40 = new cpr.controls.InputBox("ipbSelectRowByCondition");
									inputBox_40.tooltip = "조건식 ex: col2=\"임장군\"";
									inputBox_40.placeholder = "조건식 ex: col2=\"임장군\"";
									container.addChild(inputBox_40, {
										"colIndex": 3,
										"rowIndex": 12
									});
									var group_17 = new cpr.controls.Container("grp11");
									// Layout
									var formLayout_8 = new cpr.controls.layouts.FormLayout();
									formLayout_8.setColumns(["1fr", "75px"]);
									formLayout_8.setRows(["1fr"]);
									group_17.setLayout(formLayout_8);
									(function(container){
										var comboBox_1 = new cpr.controls.ComboBox("cmbSetCellValue");
										comboBox_1.placeholder = "수정col";
										(function(comboBox_1){
											comboBox_1.addItem(new cpr.controls.Item("ID", "col1"));
											comboBox_1.addItem(new cpr.controls.Item("성명", "col2"));
											comboBox_1.addItem(new cpr.controls.Item("전화번호", "col3"));
											comboBox_1.addItem(new cpr.controls.Item("주소", "col4"));
										})(comboBox_1);
										container.addChild(comboBox_1, {
											"colIndex": 0,
											"rowIndex": 0
										});
										var inputBox_41 = new cpr.controls.InputBox("ipbSetCellValue");
										inputBox_41.tooltip = "수정값";
										inputBox_41.placeholder = "수정값";
										container.addChild(inputBox_41, {
											"colIndex": 1,
											"rowIndex": 0
										});
									})(group_17);
									container.addChild(group_17, {
										"colIndex": 3,
										"rowIndex": 15
									});
									var comboBox_2 = new cpr.controls.ComboBox("cmbGetCellValue");
									comboBox_2.placeholder = "-반환col-";
									(function(comboBox_2){
										comboBox_2.addItem(new cpr.controls.Item("ID", "col1"));
										comboBox_2.addItem(new cpr.controls.Item("성명", "col2"));
										comboBox_2.addItem(new cpr.controls.Item("전화번호", "col3"));
										comboBox_2.addItem(new cpr.controls.Item("주소", "col4"));
									})(comboBox_2);
									container.addChild(comboBox_2, {
										"colIndex": 3,
										"rowIndex": 14
									});
									var comboBox_3 = new cpr.controls.ComboBox("cmbSetRowState");
									comboBox_3.placeholder = "변경할 상태값 선택";
									(function(comboBox_3){
										comboBox_3.addItem(new cpr.controls.Item("EMPTIED(삭제된 로우를 커밋 시 제거하지위한 임시 상태)", "emp"));
										comboBox_3.addItem(new cpr.controls.Item("UNCHANGED(변경되지 않은 상태)", "uc"));
										comboBox_3.addItem(new cpr.controls.Item("INSERTED(행이 신규로 추가된 상태)", "i"));
										comboBox_3.addItem(new cpr.controls.Item("UPDATED(행이 수정된 상태)", "u"));
										comboBox_3.addItem(new cpr.controls.Item("DELETED(행이 삭제된 상태)", "d"));
										comboBox_3.addItem(new cpr.controls.Item("INSERTDELETED(행이 추가되었다가 삭제된 상태)", "id"));
									})(comboBox_3);
									container.addChild(comboBox_3, {
										"colIndex": 3,
										"rowIndex": 17
									});
									var comboBox_4 = new cpr.controls.ComboBox("cmbSetRowStateAll");
									comboBox_4.placeholder = "변경할 상태값 선택";
									(function(comboBox_4){
										comboBox_4.addItem(new cpr.controls.Item("EMPTIED(삭제된 로우를 커밋 시 제거하지위한 임시 상태)", "emp"));
										comboBox_4.addItem(new cpr.controls.Item("UNCHANGED(변경되지 않은 상태)", "uc"));
										comboBox_4.addItem(new cpr.controls.Item("INSERTED(행이 신규로 추가된 상태)", "i"));
										comboBox_4.addItem(new cpr.controls.Item("UPDATED(행이 수정된 상태)", "u"));
										comboBox_4.addItem(new cpr.controls.Item("DELETED(행이 삭제된 상태)", "d"));
										comboBox_4.addItem(new cpr.controls.Item("INSERTDELETED(행이 추가되었다가 삭제된 상태)", "id"));
									})(comboBox_4);
									container.addChild(comboBox_4, {
										"colIndex": 3,
										"rowIndex": 18
									});
									var comboBox_5 = new cpr.controls.ComboBox("cmbGetRowStatedIndices");
									comboBox_5.placeholder = "상태값 선택";
									(function(comboBox_5){
										comboBox_5.addItem(new cpr.controls.Item("EMPTIED(삭제된 로우를 커밋 시 제거하지위한 임시 상태)", "emp"));
										comboBox_5.addItem(new cpr.controls.Item("UNCHANGED(변경되지 않은 상태)", "uc"));
										comboBox_5.addItem(new cpr.controls.Item("INSERTED(행이 신규로 추가된 상태)", "i"));
										comboBox_5.addItem(new cpr.controls.Item("UPDATED(행이 수정된 상태)", "u"));
										comboBox_5.addItem(new cpr.controls.Item("DELETED(행이 삭제된 상태)", "d"));
										comboBox_5.addItem(new cpr.controls.Item("INSERTDELETED(행이 추가되었다가 삭제된 상태)", "id"));
									})(comboBox_5);
									container.addChild(comboBox_5, {
										"colIndex": 3,
										"rowIndex": 19
									});
								})(group_16);
								container.addChild(group_16, {
									"colIndex": 0,
									"rowIndex": 1
								});
							})(group_14);
							container.addChild(group_14, {
								"colIndex": 0,
								"rowIndex": 0,
								"colSpan": 1,
								"rowSpan": 1
							});
						})(group_13);
						container.addChild(group_13, {
							"colIndex": 0,
							"rowIndex": 0,
							"colSpan": 1,
							"rowSpan": 1
						});
					})(group_11);
					container.addChild(group_11, {
						"autoSize": "none",
						"width": "1210px",
						"height": "295px"
					});
				})(group_7);
				container.addChild(group_7, {
					"autoSize": "height",
					"width": "1270px",
					"height": "1000px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "400px",
				"height": "1800px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "그리드 기능";
	cpr.core.Platform.INSTANCE.register(app);
})();
