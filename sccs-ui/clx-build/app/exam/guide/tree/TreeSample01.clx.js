/*
 * App URI: app/exam/guide/tree/TreeSample01
 * Source Location: app/exam/guide/tree/TreeSample01.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/guide/tree/TreeSample01", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * TreeSample01.js
			 * Created at 2022. 3. 10. 오후 4:49:13.
			 *
			 * @author jiyeon
			 ************************************************/
			
			var util = createCommonUtil();
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				util.FreeForm.init(app, ["grpFormFunc"]);
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				//'expandAllItems()
				var treItem = app.lookup("tre1");
				treItem.expandAllItems();
			}
			
			/*
			 * "확인" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(e){
				var btn1 = e.control;
				
				//함수 실행
				var result = f_getSelectedValue();
				
				//스크립트 출력
				printSource(f_getSelectedValue);
				
				//결과 표시
				var txt = "트리에서 선택 된 행의 value [" + result + "]";
				printResult(txt);
			}
			
			function f_getSelectedValue() {
				return util.Tree.getSelectedValue(app, "tre1");
			}
			
			
			/*
			 * "확인" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(e){
				var btn2 = e.control;
				
				//함수 실행
				var result = f_getItem();
				
				//스크립트 출력
				printSource(f_getItem);
				
				//결과 표시
				var txt = "입력한 value에 해당하는 아이템의 " + result;
				printResult(txt);
			}
			
			function f_getItem() {
				var vsVal = util.Control.getValue(app, "ipb12");
				if (vsVal == null) {
					util.Msg.alert( "value값을 입력하고 클릭하시기 바랍니다.");
					return;
				}
				
				//입력한 value에 해당하는 아이템의 label 또는 parentValue를 반환
				var lbResult = util.Tree.getItem(app, "tre1", vsVal, "LABEL");
				var pvResult = util.Tree.getItem(app, "tre1", vsVal, "PVALUE");
				return "label = [" + lbResult + "], parentValue = [" + pvResult + "]";
			}
			
			
			/*
			 * "펼침" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(e){
				var btn3 = e.control;
				
				//함수 실행
				f_expandParentItem();
				
				//스크립트 출력
				printSource(f_expandParentItem);
				
				//결과 표시
				printResult("");
			}
			
			function f_expandParentItem() {
				//util.Msg.alert( "테스트를 위해 우선 전체접기를 수행합니다.");
				//접기
				util.Tree.expandAllItems(app, "tre1", false);
				
				//var vsSel = util.Tree.getSelectedValue(app, "tre1");
				var vsSel = util.Control.getValue(app, "ipb13");
				var vsItem = app.lookup("tre1").getItemByValue(vsSel);
				
				//해당 아이템의 상위 아이템을 펼친다.
				util.Tree.expandParentItem(app, "tre1", vsItem, true);
			}
			
			
			/*
			 * "펼침/접기" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn4Click(e){
				var btn4 = e.control;
				
				//함수 실행
				var result = f_expandAllItems();
				
				//스크립트 출력
				printSource(f_expandAllItems);
				
				//결과 표시
				printResult(result);
			}
			
			function f_expandAllItems() {
				//pbExpand	펴기 : true, 닫기 : false
				var vsSel = util.Control.getValue(app, "cmb4")
				var pbExpand = ValueUtil.fixBoolean(vsSel);
				
				//아이템에 해당하는 모든 child item을 펼치거나 닫습니다.
				util.Tree.expandAllItems(app, "tre1", pbExpand);
				
				if (pbExpand)
					var result = "최상위 아이템 펼치기";
				else
					var result = "최상위 아이템 접기";
				
				return result;
			}
			
			
			/*
			 * "확인" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn5Click(e){
				var btn5 = e.control;
				
				//함수 실행
				var result = f_selectItem();
				
				//스크립트 출력
				printSource(f_selectItem);
				
				//결과 표시
				printResult(result);
			}
			
			function f_selectItem() {
				//search value
				var vsVal = util.Control.getValue(app, "ipb14");
				if (vsVal == null) {
					util.Msg.alert( "value값을 입력하고 클릭하시기 바랍니다.");
					return;
				}
				//가지고 오는 구분자 값(VALUE(디폴트), LABEL)
				var psDiv = "VALUE";
				
				//입력한 label 또는 value에 해당하는 트리 아이템을 선택		
				util.Tree.selectItem(app, "tre1", vsVal, psDiv);
				
				return "value가 " + vsVal + "인 트리 아이템 선택"
			}
			
			
			
			//== 스크립트 출력 ==//
			function printSource(value) {
				/* 에디터에 소스 표시 */
				var vcAceEditor = app.lookup("ace1");
				vcAceEditor.value = value;	
			}
			
			
			
			//== 결과 표시 ==//
			function printResult(value) {
				app.lookup("optRslt").value = value;
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "col1"},
					{"name": "col2"},
					{"name": "col3"},
					{"name": "col4"}
				],
				"rows": [
					{"col1": "ID0001", "col2": "박보검", "col3": "010-1234-5678", "col4": "서울시 여의도"},
					{"col1": "ID0002", "col2": "홍길동", "col3": "010-1234-5678", "col4": "서울시 동작구 123"},
					{"col1": "ID0003", "col2": "이순신", "col3": "010-1234-5678", "col4": "경기도 의정부시 111"},
					{"col1": "ID0004", "col2": "송혜교", "col3": "010-1234-5678", "col4": "서울시 노원구 중계동"},
					{"col1": "ID0004", "col2": "이보영", "col3": "010-1234-5678", "col4": "서울시 강북구"},
					{"col1": "ID0005", "col2": "임장군", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김토마토", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김퇴직", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsListOrg");
			dataSet_2.parseData({
				"columns": [
					{"name": "col1"},
					{"name": "col2"},
					{"name": "col3"},
					{"name": "col4"}
				],
				"rows": [
					{"col1": "ID0001", "col2": "박보검", "col3": "010-1234-5678", "col4": "서울시 여의도"},
					{"col1": "ID0002", "col2": "홍길동", "col3": "010-1234-5678", "col4": "서울시 동작구 123"},
					{"col1": "ID0003", "col2": "이순신", "col3": "010-1234-5678", "col4": "경기도 의정부시 111"},
					{"col1": "ID0004", "col2": "송혜교", "col3": "010-1234-5678", "col4": "서울시 노원구 중계동"},
					{"col1": "ID0004", "col2": "이보영", "col3": "010-1234-5678", "col4": "서울시 강북구"},
					{"col1": "ID0005", "col2": "임장군", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김토마토", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"},
					{"col1": "ID0005", "col2": "김퇴직", "col3": "010-1234-5678", "col4": "서울시 여의도 영등포동"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds2");
			dataSet_3.parseData({
				"columns": [
					{"name": "L"},
					{"name": "V"},
					{"name": "P"},
					{"name": "Dt"},
					{"name": "Rd"},
					{"name": "Chk"}
				],
				"rows": [
					{"L": "공통", "V": "V1", "P": "", "Dt": "", "Rd": "", "Chk": ""},
					{"L": "계약관리", "V": "V2", "P": "V1", "Dt": "", "Rd": "", "Chk": ""},
					{"L": "정정변경", "V": "V3", "P": "V1", "Dt": "", "Rd": "", "Chk": ""},
					{"L": "부담금", "V": "V4", "P": "V1", "Dt": "", "Rd": "", "Chk": ""},
					{"L": "지급", "V": "V5", "P": "V1", "Dt": "", "Rd": "", "Chk": ""},
					{"L": "수수료", "V": "V6", "P": "V1", "Dt": "", "Rd": "", "Chk": ""},
					{"L": "수수료납입안내", "V": "V7", "P": "V6", "Dt": "2020-05-15", "Rd": "rd1", "Chk": "check1"},
					{"L": "수수료입금", "V": "V8", "P": "V6", "Dt": "2020-05-15", "Rd": "rd1", "Chk": "check1"},
					{"L": "수수료조회", "V": "V9", "P": "V6", "Dt": "2020-05-15", "Rd": "rd1", "Chk": "check1"},
					{"L": "수수료영수증", "V": "V10", "P": "V6", "Dt": "2020-05-15", "Rd": "rd1", "Chk": "check1"},
					{"L": "영수증조회", "V": "V11", "P": "V10", "Dt": "2020-05-15", "Rd": "rd1", "Chk": "check1"},
					{"L": "영수증발행", "V": "V12", "P": "V10", "Dt": "2020-05-15", "Rd": "rd2", "Chk": "check1"},
					{"L": "영수증관리", "V": "V13", "P": "V10", "Dt": "2020-05-15", "Rd": "rd2", "Chk": "check1"},
					{"L": "발행권한설정", "V": "V14", "P": "V13", "Dt": "2020-05-15", "Rd": "rd2", "Chk": "check1"},
					{"L": "수수료영수증관리", "V": "V15", "P": "V13", "Dt": "2020-05-15", "Rd": "rd1", "Chk": "check1"},
					{"L": "연금계", "V": "V16", "P": "P16", "Dt": "2020-05-15", "Rd": "rd1", "Chk": "check1"}
				]
			});
			app.register(dataSet_3);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpHeader");
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.com.appHeader("appheader1");
				container.addChild(userDefinedControl_1, {
					"width": "500px",
					"height": "30px"
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "400px",
				"height": "30px"
			});
			
			var group_2 = new cpr.controls.Container("grpData");
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 30;
			verticalLayout_3.topMargin = 30;
			verticalLayout_3.bottomMargin = 20;
			group_2.setLayout(verticalLayout_3);
			(function(container){
				var group_3 = new cpr.controls.Container();
				// Layout
				var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_4.spacing = 20;
				verticalLayout_4.topMargin = 20;
				verticalLayout_4.bottomMargin = 40;
				group_3.setLayout(verticalLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grp1");
					// Layout
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.rightMargin = "50px";
					formLayout_1.horizontalSpacing = "5px";
					formLayout_1.verticalSpacing = "5px";
					formLayout_1.setColumns(["150px", "100px"]);
					formLayout_1.setColumnAutoSizing(0, true);
					formLayout_1.setColumnAutoSizing(1, true);
					formLayout_1.setRows(["1fr"]);
					group_4.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "트리 기능";
						output_1.style.css({
							"font-weight" : "bold",
							"padding-left" : "1rem",
							"font-size" : "2.5rem"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var output_2 = new cpr.controls.Output();
						output_2.value = "util.Tree";
						output_2.style.setClasses(["text-primary"]);
						output_2.style.css({
							"font-weight" : "bold",
							"padding-left" : "3rem",
							"font-size" : "1.25rem",
							"text-align" : "left"
						});
						container.addChild(output_2, {
							"colIndex": 1,
							"rowIndex": 0,
							"verticalAlign": "bottom",
							"height": 35
						});
					})(group_4);
					container.addChild(group_4, {
						"autoSize": "height",
						"width": "1270px",
						"height": "40px"
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "이 페이지에서는 트리에서 사용하는 공통모듈에 대해 설명합니다.";
					output_3.style.setClasses(["opt-tmpl"]);
					output_3.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					container.addChild(output_3, {
						"autoSize": "height",
						"width": "1210px",
						"height": "46px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "1270px",
					"height": "120px"
				});
				var group_5 = new cpr.controls.Container();
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 20;
				verticalLayout_5.topMargin = 20;
				verticalLayout_5.bottomMargin = 40;
				group_5.setLayout(verticalLayout_5);
				(function(container){
					var output_4 = new cpr.controls.Output();
					output_4.value = "시나리오";
					output_4.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_4.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_4, {
						"width": "100px",
						"height": "40px"
					});
					var output_5 = new cpr.controls.Output("ipbScenario");
					output_5.value = "1. 기능 확인 트리를 확인하고 동작 버튼을 클릭한다. (필요시 입력값 선택)\r\n2. 트리의 기능 동작 및 결과값을 확인한다.\r\n3. 스크립트를 확인한다.\r\n4. 스크립트를 복사하여 코딩에 활용한다.";
					output_5.style.setClasses(["opt-tmpl"]);
					output_5.style.css({
						"padding-left" : "1rem",
						"font-size" : "1rem"
					});
					if(typeof onIpbScenarioValueChange == "function") {
						output_5.addEventListener("value-change", onIpbScenarioValueChange);
					}
					container.addChild(output_5, {
						"autoSize": "height",
						"width": "1210px",
						"height": "107px"
					});
					var group_6 = new cpr.controls.Container("grp2");
					group_6.visible = false;
					group_6.style.css({
						"background-color" : "#dff7fb"
					});
					// Layout
					var verticalLayout_6 = new cpr.controls.layouts.VerticalLayout();
					verticalLayout_6.leftMargin = 30;
					verticalLayout_6.rightMargin = 30;
					verticalLayout_6.topMargin = 20;
					verticalLayout_6.bottomMargin = 20;
					group_6.setLayout(verticalLayout_6);
					(function(container){
						var output_6 = new cpr.controls.Output();
						output_6.value = "추가설명";
						output_6.style.setClasses(["text-info", "opt-tmpl"]);
						output_6.style.css({
							"font-weight" : "bold"
						});
						container.addChild(output_6, {
							"width": "100px",
							"height": "25px"
						});
						var output_7 = new cpr.controls.Output();
						output_7.value = "추가적으로 설명할 정보가 있다면 작성해주세요.";
						output_7.style.setClasses(["text-info", "opt-tmpl"]);
						container.addChild(output_7, {
							"autoSize": "height",
							"width": "100px",
							"height": "25px"
						});
					})(group_6);
					container.addChild(group_6, {
						"autoSize": "height",
						"width": "1100px",
						"height": "100px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "1270px",
					"height": "345px"
				});
				var group_7 = new cpr.controls.Container();
				group_7.userAttr({"floating-header": "true"});
				// Layout
				var verticalLayout_7 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_7.spacing = 15;
				verticalLayout_7.topMargin = 20;
				verticalLayout_7.bottomMargin = 0;
				group_7.setLayout(verticalLayout_7);
				(function(container){
					var output_8 = new cpr.controls.Output();
					output_8.value = "기능 확인";
					output_8.style.setClasses(["h1", "pl-3", "bg-primary", "text-white"]);
					output_8.style.css({
						"font-weight" : "bold",
						"padding-left" : "1rem",
						"font-size" : "1.75rem"
					});
					container.addChild(output_8, {
						"autoSize": "none",
						"width": "1270px",
						"height": "40px"
					});
					var group_8 = new cpr.controls.Container("grp11");
					// Layout
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.scrollable = false;
					formLayout_2.topMargin = "0px";
					formLayout_2.rightMargin = "0px";
					formLayout_2.bottomMargin = "0px";
					formLayout_2.leftMargin = "0px";
					formLayout_2.horizontalSpacing = "5px";
					formLayout_2.verticalSpacing = "5px";
					formLayout_2.setColumns(["1fr", "2fr"]);
					formLayout_2.setRows(["1fr"]);
					group_8.setLayout(formLayout_2);
					(function(container){
						var group_9 = new cpr.controls.Container("grp12");
						// Layout
						var formLayout_3 = new cpr.controls.layouts.FormLayout();
						formLayout_3.scrollable = false;
						formLayout_3.topMargin = "0px";
						formLayout_3.rightMargin = "0px";
						formLayout_3.leftMargin = "0px";
						formLayout_3.horizontalSpacing = "5px";
						formLayout_3.verticalSpacing = "5px";
						formLayout_3.setColumns(["1fr"]);
						formLayout_3.setRows(["25px", "1fr"]);
						group_9.setLayout(formLayout_3);
						(function(container){
							var group_10 = new cpr.controls.Container("grp13");
							// Layout
							var verticalLayout_8 = new cpr.controls.layouts.VerticalLayout();
							group_10.setLayout(verticalLayout_8);
							(function(container){
								var tree_1 = new cpr.controls.Tree("tre1");
								tree_1.indent = 0;
								tree_1.displayExp = "label + \"[value = \"+ value +\"]\"";
								tree_1.multiple = true;
								(function(tree_1){
									tree_1.setItemSet(app.lookup("ds2"), {
										"label": "L",
										"value": "V",
										"parentValue": "P"
									});
								})(tree_1);
								container.addChild(tree_1, {
									"autoSize": "height",
									"width": "438px",
									"height": "440px"
								});
							})(group_10);
							container.addChild(group_10, {
								"colIndex": 0,
								"rowIndex": 1,
								"colSpan": 1,
								"rowSpan": 1
							});
							var output_9 = new cpr.controls.Output();
							output_9.value = "<기능 확인 트리>";
							output_9.style.setClasses(["opt-tmpl"]);
							output_9.style.css({
								"text-align" : "center"
							});
							output_9.bind("tooltip").toExpression("#ipbScenario.value");
							container.addChild(output_9, {
								"colIndex": 0,
								"rowIndex": 0
							});
						})(group_9);
						container.addChild(group_9, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var group_11 = new cpr.controls.Container("grp9");
						// Layout
						var formLayout_4 = new cpr.controls.layouts.FormLayout();
						formLayout_4.scrollable = false;
						formLayout_4.topMargin = "0px";
						formLayout_4.rightMargin = "0px";
						formLayout_4.bottomMargin = "0px";
						formLayout_4.leftMargin = "0px";
						formLayout_4.horizontalSpacing = "10px";
						formLayout_4.verticalSpacing = "10px";
						formLayout_4.setColumns(["1fr"]);
						formLayout_4.setRows(["20px", "1fr", "40px", "1fr"]);
						formLayout_4.setRowAutoSizing(2, true);
						group_11.setLayout(formLayout_4);
						(function(container){
							var group_12 = new cpr.controls.Container("grpFormFunc");
							group_12.style.setClasses(["form-box"]);
							// Layout
							var formLayout_5 = new cpr.controls.layouts.FormLayout();
							formLayout_5.topMargin = "5px";
							formLayout_5.rightMargin = "5px";
							formLayout_5.bottomMargin = "5px";
							formLayout_5.leftMargin = "5px";
							formLayout_5.horizontalSpacing = "5px";
							formLayout_5.verticalSpacing = "5px";
							formLayout_5.setColumns(["24px", "180px", "1fr", "170px", "120px"]);
							formLayout_5.setColumnAutoSizing(1, true);
							formLayout_5.setRows(["25px", "25px", "25px", "25px", "25px", "25px", "25px", "25px"]);
							formLayout_5.setRowAutoSizing(1, true);
							formLayout_5.setRowAutoSizing(2, true);
							formLayout_5.setRowAutoSizing(3, true);
							formLayout_5.setRowAutoSizing(4, true);
							formLayout_5.setRowAutoSizing(5, true);
							formLayout_5.setRowAutoSizing(6, true);
							formLayout_5.setRowAutoSizing(7, true);
							group_12.setLayout(formLayout_5);
							(function(container){
								var output_10 = new cpr.controls.Output();
								output_10.value = "No";
								output_10.style.css({
									"background-color" : "#e1edfe",
									"background-image" : "none",
									"text-align" : "center"
								});
								container.addChild(output_10, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var output_11 = new cpr.controls.Output();
								output_11.value = "함수";
								output_11.style.css({
									"background-color" : "#e1edfe",
									"background-image" : "none",
									"text-align" : "center"
								});
								container.addChild(output_11, {
									"colIndex": 1,
									"rowIndex": 0
								});
								var output_12 = new cpr.controls.Output();
								output_12.value = "설명";
								output_12.style.css({
									"background-color" : "#e1edfe",
									"background-image" : "none",
									"text-align" : "center"
								});
								container.addChild(output_12, {
									"colIndex": 2,
									"rowIndex": 0
								});
								var output_13 = new cpr.controls.Output();
								output_13.value = "입력값";
								output_13.style.css({
									"background-color" : "#e1edfe",
									"background-image" : "none",
									"text-align" : "center"
								});
								container.addChild(output_13, {
									"colIndex": 3,
									"rowIndex": 0
								});
								var output_14 = new cpr.controls.Output();
								output_14.value = "동작";
								output_14.style.css({
									"background-color" : "#e1edfe",
									"background-image" : "none",
									"text-align" : "center"
								});
								container.addChild(output_14, {
									"colIndex": 4,
									"rowIndex": 0
								});
								var output_15 = new cpr.controls.Output();
								output_15.value = "1";
								output_15.style.css({
									"background-color" : "#e1edfe",
									"border-right-style" : "none",
									"border-left-style" : "none",
									"border-bottom-style" : "none",
									"background-image" : "none",
									"border-top-style" : "none",
									"text-align" : "center"
								});
								container.addChild(output_15, {
									"colIndex": 0,
									"rowIndex": 1
								});
								var output_16 = new cpr.controls.Output();
								output_16.value = "2";
								output_16.style.css({
									"background-color" : "#e1edfe",
									"border-right-style" : "none",
									"border-left-style" : "none",
									"border-bottom-style" : "none",
									"background-image" : "none",
									"border-top-style" : "none",
									"text-align" : "center"
								});
								container.addChild(output_16, {
									"colIndex": 0,
									"rowIndex": 2
								});
								var button_1 = new cpr.controls.Button("btn1");
								button_1.value = "확인";
								button_1.style.setClasses(["btn-primary"]);
								if(typeof onBtn1Click == "function") {
									button_1.addEventListener("click", onBtn1Click);
								}
								container.addChild(button_1, {
									"colIndex": 4,
									"rowIndex": 1
								});
								var button_2 = new cpr.controls.Button("btn2");
								button_2.value = "확인";
								button_2.style.setClasses(["btn-primary"]);
								if(typeof onBtn2Click == "function") {
									button_2.addEventListener("click", onBtn2Click);
								}
								container.addChild(button_2, {
									"colIndex": 4,
									"rowIndex": 2
								});
								var inputBox_1 = new cpr.controls.InputBox("ipb2");
								inputBox_1.readOnly = true;
								inputBox_1.value = "getSelectedValue";
								container.addChild(inputBox_1, {
									"colIndex": 1,
									"rowIndex": 1
								});
								var inputBox_2 = new cpr.controls.InputBox("ipb3");
								inputBox_2.readOnly = true;
								inputBox_2.value = "현재 선택된 아이템의 value를 반환";
								container.addChild(inputBox_2, {
									"colIndex": 2,
									"rowIndex": 1
								});
								var inputBox_3 = new cpr.controls.InputBox("ipb4");
								inputBox_3.readOnly = true;
								inputBox_3.value = "입력한 value에 해당하는 아이템의 label 또는 parentValue를 반환";
								container.addChild(inputBox_3, {
									"colIndex": 2,
									"rowIndex": 2
								});
								var inputBox_4 = new cpr.controls.InputBox("ipb5");
								inputBox_4.readOnly = true;
								inputBox_4.value = "getItem";
								container.addChild(inputBox_4, {
									"colIndex": 1,
									"rowIndex": 2
								});
								var output_17 = new cpr.controls.Output();
								output_17.value = "3";
								output_17.style.css({
									"background-color" : "#e1edfe",
									"border-right-style" : "none",
									"border-left-style" : "none",
									"border-bottom-style" : "none",
									"background-image" : "none",
									"border-top-style" : "none",
									"text-align" : "center"
								});
								container.addChild(output_17, {
									"colIndex": 0,
									"rowIndex": 3
								});
								var output_18 = new cpr.controls.Output();
								output_18.value = "4";
								output_18.style.css({
									"background-color" : "#e1edfe",
									"border-right-style" : "none",
									"border-left-style" : "none",
									"border-bottom-style" : "none",
									"background-image" : "none",
									"border-top-style" : "none",
									"text-align" : "center"
								});
								container.addChild(output_18, {
									"colIndex": 0,
									"rowIndex": 4
								});
								var output_19 = new cpr.controls.Output();
								output_19.value = "5";
								output_19.style.css({
									"background-color" : "#e1edfe",
									"border-right-style" : "none",
									"border-left-style" : "none",
									"border-bottom-style" : "none",
									"background-image" : "none",
									"border-top-style" : "none",
									"text-align" : "center"
								});
								container.addChild(output_19, {
									"colIndex": 0,
									"rowIndex": 5
								});
								var inputBox_5 = new cpr.controls.InputBox("ipb6");
								inputBox_5.readOnly = true;
								inputBox_5.value = "expandParentItem";
								container.addChild(inputBox_5, {
									"colIndex": 1,
									"rowIndex": 3
								});
								var inputBox_6 = new cpr.controls.InputBox("ipb7");
								inputBox_6.readOnly = true;
								inputBox_6.value = "expandAllItems";
								container.addChild(inputBox_6, {
									"colIndex": 1,
									"rowIndex": 4
								});
								var inputBox_7 = new cpr.controls.InputBox("ipb8");
								inputBox_7.readOnly = true;
								inputBox_7.value = "selectItem";
								container.addChild(inputBox_7, {
									"colIndex": 1,
									"rowIndex": 5
								});
								var inputBox_8 = new cpr.controls.InputBox("ipb9");
								inputBox_8.readOnly = true;
								inputBox_8.value = "해당 아이템의 상위 아이템을 펼침";
								container.addChild(inputBox_8, {
									"colIndex": 2,
									"rowIndex": 3
								});
								var inputBox_9 = new cpr.controls.InputBox("ipb10");
								inputBox_9.readOnly = true;
								inputBox_9.value = "아이템에 해당하는 모든 child item을 펼치거나 닫음";
								container.addChild(inputBox_9, {
									"colIndex": 2,
									"rowIndex": 4
								});
								var inputBox_10 = new cpr.controls.InputBox("ipb11");
								inputBox_10.readOnly = true;
								inputBox_10.value = "입력한 label 또는 value에 해당하는 트리 아이템을 선택";
								container.addChild(inputBox_10, {
									"colIndex": 2,
									"rowIndex": 5
								});
								var button_3 = new cpr.controls.Button("btn3");
								button_3.value = "펼침";
								button_3.style.setClasses(["btn-primary"]);
								if(typeof onBtn3Click == "function") {
									button_3.addEventListener("click", onBtn3Click);
								}
								container.addChild(button_3, {
									"colIndex": 4,
									"rowIndex": 3
								});
								var button_4 = new cpr.controls.Button("btn4");
								button_4.value = "펼침/접기";
								button_4.style.setClasses(["btn-primary"]);
								if(typeof onBtn4Click == "function") {
									button_4.addEventListener("click", onBtn4Click);
								}
								container.addChild(button_4, {
									"colIndex": 4,
									"rowIndex": 4
								});
								var button_5 = new cpr.controls.Button("btn5");
								button_5.value = "확인";
								button_5.style.setClasses(["btn-primary"]);
								if(typeof onBtn5Click == "function") {
									button_5.addEventListener("click", onBtn5Click);
								}
								container.addChild(button_5, {
									"colIndex": 4,
									"rowIndex": 5
								});
								var inputBox_11 = new cpr.controls.InputBox("ipb12");
								inputBox_11.value = "V6";
								container.addChild(inputBox_11, {
									"colIndex": 3,
									"rowIndex": 2
								});
								var inputBox_12 = new cpr.controls.InputBox("ipb13");
								inputBox_12.value = "V10";
								container.addChild(inputBox_12, {
									"colIndex": 3,
									"rowIndex": 3
								});
								var comboBox_1 = new cpr.controls.ComboBox("cmb4");
								comboBox_1.value = "true";
								(function(comboBox_1){
									comboBox_1.addItem(new cpr.controls.Item("펼침", "true"));
									comboBox_1.addItem(new cpr.controls.Item("접기", "false"));
								})(comboBox_1);
								container.addChild(comboBox_1, {
									"colIndex": 3,
									"rowIndex": 4
								});
								var inputBox_13 = new cpr.controls.InputBox("ipb14");
								inputBox_13.value = "V6";
								container.addChild(inputBox_13, {
									"colIndex": 3,
									"rowIndex": 5
								});
							})(group_12);
							container.addChild(group_12, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var group_13 = new cpr.controls.Container("grp7");
							group_13.style.setClasses(["form-box"]);
							// Layout
							var verticalLayout_9 = new cpr.controls.layouts.VerticalLayout();
							group_13.setLayout(verticalLayout_9);
							(function(container){
								var userDefinedControl_2 = new udc.tmp.Ace("ace1");
								container.addChild(userDefinedControl_2, {
									"autoSize": "height",
									"width": "418px",
									"height": "295px"
								});
							})(group_13);
							container.addChild(group_13, {
								"colIndex": 0,
								"rowIndex": 3
							});
							var group_14 = new cpr.controls.Container("grp10");
							group_14.style.setClasses(["form-box"]);
							// Layout
							var formLayout_6 = new cpr.controls.layouts.FormLayout();
							formLayout_6.scrollable = false;
							formLayout_6.topMargin = "5px";
							formLayout_6.rightMargin = "30px";
							formLayout_6.bottomMargin = "5px";
							formLayout_6.leftMargin = "5px";
							formLayout_6.horizontalSpacing = "5px";
							formLayout_6.verticalSpacing = "5px";
							formLayout_6.setColumns(["100px", "1fr"]);
							formLayout_6.setRows(["1fr"]);
							group_14.setLayout(formLayout_6);
							(function(container){
								var output_20 = new cpr.controls.Output();
								output_20.value = "결과값";
								output_20.style.css({
									"background-color" : "#e1edfe",
									"background-image" : "none",
									"padding-right" : "1rem"
								});
								container.addChild(output_20, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var output_21 = new cpr.controls.Output("optRslt");
								output_21.value = "";
								output_21.style.css({
									"background-color" : "white",
									"border-right-style" : "none",
									"border-left-style" : "none",
									"padding-left" : "1rem",
									"border-bottom-style" : "none",
									"border-top-style" : "none",
									"text-align" : "left"
								});
								container.addChild(output_21, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_14);
							container.addChild(group_14, {
								"colIndex": 0,
								"rowIndex": 2
							});
						})(group_11);
						container.addChild(group_11, {
							"colIndex": 1,
							"rowIndex": 0
						});
					})(group_8);
					container.addChild(group_8, {
						"width": "400px",
						"height": "600px"
					});
				})(group_7);
				container.addChild(group_7, {
					"autoSize": "height",
					"width": "1270px",
					"height": "1000px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "400px",
				"height": "1800px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "트리 기능";
	cpr.core.Platform.INSTANCE.register(app);
})();
