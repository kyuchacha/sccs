/*
 * App URI: app/exam/design/guide/cmn/Modal
 * Source Location: app/exam/design/guide/cmn/Modal.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/exam/design/guide/cmn/Modal", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Modal.js
			 * Created at 2020. 4. 17. 오전 10:52:48.
			 *
			 * @author ryu
			 ************************************************/
			
			
			
			/*
			 * "Modal Default" 버튼(btnDf)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDfClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDf = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					height : 265,
					width : 550
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			}
			
			
			/*
			 * "Modal Small" 버튼(btnS)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSmClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnS = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					height : 310,
					width : 360
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			}
			
			
			/*
			 * "Modal Large" 버튼(btnL)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnLgClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnL = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					height : 242,
					width : 720
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			}
			
			
			/*
			 * "Modal Top" 버튼(btnT)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnTClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnT = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					top: 20,
					height : 265,
					width : 550
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			}
			
			
			/*
			 * "Modal Bottom" 버튼(btnB)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnBClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnB = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					bottom : 20,
					height : 265,
					width : 550
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			}
			
			
			/*
			 * "Modal Right" 버튼(btnR)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnR = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					right : 20,
					height : 265,
					width : 550
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			}
			
			
			/*
			 * "Modal Left" 버튼(btnL)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnLClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnL = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					left : 20,
					height : 265,
					width : 550
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			}
			
			
			/*
			 * "Modal Default" 버튼(btnMaxMin)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMaxMinClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnMaxMin = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					headerMax : true,
					headerMin : true,
					height : 265,
					width : 550
				}, function(dialog) {
					dialog.addEventListener("maximize", function(e) {
						//TODO 최대화 클릭 시 발생할 스크립트를 작성하십시오.
					});
					
					dialog.addEventListener("minimize", function(e) {
						//TODO 최소화 클릭 시 발생할 스크립트를 작성하십시오.
						// (주의) 최소화된 다이얼로그를 표시하는 기능은 제공하지 않으므로 구현이 필요합니다.
					});
				});
			}
			
			
			/*
			 * "Modal Modaless" 버튼(btnMLs)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMLsClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnMLs = e.control;
				
				var voRootIns = app.getRootAppInstance();
				
				voRootIns.openDialog("app/imp/ExmModal", {
					modal : false,
					height : 265,
					width : 550
				}, function(dialog) {
					dialog.addEventListener("close", function(e){
						//TODO 닫기 클릭 시 발생할 스크립트를 작성하십시오.
						var voRtrnVal = e.returnValue;
					});
				});
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.spacing = 20;
			verticalLayout_1.leftMargin = 20;
			verticalLayout_1.rightMargin = 20;
			verticalLayout_1.topMargin = 20;
			verticalLayout_1.bottomMargin = 20;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "30px"]);
			formLayout_1.setColumnAutoSizing(1, true);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "Modals";
				output_1.style.setClasses(["h3"]);
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var userDefinedControl_1 = new udc.template.Breadcrumb("breadcrumb1");
				userDefinedControl_1.values = "DESIGN GUIDE,MODALS";
				container.addChild(userDefinedControl_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"autoSize": "none",
				"width": "984px",
				"height": "26px"
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "Basic Examples";
			output_2.style.setClasses(["h6"]);
			container.addChild(output_2, {
				"autoSize": "none",
				"width": "984px",
				"height": "25px"
			});
			
			var group_2 = new cpr.controls.Container();
			group_2.style.setClasses(["card", "card-bordered"]);
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_2.leftMargin = 20;
			verticalLayout_2.rightMargin = 20;
			verticalLayout_2.topMargin = 20;
			verticalLayout_2.bottomMargin = 20;
			group_2.setLayout(verticalLayout_2);
			(function(container){
				var group_3 = new cpr.controls.Container();
				// Layout
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.scrollable = false;
				flowLayout_1.horizontalSpacing = 20;
				flowLayout_1.verticalSpacing = 20;
				group_3.setLayout(flowLayout_1);
				(function(container){
					var button_1 = new cpr.controls.Button("btnDf");
					button_1.value = "Modal Default";
					if(typeof onBtnDfClick == "function") {
						button_1.addEventListener("click", onBtnDfClick);
					}
					container.addChild(button_1, {
						"width": "120px",
						"height": "35px"
					});
					var button_2 = new cpr.controls.Button("btnSm");
					button_2.value = "Modal Small";
					if(typeof onBtnSmClick == "function") {
						button_2.addEventListener("click", onBtnSmClick);
					}
					container.addChild(button_2, {
						"width": "120px",
						"height": "35px"
					});
					var button_3 = new cpr.controls.Button("btnLg");
					button_3.value = "Modal Large";
					if(typeof onBtnLgClick == "function") {
						button_3.addEventListener("click", onBtnLgClick);
					}
					container.addChild(button_3, {
						"width": "120px",
						"height": "35px"
					});
					var button_4 = new cpr.controls.Button("btnT");
					button_4.value = "Modal Top";
					if(typeof onBtnTClick == "function") {
						button_4.addEventListener("click", onBtnTClick);
					}
					container.addChild(button_4, {
						"width": "120px",
						"height": "35px"
					});
					var button_5 = new cpr.controls.Button("btnB");
					button_5.value = "Modal Bottom";
					if(typeof onBtnBClick == "function") {
						button_5.addEventListener("click", onBtnBClick);
					}
					container.addChild(button_5, {
						"width": "120px",
						"height": "35px"
					});
					var button_6 = new cpr.controls.Button("btnR");
					button_6.value = "Modal Right";
					if(typeof onBtnRClick == "function") {
						button_6.addEventListener("click", onBtnRClick);
					}
					container.addChild(button_6, {
						"width": "120px",
						"height": "35px"
					});
					var button_7 = new cpr.controls.Button("btnL");
					button_7.value = "Modal Left";
					if(typeof onBtnLClick == "function") {
						button_7.addEventListener("click", onBtnLClick);
					}
					container.addChild(button_7, {
						"width": "120px",
						"height": "35px"
					});
				})(group_3);
				container.addChild(group_3, {
					"autoSize": "height",
					"width": "400px",
					"height": "90px"
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "height",
				"width": "400px",
				"height": "133px"
			});
			
			var output_3 = new cpr.controls.Output();
			output_3.value = "Maximize and Minimize";
			output_3.style.setClasses(["h6"]);
			container.addChild(output_3, {
				"autoSize": "none",
				"width": "984px",
				"height": "25px"
			});
			
			var group_4 = new cpr.controls.Container();
			group_4.style.setClasses(["card", "card-bordered"]);
			// Layout
			var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_3.leftMargin = 20;
			verticalLayout_3.rightMargin = 20;
			verticalLayout_3.topMargin = 20;
			verticalLayout_3.bottomMargin = 20;
			group_4.setLayout(verticalLayout_3);
			(function(container){
				var group_5 = new cpr.controls.Container();
				// Layout
				var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
				flowLayout_2.scrollable = false;
				flowLayout_2.horizontalSpacing = 20;
				flowLayout_2.verticalSpacing = 20;
				group_5.setLayout(flowLayout_2);
				(function(container){
					var button_8 = new cpr.controls.Button("btnMaxMin");
					button_8.value = "Modal Maximize and Minimize";
					if(typeof onBtnMaxMinClick == "function") {
						button_8.addEventListener("click", onBtnMaxMinClick);
					}
					container.addChild(button_8, {
						"width": "230px",
						"height": "35px"
					});
				})(group_5);
				container.addChild(group_5, {
					"autoSize": "height",
					"width": "400px",
					"height": "35px"
				});
			})(group_4);
			container.addChild(group_4, {
				"autoSize": "height",
				"width": "400px",
				"height": "76px"
			});
			
			var output_4 = new cpr.controls.Output();
			output_4.value = "Without Modal";
			output_4.style.setClasses(["h6"]);
			container.addChild(output_4, {
				"autoSize": "none",
				"width": "984px",
				"height": "25px"
			});
			
			var group_6 = new cpr.controls.Container();
			group_6.style.setClasses(["card", "card-bordered"]);
			// Layout
			var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_4.leftMargin = 20;
			verticalLayout_4.rightMargin = 20;
			verticalLayout_4.topMargin = 20;
			verticalLayout_4.bottomMargin = 20;
			group_6.setLayout(verticalLayout_4);
			(function(container){
				var group_7 = new cpr.controls.Container();
				// Layout
				var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
				flowLayout_3.scrollable = false;
				flowLayout_3.horizontalSpacing = 20;
				flowLayout_3.verticalSpacing = 20;
				group_7.setLayout(flowLayout_3);
				(function(container){
					var button_9 = new cpr.controls.Button("btnMLs");
					button_9.value = "Modal Modaless";
					if(typeof onBtnMLsClick == "function") {
						button_9.addEventListener("click", onBtnMLsClick);
					}
					container.addChild(button_9, {
						"width": "130px",
						"height": "35px"
					});
				})(group_7);
				container.addChild(group_7, {
					"autoSize": "height",
					"width": "400px",
					"height": "35px"
				});
			})(group_6);
			container.addChild(group_6, {
				"autoSize": "height",
				"width": "400px",
				"height": "76px"
			});
		}
	});
	app.title = "Modal";
	cpr.core.Platform.INSTANCE.register(app);
})();
