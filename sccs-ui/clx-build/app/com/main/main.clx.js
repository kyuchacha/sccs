/*
 * App URI: app/com/main/main
 * Source Location: app/com/main/main.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/com/main/main", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * 공통 모듈 선언
			 ************************************************/
			var util = createCommonUtil();
			var comDiv;
			var comMdiClose;
			/************************************************
			 * 전역 변수 선언
			 ************************************************/
			var _originalOrder = new cpr.utils.ObjectMap(); // 컨트롤 순서
			var mMaxWindowCnt = 0;
			var mAppDefaultLocale = "ko";
			var mbCollapsed = false;
			var mnInitMnMenuSize = 60;
			var mnInitGrpAsideMenuSize = 230;
			var vsDefaultTime = "59:59";
			var timerInterval = "";
			/************************************************
			 * 사용자 정의 함수
			 ************************************************/
			
			cpr.core.NotificationCenter.INSTANCE.subscribe(AppProperties.MSG_TOPIC_ID, this, function(poMsgInfo) {
				
				var vcNotiToastr = app.lookup("notiToastr");
				
				if (poMsgInfo["TYPE"] == "SUCCESS") {
					vcNotiToastr.success(poMsgInfo["MSG"]);
				} else if (poMsgInfo["TYPE"] == "INFO") {
					vcNotiToastr.info(poMsgInfo["MSG"]);
				} else if (poMsgInfo["TYPE"] == "WARNING") {
					vcNotiToastr.warning(poMsgInfo["MSG"]);
				} else if (poMsgInfo["TYPE"] == "DANGER") {
					vcNotiToastr.danger(poMsgInfo["MSG"]);
				} else {
					if(!ValueUtil.isNull(poMsgInfo["DELAY"])){
						vcNotiToastr.infoDelay = poMsgInfo["DELAY"];
					}else{
						vcNotiToastr.infoDelay = 2000;
					}
					poMsgInfo["TYPE"] = "INFO";
					vcNotiToastr.info(poMsgInfo["MSG"]);
				}
				
				/* 알림방에 메세지 저장 */
				if (!poMsgInfo["REPLAY"]) {
					stackMsgInfo(poMsgInfo);
				}
				
			});
			
			
			/**
			 * 
			 * @param {{TYPE: "DEFAULT" | "INFO" | "SUCCESS" | "WARNING" | "DANGER", MSG:String}} poMsgInfo
			 */
			function stackMsgInfo(poMsgInfo) {
				var vcDsMsgStack = app.lookup("dsMsgStack");
				
				var voNewStack = vcDsMsgStack.insertRowData(0, false, {
					"status": poMsgInfo["TYPE"],
					"text": poMsgInfo["MSG"],
					"time": moment().format("YYYY-MM-DD hh:mm:ss")
				});
				
				createNotificationItem(voNewStack);
				
				util.Control.redraw(app, "btnAlrt");
			}
			
			/**
			 * 
			 * @param {cpr.data.DataRow} poRow
			 */
			function createNotificationItem(poRow) {
				var vcGrpNotiItemWrap = app.lookup("grpNotiItemWrap");
				
				var vcNotiItem = new udc.main.NotificationItem();
				
				vcNotiItem.status = poRow.getValue("status");
				vcNotiItem.text = poRow.getValue("text");
				vcNotiItem.time = poRow.getValue("time");
				
				/* 아이템 클릭 시 발생할 이벤트 정의 */
				vcNotiItem.addEventListener("click", function(e) {
					var vcClickedItem = e.control;
					
					/* 알림 재호출 (다시 저장하지 않으므로 공통 사용하지 않음) */
					cpr.core.NotificationCenter.INSTANCE.post("app-msg", {
						TYPE: vcClickedItem.status,
						MSG: vcClickedItem.text,
						REPLAY: true
					});
					
					removeNotificationItem(vcClickedItem);
				});
				
				/* 아이템 닫기 클릭 시 발생할 이벤트 정의 */
				vcNotiItem.addEventListener("close", function(e) {
					var vcClickedItem = e.control;
					
					removeNotificationItem(vcClickedItem);
				});
				
				vcGrpNotiItemWrap.insertChild(0, vcNotiItem, {
					autoSize: "height"
				});
			}
			
			/**
			 * 메세지 아이템을 삭제합니다. 파라미터를 넘기지 않는 경우 모든 아이템을 삭제합니다.
			 * @param {udc.com.main.NotificationItem} pcItem?
			 */
			function removeNotificationItem(pcItem) {
				var vcGrpNotiItemWrap = app.lookup("grpNotiItemWrap");
				
				if (ValueUtil.isNull(pcItem)) {
					vcGrpNotiItemWrap.removeAllChildren(true);
					return;
				}
				
				var vnItemIdx = vcGrpNotiItemWrap.getChildren().indexOf(pcItem);
				
				vcGrpNotiItemWrap.removeChild(pcItem, true);
				
				app.lookup("dsMsgStack").realDeleteRow(vnItemIdx);
			}
			
			//어플리케이션 설정정보 반환
			exports.getAppConfig = function(){
				return app.lookup("dmGlobalConfig");
			}
			
			exports.doOpenMenuToMdi = doOpenMenuToMdi;
			
			exports.isExistTabItem = isExistTabItem;
			
			exports.setTheme = setTheme;
			
			exports.getMenuPath = getMenuPath;
			
			exports.getMenuKey = function(psMenuId){
				
				var dsAllMenu = app.lookup("dsAllMenu");
				if(!ValueUtil.isNull(psMenuId)){
					var voRow = dsAllMenu.findFirstRow("MENU_ID == '"+psMenuId+"'");
					
					if(voRow == null) {
						return "";	
					}else{
						return voRow.getValue("MENU_ID");
					}
				}
			}
			
			/**
			 * 메뉴를 바로 오픈할 경우 부모페이지에서 전달하는 파라미터 세팅
			 */
			exports.getMenuParam = function() {
				var dmMenuParam = app.lookup("dmMenuParam");
				return dmMenuParam.getValue("strMenuParamVal");
			}
			
			exports.doMenuPath = function(psMenuId) {
				expandSideMenu();
				doFocusTreeItem(psMenuId);
			}
			
			/**
			 * 현재메뉴의 메뉴 path 리턴
			 * @param {String} psMenuId
			 */
			function getMenuPath(psMenuId) {
				/** @type cpr.data.DataSet */
				var voAllMenus = app.lookup("dsAllMenu");
				if (voAllMenus == null) return "";
				
				var voCurrMenu = voAllMenus.findFirstRow("MENU_ID == '" + psMenuId + "'");
				var vaMenuPathId = [];
				var vaMenuPathNm = [];
				var voMenu = null;
			
				while (true) {
					voMenu = voAllMenus.findFirstRow("MENU_ID == '" + psMenuId + "'");
					if (voMenu == null) break;
					if (voMenu.getValue("UP_MENU_ID") == "") {
						vaMenuPathId.push(voMenu.getValue("MENU_ID"));
						vaMenuPathNm.push(voMenu.getValue("MENU_NM"));
						break;
					}
					
					vaMenuPathId.push(voMenu.getValue("MENU_ID"));
					vaMenuPathNm.push(voMenu.getValue("MENU_NM"));
					psMenuId = voMenu.getValue("UP_MENU_ID");
				}
				
				var lbxMenuBarItem = null;
			//	if (voCurrMenu != null) {
			//		//lbxMenuBarItem = app.lookup("lbxMenuBar").findItem({value:voCurrMenu.getValue("TOP_MENU_ID")});
			//	}
				
				vaMenuPathId.reverse();
				vaMenuPathNm.reverse();
				
				var vaMenuPathInfo = new cpr.utils.ObjectMap();
				vaMenuPathInfo.put("MENU_PATH_ID", vaMenuPathId);
				vaMenuPathInfo.put("MENU_PATH_NM", vaMenuPathNm);
				
				return vaMenuPathInfo;
				
			}
			
			/**
			 * 디폴트 테마에 해당하는 css를 로드합니다. 그 외의 css는 disabled 합니다.
			 * 스위칭할 테마를 선택할 때마다 해당 메서드를 실행합니다.
			 * @param {String} psSrc Style 경로
			 */
			function setTheme(psSrc) {
				/** @type NodeList */
				var nodeList = document.getElementsByTagName("link");
				var vaNodeList = Array.prototype.slice.call(nodeList);
				vaNodeList.filter(function(/* HTMLDivElement */each){
					return each.rel == "stylesheet" && each.href.indexOf("common-theme") != -1;
				}).forEach(function(/* HTMLDivElement */each){
					if (each.href.indexOf(psSrc) == -1){
						each.disabled = "disabled";
					} else {
						each.removeAttribute("disabled");
					}
				});
			}
			
			/**
			 * 사용자 정보를 반환한다.
			 * @param {String} psUserInfoType (Optional) 사용자 정보 변수(ex: USER_ID)
			 * @return {String | cpr.data.DataMap} 사용자 정보
			 */
			exports.getUserInfo = function(psUserInfoType){
				var dmUserInfo = app.lookup("dmUserInfo");
				if(ValueUtil.isNull(psUserInfoType)){
					return dmUserInfo
				}
				return dmUserInfo.getValue(psUserInfoType);
			}
			
			function backup() {
				var vcGrpCont = app.getContainer();
				vcGrpCont.getChildren().forEach(function(each, index){
					_originalOrder.put(each.id, index);
				});
			}
			
			/**
			 * 
			 * @param {cpr.controls.UIControl} pcControl
			 * @param {{top:String, right:String, bottom:String, left:String, width:String, height:String}} poConstraint
			 * @param {Function} poCallbackFunc
			 */
			function floating(pcControl, poConstraint, poCallbackFunc) {
				var vcFloatingTarget = pcControl;
				
				var vcGrpCont = app.getContainer();
				
				var vcGrpOverlay = new cpr.controls.Container();
				vcGrpOverlay.setLayout(new cpr.controls.layouts.XYLayout());
				
				vcGrpOverlay.userAttr("floated-configuration", "true");
				
				vcGrpOverlay.addEventListenerOnce("click", function(e) {
					unfloating(vcFloatingTarget);
					
					if (_.isFunction(poCallbackFunc)) poCallbackFunc();
				});
				
				vcGrpCont.addChild(vcGrpOverlay, {
					top: "0px",
					right: "0px",
					bottom: "0px",
					left: "0px"
				});
				
				app.lookup(vcFloatingTarget.id).visible = true;
				
				vcGrpCont.floatControl(vcFloatingTarget, poConstraint);
				
				vcFloatingTarget.focus();
			}
			
			
			/**
			 * 
			 * @param {cpr.controls.UIControl} pcControl
			 */
			function unfloating(pcControl) {
				var vcGrpCont = app.getContainer();
				
				vcGrpCont.getChildren().filter(function(each){
					return each.userAttr("floated-configuration") == "true";
				}).forEach(function(each){
					vcGrpCont.removeChild(each, true);
				});
					
				var voActualRect = pcControl.getActualRect();
				vcGrpCont.insertChild(_originalOrder.get(pcControl.id), pcControl, {
					top : "10px",
					bottom : "10px",
					left : voActualRect.left + "px",
					width : voActualRect.width + "px"
				});
				
				if (pcControl.userAttr("prevent-hide") != "true"){
					util.Control.setVisible(app, false, pcControl.id);
				}
				
				transitionEnd();
			}
			
			
			/**
			 * 트리 메뉴를 숨기고 미니 메뉴를 표시합니다.
			 */
			function collapseSideMenu() {
				
				var vcGrpCont = app.getContainer();
				//헤더
				var vcGrpHeader = app.lookup("grpHeader");
				//MDI
				var vcMdiCn = app.lookup("mdiCn");
				
				var vnStndSize = mnInitMnMenuSize;
				
				if (app.targetScreen.name != "default") {
					vnStndSize = 0;
					util.Control.setVisible(app, false, ["mnuMnMenu","grpMiniMnBox"]);
					
					/* 상태에 따라 컨트롤 크기 및 위치 변경 */
					vcGrpCont.updateConstraint(vcMdiCn, {
						left : "10px"
					});
					
					/* 상태에 따라 컨트롤 크기 및 위치 변경 */
					vcGrpCont.updateConstraint(vcGrpHeader, {
						left : "10px"
					});
				} else {
					/* 상태에 따라 컨트롤 숨김 또는 표시 */
					if(vnStndSize != 0){
						util.Control.setVisible(app, true, ["mnuMnMenu","grpMiniMnBox"]);
					}
					
					/* 상태에 따라 컨트롤 크기 및 위치 변경 */
					vcGrpCont.updateConstraint(vcMdiCn, {
						left : vnStndSize + 20 + "px"
					});
					
					/* 상태에 따라 컨트롤 크기 및 위치 변경 */
					vcGrpCont.updateConstraint(vcGrpHeader, {
						left : vnStndSize + 20 + "px"
					});
				}
				
				util.Control.setVisible(app, false, "grpAside");
			}
			
			
			/**
			 * 미니 메뉴를 숨기고 트리 메뉴를 표시합니다.
			 */
			function expandSideMenu() {
				var vcGrpCont = app.getContainer();
				var vcGrpHeader = app.lookup("grpHeader");
				var vcGrpAside = app.lookup("grpAside");
				var vcMdiCn = app.lookup("mdiCn");
				
				/* 상태에 따라 컨트롤 크기 및 위치 변경 */
				vcGrpCont.updateConstraint(vcGrpHeader, {
					left : mnInitGrpAsideMenuSize + 20 + "px"
				});
				
				vcGrpCont.updateConstraint(vcGrpAside, {
					top : "10px",
					bottom : "10px",
					left : "10px",
					width : mnInitGrpAsideMenuSize + "px"
				});
				
				vcGrpCont.updateConstraint(vcMdiCn, {
					left : mnInitGrpAsideMenuSize + 20 + "px"
				});
				
				/* 레프트 메뉴 에니메이션 효과 지정*/
				vcGrpAside.style.css("opacity","0");
				vcGrpAside.style.animateTo({
					"opacity" : "1"
				}, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT);
				setTimeout(function(){
					util.Control.setVisible(app, false, ["mnuMnMenu","grpMiniMnBox"]);
					util.Control.setVisible(app, true, "grpAside");
				}, 200);
			}
			
			
			/**
			 * 
			 * @param {cpr.controls.TreeItem} pcItem
			 */
			function toggleMenuItem(pcItem) {
				var vcTreMenu = app.lookup("treMenu");
			
				/* 클릭한 아이템이 최상위 아이템인 경우 모든 아이템 닫기 */
				if (ValueUtil.isNull(pcItem.parentItem)){
					if(!vcTreMenu.isExpanded(pcItem)){
						vcTreMenu.collapseAllItems();
					}
				}
				
				vcTreMenu.toggle(pcItem);
			}
			
			/**
			 * 해당 메뉴가 이미 오픈되어 있는지 여부를 반환한다.
			 * @param psAppId
			 */
			function isExistTabItem(psAppId, psMenuKey){
				var mdiCn = app.lookup("mdiCn");
				var items = mdiCn.getTabItems();
				if(items != null && items.length > 0) {
					var alreadyOpened = items.some(function(item) {
						if(!item.content) return false;
						if(item.content.app) { // embeddedApp
							if(item.content.app.id == psAppId) {
								mdiCn.setSelectedTabItem(item);
								return true;
							}
						} else { // embeddedPage
							if(item.content.src == psAppId) {
								mdiCn.setSelectedTabItem(item);
								return true;
							}
						}
						return false;
					});
					return alreadyOpened;
				}else{
					return false;
				}
			}
			
			//트리 Item을 선택해준다.
			function doFocusTreeItem(psValue){
				
				if(ValueUtil.isNull(psValue)) return;
				
				var dsAllMenu = app.lookup("dsAllMenu");
				if(dsAllMenu == null) return;
				
				var voFindMenu = dsAllMenu.findFirstRow("MENU_ID == '"+psValue+"'");
				
				if(voFindMenu == null) return;
				
				//트리를 일단 접어줌
				var vcTree = app.lookup("treMenu");
				vcTree.collapseAllItems();
				
				vcTree.getItems().filter(function(item){
					if(item.value == psValue ){
						var vsPValue = item.parentValue;
						var vaChildItem = vcTree.getChildren(item);
						var voParent = vcTree.getItemByValue(vsPValue);
						getParentMenuNode(vcTree, voParent);
						vcTree.focusItem(item);
						vcTree.selectItemByValue(item.value, false);
					}
					return false;
				});
			}
			
			function getParentMenuNode(pcTree, poTreeItem){
				if(!poTreeItem) return;
				
				if(poTreeItem.parentValue == "root"){
					pcTree.expandItem(poTreeItem);
				}else{
					pcTree.expandItem(poTreeItem);
					getParentMenuNode(pcTree, pcTree.getItemByValue(poTreeItem.parentValue));
				}
			}
			
			function doOpenMenu(appId, poRow, pbByMenuEvent){
				
				appId = appId.substring(0, appId.lastIndexOf(".clx"));
				//기존에 열려진 창이 있으면... 다시 띄우지 않음
				var isExistItem = isExistTabItem(appId, poRow.getValue("MENU_ID"));
				if(isExistItem){
					return;
				} 
				
				var mdiCn = app.lookup("mdiCn");
				//오픈 창갯수 제한
				if(mdiCn.getTabItems().length > mMaxWindowCnt-1){
					//프로그램 탭은 @개를 초과할 수 없습니다. \n열려있는 프로그램을 닫은후 선택해 주세요.
					util.Msg.alert("INF-M012", [mMaxWindowCnt]);
					return;
				}
				
			//	mdiCn.addItemWithApp(appId, true, function(/* cpr.controls.TabItem */tabItem) {
			//			tabItem._menuKey = poRow.getValue("MENU_KEY");
			//			tabItem.userAttr("__menuInfo", JSON.stringify(poRow.getRowData()));
			//			tabItem.text = poRow.getValue("MENU_NM");
			//		/** @type cpr.controls.EmbeddedApp */
			//		var vcEmb = tabItem.content;
			//		//임베디드앱이 준비가 되면 처리할 작업 등록
			//		vcEmb.ready(function( /* cpr.events.CEvent */ e) {
			//			var voEmbApp = vcEmb.getEmbeddedAppInstance();
			//		});
			//	});
				
				var vsDivideMdiUseYn = util.DataMap.getValue(app, "dmGlobalConfig", "divideMdiUseYn");
				
				if ("Y" == vsDivideMdiUseYn) {
					
					var vbExists = false;
					
					// 동일한 화면 추가 제외(2021.07.27 수정)
					if (comDiv.getDivGroup() != null) {
						comDiv.getDivGroup().getChildren().forEach(function(each){
							if (each.type == "embeddedapp") {
								if (each.getEmbeddedAppInstance().app.id == appId) {
									vbExists = true;
								}
							}
						});
					}
					// 동일한 화면 추가 제외(2021.07.27 수정)
					if (!vbExists) {
						/* 화면분할 유지한 채 메뉴 오픈 */
						comDiv.selectMenu(appId, poRow, {
							text: poRow.getValue("MENU_NM"),
							tooltip: poRow.getValue("MENU_NM"),
							closable: true
						}, function(pcEmb){
							pcEmb.addEventListenerOnce("load", function( /* cpr.events.CEvent */ e) {
								doFillLayoutHeigth(e.control);
								if(pbByMenuEvent != false){
									util.AppStack.push(poRow.getValue("MENU_ID"));	
								}
								pcEmb.addEventListener("screen-change", function( /* cpr.events.CEvent */ e) {
									doFillLayoutHeigth(e.control);
								});
							});
						});
					}
					
				} else {	
					mdiCn.addItemWithApp(appId, true, function( /* cpr.controls.TabItem */ tabItem) {
						tabItem._menuKey = poRow.getValue("MENU_ID");
						tabItem.userAttr("__menuInfo", JSON.stringify(poRow.getRowData()));
						tabItem.text = poRow.getValue("MENU_NM");
						/** @type cpr.controls.EmbeddedApp */
						var vcEmb = tabItem.content;
						//임베디드앱이 준비가 되면 처리할 작업 등록
						vcEmb.ready(function( /* cpr.events.CEvent */ e) {
							//var voEmbApp = vcEmb.getEmbeddedAppInstance();
							vcEmb.addEventListenerOnce("load", function( /* cpr.events.CEvent */ e) {
								doFillLayoutHeigth(e.control);
								if(pbByMenuEvent != false){
									util.AppStack.push(poRow.getValue("MENU_ID"));	
								}
								vcEmb.addEventListener("screen-change", function( /* cpr.events.CEvent */ e) {
									doFillLayoutHeigth(e.control);
								});
							});
						});
					});
				}
				
			}
			
			function doFillLayoutHeigth(pcEmb){
				var embApp = pcEmb.getEmbeddedAppInstance();
				var vsFixLayout = embApp.getContainer().userData("fixLayout");
				if(vsFixLayout == "Y") return;
				//앱컨테이너가 버티컬 레이아웃이고 작업영역그룹이 하나이거나 해당 컨테이너의 자식컨트롤 중 fillLayout 사용자정의속성이 Y인 그룹의
				// 높이를 재지정함(화면에 꽉차이게..)
				var vcFillLayout;
				var flExclusionHeight = 0;
				var flExclusionRectHeight = 0;
				var vaChildren = embApp.getContainer().getChildren();
				var vaFillLayout = vaChildren.filter(function(each){
					return "Y" == each.userAttr("fillLayout");
				});
				
				var vaDisableBoxIds = embApp.getContainer().getChildren().filter(function(child){
					return child.type == "container" 
						&& ( child.id != "grpSearch" && child.id != "grpHeader" && child.style.getClasses().indexOf("search-box") == -1 && child.visible == true);
				});
				
				if(vaFillLayout.length == 1){
					vcFillLayout = vaFillLayout[0];
				}else if (vaDisableBoxIds.length >= 1){
					vcFillLayout = vaDisableBoxIds[0];
				}else{
			//			vcFillLayout = null;
					return;
				}
				
				if( vcFillLayout && embApp.getContainer().getLayout() instanceof cpr.controls.layouts.VerticalLayout) {
					
					var mainRootCon = app.getContainer();
					var mainRootLayout = mainRootCon.getLayout();
				
					vaChildren.forEach(function(each){
						if(each.id != vcFillLayout.id){
							var voChildConst = embApp.getContainer().getConstraint(each);
							var vsHeight = voChildConst.height;
			 				var vnHeight = vsHeight.replace("px", "");
							var vnRectHeight = each.getActualRect().height;
			  				flExclusionRectHeight += ValueUtil.fixNumber(vnRectHeight);	
			  				flExclusionHeight += ValueUtil.fixNumber(vnHeight);
						}
					});
					var vbEmbHeight = embApp.getContainer().getConstraint(vcFillLayout).height;
					if(!vbEmbHeight){
						return;
					}
					var vnEmbHeight = vbEmbHeight.replace("px", "");
			  	    vnEmbHeight = ValueUtil.fixNumber(vnEmbHeight);
			  	    	
			  	     //보수적으로 데이터 레이아웃 높이가 700이 넘으면 기존 유지
			  	    if( vnEmbHeight > 700){
			  	    	embApp.getContainer().userData("fixLayout", "Y");
			  	    	return;
			  	    }
			  	    
					var mainHeight = app.getActualRect().height;
					
					if(mainHeight >= 800) {
						
						var embHeight = embApp.getContainer().getConstraint(vcFillLayout).height;
						
						if(embHeight.indexOf("calc(100%") < 0){
							vcFillLayout.userAttr("origin.height", embHeight);	
						}
						var poConstraint = {
								height : "calc(100% - " + (flExclusionHeight + 10) +"px)"
							 /* , minHeight: 0
							  , autoSize: "none"*/
							};
					}else{
						
						var vsHeightPx = "680px";
						var vsFillLayoutOrgH = vcFillLayout.userAttr("origin.height");
						
						if(!ValueUtil.isNull(vsFillLayoutOrgH)){
							vsHeightPx = vsFillLayoutOrgH;
						}
						var poConstraint = {
									height : vsHeightPx
								/*  , minHeight: 500
								  , autoSize: "height"*/
							};
					}
					embApp.getContainer().updateConstraint(vcFillLayout, poConstraint);
				}
					
			}
			
			/**
			 * 해당 메뉴를 MDI에 오픈한다.
			 * @param psMenuId 메뉴ID
			 * @param poParam 오픈될 메뉴에 전달할 파라미터 (JOSN 형태로 만들어야함.)
			 */
			function doOpenMenuToMdi(psMenuId, poParam){
				var dsAllMenu = app.lookup("dsAllMenu");
				var voRow = dsAllMenu.findFirstRow("MENU_ID == '"+psMenuId+"'");
				if(voRow != null){
					// 메뉴 다이렉트 오픈시 전달하고 싶은 파라미터 세팅 (반드시 JSON 형태로 파라미터를 저장할 것!!)
					app.lookup("dmMenuParam").setValue("strMenuParamVal", JSON.stringify(poParam));
					var appId = voRow.getValue("CALL_PAGE");
					doOpenMenu(appId, voRow, false);
				}else{
					util.Msg.alert("해당 메뉴에 대한 권한이 없습니다.");
				}
			}
			
			/**
			 * 
			 * @param {cpr.controls.TreeItem} pcItem
			 */
			function miniMenuItemClick(pcItem) {
				var vcMnuMiniMenu = app.lookup("mnuMnMenu");
					var vsMenuItemValue = null;
				if (!app.lookup("treMenu").hasChild(pcItem)){
					vsMenuItemValue = findParentMenuItem(pcItem).value;
				} else {
					vsMenuItemValue = pcItem.value;
				}
				
				app.lookup("mnuMnMenu").selectItemByValue(vsMenuItemValue);
			}
			
			/**
			 * 
			 * @param {cpr.controls.TreeItem} pcItem
			 * @return {cpr.controls.TreeItem} vsParentItem
			 */
			function findParentMenuItem(pcItem) {
				var vcTreLeftMenu = app.lookup("treMenu");
				
				var vcParentItem = pcItem;
				do{
					var vcFindtreeItem = vcTreLeftMenu.findItem({value : vcParentItem.parentValue});
					if (vcFindtreeItem != null){
						vcParentItem = vcFindtreeItem;
					}
				}
				while(vcParentItem.value == "");
				
				return vcParentItem;
			}
			
			/**
			 * 
			 * @param {cpr.controls.Item} pcItem
			 */
			function openMenuItem(pcItem) {
				var treMenu = app.lookup("treMenu");
				var selectedMenu = pcItem.row;
				var appId = selectedMenu.getValue("CALL_PAGE");
				if(appId) {
					//메뉴경로 지정 (UP_MENU_ID 컬럼을 가져감)
					doOpenMenu(appId, selectedMenu);
					
					miniMenuItemClick(pcItem);
					//모바일일경우.
					if(app.lookup("btnMToggle").visible && app.targetScreen.name != "default"){
						util.Control.setVisible(app, false, "grpAside");
					}
			//		else{
			//			util.Control.setValue(app, "cbxToggle", "false");
			//		}
				}
				else{
					var vsKey = selectedMenu.getValue("MENU_ID");
					var voItem = treMenu.getItemByValue(vsKey);
					if(voItem){
					}
				}
			}
			
			
			/**
			 * 컨텐츠 영역 (MDIFolder)를 확대합니다.
			 */
			function zoomInContent() {
				util.Control.updateConstraint(app, "mdiCn", null, {
					top : "0px",
					left : "0px",
					right : "0px",
					bottom : "0px"
				});
				
				app.lookup("btnZoom").style.addClass("cl-selected");
				app.lookup("btnVrtZoom").style.addClass("cl-selected");
			}
			
			
			/**
			 * 컨텐츠 영역 (MDIFolder)를 축소합니다.
			 */
			function zoomOutConent() {
				var voHeaderActualRect = app.lookup("grpHeader").getActualRect();
				
				util.Control.updateConstraint(app, "mdiCn", null, {
					top : voHeaderActualRect.height + 20 + "px",
					left : voHeaderActualRect.left + "px",
					bottom : "10px",
					right : "10px"
				});
			
				app.lookup("btnZoom").style.removeClass("cl-selected");
				app.lookup("btnVrtZoom").style.removeClass("cl-selected");
			}
			
			
			/************************************************
			 * 컨트롤 이벤트 (앱)
			 ************************************************/
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
			//	backup();
				
			//	if(mbCollapsed){
			//		util.Control.setVisible(app, true, "mnuMnMenu");
			//	}else{
			//		util.Control.setVisible(app, false, "mnuMnMenu");
			//	}
				
				startTimer(vsDefaultTime);
				
				comDiv = comDivideScr(app, app.lookup("mdiCn"));
			 	comMdiClose = mdiTabClose(app, comDiv);
			 	
				util.Submit.send(app, "subOnLoad_json", function(pbSuccess) {
					if (pbSuccess){
						
						
						//사용자명
						util.Control.setValue(app, "lblUserNm", util.DataMap.getValue(app, "dmUserInfo", "USER_NM"));
						util.Control.setValue(app, "lblUserAuth", moment().format("YYYY-MM-DD hh:mm") );
						
						//Global 설정
						var dmConfig = app.lookup("dmGlobalConfig");
						mMaxWindowCnt = ValueUtil.fixNumber(dmConfig.getValue("mdiWindowMaxCount")); //MDI 최대 창갯수
						mAppDefaultLocale = dmConfig.getValue("defaultLocale"); //어플리케이션 로케일
						
						// left 메뉴 첫번째 아이템 선택
						util.SelectCtl.selectItem(app, "treMenu", 0);
						
						// 토글 value에 다라 미니 메뉴 visible 처리
						app.lookup("mnuMnMenu").visible = app.lookup("cbxToggle").value == "true" ?  false : true;
						
						var vsDivideMdiUseYn = util.DataMap.getValue(app, "dmGlobalConfig", "divideMdiUseYn");
			
						if ("Y" == vsDivideMdiUseYn) {
							util.Control.setVisible(app, true, "cmbLayout");
						} else {
							util.Control.setVisible(app, false, "cmbLayout");
						}
					
						/* 메인 파츠 다시 그리기 요청 */
						util.Control.redraw(app, ["grpLogo", "mnuMnMenu", "grpAside", "grpHeader", "mdiCn"]);
					}
				});
				
			}
			
			/**
			 * 접속시간의 타이머를 설정하는 함수입니다. mm:ss 포맷 형식의 string을 입력받으며, (00:00 ~ 59:59) 사이의 값을 제공받아야합니다.
			 * @param {String} psTime 타이머가 시작될 시간
			 */
			function startTimer(psTime) {
				var vcOptTime = app.lookup("optTime");
				
				vcOptTime.value = psTime;
				var vsTime = moment(psTime, "mm:ss");
				
				clearInterval(timerInterval);
				
				timerInterval = setInterval(function() {
					var vsLimitTime = vsTime.subtract(1, "seconds");
					vcOptTime.value = vsLimitTime.format("mm:ss");
					vcOptTime.redraw();
				}, 1000);
			}
			
			function changeToMobile() {
				/* 상태에 따른 컨트롤 위치 및 크기 변경 */
				util.Control.updateConstraint(app, "grpHeader", null, {
					left : "10px"
				});
				
				util.Control.updateConstraint(app, "grpAside", null, {
					width : "0px"
				});
				
				util.Control.updateConstraint(app, "mdiCn", null, {
					left : "10px"
				});
				
				/* 알림 컨트롤 위치 및 크기 변경 */
				util.Control.updateConstraint(app, "notiToastr", null, {
					left: "10px",
					bottom: "20px",
					right : "10px",
					height : "60px"
				});
				
				/* 컨트롤 숨김 또는 표시 설정 */
				util.Control.setVisible(app, true, ["btnDropdown"]);
				util.Control.setVisible(app, false, ["cbxToggle", "btnSearch","grpBtnSearch"]);
				
				/* 상태에 따른 레이아웃 변경 */
				app.lookup("mdiCn").addHeaderControl(app.lookup("grpCnHdR"), {position : "right", width : "35"});
				
				/* 컨트롤 다시 그리기 요청 */
				util.Control.redraw(app, ["grpHeader", "mdiCn", "notiToastr"]);
			}
			
			
			function changeToDefault() {
				
				if(app.lookup("grpAside").isFloated()){
					unfloating(app.lookup("grpAside"));
				}
				
				if(app.lookup("grpCnHdRVrt").isFloated()) {
					unfloating(app.lookup("grpCnHdRVrt"));
				}
				
				/* 모바일이 아닐 경우 레프트 메뉴 border-radius 속성 default 속성으로 변경 */
				util.Control.setStyleAttr(app, "grpAside", "border-radius", "");
				
				var vbExpanded = app.lookup("cbxToggle").checked;
				var vsToggleWidth = null;
				var vnMenuSize = null;
				
				if (vbExpanded){
					vnMenuSize = mnInitGrpAsideMenuSize;
					util.Control.setVisible(app, true, "grpAside");
			//		if(msInitMnMenuSize == "0px"){
			//			util.Control.setVisible(app, false, "mnuMnMenu");
			//		}
				} else {
					//vsStdrSize = "60px";
					//vsStdrSize = "0px";
					vnMenuSize = mnInitMnMenuSize;
					util.Control.setVisible(app, true, ["mnuMnMenu","grpMiniMnBox"]);
					util.Control.setVisible(app, false, "grpAside");
				}
				
				/* 컨텐츠 확대 상태의 경우 상태 되돌리기 */
				if (app.lookup("btnZoom").style.hasClass("cl-selected")){
					app.lookup("btnZoom").click();
				}
				
				/* 상태에 따른 컨트롤 위치 및 크기 변경 */
				util.Control.updateConstraint(app, "grpHeader", null, {
					left : vnMenuSize + 20 + "px"
				});
				
				util.Control.updateConstraint(app, "grpAside", null, {
					top : "10px",
					bottom : "10px",
					left : "10px",
					width : vnMenuSize + "px"
				});
				
				util.Control.updateConstraint(app, "mdiCn", null, {
					left : vnMenuSize + 20 + "px"
				});
				
				
				/* 알림 컨트롤 위치 및 크기 변경 */
				util.Control.updateConstraint(app, "notiToastr", null, {
					bottom: "20px",
					right : "20px",
					left : "",
					height : "60px",
					width : "434px"
				});
				
				/* 컨트롤 숨김 또는 표시 설정 */
				util.Control.setVisible(app, false, "btnDropdown");
				util.Control.setVisible(app, true, ["cbxToggle",  "btnSearch","grpBtnSearch"]);
				
				app.lookup("mdiCn").addHeaderControl(app.lookup("grpCnHdR"), {position : "right", width : "350"});
				
				/* 컨트롤 다시 그리기 요청 */
				util.Control.redraw(app, ["grpHeader", "mdiCn", "notiToastr"]);	
				
			}
			
			/*
			 * Body에서 screen-change 이벤트 발생 시 호출.
			 * 스크린 크기 변경 시 호출되는 이벤트.
			 */
			function onBodyScreenChange(/* cpr.events.CScreenChangeEvent */ e){
				var vbMbScrn = e.screen.name != "default";
				var vcMnMenu = app.lookup("grpMiniMnBox");
				var cmbScreen = app.lookup("cmbScreen")
				if (vbMbScrn){
					vcMnMenu.visible = false;
					changeToMobile();
					cmbScreen.value = "mobile"
				} else {
					vcMnMenu.visible = app.lookup("cbxToggle").value != "true" ? true : false;
					changeToDefault();
					cmbScreen.value = "pc"
				}
				
				transitionEnd();
			}
			
			
			/************************************************
			 * 컨트롤 이벤트 (헤더 영역)
			 ************************************************/
			
			/*
			 * 버튼(btnMToggle)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMToggleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnMToggle = e.control;
				
				if(app.lookup("grpAside").isFloated()){
					unfloating(app.lookup("grpAside"));
					return false;
				}
				
				if(app.lookup("mnuMnMenu").isFloated()){
					unfloating(app.lookup("mnuMnMenu"));
					return false;
				}
				
				/* 모바일일 때 트리 메뉴를 표시 */
				util.Control.setVisible(app, true, "grpAside");
				
				/* 모바일일 때 레프트 메뉴 border-radius = 0 으로 변경 */
				util.Control.setStyleAttr(app, "grpAside", "border-radius", "0");
				
				/* 모바일일 때 트리 메뉴를 플로팅하여 보여줌 */
				floating(app.lookup("grpAside"), {
					top: "0px",
					left: "0px",
					bottom: "0px",
					width: mnInitGrpAsideMenuSize + "px"
				}, function() {
					/* 플로팅 해제 후 토글 상태에 따라 일반 메뉴 또는 미니 메뉴 표시 */
					if (app.lookup("cbxToggle").checked){
						util.Control.setVisible(app, true, "grpMenuWrap");
					} 
				});
			}
			
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbxToggleValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var cbxToggle = e.control;
				
				/* 트리 메뉴 <-> 미니 메뉴로 변경 */
				if (!cbxToggle.checked){ // change to mini-menu
					collapseSideMenu();
				} else { // change to menu
					expandSideMenu();
				}
				transitionEnd();
				localStorage.setItem( "cbxToggle" , cbxToggle.checked);
			}
			
			/*
			 * 버튼(btnSearch)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
			//	var voActualRect = app.lookup("grpHeader").getActualRect();
			//	/* 모바일일 때 트리 메뉴를 플로팅하여 보여줌 */
			//	floating(app.lookup("cmbUnfd"), {
			//		top: voActualRect.top + "px",
			//		left: voActualRect.left + "px",
			//		right: "10px",
			//		height: voActualRect.height + "px"
			//	});
			
				var btnSearch = e.control;
				var voActualRect = app.lookup("btnSearch").getActualRect();
				
				floating(app.lookup("grpSch"), {
					top: voActualRect.bottom + 15 + "px",
					left: "80px",
					width: "500px",
					height: "300px"
				});
				
			}
			
			
			/*
			 * 네비게이션 바에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onNvbMgMenuItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.NavigationBar
				 */
				var nvbMgMenu = e.control;
				
				var vcMenuItem = e.item;
				
				if (ValueUtil.isNull(vcMenuItem)){
					return;
				}
				
				openMenuItem(vcMenuItem);
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbLangSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbLang = e.control;
				
				/* 언어 코드에 따른 다국어 설정 */
				cpr.I18N.INSTANCE.currentLanguage = util.SelectCtl.getItemValue(app, "cmbLang");
				
				//TODO 다국어 바인딩 이외의 다국어 처리 로직을 작성하십시오.
			}
			
			
			/*
			 * 버튼(btnCstmzMenu)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCstmzMenuClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCstmzMenu = e.control;
				
				if(confirm("로그아웃 하시겠습니까?")){
					util.Submit.send(app, "subLogout",  function(pbSuccess){
						if(pbSuccess){
							app.close();
							top.location.reload();
						}
						
					});
				}
			}
			
			
			
			
			
			/*
			 * 버튼(btnSetting)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSettingClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSetting = e.control;
				floating(app.lookup("grpRghtbar"), {
					top : "0px",
					right : "0px",
					bottom : "0px",
					width: "280px"
				});
			}
			
			/************************************************
			 * 컨트롤 이벤트 (레프트 영역)
			 ************************************************/
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGrpLogoWrapClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpLogoWrap = e.control;
				
				/* 이벤트 추가 전파 방지 */
				e.stopPropagation();
			}
			
			
			/*
			 * 버튼(btnPfSetting)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPfSettingClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnPfSetting = e.control;
				
				util.Msg.notify(app, "INF-M000", "준비 중인 서비스입니다.");
			}
			
			
			/*
			 * 버튼(btnLogout)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnLogoutClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnLogout = e.control;
				
				util.Msg.confirmDialog(app, "로그아웃 하시겠습니까?", null, function(e){
					if(e.control.returnValue.closeState === "confirm") {
						
						util.Submit.send(app, "subLogout", function(pbSuccess) {
							if (pbSuccess){
								alert("로그아웃되었습니다.");
								
								/* 메인 화면으로 전환 (SPA 전환) */
								window.location.href = "/";
								return;
								
								/* 메인 화면으로 전환 (SPA 전환) */
			//					cpr.core.App.load("app/com/inc/login", function(newapp) {
			//						//app.close();
			//						newapp.createNewInstance().run();
			//					});
			//					return;
							}
						});
			
					}
				});
				
			}
			
			
			/*
			 * 트리에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onTreMenuItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var treMenu = e.control;
				
				var vcMenuItem = e.item;
				
				if (ValueUtil.isNull(vcMenuItem)){
					return;
				}
				
				toggleMenuItem(vcMenuItem);
				
				openMenuItem(vcMenuItem);
				
				app.lookup("mnuMnMenu").selectItemByValue(vcMenuItem.value);
				
			}
			
			
			/*
			 * 메뉴에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onMnuMnMenuItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.Menu
				 */
				var mnuMnMenu = e.control;
				
				var vcMenuItem = e.item;
				
				if (ValueUtil.isNull(vcMenuItem)){
					return;
				}
				
				openMenuItem(vcMenuItem);
				
				app.lookup("treMenu").selectItemByValue(vcMenuItem.value);
			}
			
			/************************************************
			 * 컨트롤 이벤트 (컨텐츠 영역)
			 ************************************************/
			
			
			/*
			 * 버튼(btnDfItem)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDfItemClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDfItem = e.control;
				
				/* 디폴트 탭 아이템 선택 스타일 설정 */
				var vbSelcted = btnDfItem.style.hasClass("cl-selected");
				if (vbSelcted == false){
					btnDfItem.style.addClass("cl-selected");
				}
			
				/* 디폴트 탭 아이템 선택 (숨겨진 탭 아이템 선택) */
				var vcMdiCn = app.lookup("mdiCn");
				vcMdiCn.setSelectedTabItem(vcMdiCn.getTabItems()[0], false);
			}
			
			
			/*
			 * MDI 폴더에서 selection-change 이벤트 발생 시 호출.
			 * Tab Item을 선택한 후에 발생하는 이벤트.
			 */
			function onMdiCnSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.MDIFolder
				 */
				var mdiCn = e.control;
				
				var treMenu = app.lookup("treMenu");
				/** @type cpr.controls.EmbeddedApp */
				var EmbeddedApp = e.newSelection.content;
				
				var btnDfItem = app.lookup("btnDfItem");
				btnDfItem.style.removeClass("cl-selected");
				
				//메뉴를 새로 연 경우는 제외
				if(!EmbeddedApp)	return ;
				
				cpr.core.NotificationCenter.INSTANCE.post("check-menu-auth", {
					vcEmb : EmbeddedApp
				});
			}
			
			
			/*
			 * MDI 폴더에서 close 이벤트 발생 시 호출.
			 * 탭 아이템을 닫을 때 발생하는 이벤트이며, 사용자가 취소할 수 있습니다.
			 */
			function onMdiCnClose(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.MDIFolder
				 */
				var mdiCn = e.control;
				
				if(e.content && e.content.content){
					
					var vcItemApp = e.content.content.getEmbeddedAppInstance();
					
					if(util.isAppModified(vcItemApp, "CRM", vcItemApp.getContainer())){
						e.preventDefault();
						mdiCn.setSelectedTabItem(e.content);
						return false;
					}
					
					e.content.content.removeAllUserAttr();
					e.content.content.removeAllEventListeners();		
					
				}
				
				/* 첫 아이템을 제외한 나머지 탭 아이템이 닫혔을 때 첫 아이템 선택 */
				var vaLastTabItems = _.reject(mdiCn.getTabItems(), function(each) {
					return each == e.content;
				});
				
				if (vaLastTabItems.length > 1){
					return;
				}
				
				mdiCn.setSelectedTabItem(vaLastTabItems[0]);
				
				var btnDfItem = app.lookup("btnDfItem");
				btnDfItem.style.addClass("cl-selected");
				
			}
			
			
			/*
			 * 버튼(btnDropdown)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDropdownClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDropdown = e.control;
				
				var vcGrpCnHdRVrt = app.lookup("grpCnHdRVrt");
				
				var voActualRect = btnDropdown.getActualRect();
				var voTargetConstraint = app.getContainer().getConstraint(vcGrpCnHdRVrt);
				
				floating(vcGrpCnHdRVrt, {
					top : voActualRect.bottomCenter.y + "px",
					right : "20px",
					height : voTargetConstraint.height,
					width: voTargetConstraint.width	
				});	
			}
			
			
			
			/*
			 * 버튼(btnZoom)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnZoomClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnZoom = e.control;
				
				var vbZoomed = btnZoom.style.hasClass("cl-selected");
				if (vbZoomed){
					zoomOutConent();
				} else {
					zoomInContent();
				}
			}
			
			
			/*
			 * 버튼(btnRefresh)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRefreshClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRefresh = e.control;
				
				/* 현재 선택되어 있는 화면을 새로고침 합니다. */
				var vcMdiCn = app.lookup("mdiCn");
				
				var vcSelectedTabItem = vcMdiCn.getSelectedTabItem();
				var vcItemCn = vcSelectedTabItem.content;
				
				if (vcItemCn instanceof cpr.controls.EmbeddedApp) {
					
					var vsAppId = vcItemCn.app.id;
					vcItemCn.app = null;
			//		vcItemCn.getEmbeddedAppInstance().dispose();
					cpr.core.App.load(vsAppId, function(loadedApp) {
						vcItemCn.app = loadedApp;
						vcItemCn.redraw();
					});
				}
			}
			
			
			
			/*
			 * 버튼(btnClose)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnClose = e.control;
				
				var vcMdiCn = app.lookup("mdiCn");
				
				var vsDivideMdiUseYn = util.DataMap.getValue(app, "dmGlobalConfig", "divideMdiUseYn");
				
				if ("Y" == vsDivideMdiUseYn) {
					// 첫번째 탭 고정 (2021.07.27 수정)
					comMdiClose.setFixedItem();
					
					// 전체닫기 모듈적용 (2021.07.27 수정)
					comMdiClose.closeTabAll("cmbLayout");
					
					// 분할 아이콘 초기화
			//		var voItem = app.lookup("cmbLayout").getItem(0);
			//		app.lookup("cmbLayout").selectItem(voItem);
				} else {
					if (confirm("오픈된 전체 화면을 닫으시겠습니까?")) {
						app.lookup("mdiCn").closeOthers(vcMdiCn.getTabItems()[0]);
					}
				}
			}
			
			
			/************************************************
			 * 컨트롤 이벤트 (라이트 영역)
			 ************************************************/
			/*
			 * 버튼(btnRbClose)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRbCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRbClose = e.control;
				
				app.lookup("grpRghtbar").visible = false;
			}
			
			
			/************************************************
			 * 컨트롤 이벤트 (플로팅 영역)
			 ************************************************/
			
			
			/*
			 * 서치 인풋에서 search 이벤트 발생 시 호출.
			 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
			 */
			function onSchUnfdSearch(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.SearchInput
				 */
			    var ipbMenuSearch = e.control;
				var vsValue = ipbMenuSearch.value;
				var vcTree = app.lookup("treMenu");
				vcTree.collapseAllItems();
				if(!vsValue) return;
				vcTree.getItems().filter(function(item){
					if(item.label.indexOf(vsValue) >-1){
						var vsPValue = item.parentValue;
						var vaChildItem = vcTree.getChildren(item);
						var voParent = vcTree.getItemByValue(vsPValue);
						getParentMenuNode(voParent);
						vcTree.focusItem(item);
					}
					return false;
				});
				
				function getParentMenuNode(poTreeItem){
					
					if(!poTreeItem) return;
					
					if(poTreeItem.parentValue == ""){
						vcTree.expandItem(poTreeItem);
					}else{
						vcTree.expandItem(poTreeItem);
						getParentMenuNode(vcTree.getItemByValue(poTreeItem.parentValue));
					}
				}
			}
			
			
			/*
			 * "Clear All" 아웃풋(optNtClrAll)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onOptNtClrAllClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Output
				 */
				var optNtClrAll = e.control;
				
				util.Control.redraw(app, ["btnAlrt"]);
				
			}
			
			
			/*
			 * "View All" 아웃풋(optNtVwAll)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onOptNtVwAllClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Output
				 */
				var optNtVwAll = e.control;
				
				//TODO 공지사항 또는 알림 관련 로직을 작성하십시오.
			}
			
			
			/*
			 * 그룹에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGrpCnHdRVrtClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpCnHdRVrt = e.control;
				
				unfloating(grpCnHdRVrt);	
			}
			
			
			/*
			 * 버튼(btnVrtZoom)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnVrtZoomClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnVrtZoom = e.control;
				
				app.lookup("btnZoom").click();
			}
			
			
			/*
			 * 버튼(btnVrtRefresh)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnVrtRefreshClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnVrtRefresh = e.control;
				
				app.lookup("btnRefresh").click();
			}
			
			
			/*
			 * 버튼(btnVrtClose)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnVrtCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnVrtClose = e.control;
				
				app.lookup("btnClose").click();
			}
			
			
			/*
			 * MDI 폴더에서 tabheader-click 이벤트 발생 시 호출.
			 * 탭 아이템의 헤더 영역을 클릭하였을 때 발생하는 이벤트입니다.
			 */
			function onMdiCnTabheaderClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.MDIFolder
				 */
				var mdiCn = e.control;
				
				if(e.button == 2){
					var item = e.item;
					
					/** 
					 * @type cpr.controls.MDIFolder
					 */
					var mainMdi = e.control;
					var vcSelectedTabItem = mainMdi.getSelectedTabItem();
					
					e.preventDefault();
				
			//		var vcMenuOrg = app.lookup("mdiTabmenu");
					var vcRootContainer = app.getRootAppInstance().getContainer();
				
			//		if (vcMenuOrg) {
			//			vcRootContainer.removeChild(vcMenuOrg);
			//		}
					var vcMenu = new cpr.controls.Menu("mdiTabmenu");
					vcMenu.addItem(new cpr.controls.TreeItem("모든 탭 닫기", "closeAll", "root"));
					vcMenu.addItem(new cpr.controls.TreeItem("다른 탭 닫기", "closeOthers", "root"));
					vcMenu.addItem(new cpr.controls.TreeItem("앱ID 복사", "clipBoardAppId", "root"));
				
					vcMenu.addEventListener("selection-change", function( /**@type cpr.events.CSelectionEvent */ e) {
						var vaNewSelection = e.newSelection;
						switch (vaNewSelection[0].value) {
							case "closeAll":
								mainMdi.closeAll();
								break;
							case "closeOthers":
								mainMdi.closeOthers(item);
								mainMdi.setSelectedTabItem(item);
								break;
							case "clipBoardAppId":
								var input = document.createElement("input");
								input.style.position = "fixed";
								input.value = item.content.app.id;
								document.body.appendChild(input);
								input.focus();
								input.select();
								document.execCommand("copy");
								document.body.removeChild(input);
								util.Msg.notify(app, "앱 ID가 복사되었습니다.");
								break;
						}
						vcMenu.hide();
						vcMenu.dispose();
					});
				
					vcMenu.addEventListener("blur", function( /**@type cpr.events.CFocusEvent*/ e) {
						vcMenu.hide();
						vcMenu.dispose();
					});
					var showConstraint = {
							"position" : "absolute",
							"top" : e.clientY + "px",
							"left" : (e.clientX + 50) + "px",
							"width" : "150px",
							"height" : "auto"
						};
					if(vcRootContainer.getLayout() instanceof cpr.controls.layouts.FormLayout){
						app.floatControl(vcMenu, showConstraint);
					}else{
						vcRootContainer.addChild(vcMenu, showConstraint);
					}	
					vcMenu.focus();
				}
			}
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
				util.SelectCtl.selectItem(app, "cmbTheme", 
					util.DataMap.getValue(app, "dmGlobalConfig", "default_theme"));
				
				var vbCbxToggle = localStorage.getItem( "cbxToggle");
				if(vbCbxToggle){
					app.lookup("cbxToggle").checked =  ValueUtil.fixBoolean(vbCbxToggle);
				}
				
				var mdiFolder = app.lookup("mdiCn");
				util.AppStack.start(mdiFolder);
			}
			
			
			
			/*
			 * 버튼(btnAlrt)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnAlrtClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnAlrt = e.control;
				
				var vcGrpNotiBox = app.lookup("grpNotiBox");
				
				var voActualRect = btnAlrt.getActualRect();
				var voTargetConstraint = app.getContainer().getConstraint(vcGrpNotiBox);
				
				if(voTargetConstraint.height == null || voTargetConstraint.height == undefined) {
					// 알림방 max-height 설정 (2021.10.05 추가)
					voTargetConstraint.height = "266px";
				}
				
				floating(vcGrpNotiBox, {
					top: "59px",
					left: voActualRect.centerRight.x - parseInt(voTargetConstraint.width) + "px",
					height: voTargetConstraint.height,
					width: voTargetConstraint.width
				});
			}
			
			
			/*
			 * "Clear All" 아웃풋(optNtClrAll)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onOptNtClrAllClick2(/* cpr.events.CMouseEvent */ e){
					/** 
				 * @type cpr.controls.Output
				 */
				var optNtClrAll = e.control;
				
				/* 메세지 정보 모두 삭제 */
				app.lookup("dsMsgStack").clear();
				
				/* 메세지 아이템 삭제 */
				removeNotificationItem();
				
				util.Control.redraw(app, ["grpNotiBox", "btnAlrt"]);
			}
			
			/**
			 * 메인 화면에 transition 으로 인해 그리드 column넓이를 재계산을 위한 redraw
			 */
			function transitionEnd(){
				
				var container = app.getContainer();
				var layout = container.getLayout();
				var animationDuration = layout.animationDuration;
				
				//animation duration이 0일경우 다시 그리지 않는다.
				if(animationDuration == 0){
					return ;
				}	
				
				var transitionTime = (animationDuration * 1000);
				var event = new cpr.events.CAppEvent('windowResize');
				
				setTimeout(function(){
					app.lookup("mdiCn").redraw();
					
					// 분할 플로팅 그룹 위치 재설정 추가 (2021.10.06 추가)
					comDiv.updateFloatConstraint();
					
					app.dispatchEvent(event);
				}, transitionTime);
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb1SelectionChange(/* cpr.events.CSelectionEvent */ e){
				
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
				
				if (cmb1.value.split('/')[1] == 'hyundai') {
					app.lookup('btnThm').visible = true;
				} else {
					app.lookup('btnThm').visible = false;
				}
						
				// 선택한 테마 타입과 그 외의 테마 타입에 대하여 스타일을 제거 또는 추가 합니다.
				setThemeTypeStyle(app.lookup("grp1"), cmb1);
				
				// 테마 스위칭 가능하도록 link 속성에 disabled관련 제어
				var voRootAppIns = app.getRootAppInstance();
				
				if (voRootAppIns){
					var vsTheme = util.SelectCtl.getValue(app, "cmbTheme");
					setTheme(vsTheme);
				}
				
			}
			
			/**
			 * 선택된 타입 이외의 타입에는 selected 스타일을 제거하고, 
			 * 선택된 타입에는 selected 스타일을 추가합니다.
			 * 
			 * @param {cpr.controls.Container} pcContainer
			 * @param {cpr.controls.Output} pcControl
			 */
			function setThemeTypeStyle(pcContainer, pcControl) {
				pcContainer.getChildren().forEach(function(each){
					each.style.removeClass("selected");
				});
				
				pcControl.style.addClass("selected");
			}
			
			
			/*
			 * 그룹에서 mouseenter 이벤트 발생 시 호출.
			 * 마우스 포인터가 컨트롤 위에 진입할 때 발생하는 이벤트.
			 */
			function onGrpMiniMnBoxMouseenter(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpMiniMnBox = e.control;
				
				/* 모바일일 때 트리 메뉴를 플로팅하여 보여줌 */
			//	floating(app.lookup("grpAside"), {
			//		top: "10px",
			//		left: "10px",
			//		bottom: "10px",
			//		width: mnInitGrpAsideMenuSize + "px"
			//	}, function() {
			//		/* 플로팅 해제 후 토글 상태에 따라 일반 메뉴 또는 미니 메뉴 표시 */
			//	});
			}
			
			
			/*
			 * 그룹에서 mouseleave 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			 */
			function onGrpMenuWrapMouseleave(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grpMenuWrap = e.control;
				// cbxToggle 체크되어 있을 경우 미니 메뉴 보이도록 설정
			//	if (!app.lookup("cbxToggle").checked || app.targetScreen.name != "default") {
			//		var vcGrpCont = app.getContainer();
			//		//헤더
			//		var vcGrpHeader = app.lookup("grpHeader");
			//		/* 상태에 따라 컨트롤 크기 및 위치 변경 */
			//		vcGrpCont.updateConstraint(vcGrpHeader, {
			//			left : mnInitMnMenuSize + "px"
			//		});
			//		unfloating(app.lookup("grpAside"));
			//		collapseSideMenu();
			//	}
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbLayoutSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbLayout = e.control;
				
				comMdiClose.getTabList(cmbLayout, "divide");	
			}
			
			
			/*
			 * 슬라이더에서 value-change 이벤트 발생 시 호출.
			 * 값이 변경된 후 발생하는 이벤트
			 */
			function onSldZoomValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.Slider
				 */
				var sldZoom = e.control;
				var vnScale = (Number(util.Control.getValue(app, "sldZoom")) / 100).toFixed(1);
				app.lookup("mdiCn").getTabItems().forEach(function(tabItem) {
					/** @type cpr.controls.EmbeddedApp */
					var EmbeddedApp = tabItem.content;
					EmbeddedApp.getEmbeddedAppInstance().getContainer().style.css({
						"transform": "scale3d(" + vnScale.toString() + ", " + vnScale.toString() + ", 1)",
						"transform-origin": "0 0"
					});
					EmbeddedApp.redraw();
				});
				util.Control.setValue(app, "optZoom", Number(util.Control.getValue(app, "sldZoom")).toFixed(0).toString());
			}
			
			
			/*
			 * 버튼(btnScale)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnScaleClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnScale = e.control;
				util.Control.setValue(app, "sldZoom", "100");
			}
			
			/**
			 * 접속시간의 타이머를 설정하는 함수입니다. mm:ss 포맷 형식의 string을 입력받으며, (00:00 ~ 59:59) 사이의 값을 제공받아야합니다.
			 * @param {String} psTime 타이머가 시작될 시간
			 */
			function startTimer(psTime) {
				var vcOptTime = app.lookup("optTime");
				
				vcOptTime.value = psTime;
				var vsTime = moment(psTime, "mm:ss");
				
				clearInterval(timerInterval);
				
				timerInterval = setInterval(function() {
					var vsLimitTime = vsTime.subtract(1, "seconds");
					vcOptTime.value = vsLimitTime.format("mm:ss");
					vcOptTime.redraw();
				}, 1000);
			}
			
			
			
			/*
			 * 아웃풋(optTime)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onOptTimeClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Output
				 */
				var optTime = e.control;
				startTimer(vsDefaultTime);
			}
			
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbUnfdSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbUnfd = e.control;
				
				util.MDI.open(app, cmbUnfd.value);
				
				cmbUnfd.value = "";
				
				unfloating(cmbUnfd);
			
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb1SelectionChange2(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
			
				cmb1.value === "pc" ? changeToDefault() : changeToMobile();
				transitionEnd();
				util.Group.changeScreen(app, cmb1.value);
			}
			
			/**
			 * 특정 컨트롤을 플로팅합니다. modaless로 팝업을 열기 때문에, overlay한 부분을 클릭해도 플로팅이 사라지지 않습니다.
			 * @param {cpr.controls.UIControl} pcControl
			 * @param {any} poConstraint
			 */
			function floatingModaless(pcControl,poConstraint){
				var vcFloatingTarget = pcControl;
				
				var vcGrpCont = app.getContainer();
				util.Control.setVisible(app,true,vcFloatingTarget.id);
				vcGrpCont.floatControl(vcFloatingTarget,poConstraint);
				vcFloatingTarget.focus();
			}
			
			/*
			 * 서치 인풋에서 search 이벤트 발생 시 호출.
			 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
			 */
			function onSchSrchSearch( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.SearchInput
				 */
				var schSrch = e.control;
				//TODO 통합검색 로직을 작성하십시오.
				var vsFindWrd = schSrch.value;
				var vcTreeMenu = app.lookup("treMenu");
				var vcTargetCont = app.lookup("grpSrchResult");
				if (ValueUtil.fixNull(vsFindWrd) == "") {
					vcTargetCont.removeAllChildren();
				} else {
					var vaFindItems = vcTreeMenu.dataSet.findAllRow("(MENU_NM *=  '" + vsFindWrd + "' || " + 
						"DESC *= '" + vsFindWrd + "') && CALL_PAGE != ''");
						
					if (vaFindItems.length > 0) {
						vcTargetCont.removeAllChildren();
						vaFindItems.forEach(function(each) {
							
							var newBtn = new cpr.controls.Output();
							newBtn.value = each.getValue("MENU_DESC");
							newBtn.userAttr("MENU_ID", each.getValue("MENU_ID"));
							newBtn.style.setClasses("badge badge-success");
							newBtn.addEventListener("click", function(ev) {
								var btnControl = ev.control;
								var vsMenuId = newBtn.userAttr("MENU_ID");
								if (!ValueUtil.isNull(vsMenuId)) {
									doOpenMenuToMdi(vsMenuId);
									unfloating(app.lookup("grpSch"));
									vcTargetCont.removeAllChildren();
									schSrch.value = "";
								}
							});
							vcTargetCont.addChild(newBtn, {
								"width": "100px",
								"height": "30px",
								"autoSize": "width"
							});
						});
						vcTreeMenu.redraw();
					} else {
						vcTargetCont.removeAllChildren();
						return false;
					}
				}
			}
			
			/*
			 * 버튼(btnMenuSchClose)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMenuSchCloseClick(e){
				var btnMenuSchClose = e.control;
				unfloating(app.lookup("grpSch"), function() {
				util.Control.setValue(app, "schSrch", "");
				app.lookup("grpSrchResult").removeAllChildren();
				});
			}
			
			/*
			 * 버튼(btnThm)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnThmClick(e){
				var btnThm = e.control;
				
				var voActlRct = btnThm.getActualRect();
				
				var vcLbxThm = app.lookup("lbxThm");
				vcLbxThm.visible = true;
				app.floatControl(vcLbxThm, {
					top: voActlRct.top + voActlRct.height + "px",
					left: voActlRct.left + "px",
					width: "130px"
				});
				
				vcLbxThm.focus();
			}
			
			/*
			 * 리스트 박스에서 selection-change 이벤트 발생 시 호출.
			 * ListBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onLbxThmSelectionChange(e){
				/** 
				 * @type cpr.controls.ListBox
				 */
				var lbxThm = e.control;
				
				var theme = lbxThm.value;
				
				var vcGrpCont = app.getContainer();
				var globalAside = document.querySelector(".cl-global-aside");
			
				// 클래스 초기화
				vcGrpCont.style.setClasses("");
				globalAside.className = "cl-global-aside";
				
				// 새 테마 클래스 추가
				vcGrpCont.style.addClass("is-" + theme);
				globalAside.classList.add("is-" + theme);
				
				// 버튼에 테마 표시
				var vcBtnThm = app.lookup("btnThm");
				vcBtnThm.style.setClasses(["btn-round", "btn-theme"]);
				
			//	if (theme != "blue"){
			//		vcBtnThm.style.addClass("bg-" + theme);
			//	}
			
				vcBtnThm.style.addClass("bg-" + theme);
				
				lbxThm.blur();
			}
			
			/*
			 * 리스트 박스에서 blur 이벤트 발생 시 호출.
			 * 컨트롤이 포커스를 잃은 후 발생하는 이벤트.
			 */
			function onLbxThmBlur(e){
				var lbxThm = e.control;
				
				lbxThm.visible = false;
				
				var vcGrpCont = app.getContainer();
				vcGrpCont.addChild(lbxThm, {
					width: "130px",
					height: "126px"
				});
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsAllMenu");
			dataSet_1.parseData({
				"columns" : [
					{"name": "MENU_ID"},
					{"name": "MENU_NM"},
					{"name": "UP_MENU_ID"},
					{"name": "TOP_MENU_ID"},
					{"name": "CALL_PAGE"},
					{"name": "PGM_ID"},
					{"name": "ICON"},
					{"name": "MENU_KEY"},
					{"name": "MOBILE_YN"},
					{"name": "DESC"},
					{"name": "CLASS"},
					{
						"name": "MENU_DESC",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "\"[\" + MENU_NM + \"] \" + DESC\r\n"
					}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsLang");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "class"}
				],
				"rows": [
					{"label": "Korean", "value": "ko", "class": "ko"},
					{"label": "English", "value": "en", "class": "en"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsMsgStack");
			dataSet_3.parseData({
				"columns": [
					{"name": "status"},
					{"name": "text"},
					{"name": "time"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsLayout");
			dataSet_4.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "class"}
				],
				"rows": [
					{"label": "default", "value": "default", "class": "default"},
					{"label": "horizontal", "value": "horizontal", "class": "horizontal"},
					{"label": "vertical", "value": "vertical", "class": "vertical"},
					{"label": "division", "value": "division", "class": "division"},
					{"label": "window", "value": "window", "class": "window"}
				]
			});
			app.register(dataSet_4);
			var dataMap_1 = new cpr.data.DataMap("dmUserInfo");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "USER_ID",
						"info": "사용자ID"
					},
					{
						"name": "USER_NM",
						"info": "사용자명"
					},
					{
						"name": "USER_DIV_CD",
						"info": "사용자구분코드"
					},
					{
						"name": "STAT_RCD",
						"info": "신분상태코드"
					},
					{
						"name": "DEPT_NM",
						"info": "부서명"
					},
					{
						"name": "DEPT_CD",
						"info": "부서코드"
					},
					{"name": "L_LOGIN_IP"},
					{"name": "L_LOGIN_DT"},
					{
						"name": "SYS_MGR_YN",
						"info": ""
					},
					{
						"name": "LANG",
						"defaultValue": "ko"
					},
					{
						"name": "LAYOUT",
						"defaultValue": "default"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmMenuInfo");
			dataMap_2.parseData({
				"alterColumnLayout": "client",
				"columns": [
					{
						"name": "MENU_ID",
						"info": "메뉴ID"
					},
					{
						"name": "MENU_NM",
						"info": "메뉴명"
					},
					{
						"name": "PGM_ID",
						"info": "프로그램ID"
					},
					{
						"name": "TOP_MENU_ID",
						"info": "탑메뉴ID"
					},
					{
						"name": "UP_MENU_ID",
						"info": "상위메뉴ID"
					},
					{
						"name": "CALL_PAGE",
						"info": "호출페이지URL"
					},
					{
						"name": "MENU_KEY",
						"info": "메뉴KEY"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmGlobalConfig");
			dataMap_3.parseData({
				"columns" : [
					{"name": "mdiWindowMaxCount"},
					{"name": "defaultLocale"},
					{"name": "useSearchBoxClear"},
					{"name": "userViewPartPopOut"},
					{
						"name": "default_theme",
						"dataType": "string",
						"defaultValue": "theme/common/common-theme.css",
						"info": ""
					},
					{
						"name": "divideMdiUseYn",
						"defaultValue": ""
					},
					{
						"name": "useLayerdPop",
						"defaultValue": "N"
					}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmMenuParam");
			dataMap_4.parseData({
				"columns" : [{"name": "strMenuParamVal"}]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmTimer");
			dataMap_5.parseData({
				"columns" : [{
					"name": "strTime",
					"dataType": "string",
					"defaultValue": "59:59"
				}]
			});
			app.register(dataMap_5);
			var submission_1 = new cpr.protocols.Submission("subOnLoad");
			submission_1.action = "/Main/onLoad.do";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_1, false);
			submission_1.addResponseData(dataMap_3, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subLogout");
			submission_2.action = "/com/sccs/cm/us/actionLogout.do";
			submission_2.mediaType = "application/json";
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subOnLoad_json");
			submission_3.method = "get";
			submission_3.action = "app/exam/data/main/main.json";
			submission_3.addResponseData(dataSet_1, false);
			submission_3.addResponseData(dataMap_1, false);
			submission_3.addResponseData(dataMap_3, false);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.animationDuration = 0.35;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var notifier_1 = new cpr.controls.Notifier("notiToastr");
			notifier_1.maxNotifyCount = 1;
			notifier_1.delay = 2000;
			notifier_1.animation = "fadein";
			notifier_1.close = true;
			notifier_1.successDelay = 2000;
			notifier_1.successClose = true;
			notifier_1.infoDelay = 2000;
			notifier_1.infoClose = true;
			notifier_1.warningDelay = 2000;
			notifier_1.warningClose = true;
			notifier_1.dangerDelay = 4000;
			notifier_1.dangerClose = true;
			container.addChild(notifier_1, {
				"right": "10px",
				"bottom": "20px",
				"width": "358px",
				"height": "60px"
			});
			
			var group_1 = new cpr.controls.Container("grpAside");
			group_1.userAttr({"prevent-hide": ""});
			group_1.style.setClasses(["aside"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["50px", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grpLogo");
				group_2.style.setClasses(["logo-box"]);
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_1.scrollable = false;
				verticalLayout_1.distribution = "center";
				verticalLayout_1.leftMargin = 0;
				verticalLayout_1.rightMargin = 0;
				verticalLayout_1.topMargin = 5;
				verticalLayout_1.bottomMargin = 5;
				group_2.setLayout(verticalLayout_1);
				(function(container){
					var group_3 = new cpr.controls.Container("grpLogoWrap");
					group_3.style.setClasses(["cursor-pointer"]);
					// Layout
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					flowLayout_1.lineWrap = false;
					group_3.setLayout(flowLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output("lblLogo");
						output_1.value = "새만금종합통제시스템";
						output_1.style.setClasses(["logo-text"]);
						container.addChild(output_1, {
							"autoSize": "width",
							"width": "90px",
							"height": "40px"
						});
					})(group_3);
					if(typeof onGrpLogoWrapClick == "function") {
						group_3.addEventListener("click", onGrpLogoWrapClick);
					}
					container.addChild(group_3, {
						"autoSize": "both",
						"width": "130px",
						"height": "40px"
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_4 = new cpr.controls.Container("grpMenuWrap");
				// Layout
				var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_2.spacing = 0;
				group_4.setLayout(verticalLayout_2);
				(function(container){
					var group_5 = new cpr.controls.Container("grpUserInfo");
					group_5.style.setClasses(["user-box"]);
					// Layout
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.scrollable = false;
					formLayout_2.topMargin = "20px";
					formLayout_2.rightMargin = "0px";
					formLayout_2.bottomMargin = "15px";
					formLayout_2.leftMargin = "0px";
					formLayout_2.horizontalSpacing = "0px";
					formLayout_2.verticalSpacing = "0px";
					formLayout_2.setColumns(["1fr"]);
					formLayout_2.setRows(["75px", "26px", "17px", "26px"]);
					formLayout_2.setRowAutoSizing(3, true);
					group_5.setLayout(formLayout_2);
					(function(container){
						var image_1 = new cpr.controls.Image("imgPf");
						image_1.src = "theme/common/images/com/main/icon-user-circle-solid-72.png";
						image_1.style.setClasses(["user-thumbnail", "rounded-circle"]);
						(function(image_1){
						})(image_1);
						container.addChild(image_1, {
							"colIndex": 0,
							"rowIndex": 0,
							"horizontalAlign": "center",
							"verticalAlign": "top",
							"width": 72,
							"height": 72
						});
						var output_2 = new cpr.controls.Output("lblUserNm");
						output_2.value = "";
						output_2.style.setClasses(["text-center", "text-gray", "fw-bold"]);
						container.addChild(output_2, {
							"colIndex": 0,
							"rowIndex": 1,
							"topSpacing": 5
						});
						var output_3 = new cpr.controls.Output("lblUserAuth");
						output_3.value = "";
						output_3.style.setClasses(["text-center", "text-gray"]);
						container.addChild(output_3, {
							"colIndex": 0,
							"rowIndex": 2
						});
						var group_6 = new cpr.controls.Container("btnGrps");
						// Layout
						var formLayout_3 = new cpr.controls.layouts.FormLayout();
						formLayout_3.topMargin = "5px";
						formLayout_3.rightMargin = "1fr";
						formLayout_3.bottomMargin = "0px";
						formLayout_3.leftMargin = "1fr";
						formLayout_3.verticalSpacing = "0px";
						formLayout_3.setColumns(["16px", "16px", "16px", "50px"]);
						formLayout_3.setRows(["1fr"]);
						group_6.setLayout(formLayout_3);
						(function(container){
							var button_1 = new cpr.controls.Button("btnPfSetting");
							button_1.value = "";
							button_1.style.setClasses(["btn-nav-user-setting"]);
							if(typeof onBtnPfSettingClick == "function") {
								button_1.addEventListener("click", onBtnPfSettingClick);
							}
							container.addChild(button_1, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var button_2 = new cpr.controls.Button("btnLogout");
							button_2.value = "";
							button_2.style.setClasses(["btn-nav-logout"]);
							if(typeof onBtnLogoutClick == "function") {
								button_2.addEventListener("click", onBtnLogoutClick);
							}
							container.addChild(button_2, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var output_4 = new cpr.controls.Output("optTime");
							output_4.style.setClasses(["item-badge"]);
							output_4.style.css({
								"cursor" : "pointer"
							});
							output_4.bind("value").toDataMap(app.lookup("dmTimer"), "strTime");
							if(typeof onOptTimeClick == "function") {
								output_4.addEventListener("click", onOptTimeClick);
							}
							container.addChild(output_4, {
								"colIndex": 3,
								"rowIndex": 0
							});
							var button_3 = new cpr.controls.Button("btnThm");
							button_3.visible = false;
							button_3.value = "";
							button_3.style.setClasses(["btn-theme", "btn-round", "bg-primary"]);
							if(typeof onBtnThmClick == "function") {
								button_3.addEventListener("click", onBtnThmClick);
							}
							container.addChild(button_3, {
								"colIndex": 0,
								"rowIndex": 0,
								"horizontalAlign": "fill",
								"verticalAlign": "center",
								"height": 16
							});
						})(group_6);
						container.addChild(group_6, {
							"colIndex": 0,
							"rowIndex": 3,
							"verticalAlign": "bottom",
							"height": 25
						});
					})(group_5);
					container.addChild(group_5, {
						"autoSize": "height",
						"width": "230px",
						"height": "179px"
					});
					var tree_1 = new cpr.controls.Tree("treMenu");
					tree_1.indent = 10;
					tree_1.ellipsis = true;
					tree_1.autoOpen = 0;
					tree_1.style.setClasses(["sidebar"]);
					tree_1.style.item.bindClass().toExpression([
						"CALL_PAGE != null && CALL_PAGE != \"\"",
						" ?  \"aria-level-3\" : \"aria-level-\" + (depth + 1) + \" \" + CLASS"
					].join("\n"));
					(function(tree_1){
						tree_1.setItemSet(app.lookup("dsAllMenu"), {
							"label": "MENU_NM",
							"value": "MENU_ID",
							"icon": "ICON",
							"tooltip": "MENU_NM",
							"parentValue": "UP_MENU_ID"
						});
					})(tree_1);
					if(typeof onTreMenuItemClick == "function") {
						tree_1.addEventListener("item-click", onTreMenuItemClick);
					}
					container.addChild(tree_1, {
						"autoSize": "height",
						"width": "230px",
						"height": "200px"
					});
				})(group_4);
				if(typeof onGrpMenuWrapMouseleave == "function") {
					group_4.addEventListener("mouseleave", onGrpMenuWrapMouseleave);
				}
				container.addChild(group_4, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "10px",
				"bottom": "10px",
				"left": "10px",
				"width": "230px"
			});
			
			var group_7 = new cpr.controls.Container("grpMiniMnBox");
			group_7.style.setClasses(["mini-bar"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_7.setLayout(xYLayout_2);
			(function(container){
				var menu_1 = new cpr.controls.Menu("mnuMnMenu");
				menu_1.visible = false;
				menu_1.expandTrigger = "click";
				menu_1.style.setClasses(["mini-sidebar"]);
				(function(menu_1){
					menu_1.setItemSet(app.lookup("dsAllMenu"), {
						"label": "MENU_NM",
						"value": "MENU_ID",
						"icon": "ICON",
						"tooltip": "MENU_NM",
						"parentValue": "UP_MENU_ID"
					});
				})(menu_1);
				if(typeof onMnuMnMenuItemClick == "function") {
					menu_1.addEventListener("item-click", onMnuMnMenuItemClick);
				}
				container.addChild(menu_1, {
					"top": "50px",
					"bottom": "0px",
					"left": "0px",
					"width": "60px"
				});
				var image_2 = new cpr.controls.Image("imgLogo2");
				image_2.src = "theme/common/images/com/main/logo.png";
				image_2.alt = "로고";
				image_2.style.css({
					"padding-top" : "6px",
					"padding-left" : "6px",
					"padding-bottom" : "6px",
					"padding-right" : "6px"
				});
				(function(image_2){
				})(image_2);
				container.addChild(image_2, {
					"top": "5px",
					"width": "58px",
					"height": "30px",
					"left": "calc(50% - 29px)"
				});
			})(group_7);
			if(typeof onGrpMiniMnBoxMouseenter == "function") {
				group_7.addEventListener("mouseenter", onGrpMiniMnBoxMouseenter);
			}
			container.addChild(group_7, {
				"top": "10px",
				"bottom": "10px",
				"left": "10px",
				"width": "60px"
			});
			
			var group_8 = new cpr.controls.Container("grpHeader");
			group_8.style.setClasses(["header"]);
			// Layout
			var formLayout_4 = new cpr.controls.layouts.FormLayout();
			formLayout_4.scrollable = false;
			formLayout_4.topMargin = "1fr";
			formLayout_4.rightMargin = "20px";
			formLayout_4.bottomMargin = "1fr";
			formLayout_4.leftMargin = "20px";
			formLayout_4.horizontalSpacing = "0px";
			formLayout_4.verticalSpacing = "0px";
			formLayout_4.setColumns(["35px", "35px", "1fr", "35px", "35px", "35px", "35px", "35px", "35px"]);
			formLayout_4.setColumnVisible(3, false);
			formLayout_4.setColumnVisible(4, false);
			formLayout_4.setColumnVisible(5, false);
			formLayout_4.setColumnVisible(6, false);
			formLayout_4.setRows(["35px"]);
			group_8.setLayout(formLayout_4);
			(function(container){
				var group_9 = new cpr.controls.Container();
				// Layout
				var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
				flowLayout_2.scrollable = false;
				flowLayout_2.verticalAlign = "middle";
				flowLayout_2.lineWrap = false;
				group_9.setLayout(flowLayout_2);
				(function(container){
					var checkBox_1 = new cpr.controls.CheckBox("cbxToggle");
					checkBox_1.value = "true";
					checkBox_1.text = "";
					checkBox_1.style.setClasses(["menu-toggle"]);
					if(typeof onCbxToggleValueChange == "function") {
						checkBox_1.addEventListener("value-change", onCbxToggleValueChange);
					}
					container.addChild(checkBox_1, {
						"autoSize": "none",
						"width": "35px",
						"height": "35px"
					});
					var group_10 = new cpr.controls.Container();
					group_10.style.setClasses(["btn-wrapper"]);
					group_10.bind("visible").toExpression("#cbxToggle.visible ? false : true");
					// Layout
					var xYLayout_3 = new cpr.controls.layouts.XYLayout();
					xYLayout_3.scrollable = false;
					group_10.setLayout(xYLayout_3);
					(function(container){
						var button_4 = new cpr.controls.Button("btnMToggle");
						button_4.fieldLabel = "검색";
						button_4.value = "";
						button_4.style.setClasses(["btn-nav-toggle"]);
						if(typeof onBtnMToggleClick == "function") {
							button_4.addEventListener("click", onBtnMToggleClick);
						}
						container.addChild(button_4, {
							"top": "0px",
							"right": "0px",
							"bottom": "0px",
							"left": "0px"
						});
					})(group_10);
					container.addChild(group_10, {
						"autoSize": "none",
						"width": "35px",
						"height": "35px"
					});
				})(group_9);
				container.addChild(group_9, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_11 = new cpr.controls.Container("grpBtnSearch");
				group_11.style.setClasses(["btn-wrapper"]);
				// Layout
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				xYLayout_4.scrollable = false;
				group_11.setLayout(xYLayout_4);
				(function(container){
					var button_5 = new cpr.controls.Button("btnSearch");
					button_5.fieldLabel = "검색";
					button_5.tooltip = "메뉴검색";
					button_5.value = "";
					button_5.style.setClasses(["btn-nav-search"]);
					if(typeof onBtnSearchClick == "function") {
						button_5.addEventListener("click", onBtnSearchClick);
					}
					container.addChild(button_5, {
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					});
				})(group_11);
				container.addChild(group_11, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var group_12 = new cpr.controls.Container();
				group_12.style.setClasses(["btn-wrapper"]);
				// Layout
				var xYLayout_5 = new cpr.controls.layouts.XYLayout();
				xYLayout_5.scrollable = false;
				group_12.setLayout(xYLayout_5);
				(function(container){
					var comboBox_1 = new cpr.controls.ComboBox("cmbLang");
					comboBox_1.hideButton = true;
					comboBox_1.showIcon = true;
					comboBox_1.preventInput = true;
					comboBox_1.style.list.setClasses(["change-language"]);
					comboBox_1.style.bindClass().toExpression("value != null && value != \"\" ? \"change-language \" + value : \"change-language\"");
					comboBox_1.bind("value").toDataMap(app.lookup("dmUserInfo"), "LANG");
					comboBox_1.style.item.bindClass().toDataColumn("class");
					(function(comboBox_1){
						comboBox_1.setItemSet(app.lookup("dsLang"), {
							"label": "label",
							"value": "value"
						});
					})(comboBox_1);
					if(typeof onCmbLangSelectionChange == "function") {
						comboBox_1.addEventListener("selection-change", onCmbLangSelectionChange);
					}
					container.addChild(comboBox_1, {
						"top": "5px",
						"bottom": "5px",
						"width": "26px",
						"left": "calc(50% - 13px)"
					});
				})(group_12);
				container.addChild(group_12, {
					"colIndex": 6,
					"rowIndex": 0
				});
				var group_13 = new cpr.controls.Container();
				group_13.style.setClasses(["btn-wrapper"]);
				// Layout
				var xYLayout_6 = new cpr.controls.layouts.XYLayout();
				xYLayout_6.scrollable = false;
				group_13.setLayout(xYLayout_6);
				(function(container){
					var button_6 = new cpr.controls.Button("btnAlrt");
					button_6.fieldLabel = "알림(메세지)";
					button_6.value = "";
					button_6.userAttr({"prevent-click": "true"});
					button_6.style.bindClass().toExpression("#dsMsgStack.getRowCount() > 0 ? \"btn-nav-alert on\" : \"btn-nav-alert\"");
					if(typeof onBtnAlrtClick == "function") {
						button_6.addEventListener("click", onBtnAlrtClick);
					}
					container.addChild(button_6, {
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					});
				})(group_13);
				container.addChild(group_13, {
					"colIndex": 7,
					"rowIndex": 0
				});
				var group_14 = new cpr.controls.Container();
				group_14.style.setClasses(["btn-wrapper"]);
				// Layout
				var xYLayout_7 = new cpr.controls.layouts.XYLayout();
				xYLayout_7.scrollable = false;
				group_14.setLayout(xYLayout_7);
				(function(container){
					var button_7 = new cpr.controls.Button("btnSetting");
					button_7.fieldLabel = "설정";
					button_7.value = "";
					button_7.userAttr({"prevent-click": "true"});
					button_7.style.setClasses(["btn-nav-setting"]);
					if(typeof onBtnSettingClick == "function") {
						button_7.addEventListener("click", onBtnSettingClick);
					}
					container.addChild(button_7, {
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					});
				})(group_14);
				container.addChild(group_14, {
					"colIndex": 8,
					"rowIndex": 0
				});
				var button_8 = new cpr.controls.Button("btnCstmzMenu");
				button_8.fieldLabel = "사용자 메뉴(즐겨찾기)";
				button_8.visible = false;
				button_8.value = "";
				button_8.userAttr({"prevent-click": "true"});
				button_8.style.setClasses(["btn-nav-usermenu"]);
				if(typeof onBtnCstmzMenuClick == "function") {
					button_8.addEventListener("click", onBtnCstmzMenuClick);
				}
				container.addChild(button_8, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var group_15 = new cpr.controls.Container("grp1");
				group_15.style.setClasses(["btn-wrapper"]);
				// Layout
				var xYLayout_8 = new cpr.controls.layouts.XYLayout();
				xYLayout_8.scrollable = false;
				group_15.setLayout(xYLayout_8);
				(function(container){
					var comboBox_2 = new cpr.controls.ComboBox("cmbTheme");
					comboBox_2.hideButton = true;
					comboBox_2.showIcon = true;
					comboBox_2.preventInput = true;
					comboBox_2.style.list.setClasses(["change-language"]);
					comboBox_2.style.bindClass().toExpression("value != null && value != \"\" ? \"selected change-theme \" + #cmbTheme.getItemByValue(value).label : \"selected change-theme\"");
					comboBox_2.style.item.bindClass().toExpression("label");
					(function(comboBox_2){
						comboBox_2.addItem(new cpr.controls.Item("blue", "theme/v1/common-theme.css"));
						comboBox_2.addItem(new cpr.controls.Item("dark", "theme/common/common-theme.css"));
						comboBox_2.addItem(new cpr.controls.Item("zephyr", "theme/zephyr/common-theme.css"));
						comboBox_2.addItem(new cpr.controls.Item("hyundai", "theme/hyundai/common-theme.css"));
					})(comboBox_2);
					if(typeof onCmb1SelectionChange == "function") {
						comboBox_2.addEventListener("selection-change", onCmb1SelectionChange);
					}
					container.addChild(comboBox_2, {
						"width": "20px",
						"height": "20px",
						"left": "calc(50% - 10px)",
						"top": "calc(50% - 10px)"
					});
				})(group_15);
				container.addChild(group_15, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var group_16 = new cpr.controls.Container("grp3");
				group_16.visible = false;
				group_16.style.setClasses(["btn-wrapper"]);
				// Layout
				var xYLayout_9 = new cpr.controls.layouts.XYLayout();
				group_16.setLayout(xYLayout_9);
				(function(container){
					var comboBox_3 = new cpr.controls.ComboBox("cmbScreen");
					comboBox_3.hideButton = true;
					comboBox_3.showIcon = true;
					comboBox_3.preventInput = true;
					comboBox_3.style.css({
						"border-right-style" : "none",
						"background-color" : "transparent",
						"border-left-style" : "none",
						"border-bottom-style" : "none",
						"background-image" : "none",
						"border-top-style" : "none"
					});
					comboBox_3.style.list.setClasses(["change-language"]);
					(function(comboBox_3){
						comboBox_3.addItem((function(){
							var treeItem_1 = new cpr.controls.Item("PC", "pc");
							treeItem_1.icon = "theme/common/images/icon/device/desktopIcon.png";
							return treeItem_1;
						})());
						comboBox_3.addItem((function(){
							var treeItem_2 = new cpr.controls.Item("MOB", "mobile");
							treeItem_2.icon = "theme/common/images/icon/device/mobileIcon.png";
							return treeItem_2;
						})());
					})(comboBox_3);
					if(typeof onCmb1SelectionChange2 == "function") {
						comboBox_3.addEventListener("selection-change", onCmb1SelectionChange2);
					}
					container.addChild(comboBox_3, {
						"width": "25px",
						"height": "25px",
						"left": "calc(50% - 12px)",
						"top": "calc(50% - 12px)"
					});
				})(group_16);
				container.addChild(group_16, {
					"colIndex": 3,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_8);
			container.addChild(group_8, {
				"top": "10px",
				"right": "10px",
				"left": "250px",
				"height": "50px"
			});
			
			var mDIFolder_1 = new cpr.controls.MDIFolder("mdiCn");
			mDIFolder_1.childCombinatorClass = "content";
			mDIFolder_1.headerArrowPosition = "right";
			mDIFolder_1.itemSizing = "fixed";
			mDIFolder_1.itemDraggingMode = "internal";
			mDIFolder_1.useItemTextEllipsis = true;
			mDIFolder_1.preferredItemWidth = 170;
			mDIFolder_1.userAttr({
				"fixed-first-item": "Y",
				"fixed-id": "grpCnHdH"
			});
			mDIFolder_1.style.setClasses(["content"]);
			var group_17 = new cpr.controls.Container("grpCnHdR");
			group_17.style.setClasses(["btn-nav-group"]);
			// Layout
			var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
			flowLayout_3.scrollable = false;
			flowLayout_3.horizontalAlign = "right";
			flowLayout_3.verticalAlign = "middle";
			flowLayout_3.leftMargin = 5;
			flowLayout_3.rightMargin = 0;
			flowLayout_3.topMargin = 5;
			flowLayout_3.bottomMargin = 0;
			group_17.setLayout(flowLayout_3);
			(function(container){
				var button_9 = new cpr.controls.Button("btnDropdown");
				button_9.fieldLabel = "컨텐츠 버튼 그룹 보기";
				button_9.visible = false;
				button_9.value = "";
				button_9.style.setClasses(["btn-nav-dropdown", "rounded-circle"]);
				if(typeof onBtnDropdownClick == "function") {
					button_9.addEventListener("click", onBtnDropdownClick);
				}
				container.addChild(button_9, {
					"width": "30px",
					"height": "30px"
				});
				var slider_1 = new cpr.controls.Slider("sldZoom");
				slider_1.value = "100";
				slider_1.min = 50.0;
				slider_1.max = 200.0;
				slider_1.step = 5.0;
				if(typeof onSldZoomValueChange == "function") {
					slider_1.addEventListener("value-change", onSldZoomValueChange);
				}
				container.addChild(slider_1, {
					"autoSize": "none",
					"width": "80px",
					"height": "30px"
				});
				var output_5 = new cpr.controls.Output("optZoom");
				output_5.value = "100";
				output_5.style.css({
					"text-align" : "center"
				});
				container.addChild(output_5, {
					"autoSize": "none",
					"width": "30px",
					"height": "30px"
				});
				var button_10 = new cpr.controls.Button("btnScale");
				button_10.fieldLabel = "화면 배율 원복";
				button_10.tooltip = "화면 배율 원복";
				button_10.value = "";
				button_10.style.setClasses(["rounded-circle"]);
				button_10.style.css({
					"background-image" : "url('theme/common/images/controls/dialog/icon-restore.png')"
				});
				if(typeof onBtnScaleClick == "function") {
					button_10.addEventListener("click", onBtnScaleClick);
				}
				container.addChild(button_10, {
					"autoSize": "none",
					"width": "30px",
					"height": "30px"
				});
				var button_11 = new cpr.controls.Button("btnCareReq");
				button_11.fieldLabel = "변경요청";
				button_11.tooltip = "변경요청";
				button_11.visible = false;
				button_11.style.setClasses(["btn-care-req", "rounded-circle"]);
				container.addChild(button_11, {
					"width": "30px",
					"height": "30px"
				});
				var comboBox_4 = new cpr.controls.ComboBox("cmbLayout");
				comboBox_4.fieldLabel = "컨텐츠 레이아웃 변경";
				comboBox_4.tooltip = "레이아웃 변경";
				comboBox_4.visible = false;
				comboBox_4.hideButton = true;
				comboBox_4.showIcon = true;
				comboBox_4.maxVisibleItems = 10;
				comboBox_4.preventInput = true;
				comboBox_4.style.list.setClasses(["change-layout"]);
				comboBox_4.style.bindClass().toExpression("value != null && value != \"\" ? \"change-layout rounded-circle \" + value : \"change-layout rounded-circle\"");
				comboBox_4.bind("value").toDataMap(app.lookup("dmUserInfo"), "LAYOUT");
				comboBox_4.style.item.bindClass().toDataColumn("class");
				(function(comboBox_4){
					comboBox_4.setItemSet(app.lookup("dsLayout"), {
						"label": "label",
						"value": "value"
					});
				})(comboBox_4);
				if(typeof onCmbLayoutSelectionChange == "function") {
					comboBox_4.addEventListener("selection-change", onCmbLayoutSelectionChange);
				}
				container.addChild(comboBox_4, {
					"autoSize": "none",
					"width": "30px",
					"height": "30px"
				});
				var button_12 = new cpr.controls.Button("btnZoom");
				button_12.fieldLabel = "컨텐츠 확대/축소";
				button_12.tooltip = "확대/축소";
				button_12.value = "";
				button_12.style.setClasses(["btn-nav-zoom", "rounded-circle"]);
				button_12.bind("visible").toExpression("#btnDropdown.visible ? false : true");
				if(typeof onBtnZoomClick == "function") {
					button_12.addEventListener("click", onBtnZoomClick);
				}
				container.addChild(button_12, {
					"width": "30px",
					"height": "30px"
				});
				var button_13 = new cpr.controls.Button("btnRefresh");
				button_13.fieldLabel = "컨텐츠 새로고침";
				button_13.tooltip = "새로고침";
				button_13.value = "";
				button_13.style.setClasses(["btn-nav-refresh", "rounded-circle"]);
				button_13.bind("visible").toExpression("#btnDropdown.visible ? false : true");
				if(typeof onBtnRefreshClick == "function") {
					button_13.addEventListener("click", onBtnRefreshClick);
				}
				container.addChild(button_13, {
					"width": "30px",
					"height": "30px"
				});
				var button_14 = new cpr.controls.Button("btnClose");
				button_14.fieldLabel = "컨텐츠 모두닫기";
				button_14.tooltip = "모두닫기";
				button_14.value = "";
				button_14.style.setClasses(["btn-nav-close", "rounded-circle"]);
				button_14.bind("visible").toExpression("#btnDropdown.visible ? false : true");
				if(typeof onBtnCloseClick == "function") {
					button_14.addEventListener("click", onBtnCloseClick);
				}
				container.addChild(button_14, {
					"width": "30px",
					"height": "30px"
				});
			})(group_17);
			mDIFolder_1.addHeaderControl(group_17, {"position": "right", "width": 370});
			var group_18 = new cpr.controls.Container("grpCnHdH");
			// Layout
			var xYLayout_10 = new cpr.controls.layouts.XYLayout();
			xYLayout_10.scrollable = false;
			group_18.setLayout(xYLayout_10);
			(function(container){
				var button_15 = new cpr.controls.Button("btnDfItem");
				button_15.value = "";
				button_15.style.setClasses(["default-tabfolder-item", "cl-selected"]);
				if(typeof onBtnDfItemClick == "function") {
					button_15.addEventListener("click", onBtnDfItemClick);
				}
				container.addChild(button_15, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			})(group_18);
			mDIFolder_1.addHeaderControl(group_18, {"position": "heading", "width": 40});
			
			var tabItem_1 = (function(tabFolder){
				var tabItem_1 = new cpr.controls.TabItem();
				tabItem_1.text = "tstHome";
				tabItem_1.visible = false;
				var embeddedApp_1 = new cpr.controls.EmbeddedApp("embapp1");
				cpr.core.App.load("app/com/main/ExmMain2", function(app) {
					if(app){
						embeddedApp_1.app = app;
					}
				});
				tabItem_1.content = embeddedApp_1;
				return tabItem_1;
			})(mDIFolder_1);
			mDIFolder_1.addTabItem(tabItem_1);
			mDIFolder_1.setSelectedTabItem(tabItem_1);
			if(typeof onMdiCnSelectionChange == "function") {
				mDIFolder_1.addEventListener("selection-change", onMdiCnSelectionChange);
			}
			if(typeof onMdiCnClose == "function") {
				mDIFolder_1.addEventListener("close", onMdiCnClose);
			}
			if(typeof onMdiCnTabheaderClick == "function") {
				mDIFolder_1.addEventListener("tabheader-click", onMdiCnTabheaderClick);
			}
			container.addChild(mDIFolder_1, {
				"top": "70px",
				"right": "10px",
				"bottom": "10px",
				"left": "250px"
			});
			
			var group_19 = new cpr.controls.Container("grpRghtbar");
			group_19.visible = false;
			group_19.style.setClasses(["rightbar"]);
			// Layout
			var xYLayout_11 = new cpr.controls.layouts.XYLayout();
			group_19.setLayout(xYLayout_11);
			(function(container){
				var group_20 = new cpr.controls.Container();
				group_20.style.setClasses(["panel-title-box", "border-bottom"]);
				// Layout
				var formLayout_5 = new cpr.controls.layouts.FormLayout();
				formLayout_5.topMargin = "1fr";
				formLayout_5.rightMargin = "10px";
				formLayout_5.bottomMargin = "1fr";
				formLayout_5.leftMargin = "20px";
				formLayout_5.setColumns(["1fr", "25px"]);
				formLayout_5.setRows(["25px"]);
				group_20.setLayout(formLayout_5);
				(function(container){
					var output_6 = new cpr.controls.Output();
					output_6.value = "SETTINGS";
					output_6.style.setClasses(["h4"]);
					container.addChild(output_6, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var button_16 = new cpr.controls.Button("btnRbClose");
					button_16.value = "";
					button_16.style.setClasses(["btn-panel-close", "rounded-circle"]);
					if(typeof onBtnRbCloseClick == "function") {
						button_16.addEventListener("click", onBtnRbCloseClick);
					}
					container.addChild(button_16, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_20);
				container.addChild(group_20, {
					"top": "0px",
					"right": "0px",
					"left": "0px",
					"height": "60px"
				});
				var group_21 = new cpr.controls.Container();
				// Layout
				var verticalLayout_3 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_3.spacing = 0;
				group_21.setLayout(verticalLayout_3);
				(function(container){
				})(group_21);
				container.addChild(group_21, {
					"top": "70px",
					"right": "0px",
					"bottom": "-11px",
					"left": "0px"
				});
			})(group_19);
			container.addChild(group_19, {
				"top": "0px",
				"right": "-280px",
				"bottom": "0px",
				"width": "280px"
			});
			
			var group_22 = new cpr.controls.Container("grpCnHdRVrt");
			group_22.visible = false;
			group_22.clipContent = false;
			group_22.style.setClasses(["btn-nav-group"]);
			// Layout
			var verticalLayout_4 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_4.scrollable = false;
			verticalLayout_4.distribution = "center";
			verticalLayout_4.leftMargin = 0;
			verticalLayout_4.rightMargin = 0;
			verticalLayout_4.topMargin = 5;
			verticalLayout_4.bottomMargin = 5;
			group_22.setLayout(verticalLayout_4);
			(function(container){
				var button_17 = new cpr.controls.Button("btnVrtZoom");
				button_17.value = "";
				button_17.style.setClasses(["btn-nav-zoom", "rounded-circle", "box-shadow"]);
				if(typeof onBtnVrtZoomClick == "function") {
					button_17.addEventListener("click", onBtnVrtZoomClick);
				}
				container.addChild(button_17, {
					"width": "30px",
					"height": "30px"
				});
				var button_18 = new cpr.controls.Button("btnVrtRefresh");
				button_18.value = "";
				button_18.style.setClasses(["btn-nav-refresh", "rounded-circle", "box-shadow"]);
				if(typeof onBtnVrtRefreshClick == "function") {
					button_18.addEventListener("click", onBtnVrtRefreshClick);
				}
				container.addChild(button_18, {
					"width": "30px",
					"height": "30px"
				});
				var button_19 = new cpr.controls.Button("btnVrtClose");
				button_19.value = "";
				button_19.style.setClasses(["btn-nav-close", "rounded-circle", "box-shadow"]);
				if(typeof onBtnVrtCloseClick == "function") {
					button_19.addEventListener("click", onBtnVrtCloseClick);
				}
				container.addChild(button_19, {
					"width": "30px",
					"height": "30px"
				});
			})(group_22);
			if(typeof onGrpCnHdRVrtClick == "function") {
				group_22.addEventListener("click", onGrpCnHdRVrtClick);
			}
			container.addChild(group_22, {
				"top": "100px",
				"right": "5px",
				"width": "40px",
				"height": "112px"
			});
			
			var group_23 = new cpr.controls.Container("grpNotiBox");
			group_23.visible = false;
			group_23.style.setClasses(["dropdown-menu"]);
			// Layout
			var formLayout_6 = new cpr.controls.layouts.FormLayout();
			formLayout_6.horizontalSpacing = "0px";
			formLayout_6.verticalSpacing = "0px";
			formLayout_6.horizontalSeparatorWidth = 1;
			formLayout_6.setColumns(["1fr"]);
			formLayout_6.setRows(["40px", "1fr"]);
			group_23.setLayout(formLayout_6);
			(function(container){
				var group_24 = new cpr.controls.Container();
				// Layout
				var formLayout_7 = new cpr.controls.layouts.FormLayout();
				formLayout_7.topMargin = "1fr";
				formLayout_7.rightMargin = "20px";
				formLayout_7.bottomMargin = "1fr";
				formLayout_7.leftMargin = "20px";
				formLayout_7.horizontalSpacing = "0px";
				formLayout_7.verticalSpacing = "0px";
				formLayout_7.setColumns(["1fr", "70px"]);
				formLayout_7.setRows(["20px"]);
				group_24.setLayout(formLayout_7);
				(function(container){
					var output_7 = new cpr.controls.Output();
					output_7.value = "Notifications";
					output_7.style.setClasses(["fw-medium"]);
					container.addChild(output_7, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_8 = new cpr.controls.Output("optNtClrAll");
					output_8.value = "Clear All";
					output_8.style.setClasses(["text-primary", "cursor-pointer"]);
					output_8.style.css({
						"text-align" : "center"
					});
					if(typeof onOptNtClrAllClick2 == "function") {
						output_8.addEventListener("click", onOptNtClrAllClick2);
					}
					container.addChild(output_8, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_24);
				container.addChild(group_24, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_25 = new cpr.controls.Container("grpNotiItemWrap");
				// Layout
				var verticalLayout_5 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_5.spacing = 0;
				group_25.setLayout(verticalLayout_5);
				(function(container){
				})(group_25);
				container.addChild(group_25, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_23);
			container.addChild(group_23, {
				"right": "0px",
				"bottom": "0px",
				"width": "320px",
				"height": "266px"
			});
			
			var group_26 = new cpr.controls.Container("grpSch");
			group_26.visible = false;
			group_26.style.setClasses(["dropdown-box"]);
			// Layout
			var formLayout_8 = new cpr.controls.layouts.FormLayout();
			formLayout_8.scrollable = false;
			formLayout_8.topMargin = "0px";
			formLayout_8.rightMargin = "0px";
			formLayout_8.bottomMargin = "0px";
			formLayout_8.leftMargin = "0px";
			formLayout_8.horizontalSpacing = "0px";
			formLayout_8.verticalSpacing = "0px";
			formLayout_8.setColumns(["1fr"]);
			formLayout_8.setRows(["50px", "1fr"]);
			group_26.setLayout(formLayout_8);
			(function(container){
				var group_27 = new cpr.controls.Container("grp2");
				group_27.style.setClasses(["box-header"]);
				// Layout
				var formLayout_9 = new cpr.controls.layouts.FormLayout();
				formLayout_9.scrollable = false;
				formLayout_9.topMargin = "0px";
				formLayout_9.rightMargin = "0px";
				formLayout_9.bottomMargin = "0px";
				formLayout_9.leftMargin = "0px";
				formLayout_9.horizontalSpacing = "0px";
				formLayout_9.verticalSpacing = "0px";
				formLayout_9.setColumns(["1fr", "50px"]);
				formLayout_9.setRows(["1fr"]);
				group_27.setLayout(formLayout_9);
				(function(container){
					var searchInput_1 = new cpr.controls.SearchInput("schSrch");
					searchInput_1.hideClearButton = true;
					searchInput_1.searchPosition = "left";
					searchInput_1.placeholder = "메뉴, 컨트롤 속성, 기능을 검색하세요.";
					if(typeof onSchSrchSearch == "function") {
						searchInput_1.addEventListener("search", onSchSrchSearch);
					}
					if(typeof onSchSrchInput == "function") {
						searchInput_1.addEventListener("input", onSchSrchInput);
					}
					container.addChild(searchInput_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"topSpacing": 5,
						"rightSpacing": 20,
						"bottomSpacing": 5,
						"leftSpacing": 20
					});
					var button_20 = new cpr.controls.Button("btnMenuSchClose");
					button_20.value = "";
					button_20.icon = "theme/common/images/com/main/ico_close.svg";
					button_20.style.setClasses(["btn-close"]);
					if(typeof onBtnMenuSchCloseClick == "function") {
						button_20.addEventListener("click", onBtnMenuSchCloseClick);
					}
					container.addChild(button_20, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_27);
				container.addChild(group_27, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_28 = new cpr.controls.Container("grpSrchResult");
				group_28.style.setClasses(["box-body"]);
				// Layout
				var flowLayout_4 = new cpr.controls.layouts.FlowLayout();
				flowLayout_4.horizontalSpacing = 20;
				flowLayout_4.verticalSpacing = 10;
				flowLayout_4.leftMargin = 20;
				flowLayout_4.rightMargin = 20;
				flowLayout_4.topMargin = 20;
				flowLayout_4.bottomMargin = 20;
				group_28.setLayout(flowLayout_4);
				(function(container){
				})(group_28);
				container.addChild(group_28, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_26);
			container.addChild(group_26, {
				"top": "192px",
				"right": "-499px",
				"width": "500px",
				"height": "320px"
			});
			
			var listBox_1 = new cpr.controls.ListBox("lbxThm");
			listBox_1.values = ["blue"];
			listBox_1.visible = false;
			listBox_1.showIcon = true;
			listBox_1.style.setClasses(["theme-list"]);
			listBox_1.style.item.bindClass().toExpression("\"item-color-\" + value");
			(function(listBox_1){
				listBox_1.addItem(new cpr.controls.Item("블루컬러", "indigo"));
				listBox_1.addItem(new cpr.controls.Item("퍼플컬러", "purple"));
				listBox_1.addItem(new cpr.controls.Item("그린컬러", "green"));
				listBox_1.addItem(new cpr.controls.Item("오렌지컬러", "orange"));
			})(listBox_1);
			if(typeof onLbxThmSelectionChange == "function") {
				listBox_1.addEventListener("selection-change", onLbxThmSelectionChange);
			}
			if(typeof onLbxThmBlur == "function") {
				listBox_1.addEventListener("blur", onLbxThmBlur);
			}
			container.addChild(listBox_1, {
				"top": "10px",
				"right": "-500px",
				"width": "130px",
				"height": "126px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "메인";
	cpr.core.Platform.INSTANCE.register(app);
})();
