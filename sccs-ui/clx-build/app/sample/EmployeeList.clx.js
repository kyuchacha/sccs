/*
 * App URI: app/sample/EmployeeList
 * Source Location: app/sample/EmployeeList.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/sample/EmployeeList", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * ProductList.js
			 * Created at 2019. 8. 13. 오전 10:45:31.
			 *
			 * @author ryu
			 ************************************************/
			
			/**
			 * 그리드 조회 함수
			 */
			function doList() {
				var dmPage = app.lookup("dmPage");
				dmPage.setValue("pageIdx", "1");
				
				var vcSubList = app.lookup("subList");
				vcSubList.send();
			}
			
			/*
			 * "조회" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearch = e.control;
				doList();
			}
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
			
				var vcSubInit = app.lookup("subInit");
				vcSubInit.send();
			}
			
			/*
			 * "추가" 버튼(btnInsert)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInsertClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnInsert = e.control;
				
				var vcGrid = app.lookup("grdMst");
				
				var vnSelectedRowIdx = vcGrid.getSelectedRowIndex();
				
				vcGrid.insertRow(vnSelectedRowIdx, false);
			}
			
			/*
			 * "삭제" 버튼(btnDelete)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnDelete = e.control;
				
				var vcGrid = app.lookup("grdMst");
				
				var vnCheckRowIdxs = vcGrid.getCheckRowIndices();
				
				vcGrid.deleteRow(vnCheckRowIdxs);
			}
			
			/*
			 * "저장" 버튼(btnSave)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSave = e.control;
				
				var vcSubSave = app.lookup("subSave");
				
				vcSubSave.send();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubSaveSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subSave = e.control;
				
				var dmMsg = app.lookup("dm_msg");	
				var code = dmMsg.getValue("CODE");
				var message = dmMsg.getValue("MESSAGE");
				alert(message);
				if(code == "S") {
					doList();
				}
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubListSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subList = e.control;
				
				app.lookup("grdMst").redraw();
				app.lookup("pageIndex").currentPageIndex = 1;
				app.lookup("pageIndex").redraw();
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpb1Keydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				
				if (e.keyCode == cpr.events.KeyCode.ENTER){
					app.lookup("btnSearch").click();
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 save 이벤트 발생 시 호출.
			 */
			function onGridCUDButtonSave(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.GridCUDButton
				 */
				var gridCUDButton = e.control;
				
				var vcSubSave = app.lookup("subSave");
				
				vcSubSave.send();
				
			}
			
			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageIndexSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
				
				var dmPage = app.lookup("dmPage");
				
				//페이지 인덱서에서 사용자가 page index를 변경할 경우 인덱스에 맞는 새 데이터를 내려받도록 데이터 맵에 페이지 인덱스를 넣어서 서브미션을 전송합니다.
				dmPage.setValue("pageIdx", e.newSelection);
				app.lookup("subList").send();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubInitSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subInit = e.control;
				doList();
			}
			
			
			/*
			 * 사용자 정의 컨트롤에서 search 이벤트 발생 시 호출.
			 * 버튼을 클릭했을 때 발생하는 이벤트
			 */
			function onSearchButtonSearch(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.SearchButton
				 */
				var searchButton = e.control;
				
				app.openDialog("view/sample/dialog/DeptDialog", {width : 500, height : 350}, function(dialog){
					dialog.ready(function(dialogApp){
						// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
						dialogApp.initValue = searchButton.ipbLabel;
					});
				}).then(function(/** cpr.data.RowConfigInfo*/ returnValue){
					if(returnValue) {
						
						/** @type {{DEPT_CD : String, DEPT_NM : String}} */
						var returnData = returnValue;
						
						searchButton.ipbLabel = returnData.DEPT_NM;
						searchButton.ipbValue = returnData.DEPT_CD;
						
						searchButton.redraw();
						//app.lookup("tre1").redraw();
						
						var dmParam = app.lookup("dmParam");
						dmParam.setValue("deptCd", returnData.DEPT_CD);
						dmParam.setValue("deptNm", returnData.DEPT_NM);
					}
				});
				
			}
			
			
			/*
			 * 서브미션에서 submit-error 이벤트 발생 시 호출.
			 * 통신 중 문제가 생기면 발생합니다.
			 */
			function onSubSaveSubmitError(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subSave = e.control;
				
				var dmMsg = app.lookup("dm_msg");	
				var code = dmMsg.getValue("CODE");
				var message = dmMsg.getValue("MESSAGE");
				if(code == "E") {
					alert(message);
				}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns" : [
					{
						"name": "RN",
						"dataType": "string"
					},
					{"name": "NO"},
					{"name": "NAME"},
					{"name": "EMAIL"},
					{"name": "PHONE"},
					{
						"name": "HIRE_DATE",
						"dataType": "string"
					},
					{
						"name": "DEPT_CD",
						"dataType": "string"
					}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsDeptList");
			dataSet_2.parseData({
				"columns" : [
					{
						"name": "DEPT_CD",
						"dataType": "string"
					},
					{"name": "DEPT_NM"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmParam");
			dataMap_1.parseData({
				"columns" : [
					{"name": "empNm"},
					{"name": "deptCd"},
					{"name": "deptNm"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmPage");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "totCnt",
						"defaultValue": "0"
					},
					{
						"name": "rowSize",
						"defaultValue": "10"
					},
					{
						"name": "pageIdx",
						"defaultValue": "1"
					},
					{
						"name": "sortCondition",
						"defaultValue": "asc"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dm_msg");
			dataMap_3.parseData({
				"columns" : [
					{"name": "CODE"},
					{"name": "MESSAGE"}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("subList");
			submission_1.async = false;
			submission_1.action = "/com/sccs/cm/guide/selectList.do";
			submission_1.addRequestData(dataMap_1);
			submission_1.addRequestData(dataMap_2);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_2, false);
			if(typeof onSubListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubListSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subSave");
			submission_2.action = "/com/sccs/cm/guide/save.do";
			submission_2.addRequestData(dataSet_1);
			submission_2.addResponseData(dataMap_3, false);
			if(typeof onSubSaveSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSubSaveSubmitSuccess);
			}
			if(typeof onSubSaveSubmitError == "function") {
				submission_2.addEventListener("submit-error", onSubSaveSubmitError);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subInit");
			submission_3.action = "/com/sccs/cm/guide/selectDeptList.do";
			submission_3.addResponseData(dataSet_2, false);
			if(typeof onSubInitSubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onSubInitSubmitSuccess);
			}
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpSearch");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "이름";
				output_1.style.setClasses(["label"]);
				container.addChild(output_1, {
					"top": "20px",
					"bottom": "58px",
					"left": "20px",
					"width": "100px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.bind("value").toDataMap(app.lookup("dmParam"), "empNm");
				if(typeof onIpb1Keydown == "function") {
					inputBox_1.addEventListener("keydown", onIpb1Keydown);
				}
				container.addChild(inputBox_1, {
					"top": "20px",
					"right": "95px",
					"bottom": "58px",
					"left": "125px"
				});
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "조회";
				button_1.style.setClasses(["btn-search"]);
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"top": "20px",
					"right": "15px",
					"bottom": "20px",
					"width": "70px"
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "부서";
				output_2.style.setClasses(["label"]);
				container.addChild(output_2, {
					"top": "58px",
					"bottom": "20px",
					"left": "20px",
					"width": "100px"
				});
				var userDefinedControl_1 = new udc.SearchButton("searchButton");
				if(typeof onSearchButtonSearch == "function") {
					userDefinedControl_1.addEventListener("search", onSearchButtonSearch);
				}
				container.addChild(userDefinedControl_1, {
					"top": "58px",
					"left": "125px",
					"width": "315px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "20px",
				"width": "984px",
				"height": "106px",
				"left": "calc(50% - 492px)"
			});
			
			var grid_1 = new cpr.controls.Grid("grdMst");
			grid_1.readOnly = false;
			grid_1.init({
				"dataSet": app.lookup("dsList"),
				"columnMovable": false,
				"autoFit": "0, 3, 4, 5, 6",
				"resizableColumns": "none",
				"clickMode": "edit",
				"columns": [
					{"width": "25px"},
					{"width": "50px"},
					{"width": "100px"},
					{"width": "149px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "30px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "순번";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "NAME";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "이름";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "EMAIL";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "이메일";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "PHONE";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "전화번호";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "HIRE_DATE";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "고용일자";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "DEPT_CD";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "부서";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "30px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "RN";
								cell.columnType = "normal";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "NAME";
								cell.control = (function(){
									var inputBox_2 = new cpr.controls.InputBox("ipb6");
									inputBox_2.bind("value").toDataColumn("NAME");
									return inputBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "EMAIL";
								cell.control = (function(){
									var inputBox_3 = new cpr.controls.InputBox("ipb8");
									inputBox_3.bind("value").toDataColumn("EMAIL");
									return inputBox_3;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "PHONE";
								cell.control = (function(){
									var maskEditor_1 = new cpr.controls.MaskEditor("mse1");
									maskEditor_1.mask = "000-0000-0000";
									maskEditor_1.bind("value").toDataColumn("PHONE");
									return maskEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "HIRE_DATE";
								cell.control = (function(){
									var dateInput_1 = new cpr.controls.DateInput("dti1");
									dateInput_1.mask = "YYYY-MM-DD";
									dateInput_1.bind("value").toDataColumn("HIRE_DATE");
									return dateInput_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "DEPT_CD";
								cell.control = (function(){
									var comboBox_1 = new cpr.controls.ComboBox("cmb1");
									(function(comboBox_1){
										comboBox_1.setItemSet(app.lookup("dsDeptList"), {
											"label": "DEPT_NM",
											"value": "DEPT_CD"
										});
									})(comboBox_1);
									comboBox_1.bind("value").toDataColumn("DEPT_CD");
									return comboBox_1;
								})();
							}
						}
					]
				}
			});
			grid_1.style.row.bind("background-color").toExpression("(getIndex() / 2  )== 0 ? red : blue");
			container.addChild(grid_1, {
				"top": "187px",
				"right": "20px",
				"left": "20px",
				"height": "466px"
			});
			
			var group_2 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "5px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_2.setLayout(formLayout_1);
			(function(container){
				var button_2 = new cpr.controls.Button("btnInsert");
				button_2.value = "신규";
				if(typeof onBtnInsertClick == "function") {
					button_2.addEventListener("click", onBtnInsertClick);
				}
				container.addChild(button_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button("btnDelete");
				button_3.value = "삭제";
				if(typeof onBtnDeleteClick == "function") {
					button_3.addEventListener("click", onBtnDeleteClick);
				}
				container.addChild(button_3, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "저장";
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "149px",
				"right": "20px",
				"width": "240px",
				"height": "28px"
			});
			
			var pageIndexer_1 = new cpr.controls.PageIndexer("pageIndex");
			pageIndexer_1.viewPageCount = 10;
			pageIndexer_1.bind("totalRowCount").toDataMap(app.lookup("dmPage"), "totCnt");
			pageIndexer_1.bind("pageRowCount").toDataMap(app.lookup("dmPage"), "rowSize");
			pageIndexer_1.init(1, 1, 1);
			if(typeof onPageIndexSelectionChange == "function") {
				pageIndexer_1.addEventListener("selection-change", onPageIndexSelectionChange);
			}
			container.addChild(pageIndexer_1, {
				"top": "663px",
				"width": "984px",
				"height": "40px",
				"left": "calc(50% - 492px)"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "그리드 조회 화면";
	cpr.core.Platform.INSTANCE.register(app);
})();
