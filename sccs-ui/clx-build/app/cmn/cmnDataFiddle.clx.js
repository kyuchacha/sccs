/*
 * App URI: app/cmn/cmnDataFiddle
 * Source Location: app/cmn/cmnDataFiddle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/cmn/cmnDataFiddle", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * cmnDataFiddle.js
			 * Created at 2021. 12. 9 오전 10:35:05.
			 *
			 * @author hp
			 ************************************************/
			
			var util = createCommonUtil()
			var initConfig;
			var grdOriginConfig;
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var initValue = app.getHost().initValue;
				if(!initValue) return;
				
				initConfig = initValue;
				grdOriginConfig = app.lookup("grd1").getInitConfig();
				
				app.lookup("optMenuNm").value = initValue.menuNm;
				app.lookup("optAppId").value = initValue.menuId;
				app.lookup("cmbGrpList").visible = false;
				
				/** @type {cpr.core.AppInstance[]} **/
				var appList = initValue.childApp
				appList.forEach(function(each){
					var child = each;
					var row = app.lookup("dsAppList").addRow();
					row.setValue("value", child.id);
					row.setValue("name", child.app.id === initValue.menuId ? child.app.title + "(메인)" : child.app.title);		
				});
				
				var dataList = initValue.dataControls;
				dataList.forEach(function(each){
					var row = app.lookup("dsDataList").addRow();
					row.setValue("value", each.uuid);
					row.setValue("name", each.id);
					row.setValue("parent", each.getAppInstance().id);
				})
				
				app.lookup("cmbAppList").selectItem(0);
				
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbAppListSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbAppList = e.control;
				app.lookup("grd1").init(grdOriginConfig);
				app.lookup("cmbDataList").setFilter("parent =='" + cmbAppList.value + "' || value ==''");
				app.lookup("cmbDataList").selectItem(0);
				app.lookup("cmbGrpList").selectItem(0);
				app.lookup("cmbDataList").redraw();
				
				var selectedApp = initConfig.childApp.find(function(each){
					return each.id === cmbAppList.value
				})
			
				app.lookup("dsGroup").clear();
				
				var childs = util.Control.getAllUiControl(app, selectedApp.getContainer()).filter(function(each){
					return each.type === "container";
				}).forEach(function(each){
					var row = app.lookup("dsGroup").addRow();
					row.setValue("value", each.uuid);
					row.setValue("name", each.fieldLabel || each.id || "아이디 없음");
				});
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbDataListSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbDataList = e.control;
				if(!cmbDataList.value){
					app.lookup("grd1").init(grdOriginConfig);
					return;
				}
				
				var dataControl = initConfig.dataControls.find(function(each){
					return each.uuid === cmbDataList.value;
				});
				new GridLayoutBuilder().build(dataControl);
				util.Grid.init(app, "grd1");
				app.getContainer().redraw();
				
			}
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onChk1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var chk1 = e.control;
				app.lookup("cmbGrpList").visible = chk1.value !== "N";
				
				if(chk1.value === "N"){
					app.lookup("cmbDataList").setFilter("parent =='" + app.lookup("cmbAppList").value + "' || value ==''");
				}
				
				
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbGrpListSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbGrpList = e.control;
				if(!cmbGrpList.value) return;
				
				var dsList = [];
				var filterCondition = "";
				app.lookup("cmbDataList").selectItem(0);
				app.lookup("grd1").init(grdOriginConfig);
				
				/** @type {cpr.core.AppInstance} **/
				var selectedApp = initConfig.childApp.find(function(each){
					return each.id === app.lookup("cmbAppList").value
				})
				var selectedGrp = selectedApp.lookupByUUID(cmbGrpList.value);
				if(!selectedGrp) return;
			
				util.Control.getAllUiControl(app, selectedGrp, [selectedGrp]).filter(function(each){
					return each.type === "container" || each.type === "grid";
				}).forEach(function(each){
				    if(each.type === "container"){
				    	var bindInfo = each.getBindContext();
				        bindInfo ? dsList.push(bindInfo["grid"].dataSet) : ""
				    }
				    else{
				        dsList.push(each.dataSet);
				    }
				});
				
				_.uniq(dsList).forEach(function(each){
					filterCondition += "value == '" + each.uuid + "'||"
				});
			
				app.lookup("cmbDataList").setFilter(filterCondition + "value ==''");
			}
			
			var GridLayoutBuilder = function(){
				var gridCols = [];
				var gridHeaders = [];
				var detailCols = [];
				
				gridCols.push({width :"30px"});
				gridHeaders.push({
					constraint : {  rowIndex: 0, colIndex: 0, rowSpan: 1, colSpan: 1 }, 
					configurator : function(cell){
						cell.text = "F";
						cell.visible = true;
					}
				});
				detailCols.push({
					constraint : {  rowIndex: 0, colIndex: 0, rowSpan: 1, colSpan: 1 }, 
					configurator : function(cell){
						cell.columnName = "";
						cell.control = new cpr.controls.Output();
					}
					
				});
				
				var buildDataSet = function(dataControl){
					var columnNames;
					var dsDataStatus = new cpr.data.DataSet("dsDataStatus");
			
					if(dataControl instanceof cpr.data.DataSet || dataControl instanceof cpr.data.DataView){
						columnNames = dataControl.getColumnNames();
						
						columnNames.forEach(function(each){
							dsDataStatus.addColumn(new cpr.data.header.DataHeader(each, cpr.data.tabledata.DataType.STRING));
						});
						
						dataControl.forEachOfUnfilteredRows(function(each){
							dsDataStatus.addRowData(each.getRowData()).setState(each.getState());
						});
					}
					else if(dataControl instanceof cpr.data.DataMap){
						columnNames = ["KEY", "VALUE"];
						columnNames.forEach(function(each){
							dsDataStatus.addColumn(new cpr.data.header.DataHeader(each, cpr.data.tabledata.DataType.STRING));
						});
						dataControl.getColumnNames().forEach(function(each){
							var row = dsDataStatus.addRow();
							row.setValue("KEY", each);
							row.setValue("VALUE", dataControl.getValue(each)); 
							row.setState(cpr.data.tabledata.RowState.UNCHANGED);
						});
					}
					return dsDataStatus;
				}
				
				this.build = function(dataControl){
					var grd1 = app.lookup("grd1");
					var dsDataStatus = buildDataSet(dataControl);
					var pks = (dataControl.info || " ").split(",")
					
					dsDataStatus.getColumnNames().forEach(function(each, index){
						gridCols.push({width :"180px"});
						gridHeaders.push({ 
							constraint : {  rowIndex: 0, colIndex: index+1, rowSpan: 1, colSpan: 1 }, 
							configurator : function(cell){
								cell.text = _.contains(pks, each) ? each + "(PK)" : each;
								cell.visible = true;
							}
						});
							
						detailCols.push({
							constraint : {  rowIndex: 0, colIndex: index+1, rowSpan: 1, colSpan: 1 }, 
							configurator : function(cell){
								cell.columnName = each
							}
								
						});
					});
						
					grd1.init({
						dataSet: dsDataStatus,
						columns : gridCols,
						header : {
							rows : [{height:"24px"}],
							cells : gridHeaders
						},
						detail : {
							rows : [{height:"24px"}],
							cells : detailCols
						}
					});
					grd1.autoFit = "all";
					grd1.resizableColumns = "all"
				}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsAppList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "value"},
					{"name": "name"},
					{"name": "tooltip"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsDataList");
			dataSet_2.parseData({
				"columns" : [
					{"name": "value"},
					{"name": "name"},
					{"name": "parent"},
					{"name": "tooltip"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsGroup");
			dataSet_3.parseData({
				"columns" : [
					{"name": "value"},
					{"name": "name"}
				]
			});
			app.register(dataSet_3);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["80px", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpTop");
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.scrollable = false;
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grpSearch");
				group_2.userAttr({
					"tablet-column-count": "2",
					"mobile-column-count": "2"
				});
				group_2.style.setClasses(["form-box"]);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "10px";
				formLayout_2.setColumns(["120px", "2fr", "105px", "3fr", "130px", "1fr"]);
				formLayout_2.setUseColumnShade(0, true);
				formLayout_2.setUseColumnShade(2, true);
				formLayout_2.setRows(["28px", "28px"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output("opt1");
					output_1.value = "메뉴이름";
					output_1.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_2 = new cpr.controls.Output("opt2");
					output_2.value = "포함된 화면목록";
					output_2.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_2, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var comboBox_1 = new cpr.controls.ComboBox("cmbAppList");
					(function(comboBox_1){
						comboBox_1.setItemSet(app.lookup("dsAppList"), {
							"label": "name",
							"value": "value"
						});
					})(comboBox_1);
					if(typeof onCmbAppListSelectionChange == "function") {
						comboBox_1.addEventListener("selection-change", onCmbAppListSelectionChange);
					}
					container.addChild(comboBox_1, {
						"colIndex": 1,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1
					});
					var output_3 = new cpr.controls.Output("opt3");
					output_3.value = "데이터 목록";
					output_3.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_3, {
						"colIndex": 2,
						"rowIndex": 1
					});
					var comboBox_2 = new cpr.controls.ComboBox("cmbDataList");
					comboBox_2.maxVisibleItems = 10;
					comboBox_2.autoSelect = true;
					(function(comboBox_2){
						comboBox_2.addItem(new cpr.controls.Item("선택", ""));
						comboBox_2.setItemSet(app.lookup("dsDataList"), {
							"label": "name",
							"value": "value",
							"tooltip": "tootip"
						});
					})(comboBox_2);
					if(typeof onCmbDataListClick == "function") {
						comboBox_2.addEventListener("click", onCmbDataListClick);
					}
					if(typeof onCmbDataListSelectionChange == "function") {
						comboBox_2.addEventListener("selection-change", onCmbDataListSelectionChange);
					}
					container.addChild(comboBox_2, {
						"colIndex": 3,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1
					});
					var output_4 = new cpr.controls.Output("optMenuNm");
					output_4.value = "Output";
					output_4.unselectable = false;
					container.addChild(output_4, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1
					});
					var output_5 = new cpr.controls.Output("opt5");
					output_5.value = "앱주소";
					output_5.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_5, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var output_6 = new cpr.controls.Output("optAppId");
					output_6.value = "Output";
					output_6.unselectable = false;
					container.addChild(output_6, {
						"colIndex": 3,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1
					});
					var checkBox_1 = new cpr.controls.CheckBox("chk1");
					checkBox_1.value = "N";
					checkBox_1.trueValue = "Y";
					checkBox_1.falseValue = "N";
					checkBox_1.text = "그룹필터링 사용";
					if(typeof onChk1ValueChange == "function") {
						checkBox_1.addEventListener("value-change", onChk1ValueChange);
					}
					container.addChild(checkBox_1, {
						"colIndex": 4,
						"rowIndex": 1
					});
					var comboBox_3 = new cpr.controls.ComboBox("cmbGrpList");
					comboBox_3.visible = false;
					(function(comboBox_3){
						comboBox_3.addItem(new cpr.controls.Item("선택", ""));
						comboBox_3.setItemSet(app.lookup("dsGroup"), {
							"label": "name",
							"value": "value"
						});
					})(comboBox_3);
					if(typeof onCmbGrpListSelectionChange == "function") {
						comboBox_3.addEventListener("selection-change", onCmbGrpListSelectionChange);
					}
					container.addChild(comboBox_3, {
						"colIndex": 5,
						"rowIndex": 1
					});
				})(group_2);
				container.addChild(group_2, {
					"width": "400px",
					"height": "78px"
				});
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var group_3 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.scrollable = false;
			formLayout_3.horizontalSpacing = "10px";
			formLayout_3.verticalSpacing = "10px";
			formLayout_3.setColumns(["1fr"]);
			formLayout_3.setRows(["1fr"]);
			group_3.setLayout(formLayout_3);
			(function(container){
				var group_4 = new cpr.controls.Container("grp2");
				// Layout
				var formLayout_4 = new cpr.controls.layouts.FormLayout();
				formLayout_4.scrollable = false;
				formLayout_4.horizontalSpacing = "10px";
				formLayout_4.verticalSpacing = "10px";
				formLayout_4.setColumns(["1fr"]);
				formLayout_4.setRows(["1fr"]);
				group_4.setLayout(formLayout_4);
				(function(container){
					var grid_1 = new cpr.controls.Grid("grd1");
					grid_1.init({
						"autoFit": "none",
						"columns": [{"width": "25px"}],
						"header": {
							"rows": [{"height": "24px"}],
							"cells": [{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "F";
								}
							}]
						},
						"detail": {
							"rows": [{"height": "24px"}],
							"cells": [{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.control = (function(){
										var output_7 = new cpr.controls.Output("opt4");
										return output_7;
									})();
								}
							}]
						}
					});
					container.addChild(grid_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
				})(group_4);
				container.addChild(group_4, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_3);
			container.addChild(group_3, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "데이터 확인 팝업";
	cpr.core.Platform.INSTANCE.register(app);
})();
